
MSC_Standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dce8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b1c  0800de78  0800de78  0001de78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e994  0800e994  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e994  0800e994  0001e994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e99c  0800e99c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e99c  0800e99c  0001e99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9a0  0800e9a0  0001e9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800e9a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00001708  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00008004  20001794  20001794  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 14 .debug_line   0001b51d  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000b8  00000000  00000000  0003b61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   0001cd1b  00000000  00000000  0003b6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000046c7  00000000  00000000  000583ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001390  00000000  00000000  0005cab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0a6d  00000000  00000000  0005de48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000ee0  00000000  00000000  0014e8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002a69f  00000000  00000000  0014f795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005974  00000000  00000000  00179e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800de60 	.word	0x0800de60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800de60 	.word	0x0800de60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800057c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000580:	f000 ff30 	bl	80013e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000586:	490d      	ldr	r1, [pc, #52]	; (80005bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <LoopForever+0xe>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800058c:	e002      	b.n	8000594 <LoopCopyDataInit>

0800058e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000592:	3304      	adds	r3, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000598:	d3f9      	bcc.n	800058e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059a:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800059c:	4c0a      	ldr	r4, [pc, #40]	; (80005c8 <LoopForever+0x16>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a0:	e001      	b.n	80005a6 <LoopFillZerobss>

080005a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a4:	3204      	adds	r2, #4

080005a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a8:	d3fb      	bcc.n	80005a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005aa:	f00c ff8d 	bl	800d4c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ae:	f000 f80f 	bl	80005d0 <main>

080005b2 <LoopForever>:

LoopForever:
    b LoopForever
 80005b2:	e7fe      	b.n	80005b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005bc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80005c0:	0800e9a4 	.word	0x0800e9a4
  ldr r2, =_sbss
 80005c4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80005c8:	20001794 	.word	0x20001794

080005cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005cc:	e7fe      	b.n	80005cc <ADC1_2_IRQHandler>
	...

080005d0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b08b      	sub	sp, #44	; 0x2c
 80005d4:	af00      	add	r7, sp, #0
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 80005d6:	f000 ff3b 	bl	8001450 <HAL_Init>


    tx_buff[0] = 0x34;
 80005da:	4b9b      	ldr	r3, [pc, #620]	; (8000848 <main+0x278>)
 80005dc:	2234      	movs	r2, #52	; 0x34
 80005de:	701a      	strb	r2, [r3, #0]
    tx_buff[1] = 0x34;
 80005e0:	4b99      	ldr	r3, [pc, #612]	; (8000848 <main+0x278>)
 80005e2:	2234      	movs	r2, #52	; 0x34
 80005e4:	705a      	strb	r2, [r3, #1]
    tx_buff[2] = 0x0D;
 80005e6:	4b98      	ldr	r3, [pc, #608]	; (8000848 <main+0x278>)
 80005e8:	220d      	movs	r2, #13
 80005ea:	709a      	strb	r2, [r3, #2]
    buf_index = 0;
 80005ec:	4b97      	ldr	r3, [pc, #604]	; (800084c <main+0x27c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
    buf_size = RX_BUFFER_SIZE;
 80005f2:	4b97      	ldr	r3, [pc, #604]	; (8000850 <main+0x280>)
 80005f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005f8:	601a      	str	r2, [r3, #0]

    SN[0] = '\0';
 80005fa:	4b96      	ldr	r3, [pc, #600]	; (8000854 <main+0x284>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
    data = NULL;
 8000600:	4b95      	ldr	r3, [pc, #596]	; (8000858 <main+0x288>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]

  /* Configure the system clock to 80 MHz */
  SystemClock_Config();
 8000606:	f000 fab1 	bl	8000b6c <SystemClock_Config>

  /* Enable Power Clock*/
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b94      	ldr	r3, [pc, #592]	; (800085c <main+0x28c>)
 800060c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800060e:	4a93      	ldr	r2, [pc, #588]	; (800085c <main+0x28c>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	6593      	str	r3, [r2, #88]	; 0x58
 8000616:	4b91      	ldr	r3, [pc, #580]	; (800085c <main+0x28c>)
 8000618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
             Program 7 data bits + 1 parity bit in PC HyperTerminal
      - Stop Bit    = One Stop bit
      - Parity      = None parity
      - BaudRate    = 115200 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 8000622:	4b8f      	ldr	r3, [pc, #572]	; (8000860 <main+0x290>)
 8000624:	4a8f      	ldr	r2, [pc, #572]	; (8000864 <main+0x294>)
 8000626:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate   = 115200;
 8000628:	4b8d      	ldr	r3, [pc, #564]	; (8000860 <main+0x290>)
 800062a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800062e:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000630:	4b8b      	ldr	r3, [pc, #556]	; (8000860 <main+0x290>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000636:	4b8a      	ldr	r3, [pc, #552]	; (8000860 <main+0x290>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800063c:	4b88      	ldr	r3, [pc, #544]	; (8000860 <main+0x290>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000642:	4b87      	ldr	r3, [pc, #540]	; (8000860 <main+0x290>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000648:	4b85      	ldr	r3, [pc, #532]	; (8000860 <main+0x290>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]



  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 800064e:	4884      	ldr	r0, [pc, #528]	; (8000860 <main+0x290>)
 8000650:	f004 fab0 	bl	8004bb4 <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <main+0x90>
  {
    /* Initialization Error */
    Error_Handler("uart init error");
 800065a:	4883      	ldr	r0, [pc, #524]	; (8000868 <main+0x298>)
 800065c:	f000 fb00 	bl	8000c60 <Error_Handler>
  }

  // HAL_UART_Receive_IT(&UartHandle, rxBuffer, 1); //interrupt serial

  initRxBuffer();
 8000660:	f000 fa32 	bl	8000ac8 <initRxBuffer>

  /* Enable USB power on Pwrctrl CR2 register */
  HAL_PWREx_EnableVddUSB();
 8000664:	f002 ffca 	bl	80035fc <HAL_PWREx_EnableVddUSB>

  /*##-1- Link the USB Host disk I/O driver ##################################*/
  if(FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
 8000668:	4980      	ldr	r1, [pc, #512]	; (800086c <main+0x29c>)
 800066a:	4881      	ldr	r0, [pc, #516]	; (8000870 <main+0x2a0>)
 800066c:	f008 fdaa 	bl	80091c4 <FATFS_LinkDriver>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 814a 	bne.w	800090c <main+0x33c>
  {
    /*##-2- Init Host Library ################################################*/
    USBH_Init(&hUSBHost, USBH_UserProcess, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	497e      	ldr	r1, [pc, #504]	; (8000874 <main+0x2a4>)
 800067c:	487e      	ldr	r0, [pc, #504]	; (8000878 <main+0x2a8>)
 800067e:	f00a fc7f 	bl	800af80 <USBH_Init>

    /*##-3- Add Supported Class ##############################################*/
    USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
 8000682:	497e      	ldr	r1, [pc, #504]	; (800087c <main+0x2ac>)
 8000684:	487c      	ldr	r0, [pc, #496]	; (8000878 <main+0x2a8>)
 8000686:	f00a fd37 	bl	800b0f8 <USBH_RegisterClass>

    /*##-4- Start Host Process ###############################################*/
    USBH_Start(&hUSBHost);
 800068a:	487b      	ldr	r0, [pc, #492]	; (8000878 <main+0x2a8>)
 800068c:	f00a fe24 	bl	800b2d8 <USBH_Start>

    /*##-5- Run Application (Blocking mode) ##################################*/
    while (1)
    {
      /* USB Host Background task */
      USBH_Process(&hUSBHost);
 8000690:	4879      	ldr	r0, [pc, #484]	; (8000878 <main+0x2a8>)
 8000692:	f00a fe31 	bl	800b2f8 <USBH_Process>

      /* Mass Storage Application State Machine */
     switch(Appli_state)
 8000696:	4b7a      	ldr	r3, [pc, #488]	; (8000880 <main+0x2b0>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00e      	beq.n	80006bc <main+0xec>
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10e      	bne.n	80006c0 <main+0xf0>
    {
    case APPLICATION_START:
    	//const uint8_t myText[] = "demo write";
    	//const TCHAR* filename = _T("H0346");
    	//MSC_Application(myText,filename);
    	tx_buff[0] = 0x34;
 80006a2:	4b69      	ldr	r3, [pc, #420]	; (8000848 <main+0x278>)
 80006a4:	2234      	movs	r2, #52	; 0x34
 80006a6:	701a      	strb	r2, [r3, #0]
    	tx_buff[1] = 0x34;
 80006a8:	4b67      	ldr	r3, [pc, #412]	; (8000848 <main+0x278>)
 80006aa:	2234      	movs	r2, #52	; 0x34
 80006ac:	705a      	strb	r2, [r3, #1]
    	tx_buff[3] = 0x0D;
 80006ae:	4b66      	ldr	r3, [pc, #408]	; (8000848 <main+0x278>)
 80006b0:	220d      	movs	r2, #13
 80006b2:	70da      	strb	r2, [r3, #3]
    	//HAL_UART_Transmit(&UartHandle, tx_buff, 3, 0xFFFF);
       Appli_state = APPLICATION_IDLE;
 80006b4:	4b72      	ldr	r3, [pc, #456]	; (8000880 <main+0x2b0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
       break;
 80006ba:	e002      	b.n	80006c2 <main+0xf2>
      case APPLICATION_IDLE:
    	  break;
 80006bc:	bf00      	nop
 80006be:	e000      	b.n	80006c2 <main+0xf2>

     default:

    	 break;
 80006c0:	bf00      	nop
//        }




     if (USARTx->ISR & USART_ISR_RXNE) {
 80006c2:	4b68      	ldr	r3, [pc, #416]	; (8000864 <main+0x294>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 0320 	and.w	r3, r3, #32
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0e0      	beq.n	8000690 <main+0xc0>

    	 // Controlla e ridimensiona il buffer se necessario
    	                          if (buf_index >= buf_size - 1) { // Lascia spazio per '\0'
 80006ce:	4b60      	ldr	r3, [pc, #384]	; (8000850 <main+0x280>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	1e5a      	subs	r2, r3, #1
 80006d4:	4b5d      	ldr	r3, [pc, #372]	; (800084c <main+0x27c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dc1b      	bgt.n	8000714 <main+0x144>
    	                              buf_size += RX_BUFFER_SIZE;
 80006dc:	4b5c      	ldr	r3, [pc, #368]	; (8000850 <main+0x280>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e4:	4a5a      	ldr	r2, [pc, #360]	; (8000850 <main+0x280>)
 80006e6:	6013      	str	r3, [r2, #0]
    	                              uint8_t *newBuffer = realloc(rxBuffer, buf_size * sizeof(char));
 80006e8:	4b66      	ldr	r3, [pc, #408]	; (8000884 <main+0x2b4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a58      	ldr	r2, [pc, #352]	; (8000850 <main+0x280>)
 80006ee:	6812      	ldr	r2, [r2, #0]
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f00c fbf6 	bl	800cee4 <realloc>
 80006f8:	6278      	str	r0, [r7, #36]	; 0x24
    	                              if (newBuffer == NULL) {
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d106      	bne.n	800070e <main+0x13e>
    	                                  // Gestione dell'errore di reallocazione della memoria
    	                                  free(rxBuffer);
 8000700:	4b60      	ldr	r3, [pc, #384]	; (8000884 <main+0x2b4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f00c fb39 	bl	800cd7c <free>
    	                                  return 1;
 800070a:	2301      	movs	r3, #1
 800070c:	e101      	b.n	8000912 <main+0x342>
    	                              }
    	                              rxBuffer = newBuffer;
 800070e:	4a5d      	ldr	r2, [pc, #372]	; (8000884 <main+0x2b4>)
 8000710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000712:	6013      	str	r3, [r2, #0]
    	                          }


         sdata = (uint8_t)(USARTx->RDR); // Leggi un byte dal buffer di ricezione di USARTx
 8000714:	4b53      	ldr	r3, [pc, #332]	; (8000864 <main+0x294>)
 8000716:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000718:	b29b      	uxth	r3, r3
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b5a      	ldr	r3, [pc, #360]	; (8000888 <main+0x2b8>)
 800071e:	701a      	strb	r2, [r3, #0]
         rxBuffer[buf_index++] = sdata;
 8000720:	4b58      	ldr	r3, [pc, #352]	; (8000884 <main+0x2b4>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b49      	ldr	r3, [pc, #292]	; (800084c <main+0x27c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	1c59      	adds	r1, r3, #1
 800072a:	4848      	ldr	r0, [pc, #288]	; (800084c <main+0x27c>)
 800072c:	6001      	str	r1, [r0, #0]
 800072e:	4413      	add	r3, r2
 8000730:	4a55      	ldr	r2, [pc, #340]	; (8000888 <main+0x2b8>)
 8000732:	7812      	ldrb	r2, [r2, #0]
 8000734:	701a      	strb	r2, [r3, #0]
         rxBuffer[buf_index] = '\0';
 8000736:	4b53      	ldr	r3, [pc, #332]	; (8000884 <main+0x2b4>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a44      	ldr	r2, [pc, #272]	; (800084c <main+0x27c>)
 800073c:	6812      	ldr	r2, [r2, #0]
 800073e:	4413      	add	r3, r2
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
//        	            	     memset(rxBuffer, 0, RX_BUFFER_SIZE);
//        	            	     buf_index = 0;
//
//        	                            }

           if ((strstr(rxBuffer, "\r\r\r") != NULL)) {
 8000744:	4b4f      	ldr	r3, [pc, #316]	; (8000884 <main+0x2b4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4950      	ldr	r1, [pc, #320]	; (800088c <main+0x2bc>)
 800074a:	4618      	mov	r0, r3
 800074c:	f00c fe49 	bl	800d3e2 <strstr>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d09c      	beq.n	8000690 <main+0xc0>
        	  // USBH_UsrLog("terminatore trovato, stringa: %s",rxBuffer);
        	   //return;


        	   // Estrai SN
        	       char *startSN = strchr(rxBuffer, '=') + 1;
 8000756:	4b4b      	ldr	r3, [pc, #300]	; (8000884 <main+0x2b4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	213d      	movs	r1, #61	; 0x3d
 800075c:	4618      	mov	r0, r3
 800075e:	f00c fe20 	bl	800d3a2 <strchr>
 8000762:	4603      	mov	r3, r0
 8000764:	3301      	adds	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
        	       if (startSN != NULL) {
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d01a      	beq.n	80007a4 <main+0x1d4>
        	           char *endSN = strchr(startSN, '\r');
 800076e:	210d      	movs	r1, #13
 8000770:	6a38      	ldr	r0, [r7, #32]
 8000772:	f00c fe16 	bl	800d3a2 <strchr>
 8000776:	61f8      	str	r0, [r7, #28]
        	           if (endSN != NULL && (endSN - startSN < sizeof(SN))) {
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d012      	beq.n	80007a4 <main+0x1d4>
 800077e:	69fa      	ldr	r2, [r7, #28]
 8000780:	6a3b      	ldr	r3, [r7, #32]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	2b09      	cmp	r3, #9
 8000786:	d80d      	bhi.n	80007a4 <main+0x1d4>
        	               strncpy(SN, startSN, endSN - startSN);
 8000788:	69fa      	ldr	r2, [r7, #28]
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	461a      	mov	r2, r3
 8000790:	6a39      	ldr	r1, [r7, #32]
 8000792:	4830      	ldr	r0, [pc, #192]	; (8000854 <main+0x284>)
 8000794:	f00c fe12 	bl	800d3bc <strncpy>
        	               SN[endSN - startSN] = '\0';  // Termina correttamente la stringa SN
 8000798:	69fa      	ldr	r2, [r7, #28]
 800079a:	6a3b      	ldr	r3, [r7, #32]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	4a2d      	ldr	r2, [pc, #180]	; (8000854 <main+0x284>)
 80007a0:	2100      	movs	r1, #0
 80007a2:	54d1      	strb	r1, [r2, r3]
        	       }



        	       // Estrai data
        	       char *startData = strchr(rxBuffer, '\r') + 1;  // Inizio dei dati dopo il primo '\r'
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <main+0x2b4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	210d      	movs	r1, #13
 80007aa:	4618      	mov	r0, r3
 80007ac:	f00c fdf9 	bl	800d3a2 <strchr>
 80007b0:	4603      	mov	r3, r0
 80007b2:	3301      	adds	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
        	       if (startData != NULL) {
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d025      	beq.n	8000808 <main+0x238>
        	           char *endData = strstr(startData, "\r\r\r");  // Fine dei dati prima dei cinque '\r'
 80007bc:	4933      	ldr	r1, [pc, #204]	; (800088c <main+0x2bc>)
 80007be:	69b8      	ldr	r0, [r7, #24]
 80007c0:	f00c fe0f 	bl	800d3e2 <strstr>
 80007c4:	6178      	str	r0, [r7, #20]
        	           if (endData != NULL) {
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d01d      	beq.n	8000808 <main+0x238>
        	               size_t dataSize = endData - startData;
 80007cc:	697a      	ldr	r2, [r7, #20]
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	613b      	str	r3, [r7, #16]
        	               data = (char *)malloc(dataSize + 1);  // Alloca memoria per i dati
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	3301      	adds	r3, #1
 80007d8:	4618      	mov	r0, r3
 80007da:	f00c fac7 	bl	800cd6c <malloc>
 80007de:	4603      	mov	r3, r0
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <main+0x288>)
 80007e4:	601a      	str	r2, [r3, #0]
        	               if (data != NULL) {
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <main+0x288>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d00c      	beq.n	8000808 <main+0x238>
        	                   strncpy(data, startData, dataSize);
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <main+0x288>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	69b9      	ldr	r1, [r7, #24]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00c fde0 	bl	800d3bc <strncpy>
        	                   data[dataSize] = '\0';  // Termina correttamente la stringa data
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <main+0x288>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	4413      	add	r3, r2
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
        	               }
        	           }
        	       }


        	       int bufferSize = strlen(header) + strlen((char *)data) + 1; // +1 per '\0'
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <main+0x2c0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fcdf 	bl	80001d0 <strlen>
 8000812:	4604      	mov	r4, r0
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <main+0x288>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fcd9 	bl	80001d0 <strlen>
 800081e:	4603      	mov	r3, r0
 8000820:	4423      	add	r3, r4
 8000822:	3301      	adds	r3, #1
 8000824:	60fb      	str	r3, [r7, #12]

        	             // Alloca il buffer per la stringa finale
        	             char *finalString = (char *)malloc(bufferSize);
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	4618      	mov	r0, r3
 800082a:	f00c fa9f 	bl	800cd6c <malloc>
 800082e:	4603      	mov	r3, r0
 8000830:	60bb      	str	r3, [r7, #8]
        	             if (finalString == NULL) {
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d12f      	bne.n	8000898 <main+0x2c8>
        	                 USBH_UsrLog("null final");
 8000838:	4816      	ldr	r0, [pc, #88]	; (8000894 <main+0x2c4>)
 800083a:	f00c fc4d 	bl	800d0d8 <iprintf>
 800083e:	200a      	movs	r0, #10
 8000840:	f00c fc5c 	bl	800d0fc <putchar>
        	                 return; // Termina la funzione in caso di errore
 8000844:	e065      	b.n	8000912 <main+0x342>
 8000846:	bf00      	nop
 8000848:	20000a74 	.word	0x20000a74
 800084c:	20000e88 	.word	0x20000e88
 8000850:	20000e8c 	.word	0x20000e8c
 8000854:	20000e7c 	.word	0x20000e7c
 8000858:	20000e78 	.word	0x20000e78
 800085c:	40021000 	.word	0x40021000
 8000860:	200009e8 	.word	0x200009e8
 8000864:	40013800 	.word	0x40013800
 8000868:	0800df84 	.word	0x0800df84
 800086c:	20000508 	.word	0x20000508
 8000870:	0800e94c 	.word	0x0800e94c
 8000874:	08000a55 	.word	0x08000a55
 8000878:	2000050c 	.word	0x2000050c
 800087c:	20000010 	.word	0x20000010
 8000880:	200009e4 	.word	0x200009e4
 8000884:	20000a70 	.word	0x20000a70
 8000888:	20000e74 	.word	0x20000e74
 800088c:	0800df94 	.word	0x0800df94
 8000890:	20000000 	.word	0x20000000
 8000894:	0800df98 	.word	0x0800df98
        	             }

        	             // Costruisci la stringa finale
        	             strcpy(finalString, header);
 8000898:	4b20      	ldr	r3, [pc, #128]	; (800091c <main+0x34c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	68b8      	ldr	r0, [r7, #8]
 80008a0:	f00c fe39 	bl	800d516 <strcpy>
        	             strcat(finalString, (char *)data);
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <main+0x350>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	68b8      	ldr	r0, [r7, #8]
 80008ac:	f00c fd6a 	bl	800d384 <strcat>
        	             //USBH_UsrLog(finalString);


        	       // Reset del buffer dopo l'elaborazione
        	       memset(rxBuffer, 0, RX_BUFFER_SIZE);
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <main+0x354>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f00c fd5a 	bl	800d374 <memset>
        	       buf_index = 0;
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <main+0x358>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]

        	       strcat(SN,".csv");
 80008c6:	4819      	ldr	r0, [pc, #100]	; (800092c <main+0x35c>)
 80008c8:	f7ff fc82 	bl	80001d0 <strlen>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <main+0x35c>)
 80008d2:	4413      	add	r3, r2
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <main+0x360>)
 80008d6:	6810      	ldr	r0, [r2, #0]
 80008d8:	6018      	str	r0, [r3, #0]
 80008da:	7912      	ldrb	r2, [r2, #4]
 80008dc:	711a      	strb	r2, [r3, #4]
        	       USBH_UsrLog("serial:%s\nDATA:%s\nFinal:%s",SN,data,finalString);
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <main+0x350>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	4911      	ldr	r1, [pc, #68]	; (800092c <main+0x35c>)
 80008e6:	4813      	ldr	r0, [pc, #76]	; (8000934 <main+0x364>)
 80008e8:	f00c fbf6 	bl	800d0d8 <iprintf>
 80008ec:	200a      	movs	r0, #10
 80008ee:	f00c fc05 	bl	800d0fc <putchar>
        	       MSC_Application(finalString,SN);
 80008f2:	490e      	ldr	r1, [pc, #56]	; (800092c <main+0x35c>)
 80008f4:	68b8      	ldr	r0, [r7, #8]
 80008f6:	f000 f81f 	bl	8000938 <MSC_Application>

        	       free(finalString); // libera la memoria allocata
 80008fa:	68b8      	ldr	r0, [r7, #8]
 80008fc:	f00c fa3e 	bl	800cd7c <free>
   	               free(data);  // libera la memoria allocata
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <main+0x350>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f00c fa39 	bl	800cd7c <free>
      USBH_Process(&hUSBHost);
 800090a:	e6c1      	b.n	8000690 <main+0xc0>

    } // end infinite loop

   }  // end link usb stick init

  deinitRxBuffer(); // Pulisci alla fine
 800090c:	f000 f902 	bl	8000b14 <deinitRxBuffer>
  return 0;
 8000910:	2300      	movs	r3, #0
  /* Infinite loop */
  //for(;;);

} // end main
 8000912:	4618      	mov	r0, r3
 8000914:	372c      	adds	r7, #44	; 0x2c
 8000916:	46bd      	mov	sp, r7
 8000918:	bd90      	pop	{r4, r7, pc}
 800091a:	bf00      	nop
 800091c:	20000000 	.word	0x20000000
 8000920:	20000e78 	.word	0x20000e78
 8000924:	20000a70 	.word	0x20000a70
 8000928:	20000e88 	.word	0x20000e88
 800092c:	20000e7c 	.word	0x20000e7c
 8000930:	0800dfa4 	.word	0x0800dfa4
 8000934:	0800dfac 	.word	0x0800dfac

08000938 <MSC_Application>:
/**
  * @brief  Main routine for Mass Storage Class
  * @param  None
  * @retval None
  */
void MSC_Application(const uint8_t* wtext,const TCHAR* path){
 8000938:	b580      	push	{r7, lr}
 800093a:	b09e      	sub	sp, #120	; 0x78
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	  uint32_t byteswritten, bytesread;                     /* File write/read counts */
	  //uint8_t wtext[] = "This is hydra working with FatFs"; /* File write buffer */
	  uint8_t rtext[100];                                   /* File read buffer */

	  /* Register the file system object to the FatFs module */
	    if(f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0) != FR_OK)
 8000942:	2200      	movs	r2, #0
 8000944:	4938      	ldr	r1, [pc, #224]	; (8000a28 <MSC_Application+0xf0>)
 8000946:	4839      	ldr	r0, [pc, #228]	; (8000a2c <MSC_Application+0xf4>)
 8000948:	f007 fe90 	bl	800866c <f_mount>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d003      	beq.n	800095a <MSC_Application+0x22>
	    {
	      /* FatFs Initialization Error */
	      Error_Handler("mount error");
 8000952:	4837      	ldr	r0, [pc, #220]	; (8000a30 <MSC_Application+0xf8>)
 8000954:	f000 f984 	bl	8000c60 <Error_Handler>
 8000958:	e059      	b.n	8000a0e <MSC_Application+0xd6>
	    }
	    else
	    {
	      /* Create and Open a new text file object with write access */
	      if(f_open(&MyFile, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800095a:	220a      	movs	r2, #10
 800095c:	6839      	ldr	r1, [r7, #0]
 800095e:	4835      	ldr	r0, [pc, #212]	; (8000a34 <MSC_Application+0xfc>)
 8000960:	f007 feca 	bl	80086f8 <f_open>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d003      	beq.n	8000972 <MSC_Application+0x3a>
	      {
	        /* path file Open for write Error */
	        Error_Handler("write open error");
 800096a:	4833      	ldr	r0, [pc, #204]	; (8000a38 <MSC_Application+0x100>)
 800096c:	f000 f978 	bl	8000c60 <Error_Handler>
 8000970:	e04d      	b.n	8000a0e <MSC_Application+0xd6>
	      }
	      else
	      {
	        /* Write data to the text file */
	        res = f_write(&MyFile, wtext, strlen((char*)wtext), (void *)&byteswritten);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff fc2c 	bl	80001d0 <strlen>
 8000978:	4602      	mov	r2, r0
 800097a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	482c      	ldr	r0, [pc, #176]	; (8000a34 <MSC_Application+0xfc>)
 8000982:	f008 f9b6 	bl	8008cf2 <f_write>
 8000986:	4603      	mov	r3, r0
 8000988:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	        if((byteswritten == 0) || (res != FR_OK))
 800098c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800098e:	2b00      	cmp	r3, #0
 8000990:	d003      	beq.n	800099a <MSC_Application+0x62>
 8000992:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <MSC_Application+0x6a>
	        {
	          /* wtext file Write or EOF Error */
	          Error_Handler("write error");
 800099a:	4828      	ldr	r0, [pc, #160]	; (8000a3c <MSC_Application+0x104>)
 800099c:	f000 f960 	bl	8000c60 <Error_Handler>
 80009a0:	e035      	b.n	8000a0e <MSC_Application+0xd6>
	        }
	        else
	        {
	          /* Close the open text file */
	          f_close(&MyFile);
 80009a2:	4824      	ldr	r0, [pc, #144]	; (8000a34 <MSC_Application+0xfc>)
 80009a4:	f008 fb98 	bl	80090d8 <f_close>

	          /* Open the text file object with read access */
	          if(f_open(&MyFile, path, FA_READ) != FR_OK)
 80009a8:	2201      	movs	r2, #1
 80009aa:	6839      	ldr	r1, [r7, #0]
 80009ac:	4821      	ldr	r0, [pc, #132]	; (8000a34 <MSC_Application+0xfc>)
 80009ae:	f007 fea3 	bl	80086f8 <f_open>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <MSC_Application+0x88>
	          {
	            /* 'data.txt' file Open for read Error */
	            Error_Handler("read open error");
 80009b8:	4821      	ldr	r0, [pc, #132]	; (8000a40 <MSC_Application+0x108>)
 80009ba:	f000 f951 	bl	8000c60 <Error_Handler>
 80009be:	e026      	b.n	8000a0e <MSC_Application+0xd6>
	          }
	          else
	          {
	            /* Read data from the text file */
	            res = f_read(&MyFile, rtext, sizeof(rtext), (void *)&bytesread);
 80009c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009c4:	f107 0108 	add.w	r1, r7, #8
 80009c8:	2264      	movs	r2, #100	; 0x64
 80009ca:	481a      	ldr	r0, [pc, #104]	; (8000a34 <MSC_Application+0xfc>)
 80009cc:	f008 f852 	bl	8008a74 <f_read>
 80009d0:	4603      	mov	r3, r0
 80009d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	            if((bytesread == 0) || (res != FR_OK))
 80009d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <MSC_Application+0xac>
 80009dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d003      	beq.n	80009ec <MSC_Application+0xb4>
	            {
	              /* 'data.txt' file Read or EOF Error */
	              Error_Handler("final read error");
 80009e4:	4817      	ldr	r0, [pc, #92]	; (8000a44 <MSC_Application+0x10c>)
 80009e6:	f000 f93b 	bl	8000c60 <Error_Handler>
 80009ea:	e010      	b.n	8000a0e <MSC_Application+0xd6>
	            }
	            else
	            {
	              /* Close the open text file */
	              f_close(&MyFile);
 80009ec:	4811      	ldr	r0, [pc, #68]	; (8000a34 <MSC_Application+0xfc>)
 80009ee:	f008 fb73 	bl	80090d8 <f_close>

	              /* Compare read data with the expected data */
	              if((bytesread != byteswritten))
 80009f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80009f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d003      	beq.n	8000a02 <MSC_Application+0xca>
	              {
	                /* Read data is different from the expected data */
	                Error_Handler("compare read error");
 80009fa:	4813      	ldr	r0, [pc, #76]	; (8000a48 <MSC_Application+0x110>)
 80009fc:	f000 f930 	bl	8000c60 <Error_Handler>
 8000a00:	e005      	b.n	8000a0e <MSC_Application+0xd6>
	              }
	              else
	              {
	                /* Success of the demo: no error occurrence */
	                USBH_UsrLog ("Success data writing");
 8000a02:	4812      	ldr	r0, [pc, #72]	; (8000a4c <MSC_Application+0x114>)
 8000a04:	f00c fb68 	bl	800d0d8 <iprintf>
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f00c fb77 	bl	800d0fc <putchar>
	      }
	    }


  /* Unlink the USB disk I/O driver */
  FATFS_UnLinkDriver(USBDISKPath);
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <MSC_Application+0xf0>)
 8000a10:	f008 fc20 	bl	8009254 <FATFS_UnLinkDriver>

  USBH_UsrLog ("fat driver disconnesso");
 8000a14:	480e      	ldr	r0, [pc, #56]	; (8000a50 <MSC_Application+0x118>)
 8000a16:	f00c fb5f 	bl	800d0d8 <iprintf>
 8000a1a:	200a      	movs	r0, #10
 8000a1c:	f00c fb6e 	bl	800d0fc <putchar>
}
 8000a20:	bf00      	nop
 8000a22:	3778      	adds	r7, #120	; 0x78
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000508 	.word	0x20000508
 8000a2c:	200000a8 	.word	0x200000a8
 8000a30:	0800dfc8 	.word	0x0800dfc8
 8000a34:	200002d8 	.word	0x200002d8
 8000a38:	0800dfd4 	.word	0x0800dfd4
 8000a3c:	0800dfe8 	.word	0x0800dfe8
 8000a40:	0800dff4 	.word	0x0800dff4
 8000a44:	0800e004 	.word	0x0800e004
 8000a48:	0800e018 	.word	0x0800e018
 8000a4c:	0800e02c 	.word	0x0800e02c
 8000a50:	0800e044 	.word	0x0800e044

08000a54 <USBH_UserProcess>:
  * @param  phost: Host handle
  * @param  id: Host Library user message ID
  * @retval None
  */
static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	70fb      	strb	r3, [r7, #3]
  switch(id)
 8000a60:	78fb      	ldrb	r3, [r7, #3]
 8000a62:	2b05      	cmp	r3, #5
 8000a64:	d006      	beq.n	8000a74 <USBH_UserProcess+0x20>
 8000a66:	2b05      	cmp	r3, #5
 8000a68:	dc1d      	bgt.n	8000aa6 <USBH_UserProcess+0x52>
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d01d      	beq.n	8000aaa <USBH_UserProcess+0x56>
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d00c      	beq.n	8000a8c <USBH_UserProcess+0x38>
    f_mount(&USBH_fatfs, "", 0);

    break;

  default:
    break;
 8000a72:	e018      	b.n	8000aa6 <USBH_UserProcess+0x52>
    Appli_state = APPLICATION_IDLE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <USBH_UserProcess+0x60>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
    f_mount(NULL, (TCHAR const*)"", 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	490e      	ldr	r1, [pc, #56]	; (8000ab8 <USBH_UserProcess+0x64>)
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f007 fdf4 	bl	800866c <f_mount>
    FATFS_UnLinkDriver(USBDISKPath);
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <USBH_UserProcess+0x68>)
 8000a86:	f008 fbe5 	bl	8009254 <FATFS_UnLinkDriver>
    break;
 8000a8a:	e00f      	b.n	8000aac <USBH_UserProcess+0x58>
    Appli_state = APPLICATION_START;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <USBH_UserProcess+0x60>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
    FATFS_LinkDriver(&USBH_Driver, USBDISKPath);
 8000a92:	490a      	ldr	r1, [pc, #40]	; (8000abc <USBH_UserProcess+0x68>)
 8000a94:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <USBH_UserProcess+0x6c>)
 8000a96:	f008 fb95 	bl	80091c4 <FATFS_LinkDriver>
    f_mount(&USBH_fatfs, "", 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4906      	ldr	r1, [pc, #24]	; (8000ab8 <USBH_UserProcess+0x64>)
 8000a9e:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <USBH_UserProcess+0x70>)
 8000aa0:	f007 fde4 	bl	800866c <f_mount>
    break;
 8000aa4:	e002      	b.n	8000aac <USBH_UserProcess+0x58>
    break;
 8000aa6:	bf00      	nop
 8000aa8:	e000      	b.n	8000aac <USBH_UserProcess+0x58>
    break;
 8000aaa:	bf00      	nop
  }
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200009e4 	.word	0x200009e4
 8000ab8:	0800e05c 	.word	0x0800e05c
 8000abc:	20000508 	.word	0x20000508
 8000ac0:	0800e94c 	.word	0x0800e94c
 8000ac4:	200011d8 	.word	0x200011d8

08000ac8 <initRxBuffer>:

void initRxBuffer() {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
    rxBuffer = (uint8_t*)malloc(buf_size * sizeof(uint8_t));
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <initRxBuffer+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f00c f94b 	bl	800cd6c <malloc>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <initRxBuffer+0x44>)
 8000adc:	601a      	str	r2, [r3, #0]
    memset(rxBuffer, 0, buf_size);
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <initRxBuffer+0x44>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <initRxBuffer+0x40>)
 8000ae4:	6812      	ldr	r2, [r2, #0]
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f00c fc43 	bl	800d374 <memset>
    if (rxBuffer == NULL) {
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <initRxBuffer+0x44>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d105      	bne.n	8000b02 <initRxBuffer+0x3a>
        // Gestione dell'errore di allocazione della memoria
        // Potresti voler stampare un messaggio di errore o terminare il programma
    	USBH_UsrLog("buffer error");
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <initRxBuffer+0x48>)
 8000af8:	f00c faee 	bl	800d0d8 <iprintf>
 8000afc:	200a      	movs	r0, #10
 8000afe:	f00c fafd 	bl	800d0fc <putchar>
    }
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000e8c 	.word	0x20000e8c
 8000b0c:	20000a70 	.word	0x20000a70
 8000b10:	0800e060 	.word	0x0800e060

08000b14 <deinitRxBuffer>:

void deinitRxBuffer() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    free(rxBuffer);
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <deinitRxBuffer+0x28>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f00c f92d 	bl	800cd7c <free>
    rxBuffer = NULL;
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <deinitRxBuffer+0x28>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
    buf_index = 0;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <deinitRxBuffer+0x2c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
    buf_size = RX_BUFFER_SIZE;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <deinitRxBuffer+0x30>)
 8000b30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b34:	601a      	str	r2, [r3, #0]
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000a70 	.word	0x20000a70
 8000b40:	20000e88 	.word	0x20000e88
 8000b44:	20000e8c 	.word	0x20000e8c

08000b48 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8000b50:	1d39      	adds	r1, r7, #4
 8000b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b56:	2201      	movs	r2, #1
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <__io_putchar+0x20>)
 8000b5a:	f004 f879 	bl	8004c50 <HAL_UART_Transmit>

  return ch;
 8000b5e:	687b      	ldr	r3, [r7, #4]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200009e8 	.word	0x200009e8

08000b6c <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0b8      	sub	sp, #224	; 0xe0
 8000b70:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  /* Configure LSE Drive Capability */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b72:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <SystemClock_Config+0xe4>)
 8000b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b78:	4a35      	ldr	r2, [pc, #212]	; (8000c50 <SystemClock_Config+0xe4>)
 8000b7a:	f023 0318 	bic.w	r3, r3, #24
 8000b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Initialize the CPU, AHB and APB busses clocks */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000b82:	2316      	movs	r3, #22
 8000b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                    |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b96:	2310      	movs	r3, #16
 8000b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000ba8:	23b0      	movs	r3, #176	; 0xb0
 8000baa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bc0:	230a      	movs	r3, #10
 8000bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 fd1d 	bl	800361c <HAL_RCC_OscConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d002      	beq.n	8000bee <SystemClock_Config+0x82>
  {
    Error_Handler("rcc error");
 8000be8:	481a      	ldr	r0, [pc, #104]	; (8000c54 <SystemClock_Config+0xe8>)
 8000bea:	f000 f839 	bl	8000c60 <Error_Handler>
  }

  /* Initialize the CPU, AHB and APB busses clocks  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bee:	230f      	movs	r3, #15
 8000bf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c10:	2104      	movs	r1, #4
 8000c12:	4618      	mov	r0, r3
 8000c14:	f003 f8de 	bl	8003dd4 <HAL_RCC_ClockConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d002      	beq.n	8000c24 <SystemClock_Config+0xb8>
  {
    Error_Handler("clock error");
 8000c1e:	480e      	ldr	r0, [pc, #56]	; (8000c58 <SystemClock_Config+0xec>)
 8000c20:	f000 f81e 	bl	8000c60 <Error_Handler>
  }

  /* Initialize the USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c28:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000c2a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 faf2 	bl	800421c <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <SystemClock_Config+0xd8>
  {
    Error_Handler("periph error");
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <SystemClock_Config+0xf0>)
 8000c40:	f000 f80e 	bl	8000c60 <Error_Handler>
  }

  /* Enable MSI Auto calibration */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c44:	f003 fdd4 	bl	80047f0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c48:	bf00      	nop
 8000c4a:	37e0      	adds	r7, #224	; 0xe0
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40021000 	.word	0x40021000
 8000c54:	0800e0f4 	.word	0x0800e0f4
 8000c58:	0800e100 	.word	0x0800e100
 8000c5c:	0800e10c 	.word	0x0800e10c

08000c60 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(const char *errorMessage)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

	USBH_UsrLog("Errore: %s", errorMessage);
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <Error_Handler+0x20>)
 8000c6c:	f00c fa34 	bl	800d0d8 <iprintf>
 8000c70:	200a      	movs	r0, #10
 8000c72:	f00c fa43 	bl	800d0fc <putchar>
  //while(1){}
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	0800e130 	.word	0x0800e130

08000c84 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c90:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca8:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc0:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc6:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8000cd4:	2340      	movs	r3, #64	; 0x40
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	480d      	ldr	r0, [pc, #52]	; (8000d24 <HAL_UART_MspInit+0xa0>)
 8000cf0:	f000 fdde 	bl	80018b0 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4808      	ldr	r0, [pc, #32]	; (8000d24 <HAL_UART_MspInit+0xa0>)
 8000d04:	f000 fdd4 	bl	80018b0 <HAL_GPIO_Init>

  /* USART1 interrupt Init */
     HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2025      	movs	r0, #37	; 0x25
 8000d0e:	f000 fd1a 	bl	8001746 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d12:	2025      	movs	r0, #37	; 0x25
 8000d14:	f000 fd33 	bl	800177e <HAL_NVIC_EnableIRQ>
   /* USER CODE BEGIN USART1_MspInit 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	; 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40021000 	.word	0x40021000
 8000d24:	48000400 	.word	0x48000400

08000d28 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000d7c:	f000 fbc4 	bl	8001508 <HAL_IncTick>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <OTG_FS_IRQHandler+0x10>)
 8000d8a:	f001 fa01 	bl	8002190 <HAL_HCD_IRQHandler>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000e94 	.word	0x20000e94

08000d98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(UART_HandleTypeDef *huart)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USART1_IRQn 0 */
if (huart->Instance == USART1){
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <USART1_IRQHandler+0x20>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d102      	bne.n	8000db0 <USART1_IRQHandler+0x18>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(USART1);
 8000daa:	4803      	ldr	r0, [pc, #12]	; (8000db8 <USART1_IRQHandler+0x20>)
 8000dac:	f003 ffda 	bl	8004d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  extern void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
}
  /* USER CODE END USART1_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40013800 	.word	0x40013800

08000dbc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	e00a      	b.n	8000de4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dce:	f3af 8000 	nop.w
 8000dd2:	4601      	mov	r1, r0
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	60ba      	str	r2, [r7, #8]
 8000dda:	b2ca      	uxtb	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dbf0      	blt.n	8000dce <_read+0x12>
  }

  return len;
 8000dec:	687b      	ldr	r3, [r7, #4]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	e009      	b.n	8000e1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	60ba      	str	r2, [r7, #8]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fe99 	bl	8000b48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	dbf1      	blt.n	8000e08 <_write+0x12>
  }
  return len;
 8000e24:	687b      	ldr	r3, [r7, #4]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_close>:

int _close(int file)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e56:	605a      	str	r2, [r3, #4]
  return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <_isatty>:

int _isatty(int file)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f00c faf8 	bl	800d4bc <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20018000 	.word	0x20018000
 8000ef8:	00004000 	.word	0x00004000
 8000efc:	20000e90 	.word	0x20000e90
 8000f00:	20001798 	.word	0x20001798

08000f04 <HAL_HCD_MspInit>:
  * @brief  Initializes the HCD MSP.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hhcd)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_HCD_MspInit+0xc8>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	4a2e      	ldr	r2, [pc, #184]	; (8000fcc <HAL_HCD_MspInit+0xc8>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f18:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <HAL_HCD_MspInit+0xc8>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	693b      	ldr	r3, [r7, #16]

  /* Configure USBOTG_PPWR GPIO */
  USBOTG_PPWR_GPIO_CLK_ENABLE();
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <HAL_HCD_MspInit+0xc8>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <HAL_HCD_MspInit+0xc8>)
 8000f2a:	f043 0308 	orr.w	r3, r3, #8
 8000f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_HCD_MspInit+0xc8>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	f003 0308 	and.w	r3, r3, #8
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8000f3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5c:	f000 fca8 	bl	80018b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f66:	2312      	movs	r3, #18
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f6e:	230a      	movs	r3, #10
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f000 fc98 	bl	80018b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USBOTG_PPWR_GPIO_PIN;
 8000f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USBOTG_PPWR_GPIO_PORT, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <HAL_HCD_MspInit+0xcc>)
 8000f96:	f000 fc8b 	bl	80018b0 <HAL_GPIO_Init>

  /* Enable USB FS Clocks */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_HCD_MspInit+0xc8>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <HAL_HCD_MspInit+0xc8>)
 8000fa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_HCD_MspInit+0xc8>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]

  /* Set USBFS Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2105      	movs	r1, #5
 8000fb6:	2043      	movs	r0, #67	; 0x43
 8000fb8:	f000 fbc5 	bl	8001746 <HAL_NVIC_SetPriority>

  /* Enable USBFS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000fbc:	2043      	movs	r0, #67	; 0x43
 8000fbe:	f000 fbde 	bl	800177e <HAL_NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	48000c00 	.word	0x48000c00

08000fd4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer (hhcd->pData);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00a febb 	bl	800bd5e <USBH_LL_IncTimer>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]

  USBH_LL_Connect(hhcd->pData);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8001002:	4618      	mov	r0, r3
 8001004:	f00a fef1 	bl	800bdea <USBH_LL_Connect>

  /* Register the file system object to the FatFs module */
  if(f_mount(&USBH_fatfs, "", 0) != FR_OK)
 8001008:	2200      	movs	r2, #0
 800100a:	490e      	ldr	r1, [pc, #56]	; (8001044 <HAL_HCD_Connect_Callback+0x54>)
 800100c:	480e      	ldr	r0, [pc, #56]	; (8001048 <HAL_HCD_Connect_Callback+0x58>)
 800100e:	f007 fb2d 	bl	800866c <f_mount>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <HAL_HCD_Connect_Callback+0x34>
  {
    USBH_UsrLog ("ERROR : Cannot Initialize FatFs! \n");
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <HAL_HCD_Connect_Callback+0x5c>)
 800101a:	f00c f8cb 	bl	800d1b4 <puts>
 800101e:	200a      	movs	r0, #10
 8001020:	f00c f86c 	bl	800d0fc <putchar>
  }

  for (i = 0; i< 200000; i ++)
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e003      	b.n	8001032 <HAL_HCD_Connect_Callback+0x42>
  {
    __asm ("nop");
 800102a:	bf00      	nop
  for (i = 0; i< 200000; i ++)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <HAL_HCD_Connect_Callback+0x60>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d9f7      	bls.n	800102a <HAL_HCD_Connect_Callback+0x3a>
  }
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	0800e13c 	.word	0x0800e13c
 8001048:	200011d8 	.word	0x200011d8
 800104c:	0800e140 	.word	0x0800e140
 8001050:	00030d3f 	.word	0x00030d3f

08001054 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8001062:	4618      	mov	r0, r3
 8001064:	f00a fed8 	bl	800be18 <USBH_LL_Disconnect>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800107e:	4618      	mov	r0, r3
 8001080:	f00a fe97 	bl	800bdb2 <USBH_LL_PortEnabled>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800109a:	4618      	mov	r0, r3
 800109c:	f00a fe97 	bl	800bdce <USBH_LL_PortDisabled>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: Channel number
  * @param  urb_state: URB State
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
 80010b4:	4613      	mov	r3, r2
 80010b6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <USBH_LL_Init>:
  *         Initialize the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Init (USBH_HandleTypeDef *phost)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Set the LL Driver parameters */
  hhcd.Instance = USB_OTG_FS;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <USBH_LL_Init+0x64>)
 80010ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010d2:	601a      	str	r2, [r3, #0]
  hhcd.Init.Host_channels = 11;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <USBH_LL_Init+0x64>)
 80010d6:	220b      	movs	r2, #11
 80010d8:	609a      	str	r2, [r3, #8]
  hhcd.Init.dma_enable = 0;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <USBH_LL_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  hhcd.Init.low_power_enable = 0;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <USBH_LL_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <USBH_LL_Init+0x64>)
 80010e8:	2202      	movs	r2, #2
 80010ea:	619a      	str	r2, [r3, #24]
  hhcd.Init.Sof_enable = 0;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <USBH_LL_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  hhcd.Init.speed = HCD_SPEED_FULL;
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <USBH_LL_Init+0x64>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	611a      	str	r2, [r3, #16]
  /* Link the driver to the stack */
  hhcd.pData = phost;
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <USBH_LL_Init+0x64>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
  phost->pData = &hhcd;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <USBH_LL_Init+0x64>)
 8001104:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
  /* Initialize the LL Driver */
  HAL_HCD_Init(&hhcd);
 8001108:	4807      	ldr	r0, [pc, #28]	; (8001128 <USBH_LL_Init+0x64>)
 800110a:	f000 fd93 	bl	8001c34 <HAL_HCD_Init>

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd));
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <USBH_LL_Init+0x64>)
 8001110:	f001 f9c5 	bl	800249e <HAL_HCD_GetCurrentFrame>
 8001114:	4603      	mov	r3, r0
 8001116:	4619      	mov	r1, r3
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f00a fe11 	bl	800bd40 <USBH_LL_SetTimer>

  return USBH_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000e94 	.word	0x20000e94

0800112c <USBH_LL_Start>:
  *         Start the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_HCD_Start(phost->pData);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 800113a:	4618      	mov	r0, r3
 800113c:	f001 f937 	bl	80023ae <HAL_HCD_Start>
  return USBH_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <USBH_LL_Stop>:
  *         Stop the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Stop (USBH_HandleTypeDef *phost)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8001158:	4618      	mov	r0, r3
 800115a:	f001 f94b 	bl	80023f4 <HAL_HCD_Stop>
  return USBH_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <USBH_LL_GetSpeed>:
  *         Return the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed  (USBH_HandleTypeDef *phost)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 800117a:	4618      	mov	r0, r3
 800117c:	f001 f99d 	bl	80024ba <HAL_HCD_GetCurrentSpeed>
 8001180:	4603      	mov	r3, r0
 8001182:	2b01      	cmp	r3, #1
 8001184:	d002      	beq.n	800118c <USBH_LL_GetSpeed+0x24>
 8001186:	2b02      	cmp	r3, #2
 8001188:	d003      	beq.n	8001192 <USBH_LL_GetSpeed+0x2a>
 800118a:	e005      	b.n	8001198 <USBH_LL_GetSpeed+0x30>
  {
  case 1:
    speed = USBH_SPEED_FULL;
 800118c:	2301      	movs	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
    break;
 8001190:	e005      	b.n	800119e <USBH_LL_GetSpeed+0x36>

  case 2:
    speed = USBH_SPEED_LOW;
 8001192:	2302      	movs	r3, #2
 8001194:	73fb      	strb	r3, [r7, #15]
    break;
 8001196:	e002      	b.n	800119e <USBH_LL_GetSpeed+0x36>

   default:
    speed = USBH_SPEED_FULL;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
    break;
 800119c:	bf00      	nop
  }
  return speed;
 800119e:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <USBH_LL_ResetPort>:
  *         Reset the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_HCD_ResetPort(phost->pData);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 f939 	bl	800242e <HAL_HCD_ResetPort>
  return USBH_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize  (USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	460b      	mov	r3, r1
 80011d0:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 80011d8:	78fa      	ldrb	r2, [r7, #3]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 f949 	bl	8002474 <HAL_HCD_HC_GetXferCount>
 80011e2:	4603      	mov	r3, r0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <USBH_LL_OpenPipe>:
                                      uint8_t epnum,
                                      uint8_t dev_address,
                                      uint8_t speed,
                                      uint8_t ep_type,
                                      uint16_t mps)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af04      	add	r7, sp, #16
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	4608      	mov	r0, r1
 80011f6:	4611      	mov	r1, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	4603      	mov	r3, r0
 80011fc:	70fb      	strb	r3, [r7, #3]
 80011fe:	460b      	mov	r3, r1
 8001200:	70bb      	strb	r3, [r7, #2]
 8001202:	4613      	mov	r3, r2
 8001204:	707b      	strb	r3, [r7, #1]
  HAL_HCD_HC_Init(phost->pData,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f8d3 04d0 	ldr.w	r0, [r3, #1232]	; 0x4d0
 800120c:	787c      	ldrb	r4, [r7, #1]
 800120e:	78ba      	ldrb	r2, [r7, #2]
 8001210:	78f9      	ldrb	r1, [r7, #3]
 8001212:	8c3b      	ldrh	r3, [r7, #32]
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	7f3b      	ldrb	r3, [r7, #28]
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	7e3b      	ldrb	r3, [r7, #24]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4623      	mov	r3, r4
 8001220:	f000 fd83 	bl	8001d2a <HAL_HCD_HC_Init>
                  epnum,
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}

0800122e <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH Status
  */
USBH_StatusTypeDef   USBH_LL_ClosePipe   (USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	70fb      	strb	r3, [r7, #3]
  HAL_HCD_HC_Halt(phost->pData, pipe);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8001240:	78fa      	ldrb	r2, [r7, #3]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fe12 	bl	8001e6e <HAL_HCD_HC_Halt>
  return USBH_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <USBH_LL_SubmitURB>:
                                            uint8_t ep_type,
                                            uint8_t token,
                                            uint8_t* pbuff,
                                            uint16_t length,
                                            uint8_t do_ping )
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b087      	sub	sp, #28
 8001258:	af04      	add	r7, sp, #16
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4603      	mov	r3, r0
 8001264:	70fb      	strb	r3, [r7, #3]
 8001266:	460b      	mov	r3, r1
 8001268:	70bb      	strb	r3, [r7, #2]
 800126a:	4613      	mov	r3, r2
 800126c:	707b      	strb	r3, [r7, #1]
  HAL_HCD_HC_SubmitRequest(phost->pData,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f8d3 04d0 	ldr.w	r0, [r3, #1232]	; 0x4d0
 8001274:	787c      	ldrb	r4, [r7, #1]
 8001276:	78ba      	ldrb	r2, [r7, #2]
 8001278:	78f9      	ldrb	r1, [r7, #3]
 800127a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800127e:	9303      	str	r3, [sp, #12]
 8001280:	8c3b      	ldrh	r3, [r7, #32]
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	7e3b      	ldrb	r3, [r7, #24]
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	4623      	mov	r3, r4
 800128e:	f000 fe11 	bl	8001eb4 <HAL_HCD_HC_SubmitRequest>
                           ep_type,
                           token,
                           pbuff,
                           length,
                           do_ping);
  return USBH_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bd90      	pop	{r4, r7, pc}

0800129c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef  USBH_LL_GetURBState (USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 80012ae:	78fa      	ldrb	r2, [r7, #3]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 f8c9 	bl	800244a <HAL_HCD_HC_GetURBState>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <USBH_LL_DriverVBUS>:
  *           1 : VBUS Inactive
  * @retval Status
  */

USBH_StatusTypeDef  USBH_LL_DriverVBUS (USBH_HandleTypeDef *phost, uint8_t state)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
  if(state == 0)
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d106      	bne.n	80012e4 <USBH_LL_DriverVBUS+0x20>
  {
    /* Configure Low Charge pump */
    HAL_GPIO_WritePin(USBOTG_PPWR_GPIO_PORT, USBOTG_PPWR_GPIO_PIN, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012dc:	4808      	ldr	r0, [pc, #32]	; (8001300 <USBH_LL_DriverVBUS+0x3c>)
 80012de:	f000 fc91 	bl	8001c04 <HAL_GPIO_WritePin>
 80012e2:	e005      	b.n	80012f0 <USBH_LL_DriverVBUS+0x2c>
  }
  else
  {
    /* Drive High Charge pump */
    HAL_GPIO_WritePin(USBOTG_PPWR_GPIO_PORT, USBOTG_PPWR_GPIO_PIN, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <USBH_LL_DriverVBUS+0x3c>)
 80012ec:	f000 fc8a 	bl	8001c04 <HAL_GPIO_WritePin>
  }

  HAL_Delay(200);
 80012f0:	20c8      	movs	r0, #200	; 0xc8
 80012f2:	f000 f929 	bl	8001548 <HAL_Delay>
  return USBH_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	48000c00 	.word	0x48000c00

08001304 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef   USBH_LL_SetToggle   (USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
 8001310:	4613      	mov	r3, r2
 8001312:	70bb      	strb	r3, [r7, #2]
  if(hhcd.hc[pipe].ep_is_in)
 8001314:	78fa      	ldrb	r2, [r7, #3]
 8001316:	4913      	ldr	r1, [pc, #76]	; (8001364 <USBH_LL_SetToggle+0x60>)
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	440b      	add	r3, r1
 8001322:	333b      	adds	r3, #59	; 0x3b
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00a      	beq.n	8001340 <USBH_LL_SetToggle+0x3c>
  {
    hhcd.hc[pipe].toggle_in = toggle;
 800132a:	78fa      	ldrb	r2, [r7, #3]
 800132c:	490d      	ldr	r1, [pc, #52]	; (8001364 <USBH_LL_SetToggle+0x60>)
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	440b      	add	r3, r1
 8001338:	3358      	adds	r3, #88	; 0x58
 800133a:	78ba      	ldrb	r2, [r7, #2]
 800133c:	701a      	strb	r2, [r3, #0]
 800133e:	e009      	b.n	8001354 <USBH_LL_SetToggle+0x50>
  }
  else
  {
    hhcd.hc[pipe].toggle_out = toggle;
 8001340:	78fa      	ldrb	r2, [r7, #3]
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <USBH_LL_SetToggle+0x60>)
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	440b      	add	r3, r1
 800134e:	3359      	adds	r3, #89	; 0x59
 8001350:	78ba      	ldrb	r2, [r7, #2]
 8001352:	701a      	strb	r2, [r3, #0]
  }
  return USBH_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000e94 	.word	0x20000e94

08001368 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t  USBH_LL_GetToggle   (USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]

  if(hhcd.hc[pipe].ep_is_in)
 8001378:	78fa      	ldrb	r2, [r7, #3]
 800137a:	4913      	ldr	r1, [pc, #76]	; (80013c8 <USBH_LL_GetToggle+0x60>)
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	440b      	add	r3, r1
 8001386:	333b      	adds	r3, #59	; 0x3b
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00a      	beq.n	80013a4 <USBH_LL_GetToggle+0x3c>
  {
    toggle = hhcd.hc[pipe].toggle_in;
 800138e:	78fa      	ldrb	r2, [r7, #3]
 8001390:	490d      	ldr	r1, [pc, #52]	; (80013c8 <USBH_LL_GetToggle+0x60>)
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	440b      	add	r3, r1
 800139c:	3358      	adds	r3, #88	; 0x58
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	e009      	b.n	80013b8 <USBH_LL_GetToggle+0x50>
  }
  else
  {
    toggle = hhcd.hc[pipe].toggle_out;
 80013a4:	78fa      	ldrb	r2, [r7, #3]
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <USBH_LL_GetToggle+0x60>)
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	440b      	add	r3, r1
 80013b2:	3359      	adds	r3, #89	; 0x59
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000e94 	.word	0x20000e94

080013cc <USBH_Delay>:
  *         Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void  USBH_Delay (uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f8b7 	bl	8001548 <HAL_Delay>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <SystemInit+0x64>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ee:	4a16      	ldr	r2, [pc, #88]	; (8001448 <SystemInit+0x64>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <SystemInit+0x68>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a13      	ldr	r2, [pc, #76]	; (800144c <SystemInit+0x68>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <SystemInit+0x68>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <SystemInit+0x68>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <SystemInit+0x68>)
 8001410:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001414:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001418:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <SystemInit+0x68>)
 800141c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001420:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <SystemInit+0x68>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a09      	ldr	r2, [pc, #36]	; (800144c <SystemInit+0x68>)
 8001428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <SystemInit+0x68>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <SystemInit+0x64>)
 8001436:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800143a:	609a      	str	r2, [r3, #8]
#endif
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145a:	2003      	movs	r0, #3
 800145c:	f000 f968 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001460:	2000      	movs	r0, #0
 8001462:	f000 f815 	bl	8001490 <HAL_InitTick>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	71fb      	strb	r3, [r7, #7]
 8001470:	e001      	b.n	8001476 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001472:	f000 f805 	bl	8001480 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001476:	79fb      	ldrb	r3, [r7, #7]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_InitTick+0x6c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <HAL_InitTick+0x70>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_InitTick+0x6c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f96d 	bl	800179a <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d809      	bhi.n	80014e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d4:	f000 f937 	bl	8001746 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_InitTick+0x74>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e007      	b.n	80014f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e004      	b.n	80014f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e001      	b.n	80014f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000000c 	.word	0x2000000c
 8001500:	20000004 	.word	0x20000004
 8001504:	20000008 	.word	0x20000008

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	2000000c 	.word	0x2000000c
 800152c:	20001408 	.word	0x20001408

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20001408 	.word	0x20001408

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000000c 	.word	0x2000000c

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4907      	ldr	r1, [pc, #28]	; (800162c <__NVIC_EnableIRQ+0x38>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	; (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	; (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001710:	f7ff ff8e 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff29 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff3e 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff8e 	bl	8001684 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5d 	bl	8001630 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff31 	bl	80015f4 <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffa2 	bl	80016ec <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b085      	sub	sp, #20
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d008      	beq.n	80017dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2204      	movs	r2, #4
 80017ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e022      	b.n	8001822 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 020e 	bic.w	r2, r2, #14
 80017ea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0201 	bic.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f003 021c 	and.w	r2, r3, #28
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	2101      	movs	r1, #1
 800180a:	fa01 f202 	lsl.w	r2, r1, r2
 800180e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d005      	beq.n	8001852 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2204      	movs	r2, #4
 800184a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e029      	b.n	80018a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 020e 	bic.w	r2, r2, #14
 8001860:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f003 021c 	and.w	r2, r3, #28
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	2101      	movs	r1, #1
 8001880:	fa01 f202 	lsl.w	r2, r1, r2
 8001884:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	4798      	blx	r3
    }
  }
  return status;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018be:	e17f      	b.n	8001bc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	4013      	ands	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8171 	beq.w	8001bba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d005      	beq.n	80018f0 <HAL_GPIO_Init+0x40>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d130      	bne.n	8001952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001926:	2201      	movs	r2, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 0201 	and.w	r2, r3, #1
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b03      	cmp	r3, #3
 800195c:	d118      	bne.n	8001990 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001964:	2201      	movs	r2, #1
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b03      	cmp	r3, #3
 800199a:	d017      	beq.n	80019cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d123      	bne.n	8001a20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	6939      	ldr	r1, [r7, #16]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80ac 	beq.w	8001bba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	4b5f      	ldr	r3, [pc, #380]	; (8001be0 <HAL_GPIO_Init+0x330>)
 8001a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a66:	4a5e      	ldr	r2, [pc, #376]	; (8001be0 <HAL_GPIO_Init+0x330>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a6e:	4b5c      	ldr	r3, [pc, #368]	; (8001be0 <HAL_GPIO_Init+0x330>)
 8001a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a7a:	4a5a      	ldr	r2, [pc, #360]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	220f      	movs	r2, #15
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aa4:	d025      	beq.n	8001af2 <HAL_GPIO_Init+0x242>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4f      	ldr	r2, [pc, #316]	; (8001be8 <HAL_GPIO_Init+0x338>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d01f      	beq.n	8001aee <HAL_GPIO_Init+0x23e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4e      	ldr	r2, [pc, #312]	; (8001bec <HAL_GPIO_Init+0x33c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d019      	beq.n	8001aea <HAL_GPIO_Init+0x23a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4d      	ldr	r2, [pc, #308]	; (8001bf0 <HAL_GPIO_Init+0x340>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d013      	beq.n	8001ae6 <HAL_GPIO_Init+0x236>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4c      	ldr	r2, [pc, #304]	; (8001bf4 <HAL_GPIO_Init+0x344>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00d      	beq.n	8001ae2 <HAL_GPIO_Init+0x232>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4b      	ldr	r2, [pc, #300]	; (8001bf8 <HAL_GPIO_Init+0x348>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d007      	beq.n	8001ade <HAL_GPIO_Init+0x22e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4a      	ldr	r2, [pc, #296]	; (8001bfc <HAL_GPIO_Init+0x34c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_GPIO_Init+0x22a>
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	e00c      	b.n	8001af4 <HAL_GPIO_Init+0x244>
 8001ada:	2307      	movs	r3, #7
 8001adc:	e00a      	b.n	8001af4 <HAL_GPIO_Init+0x244>
 8001ade:	2305      	movs	r3, #5
 8001ae0:	e008      	b.n	8001af4 <HAL_GPIO_Init+0x244>
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x244>
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e004      	b.n	8001af4 <HAL_GPIO_Init+0x244>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e002      	b.n	8001af4 <HAL_GPIO_Init+0x244>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <HAL_GPIO_Init+0x244>
 8001af2:	2300      	movs	r3, #0
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	f002 0203 	and.w	r2, r2, #3
 8001afa:	0092      	lsls	r2, r2, #2
 8001afc:	4093      	lsls	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b04:	4937      	ldr	r1, [pc, #220]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b12:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <HAL_GPIO_Init+0x350>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b36:	4a32      	ldr	r2, [pc, #200]	; (8001c00 <HAL_GPIO_Init+0x350>)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b3c:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <HAL_GPIO_Init+0x350>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b60:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <HAL_GPIO_Init+0x350>)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b66:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <HAL_GPIO_Init+0x350>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <HAL_GPIO_Init+0x350>)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_GPIO_Init+0x350>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bb4:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <HAL_GPIO_Init+0x350>)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f47f ae78 	bne.w	80018c0 <HAL_GPIO_Init+0x10>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	371c      	adds	r7, #28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010000 	.word	0x40010000
 8001be8:	48000400 	.word	0x48000400
 8001bec:	48000800 	.word	0x48000800
 8001bf0:	48000c00 	.word	0x48000c00
 8001bf4:	48001000 	.word	0x48001000
 8001bf8:	48001400 	.word	0x48001400
 8001bfc:	48001800 	.word	0x48001800
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
 8001c10:	4613      	mov	r3, r2
 8001c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c14:	787b      	ldrb	r3, [r7, #1]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c1a:	887a      	ldrh	r2, [r7, #2]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c36:	b08f      	sub	sp, #60	; 0x3c
 8001c38:	af0a      	add	r7, sp, #40	; 0x28
 8001c3a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e06d      	b.n	8001d22 <HAL_HCD_Init+0xee>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d106      	bne.n	8001c66 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff f94f 	bl	8000f04 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c74:	d102      	bne.n	8001c7c <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f004 f8d3 	bl	8005e2c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	687e      	ldr	r6, [r7, #4]
 8001c8e:	466d      	mov	r5, sp
 8001c90:	f106 0410 	add.w	r4, r6, #16
 8001c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ca0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ca4:	1d33      	adds	r3, r6, #4
 8001ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca8:	6838      	ldr	r0, [r7, #0]
 8001caa:	f004 f882 	bl	8005db2 <USB_CoreInit>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_HCD_Init+0x8c>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e030      	b.n	8001d22 <HAL_HCD_Init+0xee>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f004 f8c1 	bl	8005e4e <USB_SetCurrentMode>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_HCD_Init+0xaa>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e021      	b.n	8001d22 <HAL_HCD_Init+0xee>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	687e      	ldr	r6, [r7, #4]
 8001ce6:	466d      	mov	r5, sp
 8001ce8:	f106 0410 	add.w	r4, r6, #16
 8001cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cfc:	1d33      	adds	r3, r6, #4
 8001cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d00:	6838      	ldr	r0, [r7, #0]
 8001d02:	f004 fa5d 	bl	80061c0 <USB_HostInit>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_HCD_Init+0xe4>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e004      	b.n	8001d22 <HAL_HCD_Init+0xee>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d2a <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001d2a:	b590      	push	{r4, r7, lr}
 8001d2c:	b089      	sub	sp, #36	; 0x24
 8001d2e:	af04      	add	r7, sp, #16
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	4608      	mov	r0, r1
 8001d34:	4611      	mov	r1, r2
 8001d36:	461a      	mov	r2, r3
 8001d38:	4603      	mov	r3, r0
 8001d3a:	70fb      	strb	r3, [r7, #3]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70bb      	strb	r3, [r7, #2]
 8001d40:	4613      	mov	r3, r2
 8001d42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HCcharMps = mps;
 8001d44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d46:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hhcd);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_HCD_HC_Init+0x2c>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e087      	b.n	8001e66 <HAL_HCD_HC_Init+0x13c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  hhcd->hc[ch_num].do_ping = 0U;
 8001d5e:	78fa      	ldrb	r2, [r7, #3]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	440b      	add	r3, r1
 8001d6c:	333d      	adds	r3, #61	; 0x3d
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	440b      	add	r3, r1
 8001d80:	3338      	adds	r3, #56	; 0x38
 8001d82:	787a      	ldrb	r2, [r7, #1]
 8001d84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	440b      	add	r3, r1
 8001d94:	3339      	adds	r3, #57	; 0x39
 8001d96:	78fa      	ldrb	r2, [r7, #3]
 8001d98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	440b      	add	r3, r1
 8001da8:	3340      	adds	r3, #64	; 0x40
 8001daa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001dae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	78bb      	ldrb	r3, [r7, #2]
 8001db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001db8:	b2d8      	uxtb	r0, r3
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	440b      	add	r3, r1
 8001dc6:	333a      	adds	r3, #58	; 0x3a
 8001dc8:	4602      	mov	r2, r0
 8001dca:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fb80 	bl	80024d6 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001dd6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	da0a      	bge.n	8001df4 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001dde:	78fa      	ldrb	r2, [r7, #3]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	440b      	add	r3, r1
 8001dec:	333b      	adds	r3, #59	; 0x3b
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
 8001df2:	e009      	b.n	8001e08 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001df4:	78fa      	ldrb	r2, [r7, #3]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	440b      	add	r3, r1
 8001e02:	333b      	adds	r3, #59	; 0x3b
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	440b      	add	r3, r1
 8001e16:	333c      	adds	r3, #60	; 0x3c
 8001e18:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e1c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	b298      	uxth	r0, r3
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	440b      	add	r3, r1
 8001e30:	3342      	adds	r3, #66	; 0x42
 8001e32:	4602      	mov	r2, r0
 8001e34:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	787c      	ldrb	r4, [r7, #1]
 8001e40:	78ba      	ldrb	r2, [r7, #2]
 8001e42:	78f9      	ldrb	r1, [r7, #3]
 8001e44:	9302      	str	r3, [sp, #8]
 8001e46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4623      	mov	r3, r4
 8001e54:	f004 fafe 	bl	8006454 <USB_HC_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	72fb      	strb	r3, [r7, #11]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return status;
 8001e64:	7afb      	ldrb	r3, [r7, #11]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd90      	pop	{r4, r7, pc}

08001e6e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_HCD_HC_Halt+0x1e>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e00f      	b.n	8001eac <HAL_HCD_HC_Halt+0x3e>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 fcee 	bl	800687e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return status;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	70fb      	strb	r3, [r7, #3]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	70bb      	strb	r3, [r7, #2]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	440b      	add	r3, r1
 8001edc:	333b      	adds	r3, #59	; 0x3b
 8001ede:	78ba      	ldrb	r2, [r7, #2]
 8001ee0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ee2:	78fa      	ldrb	r2, [r7, #3]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	440b      	add	r3, r1
 8001ef0:	3340      	adds	r3, #64	; 0x40
 8001ef2:	787a      	ldrb	r2, [r7, #1]
 8001ef4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001ef6:	7c3b      	ldrb	r3, [r7, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d114      	bne.n	8001f26 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	440b      	add	r3, r1
 8001f0a:	3344      	adds	r3, #68	; 0x44
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	440b      	add	r3, r1
 8001f1e:	333d      	adds	r3, #61	; 0x3d
 8001f20:	7f3a      	ldrb	r2, [r7, #28]
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	e009      	b.n	8001f3a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	440b      	add	r3, r1
 8001f34:	3344      	adds	r3, #68	; 0x44
 8001f36:	2202      	movs	r2, #2
 8001f38:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f3a:	787b      	ldrb	r3, [r7, #1]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	f200 80d6 	bhi.w	80020ee <HAL_HCD_HC_SubmitRequest+0x23a>
 8001f42:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f48:	08001f59 	.word	0x08001f59
 8001f4c:	080020d9 	.word	0x080020d9
 8001f50:	08001fc5 	.word	0x08001fc5
 8001f54:	0800204f 	.word	0x0800204f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001f58:	7c3b      	ldrb	r3, [r7, #16]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	f040 80c9 	bne.w	80020f2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (direction == 0U)
 8001f60:	78bb      	ldrb	r3, [r7, #2]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 80c5 	bne.w	80020f2 <HAL_HCD_HC_SubmitRequest+0x23e>
        {
          if (length == 0U)
 8001f68:	8b3b      	ldrh	r3, [r7, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_HCD_HC_SubmitRequest+0xce>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3359      	adds	r3, #89	; 0x59
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	440b      	add	r3, r1
 8001f90:	3359      	adds	r3, #89	; 0x59
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <HAL_HCD_HC_SubmitRequest+0xfa>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3344      	adds	r3, #68	; 0x44
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
            /* Put the PID 1 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
          }
        }
      }
      break;
 8001fac:	e0a1      	b.n	80020f2 <HAL_HCD_HC_SubmitRequest+0x23e>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	440b      	add	r3, r1
 8001fbc:	3344      	adds	r3, #68	; 0x44
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	701a      	strb	r2, [r3, #0]
      break;
 8001fc2:	e096      	b.n	80020f2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001fc4:	78bb      	ldrb	r3, [r7, #2]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d120      	bne.n	800200c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3359      	adds	r3, #89	; 0x59
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10a      	bne.n	8001ff6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	440b      	add	r3, r1
 8001fee:	3344      	adds	r3, #68	; 0x44
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ff4:	e07e      	b.n	80020f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	440b      	add	r3, r1
 8002004:	3344      	adds	r3, #68	; 0x44
 8002006:	2202      	movs	r2, #2
 8002008:	701a      	strb	r2, [r3, #0]
      break;
 800200a:	e073      	b.n	80020f4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	440b      	add	r3, r1
 800201a:	3358      	adds	r3, #88	; 0x58
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10a      	bne.n	8002038 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	440b      	add	r3, r1
 8002030:	3344      	adds	r3, #68	; 0x44
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
      break;
 8002036:	e05d      	b.n	80020f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	440b      	add	r3, r1
 8002046:	3344      	adds	r3, #68	; 0x44
 8002048:	2202      	movs	r2, #2
 800204a:	701a      	strb	r2, [r3, #0]
      break;
 800204c:	e052      	b.n	80020f4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800204e:	78bb      	ldrb	r3, [r7, #2]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d120      	bne.n	8002096 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002054:	78fa      	ldrb	r2, [r7, #3]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	440b      	add	r3, r1
 8002062:	3359      	adds	r3, #89	; 0x59
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10a      	bne.n	8002080 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	440b      	add	r3, r1
 8002078:	3344      	adds	r3, #68	; 0x44
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800207e:	e039      	b.n	80020f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	440b      	add	r3, r1
 800208e:	3344      	adds	r3, #68	; 0x44
 8002090:	2202      	movs	r2, #2
 8002092:	701a      	strb	r2, [r3, #0]
      break;
 8002094:	e02e      	b.n	80020f4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	440b      	add	r3, r1
 80020a4:	3358      	adds	r3, #88	; 0x58
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10a      	bne.n	80020c2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020ac:	78fa      	ldrb	r2, [r7, #3]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	440b      	add	r3, r1
 80020ba:	3344      	adds	r3, #68	; 0x44
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
      break;
 80020c0:	e018      	b.n	80020f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	440b      	add	r3, r1
 80020d0:	3344      	adds	r3, #68	; 0x44
 80020d2:	2202      	movs	r2, #2
 80020d4:	701a      	strb	r2, [r3, #0]
      break;
 80020d6:	e00d      	b.n	80020f4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	440b      	add	r3, r1
 80020e6:	3344      	adds	r3, #68	; 0x44
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
      break;
 80020ec:	e002      	b.n	80020f4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80020ee:	bf00      	nop
 80020f0:	e000      	b.n	80020f4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80020f2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	440b      	add	r3, r1
 8002102:	3348      	adds	r3, #72	; 0x48
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	8b39      	ldrh	r1, [r7, #24]
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	4403      	add	r3, r0
 8002118:	3350      	adds	r3, #80	; 0x50
 800211a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	440b      	add	r3, r1
 800212a:	3364      	adds	r3, #100	; 0x64
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	440b      	add	r3, r1
 800213e:	3354      	adds	r3, #84	; 0x54
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	440b      	add	r3, r1
 8002152:	3339      	adds	r3, #57	; 0x39
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	440b      	add	r3, r1
 8002166:	3365      	adds	r3, #101	; 0x65
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	3338      	adds	r3, #56	; 0x38
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	4619      	mov	r1, r3
 8002182:	f004 fa73 	bl	800666c <USB_HC_StartXfer>
 8002186:	4603      	mov	r3, r0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 ffc8 	bl	800613c <USB_GetMode>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	f040 80fa 	bne.w	80023a8 <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 ff8b 	bl	80060d4 <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80f0 	beq.w	80023a6 <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 ff82 	bl	80060d4 <USB_ReadInterrupts>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021da:	d104      	bne.n	80021e6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 ff72 	bl	80060d4 <USB_ReadInterrupts>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021fa:	d104      	bne.n	8002206 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002204:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f003 ff62 	bl	80060d4 <USB_ReadInterrupts>
 8002210:	4603      	mov	r3, r0
 8002212:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002216:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800221a:	d104      	bne.n	8002226 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002224:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f003 ff52 	bl	80060d4 <USB_ReadInterrupts>
 8002230:	4603      	mov	r3, r0
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b02      	cmp	r3, #2
 8002238:	d103      	bne.n	8002242 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2202      	movs	r2, #2
 8002240:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f003 ff44 	bl	80060d4 <USB_ReadInterrupts>
 800224c:	4603      	mov	r3, r0
 800224e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002256:	d120      	bne.n	800229a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002260:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d113      	bne.n	800229a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002272:	2110      	movs	r1, #16
 8002274:	6938      	ldr	r0, [r7, #16]
 8002276:	f003 fe37 	bl	8005ee8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800227a:	6938      	ldr	r0, [r7, #16]
 800227c:	f003 fe68 	bl	8005f50 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d105      	bne.n	8002294 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2101      	movs	r1, #1
 800228e:	4618      	mov	r0, r3
 8002290:	f004 f818 	bl	80062c4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7fe fedd 	bl	8001054 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 ff18 	bl	80060d4 <USB_ReadInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ae:	d102      	bne.n	80022b6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f001 f921 	bl	80034f8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 ff0a 	bl	80060d4 <USB_ReadInterrupts>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d106      	bne.n	80022d8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe fe82 	bl	8000fd4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2208      	movs	r2, #8
 80022d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f003 fef9 	bl	80060d4 <USB_ReadInterrupts>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022ec:	d138      	bne.n	8002360 <HAL_HCD_IRQHandler+0x1d0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f004 fab2 	bl	800685c <USB_HC_ReadInterrupt>
 80022f8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	e025      	b.n	800234c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d018      	beq.n	8002346 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800232a:	d106      	bne.n	800233a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	4619      	mov	r1, r3
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f8f0 	bl	8002518 <HCD_HC_IN_IRQHandler>
 8002338:	e005      	b.n	8002346 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	4619      	mov	r1, r3
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fd24 	bl	8002d8e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	429a      	cmp	r2, r3
 8002354:	d3d4      	bcc.n	8002300 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800235e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f003 feb5 	bl	80060d4 <USB_ReadInterrupts>
 800236a:	4603      	mov	r3, r0
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b10      	cmp	r3, #16
 8002372:	d101      	bne.n	8002378 <HAL_HCD_IRQHandler+0x1e8>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_HCD_IRQHandler+0x1ea>
 8002378:	2300      	movs	r3, #0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d014      	beq.n	80023a8 <HAL_HCD_IRQHandler+0x218>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699a      	ldr	r2, [r3, #24]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0210 	bic.w	r2, r2, #16
 800238c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 ffd3 	bl	800333a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0210 	orr.w	r2, r2, #16
 80023a2:	619a      	str	r2, [r3, #24]
 80023a4:	e000      	b.n	80023a8 <HAL_HCD_IRQHandler+0x218>
      return;
 80023a6:	bf00      	nop
    }
  }
}
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_HCD_Start+0x16>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e013      	b.n	80023ec <HAL_HCD_Start+0x3e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 ffdd 	bl	8006392 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 fd14 	bl	8005e0a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_HCD_Stop+0x16>
 8002406:	2302      	movs	r3, #2
 8002408:	e00d      	b.n	8002426 <HAL_HCD_Stop+0x32>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  (void)USB_StopHost(hhcd->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f004 fb51 	bl	8006abe <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f003 ff7f 	bl	800633e <USB_ResetPort>
 8002440:	4603      	mov	r3, r0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	440b      	add	r3, r1
 8002464:	3364      	adds	r3, #100	; 0x64
 8002466:	781b      	ldrb	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	440b      	add	r3, r1
 800248e:	3354      	adds	r3, #84	; 0x54
 8002490:	681b      	ldr	r3, [r3, #0]
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 ffc1 	bl	8006432 <USB_GetCurrentFrame>
 80024b0:	4603      	mov	r3, r0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 ff9c 	bl	8006404 <USB_GetHostSpeed>
 80024cc:	4603      	mov	r3, r0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].hub_addr = 0U;
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	440b      	add	r3, r1
 80024f0:	333f      	adds	r3, #63	; 0x3f
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	440b      	add	r3, r1
 8002504:	333e      	adds	r3, #62	; 0x3e
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f003 fddf 	bl	80060fa <USB_ReadChInterrupts>
 800253c:	4603      	mov	r3, r0
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b04      	cmp	r3, #4
 8002544:	d11a      	bne.n	800257c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	461a      	mov	r2, r3
 8002554:	2304      	movs	r3, #4
 8002556:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	440b      	add	r3, r1
 8002566:	3365      	adds	r3, #101	; 0x65
 8002568:	2207      	movs	r2, #7
 800256a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f004 f982 	bl	800687e <USB_HC_Halt>
 800257a:	e09e      	b.n	80026ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f003 fdb8 	bl	80060fa <USB_ReadChInterrupts>
 800258a:	4603      	mov	r3, r0
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002594:	d11b      	bne.n	80025ce <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a2:	461a      	mov	r2, r3
 80025a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	440b      	add	r3, r1
 80025b8:	3365      	adds	r3, #101	; 0x65
 80025ba:	2208      	movs	r2, #8
 80025bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f004 f959 	bl	800687e <USB_HC_Halt>
 80025cc:	e075      	b.n	80026ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 fd8f 	bl	80060fa <USB_ReadChInterrupts>
 80025dc:	4603      	mov	r3, r0
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d11a      	bne.n	800261c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	461a      	mov	r2, r3
 80025f4:	2308      	movs	r3, #8
 80025f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	440b      	add	r3, r1
 8002606:	3365      	adds	r3, #101	; 0x65
 8002608:	2206      	movs	r2, #6
 800260a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f004 f932 	bl	800687e <USB_HC_Halt>
 800261a:	e04e      	b.n	80026ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f003 fd68 	bl	80060fa <USB_ReadChInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002634:	d11b      	bne.n	800266e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002642:	461a      	mov	r2, r3
 8002644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002648:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	440b      	add	r3, r1
 8002658:	3365      	adds	r3, #101	; 0x65
 800265a:	2209      	movs	r2, #9
 800265c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	4611      	mov	r1, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f004 f909 	bl	800687e <USB_HC_Halt>
 800266c:	e025      	b.n	80026ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	78fa      	ldrb	r2, [r7, #3]
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f003 fd3f 	bl	80060fa <USB_ReadChInterrupts>
 800267c:	4603      	mov	r3, r0
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b80      	cmp	r3, #128	; 0x80
 8002684:	d119      	bne.n	80026ba <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	461a      	mov	r2, r3
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	440b      	add	r3, r1
 80026a6:	3365      	adds	r3, #101	; 0x65
 80026a8:	2207      	movs	r2, #7
 80026aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f004 f8e2 	bl	800687e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 fd19 	bl	80060fa <USB_ReadChInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d2:	d111      	bne.n	80026f8 <HCD_HC_IN_IRQHandler+0x1e0>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 f8ce 	bl	800687e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	461a      	mov	r2, r3
 80026f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026f4:	6093      	str	r3, [r2, #8]
 80026f6:	e347      	b.n	8002d88 <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f003 fcfa 	bl	80060fa <USB_ReadChInterrupts>
 8002706:	4603      	mov	r3, r0
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	f040 80d8 	bne.w	80028c2 <HCD_HC_IN_IRQHandler+0x3aa>
  {
    hhcd->hc[chnum].state = HC_XFRC;
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	440b      	add	r3, r1
 8002720:	3365      	adds	r3, #101	; 0x65
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	440b      	add	r3, r1
 8002734:	3360      	adds	r3, #96	; 0x60
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	461a      	mov	r2, r3
 8002748:	2301      	movs	r3, #1
 800274a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	440b      	add	r3, r1
 800275a:	3340      	adds	r3, #64	; 0x40
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HCD_HC_IN_IRQHandler+0x260>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	440b      	add	r3, r1
 8002770:	3340      	adds	r3, #64	; 0x40
 8002772:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002774:	2b02      	cmp	r3, #2
 8002776:	d110      	bne.n	800279a <HCD_HC_IN_IRQHandler+0x282>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f004 f87c 	bl	800687e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002792:	461a      	mov	r2, r3
 8002794:	2310      	movs	r3, #16
 8002796:	6093      	str	r3, [r2, #8]
 8002798:	e03d      	b.n	8002816 <HCD_HC_IN_IRQHandler+0x2fe>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	440b      	add	r3, r1
 80027a8:	3340      	adds	r3, #64	; 0x40
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d00a      	beq.n	80027c6 <HCD_HC_IN_IRQHandler+0x2ae>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	440b      	add	r3, r1
 80027be:	3340      	adds	r3, #64	; 0x40
 80027c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d127      	bne.n	8002816 <HCD_HC_IN_IRQHandler+0x2fe>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	0151      	lsls	r1, r2, #5
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	440a      	add	r2, r1
 80027dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027e4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	440b      	add	r3, r1
 80027f4:	3364      	adds	r3, #100	; 0x64
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027fa:	78fa      	ldrb	r2, [r7, #3]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	440b      	add	r3, r1
 8002808:	3364      	adds	r3, #100	; 0x64
 800280a:	781a      	ldrb	r2, [r3, #0]
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7fe fc49 	bl	80010a8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d13a      	bne.n	8002894 <HCD_HC_IN_IRQHandler+0x37c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	440b      	add	r3, r1
 800282c:	3354      	adds	r3, #84	; 0x54
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4403      	add	r3, r0
 800283e:	3342      	adds	r3, #66	; 0x42
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	440b      	add	r3, r1
 8002844:	1e59      	subs	r1, r3, #1
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4413      	add	r3, r2
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	4403      	add	r3, r0
 8002854:	3342      	adds	r3, #66	; 0x42
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	fbb1 f3f3 	udiv	r3, r1, r3
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8291 	beq.w	8002d88 <HCD_HC_IN_IRQHandler+0x870>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	440b      	add	r3, r1
 8002874:	3358      	adds	r3, #88	; 0x58
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	f083 0301 	eor.w	r3, r3, #1
 800287e:	b2d8      	uxtb	r0, r3
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	440b      	add	r3, r1
 800288c:	3358      	adds	r3, #88	; 0x58
 800288e:	4602      	mov	r2, r0
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	e279      	b.n	8002d88 <HCD_HC_IN_IRQHandler+0x870>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	440b      	add	r3, r1
 80028a2:	3358      	adds	r3, #88	; 0x58
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	f083 0301 	eor.w	r3, r3, #1
 80028ac:	b2d8      	uxtb	r0, r3
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	440b      	add	r3, r1
 80028ba:	3358      	adds	r3, #88	; 0x58
 80028bc:	4602      	mov	r2, r0
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	e262      	b.n	8002d88 <HCD_HC_IN_IRQHandler+0x870>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 fc15 	bl	80060fa <USB_ReadChInterrupts>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d109      	bne.n	80028ee <HCD_HC_IN_IRQHandler+0x3d6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	461a      	mov	r2, r3
 80028e8:	2320      	movs	r3, #32
 80028ea:	6093      	str	r3, [r2, #8]
 80028ec:	e24c      	b.n	8002d88 <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 fbff 	bl	80060fa <USB_ReadChInterrupts>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b02      	cmp	r3, #2
 8002904:	f040 81a0 	bne.w	8002c48 <HCD_HC_IN_IRQHandler+0x730>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002914:	461a      	mov	r2, r3
 8002916:	2302      	movs	r3, #2
 8002918:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	440b      	add	r3, r1
 8002928:	3365      	adds	r3, #101	; 0x65
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d114      	bne.n	800295a <HCD_HC_IN_IRQHandler+0x442>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	440b      	add	r3, r1
 800293e:	3365      	adds	r3, #101	; 0x65
 8002940:	2202      	movs	r2, #2
 8002942:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	440b      	add	r3, r1
 8002952:	3364      	adds	r3, #100	; 0x64
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e167      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	440b      	add	r3, r1
 8002968:	3365      	adds	r3, #101	; 0x65
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b06      	cmp	r3, #6
 800296e:	d114      	bne.n	800299a <HCD_HC_IN_IRQHandler+0x482>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	440b      	add	r3, r1
 800297e:	3365      	adds	r3, #101	; 0x65
 8002980:	2202      	movs	r2, #2
 8002982:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	440b      	add	r3, r1
 8002992:	3364      	adds	r3, #100	; 0x64
 8002994:	2205      	movs	r2, #5
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e147      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x712>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	440b      	add	r3, r1
 80029a8:	3365      	adds	r3, #101	; 0x65
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b07      	cmp	r3, #7
 80029ae:	d00a      	beq.n	80029c6 <HCD_HC_IN_IRQHandler+0x4ae>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	440b      	add	r3, r1
 80029be:	3365      	adds	r3, #101	; 0x65
 80029c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80029c2:	2b09      	cmp	r3, #9
 80029c4:	d176      	bne.n	8002ab4 <HCD_HC_IN_IRQHandler+0x59c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	440b      	add	r3, r1
 80029d4:	3365      	adds	r3, #101	; 0x65
 80029d6:	2202      	movs	r2, #2
 80029d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	440b      	add	r3, r1
 80029e8:	3360      	adds	r3, #96	; 0x60
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	1c59      	adds	r1, r3, #1
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	4403      	add	r3, r0
 80029fa:	3360      	adds	r3, #96	; 0x60
 80029fc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3360      	adds	r3, #96	; 0x60
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d914      	bls.n	8002a3e <HCD_HC_IN_IRQHandler+0x526>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4413      	add	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	440b      	add	r3, r1
 8002a22:	3360      	adds	r3, #96	; 0x60
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	440b      	add	r3, r1
 8002a36:	3364      	adds	r3, #100	; 0x64
 8002a38:	2204      	movs	r2, #4
 8002a3a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a3c:	e0f4      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0x710>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3364      	adds	r3, #100	; 0x64
 8002a4e:	2202      	movs	r2, #2
 8002a50:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	440b      	add	r3, r1
 8002a60:	3340      	adds	r3, #64	; 0x40
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00b      	beq.n	8002a80 <HCD_HC_IN_IRQHandler+0x568>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	440b      	add	r3, r1
 8002a76:	3340      	adds	r3, #64	; 0x40
 8002a78:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	f040 80d4 	bne.w	8002c28 <HCD_HC_IN_IRQHandler+0x710>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a96:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a9e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	461a      	mov	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ab2:	e0b9      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0x710>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3365      	adds	r3, #101	; 0x65
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d10a      	bne.n	8002ae0 <HCD_HC_IN_IRQHandler+0x5c8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3365      	adds	r3, #101	; 0x65
 8002ada:	2202      	movs	r2, #2
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e0a4      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	440b      	add	r3, r1
 8002aee:	3365      	adds	r3, #101	; 0x65
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d10a      	bne.n	8002b0c <HCD_HC_IN_IRQHandler+0x5f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	440b      	add	r3, r1
 8002b04:	3365      	adds	r3, #101	; 0x65
 8002b06:	2202      	movs	r2, #2
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	e08e      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	440b      	add	r3, r1
 8002b1a:	3365      	adds	r3, #101	; 0x65
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d143      	bne.n	8002baa <HCD_HC_IN_IRQHandler+0x692>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	440b      	add	r3, r1
 8002b30:	3365      	adds	r3, #101	; 0x65
 8002b32:	2202      	movs	r2, #2
 8002b34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	440b      	add	r3, r1
 8002b44:	3364      	adds	r3, #100	; 0x64
 8002b46:	2202      	movs	r2, #2
 8002b48:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	440b      	add	r3, r1
 8002b58:	3340      	adds	r3, #64	; 0x40
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <HCD_HC_IN_IRQHandler+0x65e>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3340      	adds	r3, #64	; 0x40
 8002b70:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d159      	bne.n	8002c2a <HCD_HC_IN_IRQHandler+0x712>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b8c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b94:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	e03f      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x712>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3365      	adds	r3, #101	; 0x65
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d126      	bne.n	8002c0e <HCD_HC_IN_IRQHandler+0x6f6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	440b      	add	r3, r1
 8002bce:	3365      	adds	r3, #101	; 0x65
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	440b      	add	r3, r1
 8002be2:	3360      	adds	r3, #96	; 0x60
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	1c59      	adds	r1, r3, #1
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	4403      	add	r3, r0
 8002bf4:	3360      	adds	r3, #96	; 0x60
 8002bf6:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	440b      	add	r3, r1
 8002c06:	3364      	adds	r3, #100	; 0x64
 8002c08:	2204      	movs	r2, #4
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e00d      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x712>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3365      	adds	r3, #101	; 0x65
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	f000 80b0 	beq.w	8002d86 <HCD_HC_IN_IRQHandler+0x86e>
 8002c26:	e000      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x712>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c28:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	440b      	add	r3, r1
 8002c38:	3364      	adds	r3, #100	; 0x64
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7fe fa31 	bl	80010a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c46:	e09f      	b.n	8002d88 <HCD_HC_IN_IRQHandler+0x870>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 fa52 	bl	80060fa <USB_ReadChInterrupts>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b40      	cmp	r3, #64	; 0x40
 8002c5e:	d124      	bne.n	8002caa <HCD_HC_IN_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2340      	movs	r3, #64	; 0x40
 8002c70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	440b      	add	r3, r1
 8002c80:	3365      	adds	r3, #101	; 0x65
 8002c82:	2205      	movs	r2, #5
 8002c84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	440b      	add	r3, r1
 8002c94:	3360      	adds	r3, #96	; 0x60
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f003 fdeb 	bl	800687e <USB_HC_Halt>
 8002ca8:	e06e      	b.n	8002d88 <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 fa21 	bl	80060fa <USB_ReadChInterrupts>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b10      	cmp	r3, #16
 8002cc0:	d162      	bne.n	8002d88 <HCD_HC_IN_IRQHandler+0x870>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	440b      	add	r3, r1
 8002cd0:	3340      	adds	r3, #64	; 0x40
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d11b      	bne.n	8002d10 <HCD_HC_IN_IRQHandler+0x7f8>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3360      	adds	r3, #96	; 0x60
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3365      	adds	r3, #101	; 0x65
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f003 fdb8 	bl	800687e <USB_HC_Halt>
 8002d0e:	e030      	b.n	8002d72 <HCD_HC_IN_IRQHandler+0x85a>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3340      	adds	r3, #64	; 0x40
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HCD_HC_IN_IRQHandler+0x824>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	440b      	add	r3, r1
 8002d34:	3340      	adds	r3, #64	; 0x40
 8002d36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d11a      	bne.n	8002d72 <HCD_HC_IN_IRQHandler+0x85a>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	440b      	add	r3, r1
 8002d4a:	3360      	adds	r3, #96	; 0x60
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3365      	adds	r3, #101	; 0x65
 8002d60:	2204      	movs	r2, #4
 8002d62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 fd86 	bl	800687e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2310      	movs	r3, #16
 8002d82:	6093      	str	r3, [r2, #8]
 8002d84:	e000      	b.n	8002d88 <HCD_HC_IN_IRQHandler+0x870>
        return;
 8002d86:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b086      	sub	sp, #24
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 f9a4 	bl	80060fa <USB_ReadChInterrupts>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d11a      	bne.n	8002df2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2304      	movs	r3, #4
 8002dcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	440b      	add	r3, r1
 8002ddc:	3365      	adds	r3, #101	; 0x65
 8002dde:	2207      	movs	r2, #7
 8002de0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 fd47 	bl	800687e <USB_HC_Halt>
 8002df0:	e2a0      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 f97d 	bl	80060fa <USB_ReadChInterrupts>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d109      	bne.n	8002e1e <HCD_HC_OUT_IRQHandler+0x90>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e16:	461a      	mov	r2, r3
 8002e18:	2320      	movs	r3, #32
 8002e1a:	6093      	str	r3, [r2, #8]
 8002e1c:	e28a      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 f967 	bl	80060fa <USB_ReadChInterrupts>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e36:	d111      	bne.n	8002e5c <HCD_HC_OUT_IRQHandler+0xce>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e44:	461a      	mov	r2, r3
 8002e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e4a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f003 fd12 	bl	800687e <USB_HC_Halt>
 8002e5a:	e26b      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f003 f948 	bl	80060fa <USB_ReadChInterrupts>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d124      	bne.n	8002ebe <HCD_HC_OUT_IRQHandler+0x130>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	440b      	add	r3, r1
 8002e82:	3360      	adds	r3, #96	; 0x60
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e94:	461a      	mov	r2, r3
 8002e96:	2301      	movs	r3, #1
 8002e98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3365      	adds	r3, #101	; 0x65
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f003 fce1 	bl	800687e <USB_HC_Halt>
 8002ebc:	e23a      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 f917 	bl	80060fa <USB_ReadChInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d11a      	bne.n	8002f0c <HCD_HC_OUT_IRQHandler+0x17e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2308      	movs	r3, #8
 8002ee6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3365      	adds	r3, #101	; 0x65
 8002ef8:	2206      	movs	r2, #6
 8002efa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 fcba 	bl	800687e <USB_HC_Halt>
 8002f0a:	e213      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 f8f0 	bl	80060fa <USB_ReadChInterrupts>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d124      	bne.n	8002f6e <HCD_HC_OUT_IRQHandler+0x1e0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	4413      	add	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	440b      	add	r3, r1
 8002f32:	3360      	adds	r3, #96	; 0x60
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4413      	add	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	440b      	add	r3, r1
 8002f46:	3365      	adds	r3, #101	; 0x65
 8002f48:	2204      	movs	r2, #4
 8002f4a:	701a      	strb	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 fc92 	bl	800687e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f66:	461a      	mov	r2, r3
 8002f68:	2310      	movs	r3, #16
 8002f6a:	6093      	str	r3, [r2, #8]
 8002f6c:	e1e2      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 f8bf 	bl	80060fa <USB_ReadChInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f82:	2b80      	cmp	r3, #128	; 0x80
 8002f84:	d11a      	bne.n	8002fbc <HCD_HC_OUT_IRQHandler+0x22e>
  {
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	440b      	add	r3, r1
 8002f94:	3365      	adds	r3, #101	; 0x65
 8002f96:	2207      	movs	r2, #7
 8002f98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f003 fc6b 	bl	800687e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	6093      	str	r3, [r2, #8]
 8002fba:	e1bb      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f003 f898 	bl	80060fa <USB_ReadChInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd4:	d11b      	bne.n	800300e <HCD_HC_OUT_IRQHandler+0x280>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3365      	adds	r3, #101	; 0x65
 8002fe6:	2209      	movs	r2, #9
 8002fe8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f003 fc43 	bl	800687e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	461a      	mov	r2, r3
 8003006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800300a:	6093      	str	r3, [r2, #8]
 800300c:	e192      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f003 f86f 	bl	80060fa <USB_ReadChInterrupts>
 800301c:	4603      	mov	r3, r0
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b02      	cmp	r3, #2
 8003024:	f040 8183 	bne.w	800332e <HCD_HC_OUT_IRQHandler+0x5a0>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4413      	add	r3, r2
 8003030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003034:	461a      	mov	r2, r3
 8003036:	2302      	movs	r3, #2
 8003038:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	4413      	add	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	440b      	add	r3, r1
 8003048:	3365      	adds	r3, #101	; 0x65
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b01      	cmp	r3, #1
 800304e:	f040 8093 	bne.w	8003178 <HCD_HC_OUT_IRQHandler+0x3ea>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	440b      	add	r3, r1
 8003060:	3365      	adds	r3, #101	; 0x65
 8003062:	2202      	movs	r2, #2
 8003064:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	440b      	add	r3, r1
 8003074:	3364      	adds	r3, #100	; 0x64
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	440b      	add	r3, r1
 8003088:	3340      	adds	r3, #64	; 0x40
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d00b      	beq.n	80030a8 <HCD_HC_OUT_IRQHandler+0x31a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	440b      	add	r3, r1
 800309e:	3340      	adds	r3, #64	; 0x40
 80030a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	f040 8134 	bne.w	8003310 <HCD_HC_OUT_IRQHandler+0x582>
      {
        if (hhcd->Init.dma_enable == 0U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d115      	bne.n	80030dc <HCD_HC_OUT_IRQHandler+0x34e>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	4413      	add	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	440b      	add	r3, r1
 80030be:	3359      	adds	r3, #89	; 0x59
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	f083 0301 	eor.w	r3, r3, #1
 80030c8:	b2d8      	uxtb	r0, r3
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	440b      	add	r3, r1
 80030d6:	3359      	adds	r3, #89	; 0x59
 80030d8:	4602      	mov	r2, r0
 80030da:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	f040 8115 	bne.w	8003310 <HCD_HC_OUT_IRQHandler+0x582>
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	440b      	add	r3, r1
 80030f4:	3350      	adds	r3, #80	; 0x50
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8109 	beq.w	8003310 <HCD_HC_OUT_IRQHandler+0x582>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	440b      	add	r3, r1
 800310c:	3350      	adds	r3, #80	; 0x50
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	4403      	add	r3, r0
 800311e:	3342      	adds	r3, #66	; 0x42
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	440b      	add	r3, r1
 8003124:	1e59      	subs	r1, r3, #1
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	4403      	add	r3, r0
 8003134:	3342      	adds	r3, #66	; 0x42
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	fbb1 f3f3 	udiv	r3, r1, r3
 800313c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80e3 	beq.w	8003310 <HCD_HC_OUT_IRQHandler+0x582>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	440b      	add	r3, r1
 8003158:	3359      	adds	r3, #89	; 0x59
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	f083 0301 	eor.w	r3, r3, #1
 8003162:	b2d8      	uxtb	r0, r3
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	440b      	add	r3, r1
 8003170:	3359      	adds	r3, #89	; 0x59
 8003172:	4602      	mov	r2, r0
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e0cb      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x582>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	440b      	add	r3, r1
 8003186:	3365      	adds	r3, #101	; 0x65
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b03      	cmp	r3, #3
 800318c:	d10a      	bne.n	80031a4 <HCD_HC_OUT_IRQHandler+0x416>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	440b      	add	r3, r1
 800319c:	3365      	adds	r3, #101	; 0x65
 800319e:	2202      	movs	r2, #2
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	e0b5      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	440b      	add	r3, r1
 80031b2:	3365      	adds	r3, #101	; 0x65
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d114      	bne.n	80031e4 <HCD_HC_OUT_IRQHandler+0x456>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	440b      	add	r3, r1
 80031c8:	3365      	adds	r3, #101	; 0x65
 80031ca:	2202      	movs	r2, #2
 80031cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	440b      	add	r3, r1
 80031dc:	3364      	adds	r3, #100	; 0x64
 80031de:	2202      	movs	r2, #2
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e095      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	440b      	add	r3, r1
 80031f2:	3365      	adds	r3, #101	; 0x65
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	d114      	bne.n	8003224 <HCD_HC_OUT_IRQHandler+0x496>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4413      	add	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	440b      	add	r3, r1
 8003208:	3365      	adds	r3, #101	; 0x65
 800320a:	2202      	movs	r2, #2
 800320c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	440b      	add	r3, r1
 800321c:	3364      	adds	r3, #100	; 0x64
 800321e:	2205      	movs	r2, #5
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e075      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	440b      	add	r3, r1
 8003232:	3365      	adds	r3, #101	; 0x65
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b07      	cmp	r3, #7
 8003238:	d00a      	beq.n	8003250 <HCD_HC_OUT_IRQHandler+0x4c2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800323a:	78fa      	ldrb	r2, [r7, #3]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	440b      	add	r3, r1
 8003248:	3365      	adds	r3, #101	; 0x65
 800324a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800324c:	2b09      	cmp	r3, #9
 800324e:	d170      	bne.n	8003332 <HCD_HC_OUT_IRQHandler+0x5a4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	440b      	add	r3, r1
 800325e:	3365      	adds	r3, #101	; 0x65
 8003260:	2202      	movs	r2, #2
 8003262:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	440b      	add	r3, r1
 8003272:	3360      	adds	r3, #96	; 0x60
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	1c59      	adds	r1, r3, #1
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	4403      	add	r3, r0
 8003284:	3360      	adds	r3, #96	; 0x60
 8003286:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	440b      	add	r3, r1
 8003296:	3360      	adds	r3, #96	; 0x60
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d914      	bls.n	80032c8 <HCD_HC_OUT_IRQHandler+0x53a>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	440b      	add	r3, r1
 80032ac:	3360      	adds	r3, #96	; 0x60
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	440b      	add	r3, r1
 80032c0:	3364      	adds	r3, #100	; 0x64
 80032c2:	2204      	movs	r2, #4
 80032c4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032c6:	e022      	b.n	800330e <HCD_HC_OUT_IRQHandler+0x580>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	440b      	add	r3, r1
 80032d6:	3364      	adds	r3, #100	; 0x64
 80032d8:	2202      	movs	r2, #2
 80032da:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032f2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032fa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003308:	461a      	mov	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800330e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	440b      	add	r3, r1
 800331e:	3364      	adds	r3, #100	; 0x64
 8003320:	781a      	ldrb	r2, [r3, #0]
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	4619      	mov	r1, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fd febe 	bl	80010a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800332c:	e002      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x5a6>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800332e:	bf00      	nop
 8003330:	e000      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x5a6>
      return;
 8003332:	bf00      	nop
  }
}
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b08a      	sub	sp, #40	; 0x28
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	0c5b      	lsrs	r3, r3, #17
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800336e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d004      	beq.n	8003380 <HCD_RXQLVL_IRQHandler+0x46>
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b05      	cmp	r3, #5
 800337a:	f000 80b6 	beq.w	80034ea <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800337e:	e0b7      	b.n	80034f0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80b3 	beq.w	80034ee <HCD_RXQLVL_IRQHandler+0x1b4>
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	440b      	add	r3, r1
 8003396:	3348      	adds	r3, #72	; 0x48
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80a7 	beq.w	80034ee <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4613      	mov	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	440b      	add	r3, r1
 80033ae:	3354      	adds	r3, #84	; 0x54
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	18d1      	adds	r1, r2, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	4403      	add	r3, r0
 80033c4:	3350      	adds	r3, #80	; 0x50
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4299      	cmp	r1, r3
 80033ca:	f200 8083 	bhi.w	80034d4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	440b      	add	r3, r1
 80033e0:	3348      	adds	r3, #72	; 0x48
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	b292      	uxth	r2, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	f002 fe1b 	bl	8006024 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	440b      	add	r3, r1
 80033fc:	3348      	adds	r3, #72	; 0x48
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	18d1      	adds	r1, r2, r3
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4613      	mov	r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4413      	add	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	4403      	add	r3, r0
 8003412:	3348      	adds	r3, #72	; 0x48
 8003414:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	440b      	add	r3, r1
 8003424:	3354      	adds	r3, #84	; 0x54
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	18d1      	adds	r1, r2, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	4403      	add	r3, r0
 800343a:	3354      	adds	r3, #84	; 0x54
 800343c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	4413      	add	r3, r2
 8003446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	0cdb      	lsrs	r3, r3, #19
 800344e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003452:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4613      	mov	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	4413      	add	r3, r2
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	440b      	add	r3, r1
 8003462:	3342      	adds	r3, #66	; 0x42
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4293      	cmp	r3, r2
 800346c:	d13f      	bne.n	80034ee <HCD_RXQLVL_IRQHandler+0x1b4>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d03c      	beq.n	80034ee <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	4413      	add	r3, r2
 800347c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800348a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003492:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	4413      	add	r3, r2
 800349c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a0:	461a      	mov	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4613      	mov	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4413      	add	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	440b      	add	r3, r1
 80034b4:	3358      	adds	r3, #88	; 0x58
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	f083 0301 	eor.w	r3, r3, #1
 80034bc:	b2d8      	uxtb	r0, r3
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4613      	mov	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4413      	add	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	440b      	add	r3, r1
 80034cc:	3358      	adds	r3, #88	; 0x58
 80034ce:	4602      	mov	r2, r0
 80034d0:	701a      	strb	r2, [r3, #0]
      break;
 80034d2:	e00c      	b.n	80034ee <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	440b      	add	r3, r1
 80034e2:	3364      	adds	r3, #100	; 0x64
 80034e4:	2204      	movs	r2, #4
 80034e6:	701a      	strb	r2, [r3, #0]
      break;
 80034e8:	e001      	b.n	80034ee <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80034ea:	bf00      	nop
 80034ec:	e000      	b.n	80034f0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80034ee:	bf00      	nop
  }
}
 80034f0:	bf00      	nop
 80034f2:	3728      	adds	r7, #40	; 0x28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003524:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b02      	cmp	r3, #2
 800352e:	d10b      	bne.n	8003548 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d102      	bne.n	8003540 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fd58 	bl	8000ff0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f043 0302 	orr.w	r3, r3, #2
 8003546:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b08      	cmp	r3, #8
 8003550:	d132      	bne.n	80035b8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f043 0308 	orr.w	r3, r3, #8
 8003558:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b04      	cmp	r3, #4
 8003562:	d126      	bne.n	80035b2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d113      	bne.n	8003594 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003572:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003576:	d106      	bne.n	8003586 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2102      	movs	r1, #2
 800357e:	4618      	mov	r0, r3
 8003580:	f002 fea0 	bl	80062c4 <USB_InitFSLSPClkSel>
 8003584:	e011      	b.n	80035aa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2101      	movs	r1, #1
 800358c:	4618      	mov	r0, r3
 800358e:	f002 fe99 	bl	80062c4 <USB_InitFSLSPClkSel>
 8003592:	e00a      	b.n	80035aa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d106      	bne.n	80035aa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035a2:	461a      	mov	r2, r3
 80035a4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80035a8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fd fd60 	bl	8001070 <HAL_HCD_PortEnabled_Callback>
 80035b0:	e002      	b.n	80035b8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fd6a 	bl	800108c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d103      	bne.n	80035ca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f043 0320 	orr.w	r3, r3, #32
 80035c8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035d0:	461a      	mov	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	6013      	str	r3, [r2, #0]
}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40007000 	.word	0x40007000

080035fc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4a04      	ldr	r2, [pc, #16]	; (8003618 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800360a:	6053      	str	r3, [r2, #4]
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40007000 	.word	0x40007000

0800361c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e3ca      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800362e:	4b97      	ldr	r3, [pc, #604]	; (800388c <HAL_RCC_OscConfig+0x270>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003638:	4b94      	ldr	r3, [pc, #592]	; (800388c <HAL_RCC_OscConfig+0x270>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80e4 	beq.w	8003818 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <HAL_RCC_OscConfig+0x4a>
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b0c      	cmp	r3, #12
 800365a:	f040 808b 	bne.w	8003774 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b01      	cmp	r3, #1
 8003662:	f040 8087 	bne.w	8003774 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003666:	4b89      	ldr	r3, [pc, #548]	; (800388c <HAL_RCC_OscConfig+0x270>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_RCC_OscConfig+0x62>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e3a2      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1a      	ldr	r2, [r3, #32]
 8003682:	4b82      	ldr	r3, [pc, #520]	; (800388c <HAL_RCC_OscConfig+0x270>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d004      	beq.n	8003698 <HAL_RCC_OscConfig+0x7c>
 800368e:	4b7f      	ldr	r3, [pc, #508]	; (800388c <HAL_RCC_OscConfig+0x270>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003696:	e005      	b.n	80036a4 <HAL_RCC_OscConfig+0x88>
 8003698:	4b7c      	ldr	r3, [pc, #496]	; (800388c <HAL_RCC_OscConfig+0x270>)
 800369a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d223      	bcs.n	80036f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fd55 	bl	800415c <RCC_SetFlashLatencyFromMSIRange>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e383      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036bc:	4b73      	ldr	r3, [pc, #460]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a72      	ldr	r2, [pc, #456]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80036c2:	f043 0308 	orr.w	r3, r3, #8
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b70      	ldr	r3, [pc, #448]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	496d      	ldr	r1, [pc, #436]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036da:	4b6c      	ldr	r3, [pc, #432]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	4968      	ldr	r1, [pc, #416]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	604b      	str	r3, [r1, #4]
 80036ee:	e025      	b.n	800373c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036f0:	4b66      	ldr	r3, [pc, #408]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a65      	ldr	r2, [pc, #404]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80036f6:	f043 0308 	orr.w	r3, r3, #8
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4b63      	ldr	r3, [pc, #396]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	4960      	ldr	r1, [pc, #384]	; (800388c <HAL_RCC_OscConfig+0x270>)
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800370e:	4b5f      	ldr	r3, [pc, #380]	; (800388c <HAL_RCC_OscConfig+0x270>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	495b      	ldr	r1, [pc, #364]	; (800388c <HAL_RCC_OscConfig+0x270>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fd15 	bl	800415c <RCC_SetFlashLatencyFromMSIRange>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e343      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800373c:	f000 fc4a 	bl	8003fd4 <HAL_RCC_GetSysClockFreq>
 8003740:	4602      	mov	r2, r0
 8003742:	4b52      	ldr	r3, [pc, #328]	; (800388c <HAL_RCC_OscConfig+0x270>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	4950      	ldr	r1, [pc, #320]	; (8003890 <HAL_RCC_OscConfig+0x274>)
 800374e:	5ccb      	ldrb	r3, [r1, r3]
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
 8003758:	4a4e      	ldr	r2, [pc, #312]	; (8003894 <HAL_RCC_OscConfig+0x278>)
 800375a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800375c:	4b4e      	ldr	r3, [pc, #312]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7fd fe95 	bl	8001490 <HAL_InitTick>
 8003766:	4603      	mov	r3, r0
 8003768:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d052      	beq.n	8003816 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	e327      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d032      	beq.n	80037e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800377c:	4b43      	ldr	r3, [pc, #268]	; (800388c <HAL_RCC_OscConfig+0x270>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a42      	ldr	r2, [pc, #264]	; (800388c <HAL_RCC_OscConfig+0x270>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003788:	f7fd fed2 	bl	8001530 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003790:	f7fd fece 	bl	8001530 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e310      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037a2:	4b3a      	ldr	r3, [pc, #232]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ae:	4b37      	ldr	r3, [pc, #220]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a36      	ldr	r2, [pc, #216]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80037b4:	f043 0308 	orr.w	r3, r3, #8
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	4b34      	ldr	r3, [pc, #208]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	4931      	ldr	r1, [pc, #196]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037cc:	4b2f      	ldr	r3, [pc, #188]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	492c      	ldr	r1, [pc, #176]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
 80037e0:	e01a      	b.n	8003818 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037e2:	4b2a      	ldr	r3, [pc, #168]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a29      	ldr	r2, [pc, #164]	; (800388c <HAL_RCC_OscConfig+0x270>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037ee:	f7fd fe9f 	bl	8001530 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037f6:	f7fd fe9b 	bl	8001530 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e2dd      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003808:	4b20      	ldr	r3, [pc, #128]	; (800388c <HAL_RCC_OscConfig+0x270>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f0      	bne.n	80037f6 <HAL_RCC_OscConfig+0x1da>
 8003814:	e000      	b.n	8003818 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003816:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d074      	beq.n	800390e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b08      	cmp	r3, #8
 8003828:	d005      	beq.n	8003836 <HAL_RCC_OscConfig+0x21a>
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b0c      	cmp	r3, #12
 800382e:	d10e      	bne.n	800384e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d10b      	bne.n	800384e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003836:	4b15      	ldr	r3, [pc, #84]	; (800388c <HAL_RCC_OscConfig+0x270>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d064      	beq.n	800390c <HAL_RCC_OscConfig+0x2f0>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d160      	bne.n	800390c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e2ba      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003856:	d106      	bne.n	8003866 <HAL_RCC_OscConfig+0x24a>
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <HAL_RCC_OscConfig+0x270>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0b      	ldr	r2, [pc, #44]	; (800388c <HAL_RCC_OscConfig+0x270>)
 800385e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	e026      	b.n	80038b4 <HAL_RCC_OscConfig+0x298>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800386e:	d115      	bne.n	800389c <HAL_RCC_OscConfig+0x280>
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <HAL_RCC_OscConfig+0x270>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a05      	ldr	r2, [pc, #20]	; (800388c <HAL_RCC_OscConfig+0x270>)
 8003876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b03      	ldr	r3, [pc, #12]	; (800388c <HAL_RCC_OscConfig+0x270>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a02      	ldr	r2, [pc, #8]	; (800388c <HAL_RCC_OscConfig+0x270>)
 8003882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	e014      	b.n	80038b4 <HAL_RCC_OscConfig+0x298>
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	0800e884 	.word	0x0800e884
 8003894:	20000004 	.word	0x20000004
 8003898:	20000008 	.word	0x20000008
 800389c:	4ba0      	ldr	r3, [pc, #640]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a9f      	ldr	r2, [pc, #636]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 80038a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	4b9d      	ldr	r3, [pc, #628]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a9c      	ldr	r2, [pc, #624]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 80038ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d013      	beq.n	80038e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fd fe38 	bl	8001530 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c4:	f7fd fe34 	bl	8001530 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	; 0x64
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e276      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038d6:	4b92      	ldr	r3, [pc, #584]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0x2a8>
 80038e2:	e014      	b.n	800390e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fd fe24 	bl	8001530 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ec:	f7fd fe20 	bl	8001530 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	; 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e262      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038fe:	4b88      	ldr	r3, [pc, #544]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x2d0>
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d060      	beq.n	80039dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2b04      	cmp	r3, #4
 800391e:	d005      	beq.n	800392c <HAL_RCC_OscConfig+0x310>
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	2b0c      	cmp	r3, #12
 8003924:	d119      	bne.n	800395a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d116      	bne.n	800395a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800392c:	4b7c      	ldr	r3, [pc, #496]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_RCC_OscConfig+0x328>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e23f      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003944:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	061b      	lsls	r3, r3, #24
 8003952:	4973      	ldr	r1, [pc, #460]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003958:	e040      	b.n	80039dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d023      	beq.n	80039aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003962:	4b6f      	ldr	r3, [pc, #444]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a6e      	ldr	r2, [pc, #440]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396e:	f7fd fddf 	bl	8001530 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003976:	f7fd fddb 	bl	8001530 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e21d      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003988:	4b65      	ldr	r3, [pc, #404]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003994:	4b62      	ldr	r3, [pc, #392]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	495f      	ldr	r1, [pc, #380]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
 80039a8:	e018      	b.n	80039dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039aa:	4b5d      	ldr	r3, [pc, #372]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a5c      	ldr	r2, [pc, #368]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 80039b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fd fdbb 	bl	8001530 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039be:	f7fd fdb7 	bl	8001530 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1f9      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039d0:	4b53      	ldr	r3, [pc, #332]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f0      	bne.n	80039be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d03c      	beq.n	8003a62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01c      	beq.n	8003a2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f0:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 80039f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f6:	4a4a      	ldr	r2, [pc, #296]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fd fd96 	bl	8001530 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a08:	f7fd fd92 	bl	8001530 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e1d4      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a1a:	4b41      	ldr	r3, [pc, #260]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ef      	beq.n	8003a08 <HAL_RCC_OscConfig+0x3ec>
 8003a28:	e01b      	b.n	8003a62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2a:	4b3d      	ldr	r3, [pc, #244]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a30:	4a3b      	ldr	r2, [pc, #236]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3a:	f7fd fd79 	bl	8001530 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a42:	f7fd fd75 	bl	8001530 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e1b7      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a54:	4b32      	ldr	r3, [pc, #200]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1ef      	bne.n	8003a42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 80a6 	beq.w	8003bbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a70:	2300      	movs	r3, #0
 8003a72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a74:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10d      	bne.n	8003a9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a80:	4b27      	ldr	r3, [pc, #156]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	4a26      	ldr	r2, [pc, #152]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a8c:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a9c:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <HAL_RCC_OscConfig+0x508>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d118      	bne.n	8003ada <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa8:	4b1e      	ldr	r3, [pc, #120]	; (8003b24 <HAL_RCC_OscConfig+0x508>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <HAL_RCC_OscConfig+0x508>)
 8003aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab4:	f7fd fd3c 	bl	8001530 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abc:	f7fd fd38 	bl	8001530 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e17a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ace:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <HAL_RCC_OscConfig+0x508>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d108      	bne.n	8003af4 <HAL_RCC_OscConfig+0x4d8>
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae8:	4a0d      	ldr	r2, [pc, #52]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003af2:	e029      	b.n	8003b48 <HAL_RCC_OscConfig+0x52c>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b05      	cmp	r3, #5
 8003afa:	d115      	bne.n	8003b28 <HAL_RCC_OscConfig+0x50c>
 8003afc:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	4a07      	ldr	r2, [pc, #28]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b12:	4a03      	ldr	r2, [pc, #12]	; (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b1c:	e014      	b.n	8003b48 <HAL_RCC_OscConfig+0x52c>
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40007000 	.word	0x40007000
 8003b28:	4b9c      	ldr	r3, [pc, #624]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	4a9b      	ldr	r2, [pc, #620]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b38:	4b98      	ldr	r3, [pc, #608]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	4a97      	ldr	r2, [pc, #604]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003b40:	f023 0304 	bic.w	r3, r3, #4
 8003b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d016      	beq.n	8003b7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b50:	f7fd fcee 	bl	8001530 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b58:	f7fd fcea 	bl	8001530 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e12a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b6e:	4b8b      	ldr	r3, [pc, #556]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0ed      	beq.n	8003b58 <HAL_RCC_OscConfig+0x53c>
 8003b7c:	e015      	b.n	8003baa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7e:	f7fd fcd7 	bl	8001530 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b84:	e00a      	b.n	8003b9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b86:	f7fd fcd3 	bl	8001530 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e113      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b9c:	4b7f      	ldr	r3, [pc, #508]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1ed      	bne.n	8003b86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003baa:	7ffb      	ldrb	r3, [r7, #31]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d105      	bne.n	8003bbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb0:	4b7a      	ldr	r3, [pc, #488]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	4a79      	ldr	r2, [pc, #484]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80fe 	beq.w	8003dc2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	f040 80d0 	bne.w	8003d70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bd0:	4b72      	ldr	r3, [pc, #456]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f003 0203 	and.w	r2, r3, #3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d130      	bne.n	8003c46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d127      	bne.n	8003c46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d11f      	bne.n	8003c46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c10:	2a07      	cmp	r2, #7
 8003c12:	bf14      	ite	ne
 8003c14:	2201      	movne	r2, #1
 8003c16:	2200      	moveq	r2, #0
 8003c18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d113      	bne.n	8003c46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d109      	bne.n	8003c46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d06e      	beq.n	8003d24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b0c      	cmp	r3, #12
 8003c4a:	d069      	beq.n	8003d20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c4c:	4b53      	ldr	r3, [pc, #332]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d105      	bne.n	8003c64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c58:	4b50      	ldr	r3, [pc, #320]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0ad      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c68:	4b4c      	ldr	r3, [pc, #304]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a4b      	ldr	r2, [pc, #300]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c74:	f7fd fc5c 	bl	8001530 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fd fc58 	bl	8001530 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e09a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c8e:	4b43      	ldr	r3, [pc, #268]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c9a:	4b40      	ldr	r3, [pc, #256]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	4b40      	ldr	r3, [pc, #256]	; (8003da0 <HAL_RCC_OscConfig+0x784>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003caa:	3a01      	subs	r2, #1
 8003cac:	0112      	lsls	r2, r2, #4
 8003cae:	4311      	orrs	r1, r2
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cb4:	0212      	lsls	r2, r2, #8
 8003cb6:	4311      	orrs	r1, r2
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cbc:	0852      	lsrs	r2, r2, #1
 8003cbe:	3a01      	subs	r2, #1
 8003cc0:	0552      	lsls	r2, r2, #21
 8003cc2:	4311      	orrs	r1, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cc8:	0852      	lsrs	r2, r2, #1
 8003cca:	3a01      	subs	r2, #1
 8003ccc:	0652      	lsls	r2, r2, #25
 8003cce:	4311      	orrs	r1, r2
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cd4:	0912      	lsrs	r2, r2, #4
 8003cd6:	0452      	lsls	r2, r2, #17
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	4930      	ldr	r1, [pc, #192]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ce0:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a2d      	ldr	r2, [pc, #180]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cec:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4a2a      	ldr	r2, [pc, #168]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cf8:	f7fd fc1a 	bl	8001530 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fd fc16 	bl	8001530 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e058      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d12:	4b22      	ldr	r3, [pc, #136]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d1e:	e050      	b.n	8003dc2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e04f      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d24:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d148      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d30:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d3c:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4a16      	ldr	r2, [pc, #88]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d48:	f7fd fbf2 	bl	8001530 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d50:	f7fd fbee 	bl	8001530 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e030      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d62:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0x734>
 8003d6e:	e028      	b.n	8003dc2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2b0c      	cmp	r3, #12
 8003d74:	d023      	beq.n	8003dbe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a08      	ldr	r2, [pc, #32]	; (8003d9c <HAL_RCC_OscConfig+0x780>)
 8003d7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d82:	f7fd fbd5 	bl	8001530 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d88:	e00c      	b.n	8003da4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8a:	f7fd fbd1 	bl	8001530 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d905      	bls.n	8003da4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e013      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003da4:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <HAL_RCC_OscConfig+0x7b0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1ec      	bne.n	8003d8a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCC_OscConfig+0x7b0>)
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	4905      	ldr	r1, [pc, #20]	; (8003dcc <HAL_RCC_OscConfig+0x7b0>)
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCC_OscConfig+0x7b4>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	60cb      	str	r3, [r1, #12]
 8003dbc:	e001      	b.n	8003dc2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	feeefffc 	.word	0xfeeefffc

08003dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0e7      	b.n	8003fb8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b75      	ldr	r3, [pc, #468]	; (8003fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d910      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b72      	ldr	r3, [pc, #456]	; (8003fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 0207 	bic.w	r2, r3, #7
 8003dfe:	4970      	ldr	r1, [pc, #448]	; (8003fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b6e      	ldr	r3, [pc, #440]	; (8003fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0cf      	b.n	8003fb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d010      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d908      	bls.n	8003e46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e34:	4b63      	ldr	r3, [pc, #396]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4960      	ldr	r1, [pc, #384]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d04c      	beq.n	8003eec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5a:	4b5a      	ldr	r3, [pc, #360]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d121      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e0a6      	b.n	8003fb8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e72:	4b54      	ldr	r3, [pc, #336]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d115      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e09a      	b.n	8003fb8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d107      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e8a:	4b4e      	ldr	r3, [pc, #312]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e08e      	b.n	8003fb8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e9a:	4b4a      	ldr	r3, [pc, #296]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e086      	b.n	8003fb8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eaa:	4b46      	ldr	r3, [pc, #280]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f023 0203 	bic.w	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4943      	ldr	r1, [pc, #268]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ebc:	f7fd fb38 	bl	8001530 <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec4:	f7fd fb34 	bl	8001530 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e06e      	b.n	8003fb8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	4b3a      	ldr	r3, [pc, #232]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 020c 	and.w	r2, r3, #12
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d1eb      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d010      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	4b31      	ldr	r3, [pc, #196]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d208      	bcs.n	8003f1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f08:	4b2e      	ldr	r3, [pc, #184]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	492b      	ldr	r1, [pc, #172]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1a:	4b29      	ldr	r3, [pc, #164]	; (8003fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d210      	bcs.n	8003f4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f28:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f023 0207 	bic.w	r2, r3, #7
 8003f30:	4923      	ldr	r1, [pc, #140]	; (8003fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f38:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d001      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e036      	b.n	8003fb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f56:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	4918      	ldr	r1, [pc, #96]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d009      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f74:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4910      	ldr	r1, [pc, #64]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f88:	f000 f824 	bl	8003fd4 <HAL_RCC_GetSysClockFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	490b      	ldr	r1, [pc, #44]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f4>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa4:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <HAL_RCC_ClockConfig+0x1f8>)
 8003fa6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fa8:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <HAL_RCC_ClockConfig+0x1fc>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fd fa6f 	bl	8001490 <HAL_InitTick>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fb6:	7afb      	ldrb	r3, [r7, #11]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40022000 	.word	0x40022000
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	0800e884 	.word	0x0800e884
 8003fcc:	20000004 	.word	0x20000004
 8003fd0:	20000008 	.word	0x20000008

08003fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe2:	4b3e      	ldr	r3, [pc, #248]	; (80040dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fec:	4b3b      	ldr	r3, [pc, #236]	; (80040dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x34>
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b0c      	cmp	r3, #12
 8004000:	d121      	bne.n	8004046 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d11e      	bne.n	8004046 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004008:	4b34      	ldr	r3, [pc, #208]	; (80040dc <HAL_RCC_GetSysClockFreq+0x108>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d107      	bne.n	8004024 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004014:	4b31      	ldr	r3, [pc, #196]	; (80040dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401a:	0a1b      	lsrs	r3, r3, #8
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	e005      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004024:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004030:	4a2b      	ldr	r2, [pc, #172]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004038:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10d      	bne.n	800405c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004044:	e00a      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	2b04      	cmp	r3, #4
 800404a:	d102      	bne.n	8004052 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800404c:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e004      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b08      	cmp	r3, #8
 8004056:	d101      	bne.n	800405c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004058:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800405a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	2b0c      	cmp	r3, #12
 8004060:	d134      	bne.n	80040cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004062:	4b1e      	ldr	r3, [pc, #120]	; (80040dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d003      	beq.n	800407a <HAL_RCC_GetSysClockFreq+0xa6>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d003      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0xac>
 8004078:	e005      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800407a:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800407c:	617b      	str	r3, [r7, #20]
      break;
 800407e:	e005      	b.n	800408c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004082:	617b      	str	r3, [r7, #20]
      break;
 8004084:	e002      	b.n	800408c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	617b      	str	r3, [r7, #20]
      break;
 800408a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800408c:	4b13      	ldr	r3, [pc, #76]	; (80040dc <HAL_RCC_GetSysClockFreq+0x108>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	3301      	adds	r3, #1
 8004098:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800409a:	4b10      	ldr	r3, [pc, #64]	; (80040dc <HAL_RCC_GetSysClockFreq+0x108>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	0a1b      	lsrs	r3, r3, #8
 80040a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	fb03 f202 	mul.w	r2, r3, r2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <HAL_RCC_GetSysClockFreq+0x108>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	0e5b      	lsrs	r3, r3, #25
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	3301      	adds	r3, #1
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040cc:	69bb      	ldr	r3, [r7, #24]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3724      	adds	r7, #36	; 0x24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40021000 	.word	0x40021000
 80040e0:	0800e89c 	.word	0x0800e89c
 80040e4:	00f42400 	.word	0x00f42400
 80040e8:	007a1200 	.word	0x007a1200

080040ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f0:	4b03      	ldr	r3, [pc, #12]	; (8004100 <HAL_RCC_GetHCLKFreq+0x14>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000004 	.word	0x20000004

08004104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004108:	f7ff fff0 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	4904      	ldr	r1, [pc, #16]	; (800412c <HAL_RCC_GetPCLK1Freq+0x28>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40021000 	.word	0x40021000
 800412c:	0800e894 	.word	0x0800e894

08004130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004134:	f7ff ffda 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 8004138:	4602      	mov	r2, r0
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	0adb      	lsrs	r3, r3, #11
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	4904      	ldr	r1, [pc, #16]	; (8004158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004146:	5ccb      	ldrb	r3, [r1, r3]
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004150:	4618      	mov	r0, r3
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021000 	.word	0x40021000
 8004158:	0800e894 	.word	0x0800e894

0800415c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004164:	2300      	movs	r3, #0
 8004166:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004168:	4b2a      	ldr	r3, [pc, #168]	; (8004214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800416a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004174:	f7ff fa34 	bl	80035e0 <HAL_PWREx_GetVoltageRange>
 8004178:	6178      	str	r0, [r7, #20]
 800417a:	e014      	b.n	80041a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800417c:	4b25      	ldr	r3, [pc, #148]	; (8004214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800417e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004180:	4a24      	ldr	r2, [pc, #144]	; (8004214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004186:	6593      	str	r3, [r2, #88]	; 0x58
 8004188:	4b22      	ldr	r3, [pc, #136]	; (8004214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004194:	f7ff fa24 	bl	80035e0 <HAL_PWREx_GetVoltageRange>
 8004198:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800419a:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800419c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419e:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ac:	d10b      	bne.n	80041c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b80      	cmp	r3, #128	; 0x80
 80041b2:	d919      	bls.n	80041e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2ba0      	cmp	r3, #160	; 0xa0
 80041b8:	d902      	bls.n	80041c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041ba:	2302      	movs	r3, #2
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	e013      	b.n	80041e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041c0:	2301      	movs	r3, #1
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	e010      	b.n	80041e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b80      	cmp	r3, #128	; 0x80
 80041ca:	d902      	bls.n	80041d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041cc:	2303      	movs	r3, #3
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	e00a      	b.n	80041e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b80      	cmp	r3, #128	; 0x80
 80041d6:	d102      	bne.n	80041de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041d8:	2302      	movs	r3, #2
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	e004      	b.n	80041e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b70      	cmp	r3, #112	; 0x70
 80041e2:	d101      	bne.n	80041e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041e4:	2301      	movs	r3, #1
 80041e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f023 0207 	bic.w	r2, r3, #7
 80041f0:	4909      	ldr	r1, [pc, #36]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041f8:	4b07      	ldr	r3, [pc, #28]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	429a      	cmp	r2, r3
 8004204:	d001      	beq.n	800420a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40021000 	.word	0x40021000
 8004218:	40022000 	.word	0x40022000

0800421c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004224:	2300      	movs	r3, #0
 8004226:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004228:	2300      	movs	r3, #0
 800422a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004234:	2b00      	cmp	r3, #0
 8004236:	d041      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800423c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004240:	d02a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004242:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004246:	d824      	bhi.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004248:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800424c:	d008      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800424e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004252:	d81e      	bhi.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425c:	d010      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800425e:	e018      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004260:	4b86      	ldr	r3, [pc, #536]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4a85      	ldr	r2, [pc, #532]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800426c:	e015      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3304      	adds	r3, #4
 8004272:	2100      	movs	r1, #0
 8004274:	4618      	mov	r0, r3
 8004276:	f000 facb 	bl	8004810 <RCCEx_PLLSAI1_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800427e:	e00c      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3320      	adds	r3, #32
 8004284:	2100      	movs	r1, #0
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fbb6 	bl	80049f8 <RCCEx_PLLSAI2_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004290:	e003      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	74fb      	strb	r3, [r7, #19]
      break;
 8004296:	e000      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800429a:	7cfb      	ldrb	r3, [r7, #19]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10b      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a0:	4b76      	ldr	r3, [pc, #472]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ae:	4973      	ldr	r1, [pc, #460]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042b6:	e001      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b8:	7cfb      	ldrb	r3, [r7, #19]
 80042ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d041      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042d0:	d02a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042d6:	d824      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042dc:	d008      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042e2:	d81e      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042ec:	d010      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042ee:	e018      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042f0:	4b62      	ldr	r3, [pc, #392]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a61      	ldr	r2, [pc, #388]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042fc:	e015      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3304      	adds	r3, #4
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fa83 	bl	8004810 <RCCEx_PLLSAI1_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800430e:	e00c      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3320      	adds	r3, #32
 8004314:	2100      	movs	r1, #0
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fb6e 	bl	80049f8 <RCCEx_PLLSAI2_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004320:	e003      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	74fb      	strb	r3, [r7, #19]
      break;
 8004326:	e000      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800432a:	7cfb      	ldrb	r3, [r7, #19]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004330:	4b52      	ldr	r3, [pc, #328]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800433e:	494f      	ldr	r1, [pc, #316]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004346:	e001      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	7cfb      	ldrb	r3, [r7, #19]
 800434a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80a0 	beq.w	800449a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435a:	2300      	movs	r3, #0
 800435c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800435e:	4b47      	ldr	r3, [pc, #284]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800436e:	2300      	movs	r3, #0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00d      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004374:	4b41      	ldr	r3, [pc, #260]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004378:	4a40      	ldr	r2, [pc, #256]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800437e:	6593      	str	r3, [r2, #88]	; 0x58
 8004380:	4b3e      	ldr	r3, [pc, #248]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800438c:	2301      	movs	r3, #1
 800438e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004390:	4b3b      	ldr	r3, [pc, #236]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a3a      	ldr	r2, [pc, #232]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800439c:	f7fd f8c8 	bl	8001530 <HAL_GetTick>
 80043a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043a2:	e009      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a4:	f7fd f8c4 	bl	8001530 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d902      	bls.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	74fb      	strb	r3, [r7, #19]
        break;
 80043b6:	e005      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043b8:	4b31      	ldr	r3, [pc, #196]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0ef      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043c4:	7cfb      	ldrb	r3, [r7, #19]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d15c      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043ca:	4b2c      	ldr	r3, [pc, #176]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01f      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d019      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043e8:	4b24      	ldr	r3, [pc, #144]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043f4:	4b21      	ldr	r3, [pc, #132]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fa:	4a20      	ldr	r2, [pc, #128]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004404:	4b1d      	ldr	r3, [pc, #116]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	4a1c      	ldr	r2, [pc, #112]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004414:	4a19      	ldr	r2, [pc, #100]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004426:	f7fd f883 	bl	8001530 <HAL_GetTick>
 800442a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800442c:	e00b      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442e:	f7fd f87f 	bl	8001530 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f241 3288 	movw	r2, #5000	; 0x1388
 800443c:	4293      	cmp	r3, r2
 800443e:	d902      	bls.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	74fb      	strb	r3, [r7, #19]
            break;
 8004444:	e006      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004446:	4b0d      	ldr	r3, [pc, #52]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0ec      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004454:	7cfb      	ldrb	r3, [r7, #19]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10c      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800445a:	4b08      	ldr	r3, [pc, #32]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446a:	4904      	ldr	r1, [pc, #16]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004472:	e009      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	74bb      	strb	r3, [r7, #18]
 8004478:	e006      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000
 8004480:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004484:	7cfb      	ldrb	r3, [r7, #19]
 8004486:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004488:	7c7b      	ldrb	r3, [r7, #17]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d105      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800448e:	4b9e      	ldr	r3, [pc, #632]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004492:	4a9d      	ldr	r2, [pc, #628]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004498:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044a6:	4b98      	ldr	r3, [pc, #608]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ac:	f023 0203 	bic.w	r2, r3, #3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b4:	4994      	ldr	r1, [pc, #592]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044c8:	4b8f      	ldr	r3, [pc, #572]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ce:	f023 020c 	bic.w	r2, r3, #12
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	498c      	ldr	r1, [pc, #560]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044ea:	4b87      	ldr	r3, [pc, #540]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	4983      	ldr	r1, [pc, #524]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800450c:	4b7e      	ldr	r3, [pc, #504]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	497b      	ldr	r1, [pc, #492]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800452e:	4b76      	ldr	r3, [pc, #472]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800453c:	4972      	ldr	r1, [pc, #456]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004550:	4b6d      	ldr	r3, [pc, #436]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455e:	496a      	ldr	r1, [pc, #424]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004572:	4b65      	ldr	r3, [pc, #404]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	4961      	ldr	r1, [pc, #388]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004594:	4b5c      	ldr	r3, [pc, #368]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a2:	4959      	ldr	r1, [pc, #356]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045b6:	4b54      	ldr	r3, [pc, #336]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c4:	4950      	ldr	r1, [pc, #320]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045d8:	4b4b      	ldr	r3, [pc, #300]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	4948      	ldr	r1, [pc, #288]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045fa:	4b43      	ldr	r3, [pc, #268]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004608:	493f      	ldr	r1, [pc, #252]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d028      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800461c:	4b3a      	ldr	r3, [pc, #232]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462a:	4937      	ldr	r1, [pc, #220]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463a:	d106      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800463c:	4b32      	ldr	r3, [pc, #200]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4a31      	ldr	r2, [pc, #196]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004646:	60d3      	str	r3, [r2, #12]
 8004648:	e011      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800464e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004652:	d10c      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	2101      	movs	r1, #1
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f8d8 	bl	8004810 <RCCEx_PLLSAI1_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800466a:	7cfb      	ldrb	r3, [r7, #19]
 800466c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d028      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800467a:	4b23      	ldr	r3, [pc, #140]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004680:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	491f      	ldr	r1, [pc, #124]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004698:	d106      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800469a:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	4a1a      	ldr	r2, [pc, #104]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046a4:	60d3      	str	r3, [r2, #12]
 80046a6:	e011      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046b0:	d10c      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3304      	adds	r3, #4
 80046b6:	2101      	movs	r1, #1
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 f8a9 	bl	8004810 <RCCEx_PLLSAI1_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046c2:	7cfb      	ldrb	r3, [r7, #19]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046c8:	7cfb      	ldrb	r3, [r7, #19]
 80046ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d02b      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e6:	4908      	ldr	r1, [pc, #32]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046f6:	d109      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a02      	ldr	r2, [pc, #8]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004702:	60d3      	str	r3, [r2, #12]
 8004704:	e014      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004706:	bf00      	nop
 8004708:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004714:	d10c      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3304      	adds	r3, #4
 800471a:	2101      	movs	r1, #1
 800471c:	4618      	mov	r0, r3
 800471e:	f000 f877 	bl	8004810 <RCCEx_PLLSAI1_Config>
 8004722:	4603      	mov	r3, r0
 8004724:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004726:	7cfb      	ldrb	r3, [r7, #19]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800472c:	7cfb      	ldrb	r3, [r7, #19]
 800472e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d02f      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800473c:	4b2b      	ldr	r3, [pc, #172]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800473e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004742:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800474a:	4928      	ldr	r1, [pc, #160]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800475a:	d10d      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	2102      	movs	r1, #2
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f854 	bl	8004810 <RCCEx_PLLSAI1_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d014      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004772:	7cfb      	ldrb	r3, [r7, #19]
 8004774:	74bb      	strb	r3, [r7, #18]
 8004776:	e011      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800477c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004780:	d10c      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3320      	adds	r3, #32
 8004786:	2102      	movs	r1, #2
 8004788:	4618      	mov	r0, r3
 800478a:	f000 f935 	bl	80049f8 <RCCEx_PLLSAI2_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004792:	7cfb      	ldrb	r3, [r7, #19]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047a8:	4b10      	ldr	r3, [pc, #64]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b6:	490d      	ldr	r1, [pc, #52]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00b      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047ca:	4b08      	ldr	r3, [pc, #32]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047da:	4904      	ldr	r1, [pc, #16]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40021000 	.word	0x40021000

080047f0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a04      	ldr	r2, [pc, #16]	; (800480c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047fa:	f043 0304 	orr.w	r3, r3, #4
 80047fe:	6013      	str	r3, [r2, #0]
}
 8004800:	bf00      	nop
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000

08004810 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800481e:	4b75      	ldr	r3, [pc, #468]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d018      	beq.n	800485c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800482a:	4b72      	ldr	r3, [pc, #456]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f003 0203 	and.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d10d      	bne.n	8004856 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
       ||
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004842:	4b6c      	ldr	r3, [pc, #432]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
       ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d047      	beq.n	80048e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
 800485a:	e044      	b.n	80048e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d018      	beq.n	8004896 <RCCEx_PLLSAI1_Config+0x86>
 8004864:	2b03      	cmp	r3, #3
 8004866:	d825      	bhi.n	80048b4 <RCCEx_PLLSAI1_Config+0xa4>
 8004868:	2b01      	cmp	r3, #1
 800486a:	d002      	beq.n	8004872 <RCCEx_PLLSAI1_Config+0x62>
 800486c:	2b02      	cmp	r3, #2
 800486e:	d009      	beq.n	8004884 <RCCEx_PLLSAI1_Config+0x74>
 8004870:	e020      	b.n	80048b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004872:	4b60      	ldr	r3, [pc, #384]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d11d      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004882:	e01a      	b.n	80048ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004884:	4b5b      	ldr	r3, [pc, #364]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488c:	2b00      	cmp	r3, #0
 800488e:	d116      	bne.n	80048be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004894:	e013      	b.n	80048be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004896:	4b57      	ldr	r3, [pc, #348]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10f      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048a2:	4b54      	ldr	r3, [pc, #336]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048b2:	e006      	b.n	80048c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	73fb      	strb	r3, [r7, #15]
      break;
 80048b8:	e004      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ba:	bf00      	nop
 80048bc:	e002      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048be:	bf00      	nop
 80048c0:	e000      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10d      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048ca:	4b4a      	ldr	r3, [pc, #296]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	3b01      	subs	r3, #1
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	430b      	orrs	r3, r1
 80048e0:	4944      	ldr	r1, [pc, #272]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d17d      	bne.n	80049e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048ec:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a40      	ldr	r2, [pc, #256]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f8:	f7fc fe1a 	bl	8001530 <HAL_GetTick>
 80048fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048fe:	e009      	b.n	8004914 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004900:	f7fc fe16 	bl	8001530 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d902      	bls.n	8004914 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	73fb      	strb	r3, [r7, #15]
        break;
 8004912:	e005      	b.n	8004920 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004914:	4b37      	ldr	r3, [pc, #220]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1ef      	bne.n	8004900 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d160      	bne.n	80049e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d111      	bne.n	8004950 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800492c:	4b31      	ldr	r3, [pc, #196]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6892      	ldr	r2, [r2, #8]
 800493c:	0211      	lsls	r1, r2, #8
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68d2      	ldr	r2, [r2, #12]
 8004942:	0912      	lsrs	r2, r2, #4
 8004944:	0452      	lsls	r2, r2, #17
 8004946:	430a      	orrs	r2, r1
 8004948:	492a      	ldr	r1, [pc, #168]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800494a:	4313      	orrs	r3, r2
 800494c:	610b      	str	r3, [r1, #16]
 800494e:	e027      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d112      	bne.n	800497c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004956:	4b27      	ldr	r3, [pc, #156]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800495e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6892      	ldr	r2, [r2, #8]
 8004966:	0211      	lsls	r1, r2, #8
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6912      	ldr	r2, [r2, #16]
 800496c:	0852      	lsrs	r2, r2, #1
 800496e:	3a01      	subs	r2, #1
 8004970:	0552      	lsls	r2, r2, #21
 8004972:	430a      	orrs	r2, r1
 8004974:	491f      	ldr	r1, [pc, #124]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004976:	4313      	orrs	r3, r2
 8004978:	610b      	str	r3, [r1, #16]
 800497a:	e011      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800497c:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004984:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6892      	ldr	r2, [r2, #8]
 800498c:	0211      	lsls	r1, r2, #8
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6952      	ldr	r2, [r2, #20]
 8004992:	0852      	lsrs	r2, r2, #1
 8004994:	3a01      	subs	r2, #1
 8004996:	0652      	lsls	r2, r2, #25
 8004998:	430a      	orrs	r2, r1
 800499a:	4916      	ldr	r1, [pc, #88]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800499c:	4313      	orrs	r3, r2
 800499e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049a0:	4b14      	ldr	r3, [pc, #80]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ac:	f7fc fdc0 	bl	8001530 <HAL_GetTick>
 80049b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049b2:	e009      	b.n	80049c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049b4:	f7fc fdbc 	bl	8001530 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d902      	bls.n	80049c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	73fb      	strb	r3, [r7, #15]
          break;
 80049c6:	e005      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0ef      	beq.n	80049b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	4904      	ldr	r1, [pc, #16]	; (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40021000 	.word	0x40021000

080049f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a06:	4b6a      	ldr	r3, [pc, #424]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d018      	beq.n	8004a44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a12:	4b67      	ldr	r3, [pc, #412]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0203 	and.w	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d10d      	bne.n	8004a3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
       ||
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d009      	beq.n	8004a3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a2a:	4b61      	ldr	r3, [pc, #388]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	091b      	lsrs	r3, r3, #4
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
       ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d047      	beq.n	8004ace <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
 8004a42:	e044      	b.n	8004ace <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d018      	beq.n	8004a7e <RCCEx_PLLSAI2_Config+0x86>
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d825      	bhi.n	8004a9c <RCCEx_PLLSAI2_Config+0xa4>
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d002      	beq.n	8004a5a <RCCEx_PLLSAI2_Config+0x62>
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d009      	beq.n	8004a6c <RCCEx_PLLSAI2_Config+0x74>
 8004a58:	e020      	b.n	8004a9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a5a:	4b55      	ldr	r3, [pc, #340]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d11d      	bne.n	8004aa2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a6a:	e01a      	b.n	8004aa2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a6c:	4b50      	ldr	r3, [pc, #320]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d116      	bne.n	8004aa6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a7c:	e013      	b.n	8004aa6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a7e:	4b4c      	ldr	r3, [pc, #304]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10f      	bne.n	8004aaa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a8a:	4b49      	ldr	r3, [pc, #292]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a9a:	e006      	b.n	8004aaa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa0:	e004      	b.n	8004aac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e002      	b.n	8004aac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e000      	b.n	8004aac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aaa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10d      	bne.n	8004ace <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ab2:	4b3f      	ldr	r3, [pc, #252]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6819      	ldr	r1, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	4939      	ldr	r1, [pc, #228]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d167      	bne.n	8004ba4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ad4:	4b36      	ldr	r3, [pc, #216]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a35      	ldr	r2, [pc, #212]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae0:	f7fc fd26 	bl	8001530 <HAL_GetTick>
 8004ae4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ae6:	e009      	b.n	8004afc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ae8:	f7fc fd22 	bl	8001530 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d902      	bls.n	8004afc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	73fb      	strb	r3, [r7, #15]
        break;
 8004afa:	e005      	b.n	8004b08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004afc:	4b2c      	ldr	r3, [pc, #176]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1ef      	bne.n	8004ae8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d14a      	bne.n	8004ba4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d111      	bne.n	8004b38 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b14:	4b26      	ldr	r3, [pc, #152]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6892      	ldr	r2, [r2, #8]
 8004b24:	0211      	lsls	r1, r2, #8
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68d2      	ldr	r2, [r2, #12]
 8004b2a:	0912      	lsrs	r2, r2, #4
 8004b2c:	0452      	lsls	r2, r2, #17
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	491f      	ldr	r1, [pc, #124]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	614b      	str	r3, [r1, #20]
 8004b36:	e011      	b.n	8004b5c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b38:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6892      	ldr	r2, [r2, #8]
 8004b48:	0211      	lsls	r1, r2, #8
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6912      	ldr	r2, [r2, #16]
 8004b4e:	0852      	lsrs	r2, r2, #1
 8004b50:	3a01      	subs	r2, #1
 8004b52:	0652      	lsls	r2, r2, #25
 8004b54:	430a      	orrs	r2, r1
 8004b56:	4916      	ldr	r1, [pc, #88]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b5c:	4b14      	ldr	r3, [pc, #80]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a13      	ldr	r2, [pc, #76]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b68:	f7fc fce2 	bl	8001530 <HAL_GetTick>
 8004b6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b6e:	e009      	b.n	8004b84 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b70:	f7fc fcde 	bl	8001530 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d902      	bls.n	8004b84 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	73fb      	strb	r3, [r7, #15]
          break;
 8004b82:	e005      	b.n	8004b90 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b84:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0ef      	beq.n	8004b70 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	4904      	ldr	r1, [pc, #16]	; (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000

08004bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e040      	b.n	8004c48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fc f854 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2224      	movs	r2, #36	; 0x24
 8004be0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0201 	bic.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fe74 	bl	80058e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fbb9 	bl	8005378 <UART_SetConfig>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e01b      	b.n	8004c48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fef3 	bl	8005a2c <UART_CheckIdleState>
 8004c46:	4603      	mov	r3, r0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	; 0x28
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d178      	bne.n	8004d5a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_UART_Transmit+0x24>
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e071      	b.n	8004d5c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2221      	movs	r2, #33	; 0x21
 8004c84:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c86:	f7fc fc53 	bl	8001530 <HAL_GetTick>
 8004c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	88fa      	ldrh	r2, [r7, #6]
 8004c90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	88fa      	ldrh	r2, [r7, #6]
 8004c98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca4:	d108      	bne.n	8004cb8 <HAL_UART_Transmit+0x68>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d104      	bne.n	8004cb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	e003      	b.n	8004cc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cc0:	e030      	b.n	8004d24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2180      	movs	r1, #128	; 0x80
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 ff55 	bl	8005b7c <UART_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e03c      	b.n	8004d5c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	881a      	ldrh	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cf4:	b292      	uxth	r2, r2
 8004cf6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	e008      	b.n	8004d12 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	781a      	ldrb	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	b292      	uxth	r2, r2
 8004d0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1c8      	bne.n	8004cc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2200      	movs	r2, #0
 8004d38:	2140      	movs	r1, #64	; 0x40
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 ff1e 	bl	8005b7c <UART_WaitOnFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d004      	beq.n	8004d50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e005      	b.n	8004d5c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e000      	b.n	8004d5c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004d5a:	2302      	movs	r3, #2
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b0ba      	sub	sp, #232	; 0xe8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d92:	4013      	ands	r3, r2
 8004d94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d115      	bne.n	8004dcc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00f      	beq.n	8004dcc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d009      	beq.n	8004dcc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 82ae 	beq.w	800531e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	4798      	blx	r3
      }
      return;
 8004dca:	e2a8      	b.n	800531e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8117 	beq.w	8005004 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004de2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004de6:	4b85      	ldr	r3, [pc, #532]	; (8004ffc <HAL_UART_IRQHandler+0x298>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 810a 	beq.w	8005004 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d011      	beq.n	8004e20 <HAL_UART_IRQHandler+0xbc>
 8004dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00b      	beq.n	8004e20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e16:	f043 0201 	orr.w	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d011      	beq.n	8004e50 <HAL_UART_IRQHandler+0xec>
 8004e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00b      	beq.n	8004e50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e46:	f043 0204 	orr.w	r2, r3, #4
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d011      	beq.n	8004e80 <HAL_UART_IRQHandler+0x11c>
 8004e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00b      	beq.n	8004e80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e76:	f043 0202 	orr.w	r2, r3, #2
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d017      	beq.n	8004ebc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d105      	bne.n	8004ea4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb2:	f043 0208 	orr.w	r2, r3, #8
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d012      	beq.n	8004eee <HAL_UART_IRQHandler+0x18a>
 8004ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ecc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00c      	beq.n	8004eee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee4:	f043 0220 	orr.w	r2, r3, #32
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8214 	beq.w	8005322 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00d      	beq.n	8004f22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d005      	beq.n	8004f46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d04f      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fe85 	bl	8005c56 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f56:	2b40      	cmp	r3, #64	; 0x40
 8004f58:	d141      	bne.n	8004fde <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3308      	adds	r3, #8
 8004f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3308      	adds	r3, #8
 8004f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1d9      	bne.n	8004f5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d013      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb2:	4a13      	ldr	r2, [pc, #76]	; (8005000 <HAL_UART_IRQHandler+0x29c>)
 8004fb4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fc fc37 	bl	800182e <HAL_DMA_Abort_IT>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d017      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd4:	e00f      	b.n	8004ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f9b8 	bl	800534c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fdc:	e00b      	b.n	8004ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f9b4 	bl	800534c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	e007      	b.n	8004ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f9b0 	bl	800534c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004ff4:	e195      	b.n	8005322 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff6:	bf00      	nop
    return;
 8004ff8:	e193      	b.n	8005322 <HAL_UART_IRQHandler+0x5be>
 8004ffa:	bf00      	nop
 8004ffc:	04000120 	.word	0x04000120
 8005000:	08005d1f 	.word	0x08005d1f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005008:	2b01      	cmp	r3, #1
 800500a:	f040 814e 	bne.w	80052aa <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 8147 	beq.w	80052aa <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800501c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8140 	beq.w	80052aa <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2210      	movs	r2, #16
 8005030:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	f040 80b8 	bne.w	80051b2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800504e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8167 	beq.w	8005326 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800505e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005062:	429a      	cmp	r2, r3
 8005064:	f080 815f 	bcs.w	8005326 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800506e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	f040 8086 	bne.w	8005190 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005098:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800509c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	461a      	mov	r2, r3
 80050aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1da      	bne.n	8005084 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3308      	adds	r3, #8
 80050d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3308      	adds	r3, #8
 80050ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e1      	bne.n	80050ce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800511a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800511c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3308      	adds	r3, #8
 800512a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800512e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005130:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005134:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800513c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e3      	bne.n	800510a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800515e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005160:	f023 0310 	bic.w	r3, r3, #16
 8005164:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005172:	65bb      	str	r3, [r7, #88]	; 0x58
 8005174:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005178:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e4      	bne.n	8005150 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518a:	4618      	mov	r0, r3
 800518c:	f7fc fb11 	bl	80017b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	4619      	mov	r1, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f8d8 	bl	8005360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051b0:	e0b9      	b.n	8005326 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051be:	b29b      	uxth	r3, r3
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 80ab 	beq.w	800532a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80051d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 80a6 	beq.w	800532a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005200:	647b      	str	r3, [r7, #68]	; 0x44
 8005202:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800520e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e4      	bne.n	80051de <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3308      	adds	r3, #8
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	623b      	str	r3, [r7, #32]
   return(result);
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	f023 0301 	bic.w	r3, r3, #1
 800522a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3308      	adds	r3, #8
 8005234:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005238:	633a      	str	r2, [r7, #48]	; 0x30
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800523e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e3      	bne.n	8005214 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	60fb      	str	r3, [r7, #12]
   return(result);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f023 0310 	bic.w	r3, r3, #16
 8005274:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005282:	61fb      	str	r3, [r7, #28]
 8005284:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	69b9      	ldr	r1, [r7, #24]
 8005288:	69fa      	ldr	r2, [r7, #28]
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	617b      	str	r3, [r7, #20]
   return(result);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e4      	bne.n	8005260 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800529c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052a0:	4619      	mov	r1, r3
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f85c 	bl	8005360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052a8:	e03f      	b.n	800532a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00e      	beq.n	80052d4 <HAL_UART_IRQHandler+0x570>
 80052b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d008      	beq.n	80052d4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80052ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fd66 	bl	8005d9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052d2:	e02d      	b.n	8005330 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80052d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00e      	beq.n	80052fe <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80052e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01c      	beq.n	800532e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	4798      	blx	r3
    }
    return;
 80052fc:	e017      	b.n	800532e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005306:	2b00      	cmp	r3, #0
 8005308:	d012      	beq.n	8005330 <HAL_UART_IRQHandler+0x5cc>
 800530a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00c      	beq.n	8005330 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fd17 	bl	8005d4a <UART_EndTransmit_IT>
    return;
 800531c:	e008      	b.n	8005330 <HAL_UART_IRQHandler+0x5cc>
      return;
 800531e:	bf00      	nop
 8005320:	e006      	b.n	8005330 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005322:	bf00      	nop
 8005324:	e004      	b.n	8005330 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005326:	bf00      	nop
 8005328:	e002      	b.n	8005330 <HAL_UART_IRQHandler+0x5cc>
      return;
 800532a:	bf00      	nop
 800532c:	e000      	b.n	8005330 <HAL_UART_IRQHandler+0x5cc>
    return;
 800532e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005330:	37e8      	adds	r7, #232	; 0xe8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop

08005338 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800537c:	b08a      	sub	sp, #40	; 0x28
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	431a      	orrs	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	431a      	orrs	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	4313      	orrs	r3, r2
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4ba4      	ldr	r3, [pc, #656]	; (8005638 <UART_SetConfig+0x2c0>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a99      	ldr	r2, [pc, #612]	; (800563c <UART_SetConfig+0x2c4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e0:	4313      	orrs	r3, r2
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f4:	430a      	orrs	r2, r1
 80053f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a90      	ldr	r2, [pc, #576]	; (8005640 <UART_SetConfig+0x2c8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d126      	bne.n	8005450 <UART_SetConfig+0xd8>
 8005402:	4b90      	ldr	r3, [pc, #576]	; (8005644 <UART_SetConfig+0x2cc>)
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005408:	f003 0303 	and.w	r3, r3, #3
 800540c:	2b03      	cmp	r3, #3
 800540e:	d81b      	bhi.n	8005448 <UART_SetConfig+0xd0>
 8005410:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <UART_SetConfig+0xa0>)
 8005412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005416:	bf00      	nop
 8005418:	08005429 	.word	0x08005429
 800541c:	08005439 	.word	0x08005439
 8005420:	08005431 	.word	0x08005431
 8005424:	08005441 	.word	0x08005441
 8005428:	2301      	movs	r3, #1
 800542a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542e:	e116      	b.n	800565e <UART_SetConfig+0x2e6>
 8005430:	2302      	movs	r3, #2
 8005432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005436:	e112      	b.n	800565e <UART_SetConfig+0x2e6>
 8005438:	2304      	movs	r3, #4
 800543a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543e:	e10e      	b.n	800565e <UART_SetConfig+0x2e6>
 8005440:	2308      	movs	r3, #8
 8005442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005446:	e10a      	b.n	800565e <UART_SetConfig+0x2e6>
 8005448:	2310      	movs	r3, #16
 800544a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800544e:	e106      	b.n	800565e <UART_SetConfig+0x2e6>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a7c      	ldr	r2, [pc, #496]	; (8005648 <UART_SetConfig+0x2d0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d138      	bne.n	80054cc <UART_SetConfig+0x154>
 800545a:	4b7a      	ldr	r3, [pc, #488]	; (8005644 <UART_SetConfig+0x2cc>)
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005460:	f003 030c 	and.w	r3, r3, #12
 8005464:	2b0c      	cmp	r3, #12
 8005466:	d82d      	bhi.n	80054c4 <UART_SetConfig+0x14c>
 8005468:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <UART_SetConfig+0xf8>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	080054a5 	.word	0x080054a5
 8005474:	080054c5 	.word	0x080054c5
 8005478:	080054c5 	.word	0x080054c5
 800547c:	080054c5 	.word	0x080054c5
 8005480:	080054b5 	.word	0x080054b5
 8005484:	080054c5 	.word	0x080054c5
 8005488:	080054c5 	.word	0x080054c5
 800548c:	080054c5 	.word	0x080054c5
 8005490:	080054ad 	.word	0x080054ad
 8005494:	080054c5 	.word	0x080054c5
 8005498:	080054c5 	.word	0x080054c5
 800549c:	080054c5 	.word	0x080054c5
 80054a0:	080054bd 	.word	0x080054bd
 80054a4:	2300      	movs	r3, #0
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054aa:	e0d8      	b.n	800565e <UART_SetConfig+0x2e6>
 80054ac:	2302      	movs	r3, #2
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b2:	e0d4      	b.n	800565e <UART_SetConfig+0x2e6>
 80054b4:	2304      	movs	r3, #4
 80054b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ba:	e0d0      	b.n	800565e <UART_SetConfig+0x2e6>
 80054bc:	2308      	movs	r3, #8
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c2:	e0cc      	b.n	800565e <UART_SetConfig+0x2e6>
 80054c4:	2310      	movs	r3, #16
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ca:	e0c8      	b.n	800565e <UART_SetConfig+0x2e6>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a5e      	ldr	r2, [pc, #376]	; (800564c <UART_SetConfig+0x2d4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d125      	bne.n	8005522 <UART_SetConfig+0x1aa>
 80054d6:	4b5b      	ldr	r3, [pc, #364]	; (8005644 <UART_SetConfig+0x2cc>)
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054e0:	2b30      	cmp	r3, #48	; 0x30
 80054e2:	d016      	beq.n	8005512 <UART_SetConfig+0x19a>
 80054e4:	2b30      	cmp	r3, #48	; 0x30
 80054e6:	d818      	bhi.n	800551a <UART_SetConfig+0x1a2>
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d00a      	beq.n	8005502 <UART_SetConfig+0x18a>
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d814      	bhi.n	800551a <UART_SetConfig+0x1a2>
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <UART_SetConfig+0x182>
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d008      	beq.n	800550a <UART_SetConfig+0x192>
 80054f8:	e00f      	b.n	800551a <UART_SetConfig+0x1a2>
 80054fa:	2300      	movs	r3, #0
 80054fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005500:	e0ad      	b.n	800565e <UART_SetConfig+0x2e6>
 8005502:	2302      	movs	r3, #2
 8005504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005508:	e0a9      	b.n	800565e <UART_SetConfig+0x2e6>
 800550a:	2304      	movs	r3, #4
 800550c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005510:	e0a5      	b.n	800565e <UART_SetConfig+0x2e6>
 8005512:	2308      	movs	r3, #8
 8005514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005518:	e0a1      	b.n	800565e <UART_SetConfig+0x2e6>
 800551a:	2310      	movs	r3, #16
 800551c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005520:	e09d      	b.n	800565e <UART_SetConfig+0x2e6>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a4a      	ldr	r2, [pc, #296]	; (8005650 <UART_SetConfig+0x2d8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d125      	bne.n	8005578 <UART_SetConfig+0x200>
 800552c:	4b45      	ldr	r3, [pc, #276]	; (8005644 <UART_SetConfig+0x2cc>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005532:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005536:	2bc0      	cmp	r3, #192	; 0xc0
 8005538:	d016      	beq.n	8005568 <UART_SetConfig+0x1f0>
 800553a:	2bc0      	cmp	r3, #192	; 0xc0
 800553c:	d818      	bhi.n	8005570 <UART_SetConfig+0x1f8>
 800553e:	2b80      	cmp	r3, #128	; 0x80
 8005540:	d00a      	beq.n	8005558 <UART_SetConfig+0x1e0>
 8005542:	2b80      	cmp	r3, #128	; 0x80
 8005544:	d814      	bhi.n	8005570 <UART_SetConfig+0x1f8>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <UART_SetConfig+0x1d8>
 800554a:	2b40      	cmp	r3, #64	; 0x40
 800554c:	d008      	beq.n	8005560 <UART_SetConfig+0x1e8>
 800554e:	e00f      	b.n	8005570 <UART_SetConfig+0x1f8>
 8005550:	2300      	movs	r3, #0
 8005552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005556:	e082      	b.n	800565e <UART_SetConfig+0x2e6>
 8005558:	2302      	movs	r3, #2
 800555a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800555e:	e07e      	b.n	800565e <UART_SetConfig+0x2e6>
 8005560:	2304      	movs	r3, #4
 8005562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005566:	e07a      	b.n	800565e <UART_SetConfig+0x2e6>
 8005568:	2308      	movs	r3, #8
 800556a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800556e:	e076      	b.n	800565e <UART_SetConfig+0x2e6>
 8005570:	2310      	movs	r3, #16
 8005572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005576:	e072      	b.n	800565e <UART_SetConfig+0x2e6>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a35      	ldr	r2, [pc, #212]	; (8005654 <UART_SetConfig+0x2dc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d12a      	bne.n	80055d8 <UART_SetConfig+0x260>
 8005582:	4b30      	ldr	r3, [pc, #192]	; (8005644 <UART_SetConfig+0x2cc>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005590:	d01a      	beq.n	80055c8 <UART_SetConfig+0x250>
 8005592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005596:	d81b      	bhi.n	80055d0 <UART_SetConfig+0x258>
 8005598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800559c:	d00c      	beq.n	80055b8 <UART_SetConfig+0x240>
 800559e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a2:	d815      	bhi.n	80055d0 <UART_SetConfig+0x258>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <UART_SetConfig+0x238>
 80055a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ac:	d008      	beq.n	80055c0 <UART_SetConfig+0x248>
 80055ae:	e00f      	b.n	80055d0 <UART_SetConfig+0x258>
 80055b0:	2300      	movs	r3, #0
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b6:	e052      	b.n	800565e <UART_SetConfig+0x2e6>
 80055b8:	2302      	movs	r3, #2
 80055ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055be:	e04e      	b.n	800565e <UART_SetConfig+0x2e6>
 80055c0:	2304      	movs	r3, #4
 80055c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c6:	e04a      	b.n	800565e <UART_SetConfig+0x2e6>
 80055c8:	2308      	movs	r3, #8
 80055ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ce:	e046      	b.n	800565e <UART_SetConfig+0x2e6>
 80055d0:	2310      	movs	r3, #16
 80055d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055d6:	e042      	b.n	800565e <UART_SetConfig+0x2e6>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a17      	ldr	r2, [pc, #92]	; (800563c <UART_SetConfig+0x2c4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d13a      	bne.n	8005658 <UART_SetConfig+0x2e0>
 80055e2:	4b18      	ldr	r3, [pc, #96]	; (8005644 <UART_SetConfig+0x2cc>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055f0:	d01a      	beq.n	8005628 <UART_SetConfig+0x2b0>
 80055f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055f6:	d81b      	bhi.n	8005630 <UART_SetConfig+0x2b8>
 80055f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055fc:	d00c      	beq.n	8005618 <UART_SetConfig+0x2a0>
 80055fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005602:	d815      	bhi.n	8005630 <UART_SetConfig+0x2b8>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <UART_SetConfig+0x298>
 8005608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560c:	d008      	beq.n	8005620 <UART_SetConfig+0x2a8>
 800560e:	e00f      	b.n	8005630 <UART_SetConfig+0x2b8>
 8005610:	2300      	movs	r3, #0
 8005612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005616:	e022      	b.n	800565e <UART_SetConfig+0x2e6>
 8005618:	2302      	movs	r3, #2
 800561a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561e:	e01e      	b.n	800565e <UART_SetConfig+0x2e6>
 8005620:	2304      	movs	r3, #4
 8005622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005626:	e01a      	b.n	800565e <UART_SetConfig+0x2e6>
 8005628:	2308      	movs	r3, #8
 800562a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562e:	e016      	b.n	800565e <UART_SetConfig+0x2e6>
 8005630:	2310      	movs	r3, #16
 8005632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005636:	e012      	b.n	800565e <UART_SetConfig+0x2e6>
 8005638:	efff69f3 	.word	0xefff69f3
 800563c:	40008000 	.word	0x40008000
 8005640:	40013800 	.word	0x40013800
 8005644:	40021000 	.word	0x40021000
 8005648:	40004400 	.word	0x40004400
 800564c:	40004800 	.word	0x40004800
 8005650:	40004c00 	.word	0x40004c00
 8005654:	40005000 	.word	0x40005000
 8005658:	2310      	movs	r3, #16
 800565a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a9f      	ldr	r2, [pc, #636]	; (80058e0 <UART_SetConfig+0x568>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d17a      	bne.n	800575e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005668:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800566c:	2b08      	cmp	r3, #8
 800566e:	d824      	bhi.n	80056ba <UART_SetConfig+0x342>
 8005670:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <UART_SetConfig+0x300>)
 8005672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005676:	bf00      	nop
 8005678:	0800569d 	.word	0x0800569d
 800567c:	080056bb 	.word	0x080056bb
 8005680:	080056a5 	.word	0x080056a5
 8005684:	080056bb 	.word	0x080056bb
 8005688:	080056ab 	.word	0x080056ab
 800568c:	080056bb 	.word	0x080056bb
 8005690:	080056bb 	.word	0x080056bb
 8005694:	080056bb 	.word	0x080056bb
 8005698:	080056b3 	.word	0x080056b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800569c:	f7fe fd32 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 80056a0:	61f8      	str	r0, [r7, #28]
        break;
 80056a2:	e010      	b.n	80056c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a4:	4b8f      	ldr	r3, [pc, #572]	; (80058e4 <UART_SetConfig+0x56c>)
 80056a6:	61fb      	str	r3, [r7, #28]
        break;
 80056a8:	e00d      	b.n	80056c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056aa:	f7fe fc93 	bl	8003fd4 <HAL_RCC_GetSysClockFreq>
 80056ae:	61f8      	str	r0, [r7, #28]
        break;
 80056b0:	e009      	b.n	80056c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b6:	61fb      	str	r3, [r7, #28]
        break;
 80056b8:	e005      	b.n	80056c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 80fb 	beq.w	80058c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	4413      	add	r3, r2
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d305      	bcc.n	80056ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056e4:	69fa      	ldr	r2, [r7, #28]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d903      	bls.n	80056f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056f0:	e0e8      	b.n	80058c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	2200      	movs	r2, #0
 80056f6:	461c      	mov	r4, r3
 80056f8:	4615      	mov	r5, r2
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	f04f 0300 	mov.w	r3, #0
 8005702:	022b      	lsls	r3, r5, #8
 8005704:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005708:	0222      	lsls	r2, r4, #8
 800570a:	68f9      	ldr	r1, [r7, #12]
 800570c:	6849      	ldr	r1, [r1, #4]
 800570e:	0849      	lsrs	r1, r1, #1
 8005710:	2000      	movs	r0, #0
 8005712:	4688      	mov	r8, r1
 8005714:	4681      	mov	r9, r0
 8005716:	eb12 0a08 	adds.w	sl, r2, r8
 800571a:	eb43 0b09 	adc.w	fp, r3, r9
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	603b      	str	r3, [r7, #0]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800572c:	4650      	mov	r0, sl
 800572e:	4659      	mov	r1, fp
 8005730:	f7fa fda6 	bl	8000280 <__aeabi_uldivmod>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4613      	mov	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005742:	d308      	bcc.n	8005756 <UART_SetConfig+0x3de>
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800574a:	d204      	bcs.n	8005756 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	60da      	str	r2, [r3, #12]
 8005754:	e0b6      	b.n	80058c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800575c:	e0b2      	b.n	80058c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005766:	d15e      	bne.n	8005826 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005768:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800576c:	2b08      	cmp	r3, #8
 800576e:	d828      	bhi.n	80057c2 <UART_SetConfig+0x44a>
 8005770:	a201      	add	r2, pc, #4	; (adr r2, 8005778 <UART_SetConfig+0x400>)
 8005772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005776:	bf00      	nop
 8005778:	0800579d 	.word	0x0800579d
 800577c:	080057a5 	.word	0x080057a5
 8005780:	080057ad 	.word	0x080057ad
 8005784:	080057c3 	.word	0x080057c3
 8005788:	080057b3 	.word	0x080057b3
 800578c:	080057c3 	.word	0x080057c3
 8005790:	080057c3 	.word	0x080057c3
 8005794:	080057c3 	.word	0x080057c3
 8005798:	080057bb 	.word	0x080057bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800579c:	f7fe fcb2 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 80057a0:	61f8      	str	r0, [r7, #28]
        break;
 80057a2:	e014      	b.n	80057ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a4:	f7fe fcc4 	bl	8004130 <HAL_RCC_GetPCLK2Freq>
 80057a8:	61f8      	str	r0, [r7, #28]
        break;
 80057aa:	e010      	b.n	80057ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057ac:	4b4d      	ldr	r3, [pc, #308]	; (80058e4 <UART_SetConfig+0x56c>)
 80057ae:	61fb      	str	r3, [r7, #28]
        break;
 80057b0:	e00d      	b.n	80057ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057b2:	f7fe fc0f 	bl	8003fd4 <HAL_RCC_GetSysClockFreq>
 80057b6:	61f8      	str	r0, [r7, #28]
        break;
 80057b8:	e009      	b.n	80057ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057be:	61fb      	str	r3, [r7, #28]
        break;
 80057c0:	e005      	b.n	80057ce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d077      	beq.n	80058c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	005a      	lsls	r2, r3, #1
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	441a      	add	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b0f      	cmp	r3, #15
 80057ee:	d916      	bls.n	800581e <UART_SetConfig+0x4a6>
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f6:	d212      	bcs.n	800581e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	f023 030f 	bic.w	r3, r3, #15
 8005800:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	b29b      	uxth	r3, r3
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	b29a      	uxth	r2, r3
 800580e:	8afb      	ldrh	r3, [r7, #22]
 8005810:	4313      	orrs	r3, r2
 8005812:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	8afa      	ldrh	r2, [r7, #22]
 800581a:	60da      	str	r2, [r3, #12]
 800581c:	e052      	b.n	80058c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005824:	e04e      	b.n	80058c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005826:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800582a:	2b08      	cmp	r3, #8
 800582c:	d827      	bhi.n	800587e <UART_SetConfig+0x506>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UART_SetConfig+0x4bc>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	08005859 	.word	0x08005859
 8005838:	08005861 	.word	0x08005861
 800583c:	08005869 	.word	0x08005869
 8005840:	0800587f 	.word	0x0800587f
 8005844:	0800586f 	.word	0x0800586f
 8005848:	0800587f 	.word	0x0800587f
 800584c:	0800587f 	.word	0x0800587f
 8005850:	0800587f 	.word	0x0800587f
 8005854:	08005877 	.word	0x08005877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fe fc54 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 800585c:	61f8      	str	r0, [r7, #28]
        break;
 800585e:	e014      	b.n	800588a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005860:	f7fe fc66 	bl	8004130 <HAL_RCC_GetPCLK2Freq>
 8005864:	61f8      	str	r0, [r7, #28]
        break;
 8005866:	e010      	b.n	800588a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005868:	4b1e      	ldr	r3, [pc, #120]	; (80058e4 <UART_SetConfig+0x56c>)
 800586a:	61fb      	str	r3, [r7, #28]
        break;
 800586c:	e00d      	b.n	800588a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800586e:	f7fe fbb1 	bl	8003fd4 <HAL_RCC_GetSysClockFreq>
 8005872:	61f8      	str	r0, [r7, #28]
        break;
 8005874:	e009      	b.n	800588a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800587a:	61fb      	str	r3, [r7, #28]
        break;
 800587c:	e005      	b.n	800588a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005888:	bf00      	nop
    }

    if (pclk != 0U)
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d019      	beq.n	80058c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	085a      	lsrs	r2, r3, #1
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	441a      	add	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	d909      	bls.n	80058be <UART_SetConfig+0x546>
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b0:	d205      	bcs.n	80058be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60da      	str	r2, [r3, #12]
 80058bc:	e002      	b.n	80058c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80058d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3728      	adds	r7, #40	; 0x28
 80058d8:	46bd      	mov	sp, r7
 80058da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058de:	bf00      	nop
 80058e0:	40008000 	.word	0x40008000
 80058e4:	00f42400 	.word	0x00f42400

080058e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01a      	beq.n	80059fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059e6:	d10a      	bne.n	80059fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]
  }
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b098      	sub	sp, #96	; 0x60
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a3c:	f7fb fd78 	bl	8001530 <HAL_GetTick>
 8005a40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d12e      	bne.n	8005aae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f88c 	bl	8005b7c <UART_WaitOnFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d021      	beq.n	8005aae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a88:	647b      	str	r3, [r7, #68]	; 0x44
 8005a8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e6      	bne.n	8005a6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e062      	b.n	8005b74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d149      	bne.n	8005b50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005abc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f856 	bl	8005b7c <UART_WaitOnFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d03c      	beq.n	8005b50 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af4:	633b      	str	r3, [r7, #48]	; 0x30
 8005af6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005afc:	e841 2300 	strex	r3, r2, [r1]
 8005b00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e6      	bne.n	8005ad6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0301 	bic.w	r3, r3, #1
 8005b1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3308      	adds	r3, #8
 8005b26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b28:	61fa      	str	r2, [r7, #28]
 8005b2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	69b9      	ldr	r1, [r7, #24]
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	617b      	str	r3, [r7, #20]
   return(result);
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e5      	bne.n	8005b08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e011      	b.n	8005b74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3758      	adds	r7, #88	; 0x58
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b8c:	e04f      	b.n	8005c2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b94:	d04b      	beq.n	8005c2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b96:	f7fb fccb 	bl	8001530 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d302      	bcc.n	8005bac <UART_WaitOnFlagUntilTimeout+0x30>
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e04e      	b.n	8005c4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d037      	beq.n	8005c2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b80      	cmp	r3, #128	; 0x80
 8005bc2:	d034      	beq.n	8005c2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d031      	beq.n	8005c2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d110      	bne.n	8005bfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2208      	movs	r2, #8
 8005bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f838 	bl	8005c56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2208      	movs	r2, #8
 8005bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e029      	b.n	8005c4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c08:	d111      	bne.n	8005c2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f81e 	bl	8005c56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e00f      	b.n	8005c4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4013      	ands	r3, r2
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	bf0c      	ite	eq
 8005c3e:	2301      	moveq	r3, #1
 8005c40:	2300      	movne	r3, #0
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d0a0      	beq.n	8005b8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b095      	sub	sp, #84	; 0x54
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e6      	bne.n	8005c5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3308      	adds	r3, #8
 8005c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	e853 3f00 	ldrex	r3, [r3]
 8005c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3308      	adds	r3, #8
 8005cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e5      	bne.n	8005c90 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d118      	bne.n	8005cfe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f023 0310 	bic.w	r3, r3, #16
 8005ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6979      	ldr	r1, [r7, #20]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e6      	bne.n	8005ccc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d12:	bf00      	nop
 8005d14:	3754      	adds	r7, #84	; 0x54
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f7ff fb05 	bl	800534c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b088      	sub	sp, #32
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	61bb      	str	r3, [r7, #24]
 8005d72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6979      	ldr	r1, [r7, #20]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e6      	bne.n	8005d52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff fad1 	bl	8005338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d96:	bf00      	nop
 8005d98:	3720      	adds	r7, #32
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005db2:	b084      	sub	sp, #16
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	f107 001c 	add.w	r0, r7, #28
 8005dc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f9c1 	bl	8006158 <USB_CoreReset>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d106      	bne.n	8005dee <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
 8005dec:	e005      	b.n	8005dfa <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e06:	b004      	add	sp, #16
 8005e08:	4770      	bx	lr

08005e0a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f043 0201 	orr.w	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f023 0201 	bic.w	r2, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	460b      	mov	r3, r1
 8005e58:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d115      	bne.n	8005e9c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e7c:	200a      	movs	r0, #10
 8005e7e:	f7fb fb63 	bl	8001548 <HAL_Delay>
      ms += 10U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	330a      	adds	r3, #10
 8005e86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f957 	bl	800613c <USB_GetMode>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d01e      	beq.n	8005ed2 <USB_SetCurrentMode+0x84>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2bc7      	cmp	r3, #199	; 0xc7
 8005e98:	d9f0      	bls.n	8005e7c <USB_SetCurrentMode+0x2e>
 8005e9a:	e01a      	b.n	8005ed2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d115      	bne.n	8005ece <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005eae:	200a      	movs	r0, #10
 8005eb0:	f7fb fb4a 	bl	8001548 <HAL_Delay>
      ms += 10U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	330a      	adds	r3, #10
 8005eb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f93e 	bl	800613c <USB_GetMode>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <USB_SetCurrentMode+0x84>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2bc7      	cmp	r3, #199	; 0xc7
 8005eca:	d9f0      	bls.n	8005eae <USB_SetCurrentMode+0x60>
 8005ecc:	e001      	b.n	8005ed2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e005      	b.n	8005ede <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2bc8      	cmp	r3, #200	; 0xc8
 8005ed6:	d101      	bne.n	8005edc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4a13      	ldr	r2, [pc, #76]	; (8005f4c <USB_FlushTxFifo+0x64>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d901      	bls.n	8005f08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e01b      	b.n	8005f40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	daf2      	bge.n	8005ef6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	019b      	lsls	r3, r3, #6
 8005f18:	f043 0220 	orr.w	r2, r3, #32
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3301      	adds	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4a08      	ldr	r2, [pc, #32]	; (8005f4c <USB_FlushTxFifo+0x64>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d901      	bls.n	8005f32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e006      	b.n	8005f40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	d0f0      	beq.n	8005f20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	00030d40 	.word	0x00030d40

08005f50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4a11      	ldr	r2, [pc, #68]	; (8005fac <USB_FlushRxFifo+0x5c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d901      	bls.n	8005f6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e018      	b.n	8005fa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	daf2      	bge.n	8005f5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2210      	movs	r2, #16
 8005f7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4a08      	ldr	r2, [pc, #32]	; (8005fac <USB_FlushRxFifo+0x5c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d901      	bls.n	8005f92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e006      	b.n	8005fa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0310 	and.w	r3, r3, #16
 8005f9a:	2b10      	cmp	r3, #16
 8005f9c:	d0f0      	beq.n	8005f80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	00030d40 	.word	0x00030d40

08005fb0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b089      	sub	sp, #36	; 0x24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	4611      	mov	r1, r2
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	71fb      	strb	r3, [r7, #7]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005fce:	88bb      	ldrh	r3, [r7, #4]
 8005fd0:	3303      	adds	r3, #3
 8005fd2:	089b      	lsrs	r3, r3, #2
 8005fd4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61bb      	str	r3, [r7, #24]
 8005fda:	e018      	b.n	800600e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	031a      	lsls	r2, r3, #12
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe8:	461a      	mov	r2, r3
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	3301      	adds	r3, #1
 8006000:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	3301      	adds	r3, #1
 8006006:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	3301      	adds	r3, #1
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	429a      	cmp	r2, r3
 8006014:	d3e2      	bcc.n	8005fdc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3724      	adds	r7, #36	; 0x24
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006024:	b480      	push	{r7}
 8006026:	b08b      	sub	sp, #44	; 0x2c
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	4613      	mov	r3, r2
 8006030:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	089b      	lsrs	r3, r3, #2
 800603e:	b29b      	uxth	r3, r3
 8006040:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800604a:	2300      	movs	r3, #0
 800604c:	623b      	str	r3, [r7, #32]
 800604e:	e014      	b.n	800607a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	601a      	str	r2, [r3, #0]
    pDest++;
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	3301      	adds	r3, #1
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	3301      	adds	r3, #1
 8006066:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	3301      	adds	r3, #1
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	3301      	adds	r3, #1
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	3301      	adds	r3, #1
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	6a3a      	ldr	r2, [r7, #32]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	429a      	cmp	r2, r3
 8006080:	d3e6      	bcc.n	8006050 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006082:	8bfb      	ldrh	r3, [r7, #30]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01e      	beq.n	80060c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006092:	461a      	mov	r2, r3
 8006094:	f107 0310 	add.w	r3, r7, #16
 8006098:	6812      	ldr	r2, [r2, #0]
 800609a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	fa22 f303 	lsr.w	r3, r2, r3
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	701a      	strb	r2, [r3, #0]
      i++;
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	3301      	adds	r3, #1
 80060b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	3301      	adds	r3, #1
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80060ba:	8bfb      	ldrh	r3, [r7, #30]
 80060bc:	3b01      	subs	r3, #1
 80060be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060c0:	8bfb      	ldrh	r3, [r7, #30]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1ea      	bne.n	800609c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	372c      	adds	r7, #44	; 0x2c
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4013      	ands	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060ec:	68fb      	ldr	r3, [r7, #12]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b085      	sub	sp, #20
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	460b      	mov	r3, r1
 8006104:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4413      	add	r3, r2
 8006112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4413      	add	r3, r2
 8006122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	4013      	ands	r3, r2
 800612c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800612e:	68bb      	ldr	r3, [r7, #8]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	f003 0301 	and.w	r3, r3, #1
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3301      	adds	r3, #1
 8006168:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4a13      	ldr	r2, [pc, #76]	; (80061bc <USB_CoreReset+0x64>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d901      	bls.n	8006176 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e01b      	b.n	80061ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	daf2      	bge.n	8006164 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f043 0201 	orr.w	r2, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3301      	adds	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4a09      	ldr	r2, [pc, #36]	; (80061bc <USB_CoreReset+0x64>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d901      	bls.n	80061a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e006      	b.n	80061ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d0f0      	beq.n	800618e <USB_CoreReset+0x36>

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	00030d40 	.word	0x00030d40

080061c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061c0:	b084      	sub	sp, #16
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b086      	sub	sp, #24
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061e0:	461a      	mov	r2, r3
 80061e2:	2300      	movs	r3, #0
 80061e4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800620c:	f023 0304 	bic.w	r3, r3, #4
 8006210:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006212:	2110      	movs	r1, #16
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff fe67 	bl	8005ee8 <USB_FlushTxFifo>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff fe93 	bl	8005f50 <USB_FlushRxFifo>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006234:	2300      	movs	r3, #0
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	e015      	b.n	8006266 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4413      	add	r3, r2
 8006242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006246:	461a      	mov	r2, r3
 8006248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800624c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625a:	461a      	mov	r2, r3
 800625c:	2300      	movs	r3, #0
 800625e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	3301      	adds	r3, #1
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	429a      	cmp	r2, r3
 800626c:	d3e5      	bcc.n	800623a <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800627a:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2280      	movs	r2, #128	; 0x80
 8006280:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a0c      	ldr	r2, [pc, #48]	; (80062b8 <USB_HostInit+0xf8>)
 8006286:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a0c      	ldr	r2, [pc, #48]	; (80062bc <USB_HostInit+0xfc>)
 800628c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	f043 0210 	orr.w	r2, r3, #16
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699a      	ldr	r2, [r3, #24]
 80062a0:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <USB_HostInit+0x100>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062b4:	b004      	add	sp, #16
 80062b6:	4770      	bx	lr
 80062b8:	00600080 	.word	0x00600080
 80062bc:	004000e0 	.word	0x004000e0
 80062c0:	a3200008 	.word	0xa3200008

080062c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	460b      	mov	r3, r1
 80062ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	68f9      	ldr	r1, [r7, #12]
 80062f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062fc:	4313      	orrs	r3, r2
 80062fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d107      	bne.n	8006316 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800630c:	461a      	mov	r2, r3
 800630e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006312:	6053      	str	r3, [r2, #4]
 8006314:	e00c      	b.n	8006330 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d107      	bne.n	800632c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006322:	461a      	mov	r2, r3
 8006324:	f241 7370 	movw	r3, #6000	; 0x1770
 8006328:	6053      	str	r3, [r2, #4]
 800632a:	e001      	b.n	8006330 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e000      	b.n	8006332 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800635e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800636c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800636e:	2064      	movs	r0, #100	; 0x64
 8006370:	f7fb f8ea 	bl	8001548 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800637c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006380:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006382:	200a      	movs	r0, #10
 8006384:	f7fb f8e0 	bl	8001548 <HAL_Delay>

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006392:	b480      	push	{r7}
 8006394:	b085      	sub	sp, #20
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80063b6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <USB_DriveVbus+0x44>
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d106      	bne.n	80063d6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063d4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e0:	d109      	bne.n	80063f6 <USB_DriveVbus+0x64>
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d106      	bne.n	80063f6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063f4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	0c5b      	lsrs	r3, r3, #17
 8006422:	f003 0303 	and.w	r3, r3, #3
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	b29b      	uxth	r3, r3
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	4608      	mov	r0, r1
 800645e:	4611      	mov	r1, r2
 8006460:	461a      	mov	r2, r3
 8006462:	4603      	mov	r3, r0
 8006464:	70fb      	strb	r3, [r7, #3]
 8006466:	460b      	mov	r3, r1
 8006468:	70bb      	strb	r3, [r7, #2]
 800646a:	4613      	mov	r3, r2
 800646c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006476:	78fb      	ldrb	r3, [r7, #3]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	4413      	add	r3, r2
 800647e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006482:	461a      	mov	r2, r3
 8006484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006488:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800648a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800648e:	2b03      	cmp	r3, #3
 8006490:	d867      	bhi.n	8006562 <USB_HC_Init+0x10e>
 8006492:	a201      	add	r2, pc, #4	; (adr r2, 8006498 <USB_HC_Init+0x44>)
 8006494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006498:	080064a9 	.word	0x080064a9
 800649c:	08006525 	.word	0x08006525
 80064a0:	080064a9 	.word	0x080064a9
 80064a4:	080064e7 	.word	0x080064e7
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b4:	461a      	mov	r2, r3
 80064b6:	f240 439d 	movw	r3, #1181	; 0x49d
 80064ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80064bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	da51      	bge.n	8006568 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	78fa      	ldrb	r2, [r7, #3]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e2:	60d3      	str	r3, [r2, #12]
      }
      break;
 80064e4:	e040      	b.n	8006568 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f2:	461a      	mov	r2, r3
 80064f4:	f240 639d 	movw	r3, #1693	; 0x69d
 80064f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80064fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	da34      	bge.n	800656c <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006502:	78fb      	ldrb	r3, [r7, #3]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	4413      	add	r3, r2
 800650a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	78fa      	ldrb	r2, [r7, #3]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	440a      	add	r2, r1
 8006518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800651c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006520:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006522:	e023      	b.n	800656c <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	4413      	add	r3, r2
 800652c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006530:	461a      	mov	r2, r3
 8006532:	f240 2325 	movw	r3, #549	; 0x225
 8006536:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006538:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800653c:	2b00      	cmp	r3, #0
 800653e:	da17      	bge.n	8006570 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	4413      	add	r3, r2
 8006548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	78fa      	ldrb	r2, [r7, #3]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	440a      	add	r2, r1
 8006556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800655a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800655e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006560:	e006      	b.n	8006570 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	77fb      	strb	r3, [r7, #31]
      break;
 8006566:	e004      	b.n	8006572 <USB_HC_Init+0x11e>
      break;
 8006568:	bf00      	nop
 800656a:	e002      	b.n	8006572 <USB_HC_Init+0x11e>
      break;
 800656c:	bf00      	nop
 800656e:	e000      	b.n	8006572 <USB_HC_Init+0x11e>
      break;
 8006570:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4413      	add	r3, r2
 800657a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	78fa      	ldrb	r2, [r7, #3]
 8006582:	0151      	lsls	r1, r2, #5
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	440a      	add	r2, r1
 8006588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800658c:	f043 0302 	orr.w	r3, r3, #2
 8006590:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	78fb      	ldrb	r3, [r7, #3]
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	2101      	movs	r1, #1
 80065a2:	fa01 f303 	lsl.w	r3, r1, r3
 80065a6:	6939      	ldr	r1, [r7, #16]
 80065a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065ac:	4313      	orrs	r3, r2
 80065ae:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80065bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	da03      	bge.n	80065cc <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80065c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	e001      	b.n	80065d0 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff ff17 	bl	8006404 <USB_GetHostSpeed>
 80065d6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80065d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d106      	bne.n	80065ee <USB_HC_Init+0x19a>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d003      	beq.n	80065ee <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80065e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	e001      	b.n	80065f2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065f2:	787b      	ldrb	r3, [r7, #1]
 80065f4:	059b      	lsls	r3, r3, #22
 80065f6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80065fa:	78bb      	ldrb	r3, [r7, #2]
 80065fc:	02db      	lsls	r3, r3, #11
 80065fe:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006602:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006604:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006608:	049b      	lsls	r3, r3, #18
 800660a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800660e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006610:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006612:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006616:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	431a      	orrs	r2, r3
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006620:	78fa      	ldrb	r2, [r7, #3]
 8006622:	0151      	lsls	r1, r2, #5
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	440a      	add	r2, r1
 8006628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800662c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006630:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006632:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006636:	2b03      	cmp	r3, #3
 8006638:	d003      	beq.n	8006642 <USB_HC_Init+0x1ee>
 800663a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800663e:	2b01      	cmp	r3, #1
 8006640:	d10f      	bne.n	8006662 <USB_HC_Init+0x20e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	78fa      	ldrb	r2, [r7, #3]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	440a      	add	r2, r1
 8006658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006660:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006662:	7ffb      	ldrb	r3, [r7, #31]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3720      	adds	r7, #32
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b088      	sub	sp, #32
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	785b      	ldrb	r3, [r3, #1]
 800667e:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006684:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d018      	beq.n	80066c0 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	8952      	ldrh	r2, [r2, #10]
 8006696:	4413      	add	r3, r2
 8006698:	3b01      	subs	r3, #1
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	8952      	ldrh	r2, [r2, #10]
 800669e:	fbb3 f3f2 	udiv	r3, r3, r2
 80066a2:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80066a4:	8bfa      	ldrh	r2, [r7, #30]
 80066a6:	8a7b      	ldrh	r3, [r7, #18]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d90b      	bls.n	80066c4 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80066ac:	8a7b      	ldrh	r3, [r7, #18]
 80066ae:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066b0:	8bfb      	ldrh	r3, [r7, #30]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	8952      	ldrh	r2, [r2, #10]
 80066b6:	fb03 f202 	mul.w	r2, r3, r2
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	615a      	str	r2, [r3, #20]
 80066be:	e001      	b.n	80066c4 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80066c0:	2301      	movs	r3, #1
 80066c2:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	78db      	ldrb	r3, [r3, #3]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d007      	beq.n	80066dc <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066cc:	8bfb      	ldrh	r3, [r7, #30]
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	8952      	ldrh	r2, [r2, #10]
 80066d2:	fb03 f202 	mul.w	r2, r3, r2
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	615a      	str	r2, [r3, #20]
 80066da:	e003      	b.n	80066e4 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	699a      	ldr	r2, [r3, #24]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	615a      	str	r2, [r3, #20]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066ec:	8bfb      	ldrh	r3, [r7, #30]
 80066ee:	04d9      	lsls	r1, r3, #19
 80066f0:	4b59      	ldr	r3, [pc, #356]	; (8006858 <USB_HC_StartXfer+0x1ec>)
 80066f2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80066f4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	7b1b      	ldrb	r3, [r3, #12]
 80066fa:	075b      	lsls	r3, r3, #29
 80066fc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006700:	6979      	ldr	r1, [r7, #20]
 8006702:	0148      	lsls	r0, r1, #5
 8006704:	69b9      	ldr	r1, [r7, #24]
 8006706:	4401      	add	r1, r0
 8006708:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800670c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800670e:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	bf0c      	ite	eq
 8006720:	2301      	moveq	r3, #1
 8006722:	2300      	movne	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	4413      	add	r3, r2
 8006730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	0151      	lsls	r1, r2, #5
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	440a      	add	r2, r1
 800673e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006746:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	4413      	add	r3, r2
 8006750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	7c7b      	ldrb	r3, [r7, #17]
 8006758:	075b      	lsls	r3, r3, #29
 800675a:	6979      	ldr	r1, [r7, #20]
 800675c:	0148      	lsls	r0, r1, #5
 800675e:	69b9      	ldr	r1, [r7, #24]
 8006760:	4401      	add	r1, r0
 8006762:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006766:	4313      	orrs	r3, r2
 8006768:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	4413      	add	r3, r2
 8006772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006780:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	78db      	ldrb	r3, [r3, #3]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	e003      	b.n	800679c <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800679a:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067a2:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b0:	461a      	mov	r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	78db      	ldrb	r3, [r3, #3]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d147      	bne.n	800684e <USB_HC_StartXfer+0x1e2>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d043      	beq.n	800684e <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	7a1b      	ldrb	r3, [r3, #8]
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d830      	bhi.n	8006830 <USB_HC_StartXfer+0x1c4>
 80067ce:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <USB_HC_StartXfer+0x168>)
 80067d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d4:	080067e5 	.word	0x080067e5
 80067d8:	08006809 	.word	0x08006809
 80067dc:	080067e5 	.word	0x080067e5
 80067e0:	08006809 	.word	0x08006809
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	3303      	adds	r3, #3
 80067ea:	089b      	lsrs	r3, r3, #2
 80067ec:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80067ee:	89fa      	ldrh	r2, [r7, #14]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d91c      	bls.n	8006834 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	f043 0220 	orr.w	r2, r3, #32
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	619a      	str	r2, [r3, #24]
        }
        break;
 8006806:	e015      	b.n	8006834 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	3303      	adds	r3, #3
 800680e:	089b      	lsrs	r3, r3, #2
 8006810:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006812:	89fa      	ldrh	r2, [r7, #14]
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	b29b      	uxth	r3, r3
 800681e:	429a      	cmp	r2, r3
 8006820:	d90a      	bls.n	8006838 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	619a      	str	r2, [r3, #24]
        }
        break;
 800682e:	e003      	b.n	8006838 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8006830:	bf00      	nop
 8006832:	e002      	b.n	800683a <USB_HC_StartXfer+0x1ce>
        break;
 8006834:	bf00      	nop
 8006836:	e000      	b.n	800683a <USB_HC_StartXfer+0x1ce>
        break;
 8006838:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6919      	ldr	r1, [r3, #16]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	785a      	ldrb	r2, [r3, #1]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	b29b      	uxth	r3, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7ff fbb1 	bl	8005fb0 <USB_WritePacket>
  }

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	1ff80000 	.word	0x1ff80000

0800685c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	b29b      	uxth	r3, r3
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800687e:	b480      	push	{r7}
 8006880:	b089      	sub	sp, #36	; 0x24
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	460b      	mov	r3, r1
 8006888:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	4413      	add	r3, r2
 800689e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	0c9b      	lsrs	r3, r3, #18
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	0fdb      	lsrs	r3, r3, #31
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	0fdb      	lsrs	r3, r3, #31
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f003 0320 	and.w	r3, r3, #32
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	d10d      	bne.n	8006900 <USB_HC_Halt+0x82>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10a      	bne.n	8006900 <USB_HC_Halt+0x82>
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d002      	beq.n	80068fc <USB_HC_Halt+0x7e>
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d101      	bne.n	8006900 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	e0d8      	b.n	8006ab2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <USB_HC_Halt+0x8e>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b02      	cmp	r3, #2
 800690a:	d173      	bne.n	80069f4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	4413      	add	r3, r2
 8006914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	0151      	lsls	r1, r2, #5
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	440a      	add	r2, r1
 8006922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800692a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b00      	cmp	r3, #0
 8006936:	d14a      	bne.n	80069ce <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d133      	bne.n	80069ac <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	4413      	add	r3, r2
 800694c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	0151      	lsls	r1, r2, #5
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	440a      	add	r2, r1
 800695a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800695e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006962:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	4413      	add	r3, r2
 800696c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	440a      	add	r2, r1
 800697a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800697e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006982:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	3301      	adds	r3, #1
 8006988:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006990:	d82e      	bhi.n	80069f0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	4413      	add	r3, r2
 800699a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069a8:	d0ec      	beq.n	8006984 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069aa:	e081      	b.n	8006ab0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	0151      	lsls	r1, r2, #5
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	440a      	add	r2, r1
 80069c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069ca:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069cc:	e070      	b.n	8006ab0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069ee:	e05f      	b.n	8006ab0 <USB_HC_Halt+0x232>
            break;
 80069f0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069f2:	e05d      	b.n	8006ab0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	69fa      	ldr	r2, [r7, #28]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a12:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d133      	bne.n	8006a8c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	0151      	lsls	r1, r2, #5
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	440a      	add	r2, r1
 8006a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a42:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	0151      	lsls	r1, r2, #5
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	440a      	add	r2, r1
 8006a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a62:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	3301      	adds	r3, #1
 8006a68:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a70:	d81d      	bhi.n	8006aae <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a88:	d0ec      	beq.n	8006a64 <USB_HC_Halt+0x1e6>
 8006a8a:	e011      	b.n	8006ab0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	0151      	lsls	r1, r2, #5
 8006a9e:	69fa      	ldr	r2, [r7, #28]
 8006aa0:	440a      	add	r2, r1
 8006aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	e000      	b.n	8006ab0 <USB_HC_Halt+0x232>
          break;
 8006aae:	bf00      	nop
    }
  }

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3724      	adds	r7, #36	; 0x24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b088      	sub	sp, #32
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff f9aa 	bl	8005e2c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ad8:	2110      	movs	r1, #16
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff fa04 	bl	8005ee8 <USB_FlushTxFifo>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff fa30 	bl	8005f50 <USB_FlushRxFifo>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006afa:	2300      	movs	r3, #0
 8006afc:	61bb      	str	r3, [r7, #24]
 8006afe:	e01f      	b.n	8006b40 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b16:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b1e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b26:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b34:	461a      	mov	r2, r3
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	61bb      	str	r3, [r7, #24]
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	2b0f      	cmp	r3, #15
 8006b44:	d9dc      	bls.n	8006b00 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b46:	2300      	movs	r3, #0
 8006b48:	61bb      	str	r3, [r7, #24]
 8006b4a:	e034      	b.n	8006bb6 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b62:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b6a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b72:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b80:	461a      	mov	r2, r3
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b92:	d80c      	bhi.n	8006bae <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006baa:	d0ec      	beq.n	8006b86 <USB_StopHost+0xc8>
 8006bac:	e000      	b.n	8006bb0 <USB_StopHost+0xf2>
        break;
 8006bae:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	61bb      	str	r3, [r7, #24]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	2b0f      	cmp	r3, #15
 8006bba:	d9c7      	bls.n	8006b4c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bc8:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bd0:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff f919 	bl	8005e0a <USB_EnableGlobalInt>

  return ret;
 8006bd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3720      	adds	r7, #32
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	4a08      	ldr	r2, [pc, #32]	; (8006c14 <disk_status+0x30>)
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	79fa      	ldrb	r2, [r7, #7]
 8006bfc:	4905      	ldr	r1, [pc, #20]	; (8006c14 <disk_status+0x30>)
 8006bfe:	440a      	add	r2, r1
 8006c00:	7b12      	ldrb	r2, [r2, #12]
 8006c02:	4610      	mov	r0, r2
 8006c04:	4798      	blx	r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	20001438 	.word	0x20001438

08006c18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006c26:	79fb      	ldrb	r3, [r7, #7]
 8006c28:	4a0d      	ldr	r2, [pc, #52]	; (8006c60 <disk_initialize+0x48>)
 8006c2a:	5cd3      	ldrb	r3, [r2, r3]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d111      	bne.n	8006c54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	4a0b      	ldr	r2, [pc, #44]	; (8006c60 <disk_initialize+0x48>)
 8006c34:	2101      	movs	r1, #1
 8006c36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006c38:	79fb      	ldrb	r3, [r7, #7]
 8006c3a:	4a09      	ldr	r2, [pc, #36]	; (8006c60 <disk_initialize+0x48>)
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	79fa      	ldrb	r2, [r7, #7]
 8006c46:	4906      	ldr	r1, [pc, #24]	; (8006c60 <disk_initialize+0x48>)
 8006c48:	440a      	add	r2, r1
 8006c4a:	7b12      	ldrb	r2, [r2, #12]
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4798      	blx	r3
 8006c50:	4603      	mov	r3, r0
 8006c52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20001438 	.word	0x20001438

08006c64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006c64:	b590      	push	{r4, r7, lr}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	607a      	str	r2, [r7, #4]
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	4603      	mov	r3, r0
 8006c72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	4a0a      	ldr	r2, [pc, #40]	; (8006ca0 <disk_read+0x3c>)
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	689c      	ldr	r4, [r3, #8]
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	4a07      	ldr	r2, [pc, #28]	; (8006ca0 <disk_read+0x3c>)
 8006c84:	4413      	add	r3, r2
 8006c86:	7b18      	ldrb	r0, [r3, #12]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	68b9      	ldr	r1, [r7, #8]
 8006c8e:	47a0      	blx	r4
 8006c90:	4603      	mov	r3, r0
 8006c92:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd90      	pop	{r4, r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20001438 	.word	0x20001438

08006ca4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006ca4:	b590      	push	{r4, r7, lr}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	607a      	str	r2, [r7, #4]
 8006cae:	603b      	str	r3, [r7, #0]
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	4a0a      	ldr	r2, [pc, #40]	; (8006ce0 <disk_write+0x3c>)
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	68dc      	ldr	r4, [r3, #12]
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	4a07      	ldr	r2, [pc, #28]	; (8006ce0 <disk_write+0x3c>)
 8006cc4:	4413      	add	r3, r2
 8006cc6:	7b18      	ldrb	r0, [r3, #12]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	68b9      	ldr	r1, [r7, #8]
 8006cce:	47a0      	blx	r4
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd90      	pop	{r4, r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20001438 	.word	0x20001438

08006ce4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	4603      	mov	r3, r0
 8006cec:	603a      	str	r2, [r7, #0]
 8006cee:	71fb      	strb	r3, [r7, #7]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	4a09      	ldr	r2, [pc, #36]	; (8006d1c <disk_ioctl+0x38>)
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	79fa      	ldrb	r2, [r7, #7]
 8006d02:	4906      	ldr	r1, [pc, #24]	; (8006d1c <disk_ioctl+0x38>)
 8006d04:	440a      	add	r2, r1
 8006d06:	7b10      	ldrb	r0, [r2, #12]
 8006d08:	79b9      	ldrb	r1, [r7, #6]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	4798      	blx	r3
 8006d0e:	4603      	mov	r3, r0
 8006d10:	73fb      	strb	r3, [r7, #15]
  return res;
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20001438 	.word	0x20001438

08006d20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0
  return 0;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006d40:	89fb      	ldrh	r3, [r7, #14]
 8006d42:	021b      	lsls	r3, r3, #8
 8006d44:	b21a      	sxth	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	b21b      	sxth	r3, r3
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	b21b      	sxth	r3, r3
 8006d50:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006d52:	89fb      	ldrh	r3, [r7, #14]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3303      	adds	r3, #3
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	021b      	lsls	r3, r3, #8
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	3202      	adds	r2, #2
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	3201      	adds	r2, #1
 8006d86:	7812      	ldrb	r2, [r2, #0]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	7812      	ldrb	r2, [r2, #0]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
	return rv;
 8006d98:	68fb      	ldr	r3, [r7, #12]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	460b      	mov	r3, r1
 8006db0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	607a      	str	r2, [r7, #4]
 8006db8:	887a      	ldrh	r2, [r7, #2]
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	887b      	ldrh	r3, [r7, #2]
 8006dc0:	0a1b      	lsrs	r3, r3, #8
 8006dc2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	887a      	ldrh	r2, [r7, #2]
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	701a      	strb	r2, [r3, #0]
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	0a1b      	lsrs	r3, r3, #8
 8006df6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	607a      	str	r2, [r7, #4]
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	b2d2      	uxtb	r2, r2
 8006e02:	701a      	strb	r2, [r3, #0]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	0a1b      	lsrs	r3, r3, #8
 8006e1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	607a      	str	r2, [r7, #4]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	701a      	strb	r2, [r3, #0]
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00d      	beq.n	8006e6a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	1c53      	adds	r3, r2, #1
 8006e52:	613b      	str	r3, [r7, #16]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	1c59      	adds	r1, r3, #1
 8006e58:	6179      	str	r1, [r7, #20]
 8006e5a:	7812      	ldrb	r2, [r2, #0]
 8006e5c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1f1      	bne.n	8006e4e <mem_cpy+0x1a>
	}
}
 8006e6a:	bf00      	nop
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006e76:	b480      	push	{r7}
 8006e78:	b087      	sub	sp, #28
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	60f8      	str	r0, [r7, #12]
 8006e7e:	60b9      	str	r1, [r7, #8]
 8006e80:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	617a      	str	r2, [r7, #20]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	607b      	str	r3, [r7, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1f3      	bne.n	8006e86 <mem_set+0x10>
}
 8006e9e:	bf00      	nop
 8006ea0:	bf00      	nop
 8006ea2:	371c      	adds	r7, #28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006eac:	b480      	push	{r7}
 8006eae:	b089      	sub	sp, #36	; 0x24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	61fb      	str	r3, [r7, #28]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	61fa      	str	r2, [r7, #28]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	61ba      	str	r2, [r7, #24]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	1acb      	subs	r3, r1, r3
 8006ed8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	607b      	str	r3, [r7, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <mem_cmp+0x40>
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0eb      	beq.n	8006ec4 <mem_cmp+0x18>

	return r;
 8006eec:	697b      	ldr	r3, [r7, #20]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3724      	adds	r7, #36	; 0x24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006f04:	e002      	b.n	8006f0c <chk_chr+0x12>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	607b      	str	r3, [r7, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <chk_chr+0x26>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d1f2      	bne.n	8006f06 <chk_chr+0xc>
	return *str;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	781b      	ldrb	r3, [r3, #0]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60bb      	str	r3, [r7, #8]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	e029      	b.n	8006f98 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006f44:	4a27      	ldr	r2, [pc, #156]	; (8006fe4 <chk_lock+0xb4>)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	4413      	add	r3, r2
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01d      	beq.n	8006f8e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f52:	4a24      	ldr	r2, [pc, #144]	; (8006fe4 <chk_lock+0xb4>)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	4413      	add	r3, r2
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d116      	bne.n	8006f92 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006f64:	4a1f      	ldr	r2, [pc, #124]	; (8006fe4 <chk_lock+0xb4>)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	4413      	add	r3, r2
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d10c      	bne.n	8006f92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f78:	4a1a      	ldr	r2, [pc, #104]	; (8006fe4 <chk_lock+0xb4>)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	011b      	lsls	r3, r3, #4
 8006f7e:	4413      	add	r3, r2
 8006f80:	3308      	adds	r3, #8
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d102      	bne.n	8006f92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f8c:	e007      	b.n	8006f9e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3301      	adds	r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d9d2      	bls.n	8006f44 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d109      	bne.n	8006fb8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d102      	bne.n	8006fb0 <chk_lock+0x80>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d101      	bne.n	8006fb4 <chk_lock+0x84>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e010      	b.n	8006fd6 <chk_lock+0xa6>
 8006fb4:	2312      	movs	r3, #18
 8006fb6:	e00e      	b.n	8006fd6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d108      	bne.n	8006fd0 <chk_lock+0xa0>
 8006fbe:	4a09      	ldr	r2, [pc, #36]	; (8006fe4 <chk_lock+0xb4>)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	4413      	add	r3, r2
 8006fc6:	330c      	adds	r3, #12
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fce:	d101      	bne.n	8006fd4 <chk_lock+0xa4>
 8006fd0:	2310      	movs	r3, #16
 8006fd2:	e000      	b.n	8006fd6 <chk_lock+0xa6>
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20001418 	.word	0x20001418

08006fe8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	607b      	str	r3, [r7, #4]
 8006ff2:	e002      	b.n	8006ffa <enq_lock+0x12>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	607b      	str	r3, [r7, #4]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d806      	bhi.n	800700e <enq_lock+0x26>
 8007000:	4a09      	ldr	r2, [pc, #36]	; (8007028 <enq_lock+0x40>)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	011b      	lsls	r3, r3, #4
 8007006:	4413      	add	r3, r2
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1f2      	bne.n	8006ff4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b02      	cmp	r3, #2
 8007012:	bf14      	ite	ne
 8007014:	2301      	movne	r3, #1
 8007016:	2300      	moveq	r3, #0
 8007018:	b2db      	uxtb	r3, r3
}
 800701a:	4618      	mov	r0, r3
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	20001418 	.word	0x20001418

0800702c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	e01f      	b.n	800707c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800703c:	4a41      	ldr	r2, [pc, #260]	; (8007144 <inc_lock+0x118>)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	011b      	lsls	r3, r3, #4
 8007042:	4413      	add	r3, r2
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d113      	bne.n	8007076 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800704e:	4a3d      	ldr	r2, [pc, #244]	; (8007144 <inc_lock+0x118>)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	4413      	add	r3, r2
 8007056:	3304      	adds	r3, #4
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800705e:	429a      	cmp	r2, r3
 8007060:	d109      	bne.n	8007076 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007062:	4a38      	ldr	r2, [pc, #224]	; (8007144 <inc_lock+0x118>)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	4413      	add	r3, r2
 800706a:	3308      	adds	r3, #8
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007072:	429a      	cmp	r2, r3
 8007074:	d006      	beq.n	8007084 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3301      	adds	r3, #1
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d9dc      	bls.n	800703c <inc_lock+0x10>
 8007082:	e000      	b.n	8007086 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007084:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b02      	cmp	r3, #2
 800708a:	d132      	bne.n	80070f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	e002      	b.n	8007098 <inc_lock+0x6c>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3301      	adds	r3, #1
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d806      	bhi.n	80070ac <inc_lock+0x80>
 800709e:	4a29      	ldr	r2, [pc, #164]	; (8007144 <inc_lock+0x118>)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	4413      	add	r3, r2
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1f2      	bne.n	8007092 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d101      	bne.n	80070b6 <inc_lock+0x8a>
 80070b2:	2300      	movs	r3, #0
 80070b4:	e040      	b.n	8007138 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4922      	ldr	r1, [pc, #136]	; (8007144 <inc_lock+0x118>)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	440b      	add	r3, r1
 80070c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	491e      	ldr	r1, [pc, #120]	; (8007144 <inc_lock+0x118>)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	440b      	add	r3, r1
 80070d0:	3304      	adds	r3, #4
 80070d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	695a      	ldr	r2, [r3, #20]
 80070d8:	491a      	ldr	r1, [pc, #104]	; (8007144 <inc_lock+0x118>)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	011b      	lsls	r3, r3, #4
 80070de:	440b      	add	r3, r1
 80070e0:	3308      	adds	r3, #8
 80070e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80070e4:	4a17      	ldr	r2, [pc, #92]	; (8007144 <inc_lock+0x118>)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	4413      	add	r3, r2
 80070ec:	330c      	adds	r3, #12
 80070ee:	2200      	movs	r2, #0
 80070f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d009      	beq.n	800710c <inc_lock+0xe0>
 80070f8:	4a12      	ldr	r2, [pc, #72]	; (8007144 <inc_lock+0x118>)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	4413      	add	r3, r2
 8007100:	330c      	adds	r3, #12
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <inc_lock+0xe0>
 8007108:	2300      	movs	r3, #0
 800710a:	e015      	b.n	8007138 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d108      	bne.n	8007124 <inc_lock+0xf8>
 8007112:	4a0c      	ldr	r2, [pc, #48]	; (8007144 <inc_lock+0x118>)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	4413      	add	r3, r2
 800711a:	330c      	adds	r3, #12
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	3301      	adds	r3, #1
 8007120:	b29a      	uxth	r2, r3
 8007122:	e001      	b.n	8007128 <inc_lock+0xfc>
 8007124:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007128:	4906      	ldr	r1, [pc, #24]	; (8007144 <inc_lock+0x118>)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	011b      	lsls	r3, r3, #4
 800712e:	440b      	add	r3, r1
 8007130:	330c      	adds	r3, #12
 8007132:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3301      	adds	r3, #1
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	20001418 	.word	0x20001418

08007148 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3b01      	subs	r3, #1
 8007154:	607b      	str	r3, [r7, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d825      	bhi.n	80071a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800715c:	4a17      	ldr	r2, [pc, #92]	; (80071bc <dec_lock+0x74>)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	011b      	lsls	r3, r3, #4
 8007162:	4413      	add	r3, r2
 8007164:	330c      	adds	r3, #12
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800716a:	89fb      	ldrh	r3, [r7, #14]
 800716c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007170:	d101      	bne.n	8007176 <dec_lock+0x2e>
 8007172:	2300      	movs	r3, #0
 8007174:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007176:	89fb      	ldrh	r3, [r7, #14]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <dec_lock+0x3a>
 800717c:	89fb      	ldrh	r3, [r7, #14]
 800717e:	3b01      	subs	r3, #1
 8007180:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007182:	4a0e      	ldr	r2, [pc, #56]	; (80071bc <dec_lock+0x74>)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	4413      	add	r3, r2
 800718a:	330c      	adds	r3, #12
 800718c:	89fa      	ldrh	r2, [r7, #14]
 800718e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007190:	89fb      	ldrh	r3, [r7, #14]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d105      	bne.n	80071a2 <dec_lock+0x5a>
 8007196:	4a09      	ldr	r2, [pc, #36]	; (80071bc <dec_lock+0x74>)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	011b      	lsls	r3, r3, #4
 800719c:	4413      	add	r3, r2
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	737b      	strb	r3, [r7, #13]
 80071a6:	e001      	b.n	80071ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80071a8:	2302      	movs	r3, #2
 80071aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80071ac:	7b7b      	ldrb	r3, [r7, #13]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20001418 	.word	0x20001418

080071c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80071c8:	2300      	movs	r3, #0
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	e010      	b.n	80071f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80071ce:	4a0d      	ldr	r2, [pc, #52]	; (8007204 <clear_lock+0x44>)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	4413      	add	r3, r2
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d105      	bne.n	80071ea <clear_lock+0x2a>
 80071de:	4a09      	ldr	r2, [pc, #36]	; (8007204 <clear_lock+0x44>)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	4413      	add	r3, r2
 80071e6:	2200      	movs	r2, #0
 80071e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	3301      	adds	r3, #1
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d9eb      	bls.n	80071ce <clear_lock+0xe>
	}
}
 80071f6:	bf00      	nop
 80071f8:	bf00      	nop
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	20001418 	.word	0x20001418

08007208 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	78db      	ldrb	r3, [r3, #3]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d034      	beq.n	8007286 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	7858      	ldrb	r0, [r3, #1]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800722c:	2301      	movs	r3, #1
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	f7ff fd38 	bl	8006ca4 <disk_write>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <sync_window+0x38>
			res = FR_DISK_ERR;
 800723a:	2301      	movs	r3, #1
 800723c:	73fb      	strb	r3, [r7, #15]
 800723e:	e022      	b.n	8007286 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	1ad2      	subs	r2, r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	429a      	cmp	r2, r3
 8007254:	d217      	bcs.n	8007286 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	789b      	ldrb	r3, [r3, #2]
 800725a:	613b      	str	r3, [r7, #16]
 800725c:	e010      	b.n	8007280 <sync_window+0x78>
					wsect += fs->fsize;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	4413      	add	r3, r2
 8007266:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	7858      	ldrb	r0, [r3, #1]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007272:	2301      	movs	r3, #1
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	f7ff fd15 	bl	8006ca4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	3b01      	subs	r3, #1
 800727e:	613b      	str	r3, [r7, #16]
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d8eb      	bhi.n	800725e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d01b      	beq.n	80072e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff ffad 	bl	8007208 <sync_window>
 80072ae:	4603      	mov	r3, r0
 80072b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d113      	bne.n	80072e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	7858      	ldrb	r0, [r3, #1]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072c2:	2301      	movs	r3, #1
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	f7ff fccd 	bl	8006c64 <disk_read>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d004      	beq.n	80072da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80072d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff ff87 	bl	8007208 <sync_window>
 80072fa:	4603      	mov	r3, r0
 80072fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d158      	bne.n	80073b6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b03      	cmp	r3, #3
 800730a:	d148      	bne.n	800739e <sync_fs+0xb2>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	791b      	ldrb	r3, [r3, #4]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d144      	bne.n	800739e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	3330      	adds	r3, #48	; 0x30
 8007318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800731c:	2100      	movs	r1, #0
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff fda9 	bl	8006e76 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3330      	adds	r3, #48	; 0x30
 8007328:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800732c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff fd38 	bl	8006da6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3330      	adds	r3, #48	; 0x30
 800733a:	4921      	ldr	r1, [pc, #132]	; (80073c0 <sync_fs+0xd4>)
 800733c:	4618      	mov	r0, r3
 800733e:	f7ff fd4d 	bl	8006ddc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3330      	adds	r3, #48	; 0x30
 8007346:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800734a:	491e      	ldr	r1, [pc, #120]	; (80073c4 <sync_fs+0xd8>)
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff fd45 	bl	8006ddc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3330      	adds	r3, #48	; 0x30
 8007356:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	4619      	mov	r1, r3
 8007360:	4610      	mov	r0, r2
 8007362:	f7ff fd3b 	bl	8006ddc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3330      	adds	r3, #48	; 0x30
 800736a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	4619      	mov	r1, r3
 8007374:	4610      	mov	r0, r2
 8007376:	f7ff fd31 	bl	8006ddc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	7858      	ldrb	r0, [r3, #1]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007392:	2301      	movs	r3, #1
 8007394:	f7ff fc86 	bl	8006ca4 <disk_write>
			fs->fsi_flag = 0;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	785b      	ldrb	r3, [r3, #1]
 80073a2:	2200      	movs	r2, #0
 80073a4:	2100      	movs	r1, #0
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7ff fc9c 	bl	8006ce4 <disk_ioctl>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <sync_fs+0xca>
 80073b2:	2301      	movs	r3, #1
 80073b4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	41615252 	.word	0x41615252
 80073c4:	61417272 	.word	0x61417272

080073c8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	3b02      	subs	r3, #2
 80073d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	3b02      	subs	r3, #2
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d301      	bcc.n	80073e8 <clust2sect+0x20>
 80073e4:	2300      	movs	r3, #0
 80073e6:	e008      	b.n	80073fa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	895b      	ldrh	r3, [r3, #10]
 80073ec:	461a      	mov	r2, r3
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	fb03 f202 	mul.w	r2, r3, r2
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	4413      	add	r3, r2
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b086      	sub	sp, #24
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d904      	bls.n	8007426 <get_fat+0x20>
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	d302      	bcc.n	800742c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007426:	2301      	movs	r3, #1
 8007428:	617b      	str	r3, [r7, #20]
 800742a:	e08f      	b.n	800754c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800742c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007430:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b03      	cmp	r3, #3
 8007438:	d062      	beq.n	8007500 <get_fat+0xfa>
 800743a:	2b03      	cmp	r3, #3
 800743c:	dc7c      	bgt.n	8007538 <get_fat+0x132>
 800743e:	2b01      	cmp	r3, #1
 8007440:	d002      	beq.n	8007448 <get_fat+0x42>
 8007442:	2b02      	cmp	r3, #2
 8007444:	d042      	beq.n	80074cc <get_fat+0xc6>
 8007446:	e077      	b.n	8007538 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	085b      	lsrs	r3, r3, #1
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	6a1a      	ldr	r2, [r3, #32]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	0a5b      	lsrs	r3, r3, #9
 800745e:	4413      	add	r3, r2
 8007460:	4619      	mov	r1, r3
 8007462:	6938      	ldr	r0, [r7, #16]
 8007464:	f7ff ff14 	bl	8007290 <move_window>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d167      	bne.n	800753e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	60fa      	str	r2, [r7, #12]
 8007474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	4413      	add	r3, r2
 800747c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007480:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	6a1a      	ldr	r2, [r3, #32]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	0a5b      	lsrs	r3, r3, #9
 800748a:	4413      	add	r3, r2
 800748c:	4619      	mov	r1, r3
 800748e:	6938      	ldr	r0, [r7, #16]
 8007490:	f7ff fefe 	bl	8007290 <move_window>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d153      	bne.n	8007542 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	4413      	add	r3, r2
 80074a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074a8:	021b      	lsls	r3, r3, #8
 80074aa:	461a      	mov	r2, r3
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <get_fat+0xbc>
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	091b      	lsrs	r3, r3, #4
 80074c0:	e002      	b.n	80074c8 <get_fat+0xc2>
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074c8:	617b      	str	r3, [r7, #20]
			break;
 80074ca:	e03f      	b.n	800754c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	6a1a      	ldr	r2, [r3, #32]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	0a1b      	lsrs	r3, r3, #8
 80074d4:	4413      	add	r3, r2
 80074d6:	4619      	mov	r1, r3
 80074d8:	6938      	ldr	r0, [r7, #16]
 80074da:	f7ff fed9 	bl	8007290 <move_window>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d130      	bne.n	8007546 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80074f2:	4413      	add	r3, r2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff fc1b 	bl	8006d30 <ld_word>
 80074fa:	4603      	mov	r3, r0
 80074fc:	617b      	str	r3, [r7, #20]
			break;
 80074fe:	e025      	b.n	800754c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	6a1a      	ldr	r2, [r3, #32]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	09db      	lsrs	r3, r3, #7
 8007508:	4413      	add	r3, r2
 800750a:	4619      	mov	r1, r3
 800750c:	6938      	ldr	r0, [r7, #16]
 800750e:	f7ff febf 	bl	8007290 <move_window>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d118      	bne.n	800754a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007526:	4413      	add	r3, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f7ff fc19 	bl	8006d60 <ld_dword>
 800752e:	4603      	mov	r3, r0
 8007530:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007534:	617b      	str	r3, [r7, #20]
			break;
 8007536:	e009      	b.n	800754c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007538:	2301      	movs	r3, #1
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	e006      	b.n	800754c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800753e:	bf00      	nop
 8007540:	e004      	b.n	800754c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007542:	bf00      	nop
 8007544:	e002      	b.n	800754c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007546:	bf00      	nop
 8007548:	e000      	b.n	800754c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800754a:	bf00      	nop
		}
	}

	return val;
 800754c:	697b      	ldr	r3, [r7, #20]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007556:	b590      	push	{r4, r7, lr}
 8007558:	b089      	sub	sp, #36	; 0x24
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007562:	2302      	movs	r3, #2
 8007564:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2b01      	cmp	r3, #1
 800756a:	f240 80d9 	bls.w	8007720 <put_fat+0x1ca>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	429a      	cmp	r2, r3
 8007576:	f080 80d3 	bcs.w	8007720 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	2b03      	cmp	r3, #3
 8007580:	f000 8096 	beq.w	80076b0 <put_fat+0x15a>
 8007584:	2b03      	cmp	r3, #3
 8007586:	f300 80cb 	bgt.w	8007720 <put_fat+0x1ca>
 800758a:	2b01      	cmp	r3, #1
 800758c:	d002      	beq.n	8007594 <put_fat+0x3e>
 800758e:	2b02      	cmp	r3, #2
 8007590:	d06e      	beq.n	8007670 <put_fat+0x11a>
 8007592:	e0c5      	b.n	8007720 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	085b      	lsrs	r3, r3, #1
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	4413      	add	r3, r2
 80075a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a1a      	ldr	r2, [r3, #32]
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	0a5b      	lsrs	r3, r3, #9
 80075aa:	4413      	add	r3, r2
 80075ac:	4619      	mov	r1, r3
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7ff fe6e 	bl	8007290 <move_window>
 80075b4:	4603      	mov	r3, r0
 80075b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075b8:	7ffb      	ldrb	r3, [r7, #31]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f040 80a9 	bne.w	8007712 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	1c59      	adds	r1, r3, #1
 80075ca:	61b9      	str	r1, [r7, #24]
 80075cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d0:	4413      	add	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00d      	beq.n	80075fa <put_fat+0xa4>
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	b25b      	sxtb	r3, r3
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	b25a      	sxtb	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	b25b      	sxtb	r3, r3
 80075f2:	4313      	orrs	r3, r2
 80075f4:	b25b      	sxtb	r3, r3
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	e001      	b.n	80075fe <put_fat+0xa8>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6a1a      	ldr	r2, [r3, #32]
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	0a5b      	lsrs	r3, r3, #9
 8007610:	4413      	add	r3, r2
 8007612:	4619      	mov	r1, r3
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f7ff fe3b 	bl	8007290 <move_window>
 800761a:	4603      	mov	r3, r0
 800761c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800761e:	7ffb      	ldrb	r3, [r7, #31]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d178      	bne.n	8007716 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007630:	4413      	add	r3, r2
 8007632:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <put_fat+0xf0>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	091b      	lsrs	r3, r3, #4
 8007642:	b2db      	uxtb	r3, r3
 8007644:	e00e      	b.n	8007664 <put_fat+0x10e>
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	b25b      	sxtb	r3, r3
 800764c:	f023 030f 	bic.w	r3, r3, #15
 8007650:	b25a      	sxtb	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	0a1b      	lsrs	r3, r3, #8
 8007656:	b25b      	sxtb	r3, r3
 8007658:	f003 030f 	and.w	r3, r3, #15
 800765c:	b25b      	sxtb	r3, r3
 800765e:	4313      	orrs	r3, r2
 8007660:	b25b      	sxtb	r3, r3
 8007662:	b2db      	uxtb	r3, r3
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2201      	movs	r2, #1
 800766c:	70da      	strb	r2, [r3, #3]
			break;
 800766e:	e057      	b.n	8007720 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a1a      	ldr	r2, [r3, #32]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	0a1b      	lsrs	r3, r3, #8
 8007678:	4413      	add	r3, r2
 800767a:	4619      	mov	r1, r3
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff fe07 	bl	8007290 <move_window>
 8007682:	4603      	mov	r3, r0
 8007684:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007686:	7ffb      	ldrb	r3, [r7, #31]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d146      	bne.n	800771a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800769a:	4413      	add	r3, r2
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	b292      	uxth	r2, r2
 80076a0:	4611      	mov	r1, r2
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff fb7f 	bl	8006da6 <st_word>
			fs->wflag = 1;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2201      	movs	r2, #1
 80076ac:	70da      	strb	r2, [r3, #3]
			break;
 80076ae:	e037      	b.n	8007720 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a1a      	ldr	r2, [r3, #32]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	09db      	lsrs	r3, r3, #7
 80076b8:	4413      	add	r3, r2
 80076ba:	4619      	mov	r1, r3
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff fde7 	bl	8007290 <move_window>
 80076c2:	4603      	mov	r3, r0
 80076c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076c6:	7ffb      	ldrb	r3, [r7, #31]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d128      	bne.n	800771e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80076e0:	4413      	add	r3, r2
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff fb3c 	bl	8006d60 <ld_dword>
 80076e8:	4603      	mov	r3, r0
 80076ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80076ee:	4323      	orrs	r3, r4
 80076f0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007700:	4413      	add	r3, r2
 8007702:	6879      	ldr	r1, [r7, #4]
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff fb69 	bl	8006ddc <st_dword>
			fs->wflag = 1;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2201      	movs	r2, #1
 800770e:	70da      	strb	r2, [r3, #3]
			break;
 8007710:	e006      	b.n	8007720 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007712:	bf00      	nop
 8007714:	e004      	b.n	8007720 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007716:	bf00      	nop
 8007718:	e002      	b.n	8007720 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800771a:	bf00      	nop
 800771c:	e000      	b.n	8007720 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800771e:	bf00      	nop
		}
	}
	return res;
 8007720:	7ffb      	ldrb	r3, [r7, #31]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3724      	adds	r7, #36	; 0x24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd90      	pop	{r4, r7, pc}

0800772a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b088      	sub	sp, #32
 800772e:	af00      	add	r7, sp, #0
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	60b9      	str	r1, [r7, #8]
 8007734:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d904      	bls.n	8007750 <remove_chain+0x26>
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	429a      	cmp	r2, r3
 800774e:	d301      	bcc.n	8007754 <remove_chain+0x2a>
 8007750:	2302      	movs	r3, #2
 8007752:	e04b      	b.n	80077ec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00c      	beq.n	8007774 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800775a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800775e:	6879      	ldr	r1, [r7, #4]
 8007760:	69b8      	ldr	r0, [r7, #24]
 8007762:	f7ff fef8 	bl	8007556 <put_fat>
 8007766:	4603      	mov	r3, r0
 8007768:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800776a:	7ffb      	ldrb	r3, [r7, #31]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <remove_chain+0x4a>
 8007770:	7ffb      	ldrb	r3, [r7, #31]
 8007772:	e03b      	b.n	80077ec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007774:	68b9      	ldr	r1, [r7, #8]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7ff fe45 	bl	8007406 <get_fat>
 800777c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d031      	beq.n	80077e8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <remove_chain+0x64>
 800778a:	2302      	movs	r3, #2
 800778c:	e02e      	b.n	80077ec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007794:	d101      	bne.n	800779a <remove_chain+0x70>
 8007796:	2301      	movs	r3, #1
 8007798:	e028      	b.n	80077ec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800779a:	2200      	movs	r2, #0
 800779c:	68b9      	ldr	r1, [r7, #8]
 800779e:	69b8      	ldr	r0, [r7, #24]
 80077a0:	f7ff fed9 	bl	8007556 <put_fat>
 80077a4:	4603      	mov	r3, r0
 80077a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80077a8:	7ffb      	ldrb	r3, [r7, #31]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <remove_chain+0x88>
 80077ae:	7ffb      	ldrb	r3, [r7, #31]
 80077b0:	e01c      	b.n	80077ec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	691a      	ldr	r2, [r3, #16]
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	3b02      	subs	r3, #2
 80077bc:	429a      	cmp	r2, r3
 80077be:	d20b      	bcs.n	80077d8 <remove_chain+0xae>
			fs->free_clst++;
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	791b      	ldrb	r3, [r3, #4]
 80077ce:	f043 0301 	orr.w	r3, r3, #1
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d3c6      	bcc.n	8007774 <remove_chain+0x4a>
 80077e6:	e000      	b.n	80077ea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80077e8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3720      	adds	r7, #32
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10d      	bne.n	8007826 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d004      	beq.n	8007820 <create_chain+0x2c>
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	429a      	cmp	r2, r3
 800781e:	d31b      	bcc.n	8007858 <create_chain+0x64>
 8007820:	2301      	movs	r3, #1
 8007822:	61bb      	str	r3, [r7, #24]
 8007824:	e018      	b.n	8007858 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff fdec 	bl	8007406 <get_fat>
 800782e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d801      	bhi.n	800783a <create_chain+0x46>
 8007836:	2301      	movs	r3, #1
 8007838:	e070      	b.n	800791c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007840:	d101      	bne.n	8007846 <create_chain+0x52>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	e06a      	b.n	800791c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	429a      	cmp	r2, r3
 800784e:	d201      	bcs.n	8007854 <create_chain+0x60>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	e063      	b.n	800791c <create_chain+0x128>
		scl = clst;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	3301      	adds	r3, #1
 8007860:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	429a      	cmp	r2, r3
 800786a:	d307      	bcc.n	800787c <create_chain+0x88>
				ncl = 2;
 800786c:	2302      	movs	r3, #2
 800786e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007870:	69fa      	ldr	r2, [r7, #28]
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	429a      	cmp	r2, r3
 8007876:	d901      	bls.n	800787c <create_chain+0x88>
 8007878:	2300      	movs	r3, #0
 800787a:	e04f      	b.n	800791c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800787c:	69f9      	ldr	r1, [r7, #28]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff fdc1 	bl	8007406 <get_fat>
 8007884:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00e      	beq.n	80078aa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d003      	beq.n	800789a <create_chain+0xa6>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007898:	d101      	bne.n	800789e <create_chain+0xaa>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	e03e      	b.n	800791c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d1da      	bne.n	800785c <create_chain+0x68>
 80078a6:	2300      	movs	r3, #0
 80078a8:	e038      	b.n	800791c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80078aa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80078ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078b0:	69f9      	ldr	r1, [r7, #28]
 80078b2:	6938      	ldr	r0, [r7, #16]
 80078b4:	f7ff fe4f 	bl	8007556 <put_fat>
 80078b8:	4603      	mov	r3, r0
 80078ba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d109      	bne.n	80078d6 <create_chain+0xe2>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d006      	beq.n	80078d6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80078c8:	69fa      	ldr	r2, [r7, #28]
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6938      	ldr	r0, [r7, #16]
 80078ce:	f7ff fe42 	bl	8007556 <put_fat>
 80078d2:	4603      	mov	r3, r0
 80078d4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d116      	bne.n	800790a <create_chain+0x116>
		fs->last_clst = ncl;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	691a      	ldr	r2, [r3, #16]
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	3b02      	subs	r3, #2
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d804      	bhi.n	80078fa <create_chain+0x106>
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	1e5a      	subs	r2, r3, #1
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	791b      	ldrb	r3, [r3, #4]
 80078fe:	f043 0301 	orr.w	r3, r3, #1
 8007902:	b2da      	uxtb	r2, r3
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	711a      	strb	r2, [r3, #4]
 8007908:	e007      	b.n	800791a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800790a:	7dfb      	ldrb	r3, [r7, #23]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d102      	bne.n	8007916 <create_chain+0x122>
 8007910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007914:	e000      	b.n	8007918 <create_chain+0x124>
 8007916:	2301      	movs	r3, #1
 8007918:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800791a:	69fb      	ldr	r3, [r7, #28]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3720      	adds	r7, #32
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	3304      	adds	r3, #4
 800793a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	0a5b      	lsrs	r3, r3, #9
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	8952      	ldrh	r2, [r2, #10]
 8007944:	fbb3 f3f2 	udiv	r3, r3, r2
 8007948:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1d1a      	adds	r2, r3, #4
 800794e:	613a      	str	r2, [r7, #16]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <clmt_clust+0x3a>
 800795a:	2300      	movs	r3, #0
 800795c:	e010      	b.n	8007980 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	429a      	cmp	r2, r3
 8007964:	d307      	bcc.n	8007976 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	617b      	str	r3, [r7, #20]
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	3304      	adds	r3, #4
 8007972:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007974:	e7e9      	b.n	800794a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007976:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	4413      	add	r3, r2
}
 8007980:	4618      	mov	r0, r3
 8007982:	371c      	adds	r7, #28
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079a2:	d204      	bcs.n	80079ae <dir_sdi+0x22>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	f003 031f 	and.w	r3, r3, #31
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80079ae:	2302      	movs	r3, #2
 80079b0:	e063      	b.n	8007a7a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d106      	bne.n	80079d2 <dir_sdi+0x46>
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d902      	bls.n	80079d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10c      	bne.n	80079f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	8912      	ldrh	r2, [r2, #8]
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d301      	bcc.n	80079e8 <dir_sdi+0x5c>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e048      	b.n	8007a7a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	61da      	str	r2, [r3, #28]
 80079f0:	e029      	b.n	8007a46 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	895b      	ldrh	r3, [r3, #10]
 80079f6:	025b      	lsls	r3, r3, #9
 80079f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80079fa:	e019      	b.n	8007a30 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6979      	ldr	r1, [r7, #20]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff fd00 	bl	8007406 <get_fat>
 8007a06:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a0e:	d101      	bne.n	8007a14 <dir_sdi+0x88>
 8007a10:	2301      	movs	r3, #1
 8007a12:	e032      	b.n	8007a7a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d904      	bls.n	8007a24 <dir_sdi+0x98>
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d301      	bcc.n	8007a28 <dir_sdi+0x9c>
 8007a24:	2302      	movs	r3, #2
 8007a26:	e028      	b.n	8007a7a <dir_sdi+0xee>
			ofs -= csz;
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d2e1      	bcs.n	80079fc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007a38:	6979      	ldr	r1, [r7, #20]
 8007a3a:	6938      	ldr	r0, [r7, #16]
 8007a3c:	f7ff fcc4 	bl	80073c8 <clust2sect>
 8007a40:	4602      	mov	r2, r0
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <dir_sdi+0xcc>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e010      	b.n	8007a7a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	69da      	ldr	r2, [r3, #28]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	0a5b      	lsrs	r3, r3, #9
 8007a60:	441a      	add	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a72:	441a      	add	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b086      	sub	sp, #24
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	3320      	adds	r3, #32
 8007a98:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <dir_next+0x28>
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aa8:	d301      	bcc.n	8007aae <dir_next+0x2c>
 8007aaa:	2304      	movs	r3, #4
 8007aac:	e0aa      	b.n	8007c04 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f040 8098 	bne.w	8007bea <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	1c5a      	adds	r2, r3, #1
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10b      	bne.n	8007ae4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	8912      	ldrh	r2, [r2, #8]
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	f0c0 8088 	bcc.w	8007bea <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	61da      	str	r2, [r3, #28]
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	e08f      	b.n	8007c04 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	0a5b      	lsrs	r3, r3, #9
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	8952      	ldrh	r2, [r2, #10]
 8007aec:	3a01      	subs	r2, #1
 8007aee:	4013      	ands	r3, r2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d17a      	bne.n	8007bea <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	4619      	mov	r1, r3
 8007afc:	4610      	mov	r0, r2
 8007afe:	f7ff fc82 	bl	8007406 <get_fat>
 8007b02:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d801      	bhi.n	8007b0e <dir_next+0x8c>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	e07a      	b.n	8007c04 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b14:	d101      	bne.n	8007b1a <dir_next+0x98>
 8007b16:	2301      	movs	r3, #1
 8007b18:	e074      	b.n	8007c04 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d358      	bcc.n	8007bd6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d104      	bne.n	8007b34 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	61da      	str	r2, [r3, #28]
 8007b30:	2304      	movs	r3, #4
 8007b32:	e067      	b.n	8007c04 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	f7ff fe59 	bl	80077f4 <create_chain>
 8007b42:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <dir_next+0xcc>
 8007b4a:	2307      	movs	r3, #7
 8007b4c:	e05a      	b.n	8007c04 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d101      	bne.n	8007b58 <dir_next+0xd6>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e055      	b.n	8007c04 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b5e:	d101      	bne.n	8007b64 <dir_next+0xe2>
 8007b60:	2301      	movs	r3, #1
 8007b62:	e04f      	b.n	8007c04 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f7ff fb4f 	bl	8007208 <sync_window>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <dir_next+0xf2>
 8007b70:	2301      	movs	r3, #1
 8007b72:	e047      	b.n	8007c04 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	3330      	adds	r3, #48	; 0x30
 8007b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7ff f979 	bl	8006e76 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b84:	2300      	movs	r3, #0
 8007b86:	613b      	str	r3, [r7, #16]
 8007b88:	6979      	ldr	r1, [r7, #20]
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f7ff fc1c 	bl	80073c8 <clust2sect>
 8007b90:	4602      	mov	r2, r0
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b96:	e012      	b.n	8007bbe <dir_next+0x13c>
						fs->wflag = 1;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7ff fb32 	bl	8007208 <sync_window>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <dir_next+0x12c>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e02a      	b.n	8007c04 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	613b      	str	r3, [r7, #16]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	895b      	ldrh	r3, [r3, #10]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d3e6      	bcc.n	8007b98 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	1ad2      	subs	r2, r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007bdc:	6979      	ldr	r1, [r7, #20]
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f7ff fbf2 	bl	80073c8 <clust2sect>
 8007be4:	4602      	mov	r2, r0
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfc:	441a      	add	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff feb4 	bl	800798c <dir_sdi>
 8007c24:	4603      	mov	r3, r0
 8007c26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c28:	7dfb      	ldrb	r3, [r7, #23]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d12b      	bne.n	8007c86 <dir_alloc+0x7a>
		n = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	4619      	mov	r1, r3
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f7ff fb29 	bl	8007290 <move_window>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d11d      	bne.n	8007c84 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	2be5      	cmp	r3, #229	; 0xe5
 8007c50:	d004      	beq.n	8007c5c <dir_alloc+0x50>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a1b      	ldr	r3, [r3, #32]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d107      	bne.n	8007c6c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	613b      	str	r3, [r7, #16]
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d102      	bne.n	8007c70 <dir_alloc+0x64>
 8007c6a:	e00c      	b.n	8007c86 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007c70:	2101      	movs	r1, #1
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff ff05 	bl	8007a82 <dir_next>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0d7      	beq.n	8007c32 <dir_alloc+0x26>
 8007c82:	e000      	b.n	8007c86 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007c84:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	d101      	bne.n	8007c90 <dir_alloc+0x84>
 8007c8c:	2307      	movs	r3, #7
 8007c8e:	75fb      	strb	r3, [r7, #23]
	return res;
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3718      	adds	r7, #24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	331a      	adds	r3, #26
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7ff f841 	bl	8006d30 <ld_word>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d109      	bne.n	8007cce <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	3314      	adds	r3, #20
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff f836 	bl	8006d30 <ld_word>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	041b      	lsls	r3, r3, #16
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007cce:	68fb      	ldr	r3, [r7, #12]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	331a      	adds	r3, #26
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	b292      	uxth	r2, r2
 8007cec:	4611      	mov	r1, r2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff f859 	bl	8006da6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	2b03      	cmp	r3, #3
 8007cfa:	d109      	bne.n	8007d10 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f103 0214 	add.w	r2, r3, #20
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	0c1b      	lsrs	r3, r3, #16
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	4619      	mov	r1, r3
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	f7ff f84b 	bl	8006da6 <st_word>
	}
}
 8007d10:	bf00      	nop
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007d26:	2100      	movs	r1, #0
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff fe2f 	bl	800798c <dir_sdi>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <dir_find+0x24>
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	e03e      	b.n	8007dba <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	4619      	mov	r1, r3
 8007d42:	6938      	ldr	r0, [r7, #16]
 8007d44:	f7ff faa4 	bl	8007290 <move_window>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d12f      	bne.n	8007db2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d102      	bne.n	8007d66 <dir_find+0x4e>
 8007d60:	2304      	movs	r3, #4
 8007d62:	75fb      	strb	r3, [r7, #23]
 8007d64:	e028      	b.n	8007db8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	330b      	adds	r3, #11
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	330b      	adds	r3, #11
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f003 0308 	and.w	r3, r3, #8
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10a      	bne.n	8007d9e <dir_find+0x86>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a18      	ldr	r0, [r3, #32]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3324      	adds	r3, #36	; 0x24
 8007d90:	220b      	movs	r2, #11
 8007d92:	4619      	mov	r1, r3
 8007d94:	f7ff f88a 	bl	8006eac <mem_cmp>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00b      	beq.n	8007db6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007d9e:	2100      	movs	r1, #0
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff fe6e 	bl	8007a82 <dir_next>
 8007da6:	4603      	mov	r3, r0
 8007da8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d0c5      	beq.n	8007d3c <dir_find+0x24>
 8007db0:	e002      	b.n	8007db8 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007db2:	bf00      	nop
 8007db4:	e000      	b.n	8007db8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007db6:	bf00      	nop

	return res;
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b084      	sub	sp, #16
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7ff ff1a 	bl	8007c0c <dir_alloc>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d11c      	bne.n	8007e1c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	4619      	mov	r1, r3
 8007de8:	68b8      	ldr	r0, [r7, #8]
 8007dea:	f7ff fa51 	bl	8007290 <move_window>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d111      	bne.n	8007e1c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	2100      	movs	r1, #0
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7ff f838 	bl	8006e76 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a18      	ldr	r0, [r3, #32]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3324      	adds	r3, #36	; 0x24
 8007e0e:	220b      	movs	r2, #11
 8007e10:	4619      	mov	r1, r3
 8007e12:	f7ff f80f 	bl	8006e34 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b088      	sub	sp, #32
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	3324      	adds	r3, #36	; 0x24
 8007e3c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007e3e:	220b      	movs	r2, #11
 8007e40:	2120      	movs	r1, #32
 8007e42:	68b8      	ldr	r0, [r7, #8]
 8007e44:	f7ff f817 	bl	8006e76 <mem_set>
	si = i = 0; ni = 8;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	613b      	str	r3, [r7, #16]
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	61fb      	str	r3, [r7, #28]
 8007e50:	2308      	movs	r3, #8
 8007e52:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	1c5a      	adds	r2, r3, #1
 8007e58:	61fa      	str	r2, [r7, #28]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007e62:	7efb      	ldrb	r3, [r7, #27]
 8007e64:	2b20      	cmp	r3, #32
 8007e66:	d94e      	bls.n	8007f06 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007e68:	7efb      	ldrb	r3, [r7, #27]
 8007e6a:	2b2f      	cmp	r3, #47	; 0x2f
 8007e6c:	d006      	beq.n	8007e7c <create_name+0x54>
 8007e6e:	7efb      	ldrb	r3, [r7, #27]
 8007e70:	2b5c      	cmp	r3, #92	; 0x5c
 8007e72:	d110      	bne.n	8007e96 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007e74:	e002      	b.n	8007e7c <create_name+0x54>
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	61fb      	str	r3, [r7, #28]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	4413      	add	r3, r2
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	2b2f      	cmp	r3, #47	; 0x2f
 8007e86:	d0f6      	beq.n	8007e76 <create_name+0x4e>
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b5c      	cmp	r3, #92	; 0x5c
 8007e92:	d0f0      	beq.n	8007e76 <create_name+0x4e>
			break;
 8007e94:	e038      	b.n	8007f08 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007e96:	7efb      	ldrb	r3, [r7, #27]
 8007e98:	2b2e      	cmp	r3, #46	; 0x2e
 8007e9a:	d003      	beq.n	8007ea4 <create_name+0x7c>
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d30c      	bcc.n	8007ebe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2b0b      	cmp	r3, #11
 8007ea8:	d002      	beq.n	8007eb0 <create_name+0x88>
 8007eaa:	7efb      	ldrb	r3, [r7, #27]
 8007eac:	2b2e      	cmp	r3, #46	; 0x2e
 8007eae:	d001      	beq.n	8007eb4 <create_name+0x8c>
 8007eb0:	2306      	movs	r3, #6
 8007eb2:	e044      	b.n	8007f3e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007eb4:	2308      	movs	r3, #8
 8007eb6:	613b      	str	r3, [r7, #16]
 8007eb8:	230b      	movs	r3, #11
 8007eba:	617b      	str	r3, [r7, #20]
			continue;
 8007ebc:	e022      	b.n	8007f04 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007ebe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	da04      	bge.n	8007ed0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007ec6:	7efb      	ldrb	r3, [r7, #27]
 8007ec8:	3b80      	subs	r3, #128	; 0x80
 8007eca:	4a1f      	ldr	r2, [pc, #124]	; (8007f48 <create_name+0x120>)
 8007ecc:	5cd3      	ldrb	r3, [r2, r3]
 8007ece:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007ed0:	7efb      	ldrb	r3, [r7, #27]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	481d      	ldr	r0, [pc, #116]	; (8007f4c <create_name+0x124>)
 8007ed6:	f7ff f810 	bl	8006efa <chk_chr>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <create_name+0xbc>
 8007ee0:	2306      	movs	r3, #6
 8007ee2:	e02c      	b.n	8007f3e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007ee4:	7efb      	ldrb	r3, [r7, #27]
 8007ee6:	2b60      	cmp	r3, #96	; 0x60
 8007ee8:	d905      	bls.n	8007ef6 <create_name+0xce>
 8007eea:	7efb      	ldrb	r3, [r7, #27]
 8007eec:	2b7a      	cmp	r3, #122	; 0x7a
 8007eee:	d802      	bhi.n	8007ef6 <create_name+0xce>
 8007ef0:	7efb      	ldrb	r3, [r7, #27]
 8007ef2:	3b20      	subs	r3, #32
 8007ef4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	613a      	str	r2, [r7, #16]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	4413      	add	r3, r2
 8007f00:	7efa      	ldrb	r2, [r7, #27]
 8007f02:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007f04:	e7a6      	b.n	8007e54 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007f06:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	441a      	add	r2, r3
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <create_name+0xf4>
 8007f18:	2306      	movs	r3, #6
 8007f1a:	e010      	b.n	8007f3e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2be5      	cmp	r3, #229	; 0xe5
 8007f22:	d102      	bne.n	8007f2a <create_name+0x102>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2205      	movs	r2, #5
 8007f28:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007f2a:	7efb      	ldrb	r3, [r7, #27]
 8007f2c:	2b20      	cmp	r3, #32
 8007f2e:	d801      	bhi.n	8007f34 <create_name+0x10c>
 8007f30:	2204      	movs	r2, #4
 8007f32:	e000      	b.n	8007f36 <create_name+0x10e>
 8007f34:	2200      	movs	r2, #0
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	330b      	adds	r3, #11
 8007f3a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007f3c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3720      	adds	r7, #32
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	0800e8cc 	.word	0x0800e8cc
 8007f4c:	0800e164 	.word	0x0800e164

08007f50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007f64:	e002      	b.n	8007f6c <follow_path+0x1c>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b2f      	cmp	r3, #47	; 0x2f
 8007f72:	d0f8      	beq.n	8007f66 <follow_path+0x16>
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	2b5c      	cmp	r3, #92	; 0x5c
 8007f7a:	d0f4      	beq.n	8007f66 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	2b1f      	cmp	r3, #31
 8007f88:	d80a      	bhi.n	8007fa0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2280      	movs	r2, #128	; 0x80
 8007f8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007f92:	2100      	movs	r1, #0
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff fcf9 	bl	800798c <dir_sdi>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	75fb      	strb	r3, [r7, #23]
 8007f9e:	e043      	b.n	8008028 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007fa0:	463b      	mov	r3, r7
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff ff3f 	bl	8007e28 <create_name>
 8007faa:	4603      	mov	r3, r0
 8007fac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007fae:	7dfb      	ldrb	r3, [r7, #23]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d134      	bne.n	800801e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff feaf 	bl	8007d18 <dir_find>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007fc4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00a      	beq.n	8007fe2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d127      	bne.n	8008022 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007fd2:	7afb      	ldrb	r3, [r7, #11]
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d122      	bne.n	8008022 <follow_path+0xd2>
 8007fdc:	2305      	movs	r3, #5
 8007fde:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007fe0:	e01f      	b.n	8008022 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007fe2:	7afb      	ldrb	r3, [r7, #11]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d11c      	bne.n	8008026 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	799b      	ldrb	r3, [r3, #6]
 8007ff0:	f003 0310 	and.w	r3, r3, #16
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d102      	bne.n	8007ffe <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007ff8:	2305      	movs	r3, #5
 8007ffa:	75fb      	strb	r3, [r7, #23]
 8007ffc:	e014      	b.n	8008028 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800800c:	4413      	add	r3, r2
 800800e:	4619      	mov	r1, r3
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f7ff fe42 	bl	8007c9a <ld_clust>
 8008016:	4602      	mov	r2, r0
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800801c:	e7c0      	b.n	8007fa0 <follow_path+0x50>
			if (res != FR_OK) break;
 800801e:	bf00      	nop
 8008020:	e002      	b.n	8008028 <follow_path+0xd8>
				break;
 8008022:	bf00      	nop
 8008024:	e000      	b.n	8008028 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008026:	bf00      	nop
			}
		}
	}

	return res;
 8008028:	7dfb      	ldrb	r3, [r7, #23]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008032:	b480      	push	{r7}
 8008034:	b087      	sub	sp, #28
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800803a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800803e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d031      	beq.n	80080ac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	617b      	str	r3, [r7, #20]
 800804e:	e002      	b.n	8008056 <get_ldnumber+0x24>
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	3301      	adds	r3, #1
 8008054:	617b      	str	r3, [r7, #20]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	2b20      	cmp	r3, #32
 800805c:	d903      	bls.n	8008066 <get_ldnumber+0x34>
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	2b3a      	cmp	r3, #58	; 0x3a
 8008064:	d1f4      	bne.n	8008050 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b3a      	cmp	r3, #58	; 0x3a
 800806c:	d11c      	bne.n	80080a8 <get_ldnumber+0x76>
			tp = *path;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	60fa      	str	r2, [r7, #12]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	3b30      	subs	r3, #48	; 0x30
 800807e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b09      	cmp	r3, #9
 8008084:	d80e      	bhi.n	80080a4 <get_ldnumber+0x72>
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	429a      	cmp	r2, r3
 800808c:	d10a      	bne.n	80080a4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d807      	bhi.n	80080a4 <get_ldnumber+0x72>
					vol = (int)i;
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	3301      	adds	r3, #1
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	e002      	b.n	80080ae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80080a8:	2300      	movs	r3, #0
 80080aa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80080ac:	693b      	ldr	r3, [r7, #16]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	371c      	adds	r7, #28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
	...

080080bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	70da      	strb	r2, [r3, #3]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080d2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff f8da 	bl	8007290 <move_window>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <check_fs+0x2a>
 80080e2:	2304      	movs	r3, #4
 80080e4:	e038      	b.n	8008158 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3330      	adds	r3, #48	; 0x30
 80080ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe fe1e 	bl	8006d30 <ld_word>
 80080f4:	4603      	mov	r3, r0
 80080f6:	461a      	mov	r2, r3
 80080f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d001      	beq.n	8008104 <check_fs+0x48>
 8008100:	2303      	movs	r3, #3
 8008102:	e029      	b.n	8008158 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800810a:	2be9      	cmp	r3, #233	; 0xe9
 800810c:	d009      	beq.n	8008122 <check_fs+0x66>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008114:	2beb      	cmp	r3, #235	; 0xeb
 8008116:	d11e      	bne.n	8008156 <check_fs+0x9a>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800811e:	2b90      	cmp	r3, #144	; 0x90
 8008120:	d119      	bne.n	8008156 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	3330      	adds	r3, #48	; 0x30
 8008126:	3336      	adds	r3, #54	; 0x36
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe fe19 	bl	8006d60 <ld_dword>
 800812e:	4603      	mov	r3, r0
 8008130:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008134:	4a0a      	ldr	r2, [pc, #40]	; (8008160 <check_fs+0xa4>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d101      	bne.n	800813e <check_fs+0x82>
 800813a:	2300      	movs	r3, #0
 800813c:	e00c      	b.n	8008158 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	3330      	adds	r3, #48	; 0x30
 8008142:	3352      	adds	r3, #82	; 0x52
 8008144:	4618      	mov	r0, r3
 8008146:	f7fe fe0b 	bl	8006d60 <ld_dword>
 800814a:	4603      	mov	r3, r0
 800814c:	4a05      	ldr	r2, [pc, #20]	; (8008164 <check_fs+0xa8>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d101      	bne.n	8008156 <check_fs+0x9a>
 8008152:	2300      	movs	r3, #0
 8008154:	e000      	b.n	8008158 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008156:	2302      	movs	r3, #2
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	00544146 	.word	0x00544146
 8008164:	33544146 	.word	0x33544146

08008168 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b096      	sub	sp, #88	; 0x58
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	4613      	mov	r3, r2
 8008174:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2200      	movs	r2, #0
 800817a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7ff ff58 	bl	8008032 <get_ldnumber>
 8008182:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008186:	2b00      	cmp	r3, #0
 8008188:	da01      	bge.n	800818e <find_volume+0x26>
 800818a:	230b      	movs	r3, #11
 800818c:	e22d      	b.n	80085ea <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800818e:	4aa1      	ldr	r2, [pc, #644]	; (8008414 <find_volume+0x2ac>)
 8008190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008196:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <find_volume+0x3a>
 800819e:	230c      	movs	r3, #12
 80081a0:	e223      	b.n	80085ea <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	f023 0301 	bic.w	r3, r3, #1
 80081ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01a      	beq.n	80081ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80081b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ba:	785b      	ldrb	r3, [r3, #1]
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fe fd11 	bl	8006be4 <disk_status>
 80081c2:	4603      	mov	r3, r0
 80081c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80081c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10c      	bne.n	80081ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80081d4:	79fb      	ldrb	r3, [r7, #7]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d007      	beq.n	80081ea <find_volume+0x82>
 80081da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081de:	f003 0304 	and.w	r3, r3, #4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80081e6:	230a      	movs	r3, #10
 80081e8:	e1ff      	b.n	80085ea <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80081ea:	2300      	movs	r3, #0
 80081ec:	e1fd      	b.n	80085ea <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80081ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f0:	2200      	movs	r2, #0
 80081f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80081f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80081fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	4618      	mov	r0, r3
 8008202:	f7fe fd09 	bl	8006c18 <disk_initialize>
 8008206:	4603      	mov	r3, r0
 8008208:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800820c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008218:	2303      	movs	r3, #3
 800821a:	e1e6      	b.n	80085ea <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d007      	beq.n	8008232 <find_volume+0xca>
 8008222:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800822e:	230a      	movs	r3, #10
 8008230:	e1db      	b.n	80085ea <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008236:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008238:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800823a:	f7ff ff3f 	bl	80080bc <check_fs>
 800823e:	4603      	mov	r3, r0
 8008240:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008248:	2b02      	cmp	r3, #2
 800824a:	d149      	bne.n	80082e0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800824c:	2300      	movs	r3, #0
 800824e:	643b      	str	r3, [r7, #64]	; 0x40
 8008250:	e01e      	b.n	8008290 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008254:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800825a:	011b      	lsls	r3, r3, #4
 800825c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008260:	4413      	add	r3, r2
 8008262:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	3304      	adds	r3, #4
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d006      	beq.n	800827c <find_volume+0x114>
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	3308      	adds	r3, #8
 8008272:	4618      	mov	r0, r3
 8008274:	f7fe fd74 	bl	8006d60 <ld_dword>
 8008278:	4602      	mov	r2, r0
 800827a:	e000      	b.n	800827e <find_volume+0x116>
 800827c:	2200      	movs	r2, #0
 800827e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	3358      	adds	r3, #88	; 0x58
 8008284:	443b      	add	r3, r7
 8008286:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800828a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800828c:	3301      	adds	r3, #1
 800828e:	643b      	str	r3, [r7, #64]	; 0x40
 8008290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008292:	2b03      	cmp	r3, #3
 8008294:	d9dd      	bls.n	8008252 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008296:	2300      	movs	r3, #0
 8008298:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800829a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <find_volume+0x13e>
 80082a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a2:	3b01      	subs	r3, #1
 80082a4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80082a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	3358      	adds	r3, #88	; 0x58
 80082ac:	443b      	add	r3, r7
 80082ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80082b2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80082b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d005      	beq.n	80082c6 <find_volume+0x15e>
 80082ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082be:	f7ff fefd 	bl	80080bc <check_fs>
 80082c2:	4603      	mov	r3, r0
 80082c4:	e000      	b.n	80082c8 <find_volume+0x160>
 80082c6:	2303      	movs	r3, #3
 80082c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80082cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d905      	bls.n	80082e0 <find_volume+0x178>
 80082d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082d6:	3301      	adds	r3, #1
 80082d8:	643b      	str	r3, [r7, #64]	; 0x40
 80082da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d9e2      	bls.n	80082a6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80082e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d101      	bne.n	80082ec <find_volume+0x184>
 80082e8:	2301      	movs	r3, #1
 80082ea:	e17e      	b.n	80085ea <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80082ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d901      	bls.n	80082f8 <find_volume+0x190>
 80082f4:	230d      	movs	r3, #13
 80082f6:	e178      	b.n	80085ea <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80082f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fa:	3330      	adds	r3, #48	; 0x30
 80082fc:	330b      	adds	r3, #11
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fd16 	bl	8006d30 <ld_word>
 8008304:	4603      	mov	r3, r0
 8008306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800830a:	d001      	beq.n	8008310 <find_volume+0x1a8>
 800830c:	230d      	movs	r3, #13
 800830e:	e16c      	b.n	80085ea <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	3330      	adds	r3, #48	; 0x30
 8008314:	3316      	adds	r3, #22
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fd0a 	bl	8006d30 <ld_word>
 800831c:	4603      	mov	r3, r0
 800831e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008322:	2b00      	cmp	r3, #0
 8008324:	d106      	bne.n	8008334 <find_volume+0x1cc>
 8008326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008328:	3330      	adds	r3, #48	; 0x30
 800832a:	3324      	adds	r3, #36	; 0x24
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe fd17 	bl	8006d60 <ld_dword>
 8008332:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008338:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	789b      	ldrb	r3, [r3, #2]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d005      	beq.n	8008358 <find_volume+0x1f0>
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	789b      	ldrb	r3, [r3, #2]
 8008350:	2b02      	cmp	r3, #2
 8008352:	d001      	beq.n	8008358 <find_volume+0x1f0>
 8008354:	230d      	movs	r3, #13
 8008356:	e148      	b.n	80085ea <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	789b      	ldrb	r3, [r3, #2]
 800835c:	461a      	mov	r2, r3
 800835e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008360:	fb02 f303 	mul.w	r3, r2, r3
 8008364:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800836c:	b29a      	uxth	r2, r3
 800836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008370:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008374:	895b      	ldrh	r3, [r3, #10]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d008      	beq.n	800838c <find_volume+0x224>
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	895b      	ldrh	r3, [r3, #10]
 800837e:	461a      	mov	r2, r3
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	895b      	ldrh	r3, [r3, #10]
 8008384:	3b01      	subs	r3, #1
 8008386:	4013      	ands	r3, r2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <find_volume+0x228>
 800838c:	230d      	movs	r3, #13
 800838e:	e12c      	b.n	80085ea <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	3330      	adds	r3, #48	; 0x30
 8008394:	3311      	adds	r3, #17
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe fcca 	bl	8006d30 <ld_word>
 800839c:	4603      	mov	r3, r0
 800839e:	461a      	mov	r2, r3
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	891b      	ldrh	r3, [r3, #8]
 80083a8:	f003 030f 	and.w	r3, r3, #15
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <find_volume+0x24e>
 80083b2:	230d      	movs	r3, #13
 80083b4:	e119      	b.n	80085ea <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	3330      	adds	r3, #48	; 0x30
 80083ba:	3313      	adds	r3, #19
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fe fcb7 	bl	8006d30 <ld_word>
 80083c2:	4603      	mov	r3, r0
 80083c4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80083c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d106      	bne.n	80083da <find_volume+0x272>
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	3330      	adds	r3, #48	; 0x30
 80083d0:	3320      	adds	r3, #32
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fe fcc4 	bl	8006d60 <ld_dword>
 80083d8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80083da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083dc:	3330      	adds	r3, #48	; 0x30
 80083de:	330e      	adds	r3, #14
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe fca5 	bl	8006d30 <ld_word>
 80083e6:	4603      	mov	r3, r0
 80083e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80083ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <find_volume+0x28c>
 80083f0:	230d      	movs	r3, #13
 80083f2:	e0fa      	b.n	80085ea <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80083f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f8:	4413      	add	r3, r2
 80083fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083fc:	8912      	ldrh	r2, [r2, #8]
 80083fe:	0912      	lsrs	r2, r2, #4
 8008400:	b292      	uxth	r2, r2
 8008402:	4413      	add	r3, r2
 8008404:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840a:	429a      	cmp	r2, r3
 800840c:	d204      	bcs.n	8008418 <find_volume+0x2b0>
 800840e:	230d      	movs	r3, #13
 8008410:	e0eb      	b.n	80085ea <find_volume+0x482>
 8008412:	bf00      	nop
 8008414:	2000140c 	.word	0x2000140c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008420:	8952      	ldrh	r2, [r2, #10]
 8008422:	fbb3 f3f2 	udiv	r3, r3, r2
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <find_volume+0x2ca>
 800842e:	230d      	movs	r3, #13
 8008430:	e0db      	b.n	80085ea <find_volume+0x482>
		fmt = FS_FAT32;
 8008432:	2303      	movs	r3, #3
 8008434:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800843e:	4293      	cmp	r3, r2
 8008440:	d802      	bhi.n	8008448 <find_volume+0x2e0>
 8008442:	2302      	movs	r3, #2
 8008444:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800844e:	4293      	cmp	r3, r2
 8008450:	d802      	bhi.n	8008458 <find_volume+0x2f0>
 8008452:	2301      	movs	r3, #1
 8008454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	1c9a      	adds	r2, r3, #2
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008462:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008464:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008466:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800846a:	441a      	add	r2, r3
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008470:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008474:	441a      	add	r2, r3
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800847a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800847e:	2b03      	cmp	r3, #3
 8008480:	d11e      	bne.n	80084c0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	3330      	adds	r3, #48	; 0x30
 8008486:	332a      	adds	r3, #42	; 0x2a
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe fc51 	bl	8006d30 <ld_word>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <find_volume+0x330>
 8008494:	230d      	movs	r3, #13
 8008496:	e0a8      	b.n	80085ea <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	891b      	ldrh	r3, [r3, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <find_volume+0x33c>
 80084a0:	230d      	movs	r3, #13
 80084a2:	e0a2      	b.n	80085ea <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	3330      	adds	r3, #48	; 0x30
 80084a8:	332c      	adds	r3, #44	; 0x2c
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fe fc58 	bl	8006d60 <ld_dword>
 80084b0:	4602      	mov	r2, r0
 80084b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80084b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	647b      	str	r3, [r7, #68]	; 0x44
 80084be:	e01f      	b.n	8008500 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	891b      	ldrh	r3, [r3, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <find_volume+0x364>
 80084c8:	230d      	movs	r3, #13
 80084ca:	e08e      	b.n	80085ea <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	6a1a      	ldr	r2, [r3, #32]
 80084d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d2:	441a      	add	r2, r3
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80084d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d103      	bne.n	80084e8 <find_volume+0x380>
 80084e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	005b      	lsls	r3, r3, #1
 80084e6:	e00a      	b.n	80084fe <find_volume+0x396>
 80084e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ea:	695a      	ldr	r2, [r3, #20]
 80084ec:	4613      	mov	r3, r2
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	4413      	add	r3, r2
 80084f2:	085a      	lsrs	r2, r3, #1
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80084fe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	699a      	ldr	r2, [r3, #24]
 8008504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008506:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800850a:	0a5b      	lsrs	r3, r3, #9
 800850c:	429a      	cmp	r2, r3
 800850e:	d201      	bcs.n	8008514 <find_volume+0x3ac>
 8008510:	230d      	movs	r3, #13
 8008512:	e06a      	b.n	80085ea <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800851a:	611a      	str	r2, [r3, #16]
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	691a      	ldr	r2, [r3, #16]
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008526:	2280      	movs	r2, #128	; 0x80
 8008528:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800852a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800852e:	2b03      	cmp	r3, #3
 8008530:	d149      	bne.n	80085c6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008534:	3330      	adds	r3, #48	; 0x30
 8008536:	3330      	adds	r3, #48	; 0x30
 8008538:	4618      	mov	r0, r3
 800853a:	f7fe fbf9 	bl	8006d30 <ld_word>
 800853e:	4603      	mov	r3, r0
 8008540:	2b01      	cmp	r3, #1
 8008542:	d140      	bne.n	80085c6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008546:	3301      	adds	r3, #1
 8008548:	4619      	mov	r1, r3
 800854a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800854c:	f7fe fea0 	bl	8007290 <move_window>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d137      	bne.n	80085c6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	2200      	movs	r2, #0
 800855a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855e:	3330      	adds	r3, #48	; 0x30
 8008560:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008564:	4618      	mov	r0, r3
 8008566:	f7fe fbe3 	bl	8006d30 <ld_word>
 800856a:	4603      	mov	r3, r0
 800856c:	461a      	mov	r2, r3
 800856e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008572:	429a      	cmp	r2, r3
 8008574:	d127      	bne.n	80085c6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008578:	3330      	adds	r3, #48	; 0x30
 800857a:	4618      	mov	r0, r3
 800857c:	f7fe fbf0 	bl	8006d60 <ld_dword>
 8008580:	4603      	mov	r3, r0
 8008582:	4a1c      	ldr	r2, [pc, #112]	; (80085f4 <find_volume+0x48c>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d11e      	bne.n	80085c6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858a:	3330      	adds	r3, #48	; 0x30
 800858c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008590:	4618      	mov	r0, r3
 8008592:	f7fe fbe5 	bl	8006d60 <ld_dword>
 8008596:	4603      	mov	r3, r0
 8008598:	4a17      	ldr	r2, [pc, #92]	; (80085f8 <find_volume+0x490>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d113      	bne.n	80085c6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a0:	3330      	adds	r3, #48	; 0x30
 80085a2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fe fbda 	bl	8006d60 <ld_dword>
 80085ac:	4602      	mov	r2, r0
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80085b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b4:	3330      	adds	r3, #48	; 0x30
 80085b6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe fbd0 	bl	8006d60 <ld_dword>
 80085c0:	4602      	mov	r2, r0
 80085c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80085c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80085cc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80085ce:	4b0b      	ldr	r3, [pc, #44]	; (80085fc <find_volume+0x494>)
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	3301      	adds	r3, #1
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	4b09      	ldr	r3, [pc, #36]	; (80085fc <find_volume+0x494>)
 80085d8:	801a      	strh	r2, [r3, #0]
 80085da:	4b08      	ldr	r3, [pc, #32]	; (80085fc <find_volume+0x494>)
 80085dc:	881a      	ldrh	r2, [r3, #0]
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80085e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085e4:	f7fe fdec 	bl	80071c0 <clear_lock>
#endif
	return FR_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3758      	adds	r7, #88	; 0x58
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	41615252 	.word	0x41615252
 80085f8:	61417272 	.word	0x61417272
 80085fc:	20001414 	.word	0x20001414

08008600 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800860a:	2309      	movs	r3, #9
 800860c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d01c      	beq.n	800864e <validate+0x4e>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d018      	beq.n	800864e <validate+0x4e>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d013      	beq.n	800864e <validate+0x4e>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	889a      	ldrh	r2, [r3, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	88db      	ldrh	r3, [r3, #6]
 8008630:	429a      	cmp	r2, r3
 8008632:	d10c      	bne.n	800864e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	785b      	ldrb	r3, [r3, #1]
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fad2 	bl	8006be4 <disk_status>
 8008640:	4603      	mov	r3, r0
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <validate+0x4e>
			res = FR_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <validate+0x5a>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	e000      	b.n	800865c <validate+0x5c>
 800865a:	2300      	movs	r3, #0
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	6013      	str	r3, [r2, #0]
	return res;
 8008660:	7bfb      	ldrb	r3, [r7, #15]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800867e:	f107 0310 	add.w	r3, r7, #16
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff fcd5 	bl	8008032 <get_ldnumber>
 8008688:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	2b00      	cmp	r3, #0
 800868e:	da01      	bge.n	8008694 <f_mount+0x28>
 8008690:	230b      	movs	r3, #11
 8008692:	e02b      	b.n	80086ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008694:	4a17      	ldr	r2, [pc, #92]	; (80086f4 <f_mount+0x88>)
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800869c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d005      	beq.n	80086b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80086a4:	69b8      	ldr	r0, [r7, #24]
 80086a6:	f7fe fd8b 	bl	80071c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	2200      	movs	r2, #0
 80086ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d002      	beq.n	80086bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	490d      	ldr	r1, [pc, #52]	; (80086f4 <f_mount+0x88>)
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <f_mount+0x66>
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d001      	beq.n	80086d6 <f_mount+0x6a>
 80086d2:	2300      	movs	r3, #0
 80086d4:	e00a      	b.n	80086ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80086d6:	f107 010c 	add.w	r1, r7, #12
 80086da:	f107 0308 	add.w	r3, r7, #8
 80086de:	2200      	movs	r2, #0
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff fd41 	bl	8008168 <find_volume>
 80086e6:	4603      	mov	r3, r0
 80086e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3720      	adds	r7, #32
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	2000140c 	.word	0x2000140c

080086f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b098      	sub	sp, #96	; 0x60
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	4613      	mov	r3, r2
 8008704:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <f_open+0x18>
 800870c:	2309      	movs	r3, #9
 800870e:	e1ad      	b.n	8008a6c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008710:	79fb      	ldrb	r3, [r7, #7]
 8008712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008716:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008718:	79fa      	ldrb	r2, [r7, #7]
 800871a:	f107 0110 	add.w	r1, r7, #16
 800871e:	f107 0308 	add.w	r3, r7, #8
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff fd20 	bl	8008168 <find_volume>
 8008728:	4603      	mov	r3, r0
 800872a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800872e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008732:	2b00      	cmp	r3, #0
 8008734:	f040 8191 	bne.w	8008a5a <f_open+0x362>
		dj.obj.fs = fs;
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	f107 0314 	add.w	r3, r7, #20
 8008742:	4611      	mov	r1, r2
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff fc03 	bl	8007f50 <follow_path>
 800874a:	4603      	mov	r3, r0
 800874c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008754:	2b00      	cmp	r3, #0
 8008756:	d11a      	bne.n	800878e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008758:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800875c:	b25b      	sxtb	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	da03      	bge.n	800876a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008762:	2306      	movs	r3, #6
 8008764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008768:	e011      	b.n	800878e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	f023 0301 	bic.w	r3, r3, #1
 8008770:	2b00      	cmp	r3, #0
 8008772:	bf14      	ite	ne
 8008774:	2301      	movne	r3, #1
 8008776:	2300      	moveq	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	461a      	mov	r2, r3
 800877c:	f107 0314 	add.w	r3, r7, #20
 8008780:	4611      	mov	r1, r2
 8008782:	4618      	mov	r0, r3
 8008784:	f7fe fbd4 	bl	8006f30 <chk_lock>
 8008788:	4603      	mov	r3, r0
 800878a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800878e:	79fb      	ldrb	r3, [r7, #7]
 8008790:	f003 031c 	and.w	r3, r3, #28
 8008794:	2b00      	cmp	r3, #0
 8008796:	d07f      	beq.n	8008898 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800879c:	2b00      	cmp	r3, #0
 800879e:	d017      	beq.n	80087d0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80087a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d10e      	bne.n	80087c6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80087a8:	f7fe fc1e 	bl	8006fe8 <enq_lock>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d006      	beq.n	80087c0 <f_open+0xc8>
 80087b2:	f107 0314 	add.w	r3, r7, #20
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff fb03 	bl	8007dc2 <dir_register>
 80087bc:	4603      	mov	r3, r0
 80087be:	e000      	b.n	80087c2 <f_open+0xca>
 80087c0:	2312      	movs	r3, #18
 80087c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80087c6:	79fb      	ldrb	r3, [r7, #7]
 80087c8:	f043 0308 	orr.w	r3, r3, #8
 80087cc:	71fb      	strb	r3, [r7, #7]
 80087ce:	e010      	b.n	80087f2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80087d0:	7ebb      	ldrb	r3, [r7, #26]
 80087d2:	f003 0311 	and.w	r3, r3, #17
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <f_open+0xea>
					res = FR_DENIED;
 80087da:	2307      	movs	r3, #7
 80087dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80087e0:	e007      	b.n	80087f2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	f003 0304 	and.w	r3, r3, #4
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d002      	beq.n	80087f2 <f_open+0xfa>
 80087ec:	2308      	movs	r3, #8
 80087ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80087f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d168      	bne.n	80088cc <f_open+0x1d4>
 80087fa:	79fb      	ldrb	r3, [r7, #7]
 80087fc:	f003 0308 	and.w	r3, r3, #8
 8008800:	2b00      	cmp	r3, #0
 8008802:	d063      	beq.n	80088cc <f_open+0x1d4>
				dw = GET_FATTIME();
 8008804:	f7fe fa8c 	bl	8006d20 <get_fattime>
 8008808:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800880a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880c:	330e      	adds	r3, #14
 800880e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008810:	4618      	mov	r0, r3
 8008812:	f7fe fae3 	bl	8006ddc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008818:	3316      	adds	r3, #22
 800881a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800881c:	4618      	mov	r0, r3
 800881e:	f7fe fadd 	bl	8006ddc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008824:	330b      	adds	r3, #11
 8008826:	2220      	movs	r2, #32
 8008828:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800882e:	4611      	mov	r1, r2
 8008830:	4618      	mov	r0, r3
 8008832:	f7ff fa32 	bl	8007c9a <ld_clust>
 8008836:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800883c:	2200      	movs	r2, #0
 800883e:	4618      	mov	r0, r3
 8008840:	f7ff fa4a 	bl	8007cd8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008846:	331c      	adds	r3, #28
 8008848:	2100      	movs	r1, #0
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe fac6 	bl	8006ddc <st_dword>
					fs->wflag = 1;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	2201      	movs	r2, #1
 8008854:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008858:	2b00      	cmp	r3, #0
 800885a:	d037      	beq.n	80088cc <f_open+0x1d4>
						dw = fs->winsect;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008860:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008862:	f107 0314 	add.w	r3, r7, #20
 8008866:	2200      	movs	r2, #0
 8008868:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe ff5d 	bl	800772a <remove_chain>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008876:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800887a:	2b00      	cmp	r3, #0
 800887c:	d126      	bne.n	80088cc <f_open+0x1d4>
							res = move_window(fs, dw);
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe fd04 	bl	8007290 <move_window>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008892:	3a01      	subs	r2, #1
 8008894:	60da      	str	r2, [r3, #12]
 8008896:	e019      	b.n	80088cc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008898:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800889c:	2b00      	cmp	r3, #0
 800889e:	d115      	bne.n	80088cc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80088a0:	7ebb      	ldrb	r3, [r7, #26]
 80088a2:	f003 0310 	and.w	r3, r3, #16
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d003      	beq.n	80088b2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80088aa:	2304      	movs	r3, #4
 80088ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80088b0:	e00c      	b.n	80088cc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	f003 0302 	and.w	r3, r3, #2
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d007      	beq.n	80088cc <f_open+0x1d4>
 80088bc:	7ebb      	ldrb	r3, [r7, #26]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <f_open+0x1d4>
						res = FR_DENIED;
 80088c6:	2307      	movs	r3, #7
 80088c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80088cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d128      	bne.n	8008926 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80088d4:	79fb      	ldrb	r3, [r7, #7]
 80088d6:	f003 0308 	and.w	r3, r3, #8
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80088ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	f023 0301 	bic.w	r3, r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	bf14      	ite	ne
 80088fe:	2301      	movne	r3, #1
 8008900:	2300      	moveq	r3, #0
 8008902:	b2db      	uxtb	r3, r3
 8008904:	461a      	mov	r2, r3
 8008906:	f107 0314 	add.w	r3, r7, #20
 800890a:	4611      	mov	r1, r2
 800890c:	4618      	mov	r0, r3
 800890e:	f7fe fb8d 	bl	800702c <inc_lock>
 8008912:	4602      	mov	r2, r0
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <f_open+0x22e>
 8008920:	2302      	movs	r3, #2
 8008922:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008926:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800892a:	2b00      	cmp	r3, #0
 800892c:	f040 8095 	bne.w	8008a5a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008934:	4611      	mov	r1, r2
 8008936:	4618      	mov	r0, r3
 8008938:	f7ff f9af 	bl	8007c9a <ld_clust>
 800893c:	4602      	mov	r2, r0
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008944:	331c      	adds	r3, #28
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fa0a 	bl	8006d60 <ld_dword>
 800894c:	4602      	mov	r2, r0
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	88da      	ldrh	r2, [r3, #6]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	79fa      	ldrb	r2, [r7, #7]
 800896a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3330      	adds	r3, #48	; 0x30
 8008982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008986:	2100      	movs	r1, #0
 8008988:	4618      	mov	r0, r3
 800898a:	f7fe fa74 	bl	8006e76 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800898e:	79fb      	ldrb	r3, [r7, #7]
 8008990:	f003 0320 	and.w	r3, r3, #32
 8008994:	2b00      	cmp	r3, #0
 8008996:	d060      	beq.n	8008a5a <f_open+0x362>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d05c      	beq.n	8008a5a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	68da      	ldr	r2, [r3, #12]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	895b      	ldrh	r3, [r3, #10]
 80089ac:	025b      	lsls	r3, r3, #9
 80089ae:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	657b      	str	r3, [r7, #84]	; 0x54
 80089bc:	e016      	b.n	80089ec <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe fd1f 	bl	8007406 <get_fat>
 80089c8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80089ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d802      	bhi.n	80089d6 <f_open+0x2de>
 80089d0:	2302      	movs	r3, #2
 80089d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80089d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089dc:	d102      	bne.n	80089e4 <f_open+0x2ec>
 80089de:	2301      	movs	r3, #1
 80089e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80089e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	657b      	str	r3, [r7, #84]	; 0x54
 80089ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d103      	bne.n	80089fc <f_open+0x304>
 80089f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d8e0      	bhi.n	80089be <f_open+0x2c6>
				}
				fp->clust = clst;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a00:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008a02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d127      	bne.n	8008a5a <f_open+0x362>
 8008a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d022      	beq.n	8008a5a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fe fcd5 	bl	80073c8 <clust2sect>
 8008a1e:	6478      	str	r0, [r7, #68]	; 0x44
 8008a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d103      	bne.n	8008a2e <f_open+0x336>
						res = FR_INT_ERR;
 8008a26:	2302      	movs	r3, #2
 8008a28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008a2c:	e015      	b.n	8008a5a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a30:	0a5a      	lsrs	r2, r3, #9
 8008a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a34:	441a      	add	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	7858      	ldrb	r0, [r3, #1]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6a1a      	ldr	r2, [r3, #32]
 8008a48:	2301      	movs	r3, #1
 8008a4a:	f7fe f90b 	bl	8006c64 <disk_read>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <f_open+0x362>
 8008a54:	2301      	movs	r3, #1
 8008a56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008a5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <f_open+0x370>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008a68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3760      	adds	r7, #96	; 0x60
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08e      	sub	sp, #56	; 0x38
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f107 0214 	add.w	r2, r7, #20
 8008a92:	4611      	mov	r1, r2
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff fdb3 	bl	8008600 <validate>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008aa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d107      	bne.n	8008ab8 <f_read+0x44>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	7d5b      	ldrb	r3, [r3, #21]
 8008aac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008ab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <f_read+0x4a>
 8008ab8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008abc:	e115      	b.n	8008cea <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	7d1b      	ldrb	r3, [r3, #20]
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <f_read+0x5a>
 8008aca:	2307      	movs	r3, #7
 8008acc:	e10d      	b.n	8008cea <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	f240 80fe 	bls.w	8008ce0 <f_read+0x26c>
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008ae8:	e0fa      	b.n	8008ce0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f040 80c6 	bne.w	8008c84 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	0a5b      	lsrs	r3, r3, #9
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	8952      	ldrh	r2, [r2, #10]
 8008b02:	3a01      	subs	r2, #1
 8008b04:	4013      	ands	r3, r2
 8008b06:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d12f      	bne.n	8008b6e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d103      	bne.n	8008b1e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8008b1c:	e013      	b.n	8008b46 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d007      	beq.n	8008b36 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f7fe fef9 	bl	8007924 <clmt_clust>
 8008b32:	6338      	str	r0, [r7, #48]	; 0x30
 8008b34:	e007      	b.n	8008b46 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4610      	mov	r0, r2
 8008b40:	f7fe fc61 	bl	8007406 <get_fat>
 8008b44:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d804      	bhi.n	8008b56 <f_read+0xe2>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	755a      	strb	r2, [r3, #21]
 8008b52:	2302      	movs	r3, #2
 8008b54:	e0c9      	b.n	8008cea <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b5c:	d104      	bne.n	8008b68 <f_read+0xf4>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2201      	movs	r2, #1
 8008b62:	755a      	strb	r2, [r3, #21]
 8008b64:	2301      	movs	r3, #1
 8008b66:	e0c0      	b.n	8008cea <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b6c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	69db      	ldr	r3, [r3, #28]
 8008b74:	4619      	mov	r1, r3
 8008b76:	4610      	mov	r0, r2
 8008b78:	f7fe fc26 	bl	80073c8 <clust2sect>
 8008b7c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d104      	bne.n	8008b8e <f_read+0x11a>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2202      	movs	r2, #2
 8008b88:	755a      	strb	r2, [r3, #21]
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e0ad      	b.n	8008cea <f_read+0x276>
			sect += csect;
 8008b8e:	69ba      	ldr	r2, [r7, #24]
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	4413      	add	r3, r2
 8008b94:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	0a5b      	lsrs	r3, r3, #9
 8008b9a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d039      	beq.n	8008c16 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008ba2:	69fa      	ldr	r2, [r7, #28]
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	4413      	add	r3, r2
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	8952      	ldrh	r2, [r2, #10]
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d905      	bls.n	8008bbc <f_read+0x148>
					cc = fs->csize - csect;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	895b      	ldrh	r3, [r3, #10]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	7858      	ldrb	r0, [r3, #1]
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	69ba      	ldr	r2, [r7, #24]
 8008bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bc6:	f7fe f84d 	bl	8006c64 <disk_read>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <f_read+0x166>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	755a      	strb	r2, [r3, #21]
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e087      	b.n	8008cea <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	7d1b      	ldrb	r3, [r3, #20]
 8008bde:	b25b      	sxtb	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da14      	bge.n	8008c0e <f_read+0x19a>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6a1a      	ldr	r2, [r3, #32]
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d90d      	bls.n	8008c0e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6a1a      	ldr	r2, [r3, #32]
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	025b      	lsls	r3, r3, #9
 8008bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfe:	18d0      	adds	r0, r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3330      	adds	r3, #48	; 0x30
 8008c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c08:	4619      	mov	r1, r3
 8008c0a:	f7fe f913 	bl	8006e34 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c10:	025b      	lsls	r3, r3, #9
 8008c12:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008c14:	e050      	b.n	8008cb8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d02e      	beq.n	8008c7e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	7d1b      	ldrb	r3, [r3, #20]
 8008c24:	b25b      	sxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	da18      	bge.n	8008c5c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	7858      	ldrb	r0, [r3, #1]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6a1a      	ldr	r2, [r3, #32]
 8008c38:	2301      	movs	r3, #1
 8008c3a:	f7fe f833 	bl	8006ca4 <disk_write>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d004      	beq.n	8008c4e <f_read+0x1da>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2201      	movs	r2, #1
 8008c48:	755a      	strb	r2, [r3, #21]
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e04d      	b.n	8008cea <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	7d1b      	ldrb	r3, [r3, #20]
 8008c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	7858      	ldrb	r0, [r3, #1]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c66:	2301      	movs	r3, #1
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	f7fd fffb 	bl	8006c64 <disk_read>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d004      	beq.n	8008c7e <f_read+0x20a>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2201      	movs	r2, #1
 8008c78:	755a      	strb	r2, [r3, #21]
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e035      	b.n	8008cea <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008c90:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d901      	bls.n	8008c9e <f_read+0x22a>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cac:	4413      	add	r3, r2
 8008cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cb4:	f7fe f8be 	bl	8006e34 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbc:	4413      	add	r3, r2
 8008cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	699a      	ldr	r2, [r3, #24]
 8008cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc6:	441a      	add	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	619a      	str	r2, [r3, #24]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd2:	441a      	add	r2, r3
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f47f af01 	bne.w	8008aea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3738      	adds	r7, #56	; 0x38
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b08c      	sub	sp, #48	; 0x30
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	60f8      	str	r0, [r7, #12]
 8008cfa:	60b9      	str	r1, [r7, #8]
 8008cfc:	607a      	str	r2, [r7, #4]
 8008cfe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2200      	movs	r2, #0
 8008d08:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f107 0210 	add.w	r2, r7, #16
 8008d10:	4611      	mov	r1, r2
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7ff fc74 	bl	8008600 <validate>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d107      	bne.n	8008d36 <f_write+0x44>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	7d5b      	ldrb	r3, [r3, #21]
 8008d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <f_write+0x4a>
 8008d36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d3a:	e14b      	b.n	8008fd4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	7d1b      	ldrb	r3, [r3, #20]
 8008d40:	f003 0302 	and.w	r3, r3, #2
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d101      	bne.n	8008d4c <f_write+0x5a>
 8008d48:	2307      	movs	r3, #7
 8008d4a:	e143      	b.n	8008fd4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	699a      	ldr	r2, [r3, #24]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	441a      	add	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	f080 812d 	bcs.w	8008fb8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	43db      	mvns	r3, r3
 8008d64:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008d66:	e127      	b.n	8008fb8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f040 80e3 	bne.w	8008f3c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	0a5b      	lsrs	r3, r3, #9
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	8952      	ldrh	r2, [r2, #10]
 8008d80:	3a01      	subs	r2, #1
 8008d82:	4013      	ands	r3, r2
 8008d84:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d143      	bne.n	8008e14 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10c      	bne.n	8008dae <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d11a      	bne.n	8008dd6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2100      	movs	r1, #0
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fe fd25 	bl	80077f4 <create_chain>
 8008daa:	62b8      	str	r0, [r7, #40]	; 0x28
 8008dac:	e013      	b.n	8008dd6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d007      	beq.n	8008dc6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f7fe fdb1 	bl	8007924 <clmt_clust>
 8008dc2:	62b8      	str	r0, [r7, #40]	; 0x28
 8008dc4:	e007      	b.n	8008dd6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	69db      	ldr	r3, [r3, #28]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f7fe fd10 	bl	80077f4 <create_chain>
 8008dd4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 80f2 	beq.w	8008fc2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d104      	bne.n	8008dee <f_write+0xfc>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2202      	movs	r2, #2
 8008de8:	755a      	strb	r2, [r3, #21]
 8008dea:	2302      	movs	r3, #2
 8008dec:	e0f2      	b.n	8008fd4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008df4:	d104      	bne.n	8008e00 <f_write+0x10e>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	755a      	strb	r2, [r3, #21]
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e0e9      	b.n	8008fd4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e04:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d102      	bne.n	8008e14 <f_write+0x122>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e12:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	7d1b      	ldrb	r3, [r3, #20]
 8008e18:	b25b      	sxtb	r3, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	da18      	bge.n	8008e50 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	7858      	ldrb	r0, [r3, #1]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6a1a      	ldr	r2, [r3, #32]
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	f7fd ff39 	bl	8006ca4 <disk_write>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d004      	beq.n	8008e42 <f_write+0x150>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	755a      	strb	r2, [r3, #21]
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e0c8      	b.n	8008fd4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	7d1b      	ldrb	r3, [r3, #20]
 8008e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	4619      	mov	r1, r3
 8008e58:	4610      	mov	r0, r2
 8008e5a:	f7fe fab5 	bl	80073c8 <clust2sect>
 8008e5e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d104      	bne.n	8008e70 <f_write+0x17e>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2202      	movs	r2, #2
 8008e6a:	755a      	strb	r2, [r3, #21]
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	e0b1      	b.n	8008fd4 <f_write+0x2e2>
			sect += csect;
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	4413      	add	r3, r2
 8008e76:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	0a5b      	lsrs	r3, r3, #9
 8008e7c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d03c      	beq.n	8008efe <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	6a3b      	ldr	r3, [r7, #32]
 8008e88:	4413      	add	r3, r2
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	8952      	ldrh	r2, [r2, #10]
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d905      	bls.n	8008e9e <f_write+0x1ac>
					cc = fs->csize - csect;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	895b      	ldrh	r3, [r3, #10]
 8008e96:	461a      	mov	r2, r3
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	7858      	ldrb	r0, [r3, #1]
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	69f9      	ldr	r1, [r7, #28]
 8008ea8:	f7fd fefc 	bl	8006ca4 <disk_write>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d004      	beq.n	8008ebc <f_write+0x1ca>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	755a      	strb	r2, [r3, #21]
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e08b      	b.n	8008fd4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6a1a      	ldr	r2, [r3, #32]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	6a3a      	ldr	r2, [r7, #32]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d915      	bls.n	8008ef6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6a1a      	ldr	r2, [r3, #32]
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	025b      	lsls	r3, r3, #9
 8008eda:	69fa      	ldr	r2, [r7, #28]
 8008edc:	4413      	add	r3, r2
 8008ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	f7fd ffa6 	bl	8006e34 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	7d1b      	ldrb	r3, [r3, #20]
 8008eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	025b      	lsls	r3, r3, #9
 8008efa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008efc:	e03f      	b.n	8008f7e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d016      	beq.n	8008f36 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	699a      	ldr	r2, [r3, #24]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d210      	bcs.n	8008f36 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	7858      	ldrb	r0, [r3, #1]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f1e:	2301      	movs	r3, #1
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	f7fd fe9f 	bl	8006c64 <disk_read>
 8008f26:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d004      	beq.n	8008f36 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	755a      	strb	r2, [r3, #21]
 8008f32:	2301      	movs	r3, #1
 8008f34:	e04e      	b.n	8008fd4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f44:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008f48:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d901      	bls.n	8008f56 <f_write+0x264>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f64:	4413      	add	r3, r2
 8008f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f68:	69f9      	ldr	r1, [r7, #28]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fd ff62 	bl	8006e34 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	7d1b      	ldrb	r3, [r3, #20]
 8008f74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	4413      	add	r3, r2
 8008f84:	61fb      	str	r3, [r7, #28]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	699a      	ldr	r2, [r3, #24]
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	441a      	add	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	619a      	str	r2, [r3, #24]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	bf38      	it	cc
 8008f9e:	461a      	movcc	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	60da      	str	r2, [r3, #12]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	441a      	add	r2, r3
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f47f aed4 	bne.w	8008d68 <f_write+0x76>
 8008fc0:	e000      	b.n	8008fc4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008fc2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	7d1b      	ldrb	r3, [r3, #20]
 8008fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3730      	adds	r7, #48	; 0x30
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f107 0208 	add.w	r2, r7, #8
 8008fea:	4611      	mov	r1, r2
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7ff fb07 	bl	8008600 <validate>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d168      	bne.n	80090ce <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	7d1b      	ldrb	r3, [r3, #20]
 8009000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009004:	2b00      	cmp	r3, #0
 8009006:	d062      	beq.n	80090ce <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	7d1b      	ldrb	r3, [r3, #20]
 800900c:	b25b      	sxtb	r3, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	da15      	bge.n	800903e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	7858      	ldrb	r0, [r3, #1]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a1a      	ldr	r2, [r3, #32]
 8009020:	2301      	movs	r3, #1
 8009022:	f7fd fe3f 	bl	8006ca4 <disk_write>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <f_sync+0x54>
 800902c:	2301      	movs	r3, #1
 800902e:	e04f      	b.n	80090d0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	7d1b      	ldrb	r3, [r3, #20]
 8009034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009038:	b2da      	uxtb	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800903e:	f7fd fe6f 	bl	8006d20 <get_fattime>
 8009042:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	4619      	mov	r1, r3
 800904c:	4610      	mov	r0, r2
 800904e:	f7fe f91f 	bl	8007290 <move_window>
 8009052:	4603      	mov	r3, r0
 8009054:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009056:	7dfb      	ldrb	r3, [r7, #23]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d138      	bne.n	80090ce <f_sync+0xf2>
					dir = fp->dir_ptr;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009060:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	330b      	adds	r3, #11
 8009066:	781a      	ldrb	r2, [r3, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	330b      	adds	r3, #11
 800906c:	f042 0220 	orr.w	r2, r2, #32
 8009070:	b2d2      	uxtb	r2, r2
 8009072:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6818      	ldr	r0, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	461a      	mov	r2, r3
 800907e:	68f9      	ldr	r1, [r7, #12]
 8009080:	f7fe fe2a 	bl	8007cd8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f103 021c 	add.w	r2, r3, #28
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	4619      	mov	r1, r3
 8009090:	4610      	mov	r0, r2
 8009092:	f7fd fea3 	bl	8006ddc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3316      	adds	r3, #22
 800909a:	6939      	ldr	r1, [r7, #16]
 800909c:	4618      	mov	r0, r3
 800909e:	f7fd fe9d 	bl	8006ddc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3312      	adds	r3, #18
 80090a6:	2100      	movs	r1, #0
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fd fe7c 	bl	8006da6 <st_word>
					fs->wflag = 1;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	2201      	movs	r2, #1
 80090b2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe f918 	bl	80072ec <sync_fs>
 80090bc:	4603      	mov	r3, r0
 80090be:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	7d1b      	ldrb	r3, [r3, #20]
 80090c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80090ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3718      	adds	r7, #24
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7ff ff7b 	bl	8008fdc <f_sync>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d118      	bne.n	8009122 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f107 0208 	add.w	r2, r7, #8
 80090f6:	4611      	mov	r1, r2
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7ff fa81 	bl	8008600 <validate>
 80090fe:	4603      	mov	r3, r0
 8009100:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10c      	bne.n	8009122 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	4618      	mov	r0, r3
 800910e:	f7fe f81b 	bl	8007148 <dec_lock>
 8009112:	4603      	mov	r3, r0
 8009114:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d102      	bne.n	8009122 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009122:	7bfb      	ldrb	r3, [r7, #15]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	4613      	mov	r3, r2
 8009138:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800913a:	2301      	movs	r3, #1
 800913c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009142:	4b1f      	ldr	r3, [pc, #124]	; (80091c0 <FATFS_LinkDriverEx+0x94>)
 8009144:	7b9b      	ldrb	r3, [r3, #14]
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b01      	cmp	r3, #1
 800914a:	d831      	bhi.n	80091b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800914c:	4b1c      	ldr	r3, [pc, #112]	; (80091c0 <FATFS_LinkDriverEx+0x94>)
 800914e:	7b9b      	ldrb	r3, [r3, #14]
 8009150:	b2db      	uxtb	r3, r3
 8009152:	461a      	mov	r2, r3
 8009154:	4b1a      	ldr	r3, [pc, #104]	; (80091c0 <FATFS_LinkDriverEx+0x94>)
 8009156:	2100      	movs	r1, #0
 8009158:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800915a:	4b19      	ldr	r3, [pc, #100]	; (80091c0 <FATFS_LinkDriverEx+0x94>)
 800915c:	7b9b      	ldrb	r3, [r3, #14]
 800915e:	b2db      	uxtb	r3, r3
 8009160:	4a17      	ldr	r2, [pc, #92]	; (80091c0 <FATFS_LinkDriverEx+0x94>)
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800916a:	4b15      	ldr	r3, [pc, #84]	; (80091c0 <FATFS_LinkDriverEx+0x94>)
 800916c:	7b9b      	ldrb	r3, [r3, #14]
 800916e:	b2db      	uxtb	r3, r3
 8009170:	461a      	mov	r2, r3
 8009172:	4b13      	ldr	r3, [pc, #76]	; (80091c0 <FATFS_LinkDriverEx+0x94>)
 8009174:	4413      	add	r3, r2
 8009176:	79fa      	ldrb	r2, [r7, #7]
 8009178:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800917a:	4b11      	ldr	r3, [pc, #68]	; (80091c0 <FATFS_LinkDriverEx+0x94>)
 800917c:	7b9b      	ldrb	r3, [r3, #14]
 800917e:	b2db      	uxtb	r3, r3
 8009180:	1c5a      	adds	r2, r3, #1
 8009182:	b2d1      	uxtb	r1, r2
 8009184:	4a0e      	ldr	r2, [pc, #56]	; (80091c0 <FATFS_LinkDriverEx+0x94>)
 8009186:	7391      	strb	r1, [r2, #14]
 8009188:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800918a:	7dbb      	ldrb	r3, [r7, #22]
 800918c:	3330      	adds	r3, #48	; 0x30
 800918e:	b2da      	uxtb	r2, r3
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	3301      	adds	r3, #1
 8009198:	223a      	movs	r2, #58	; 0x3a
 800919a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	3302      	adds	r3, #2
 80091a0:	222f      	movs	r2, #47	; 0x2f
 80091a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	3303      	adds	r3, #3
 80091a8:	2200      	movs	r2, #0
 80091aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	371c      	adds	r7, #28
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	20001438 	.word	0x20001438

080091c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80091ce:	2200      	movs	r2, #0
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7ff ffaa 	bl	800912c <FATFS_LinkDriverEx>
 80091d8:	4603      	mov	r3, r0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
	...

080091e4 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80091f4:	2301      	movs	r3, #1
 80091f6:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80091f8:	4b15      	ldr	r3, [pc, #84]	; (8009250 <FATFS_UnLinkDriverEx+0x6c>)
 80091fa:	7b9b      	ldrb	r3, [r3, #14]
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d01e      	beq.n	8009240 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	3b30      	subs	r3, #48	; 0x30
 8009208:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800920a:	7bbb      	ldrb	r3, [r7, #14]
 800920c:	4a10      	ldr	r2, [pc, #64]	; (8009250 <FATFS_UnLinkDriverEx+0x6c>)
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d013      	beq.n	8009240 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8009218:	7bbb      	ldrb	r3, [r7, #14]
 800921a:	4a0d      	ldr	r2, [pc, #52]	; (8009250 <FATFS_UnLinkDriverEx+0x6c>)
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4413      	add	r3, r2
 8009220:	2200      	movs	r2, #0
 8009222:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	4a0a      	ldr	r2, [pc, #40]	; (8009250 <FATFS_UnLinkDriverEx+0x6c>)
 8009228:	4413      	add	r3, r2
 800922a:	2200      	movs	r2, #0
 800922c:	731a      	strb	r2, [r3, #12]
      disk.nbr--;
 800922e:	4b08      	ldr	r3, [pc, #32]	; (8009250 <FATFS_UnLinkDriverEx+0x6c>)
 8009230:	7b9b      	ldrb	r3, [r3, #14]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	3b01      	subs	r3, #1
 8009236:	b2da      	uxtb	r2, r3
 8009238:	4b05      	ldr	r3, [pc, #20]	; (8009250 <FATFS_UnLinkDriverEx+0x6c>)
 800923a:	739a      	strb	r2, [r3, #14]
      ret = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	20001438 	.word	0x20001438

08009254 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800925c:	2100      	movs	r1, #0
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7ff ffc0 	bl	80091e4 <FATFS_UnLinkDriverEx>
 8009264:	4603      	mov	r3, r0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	4603      	mov	r3, r0
 8009276:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
	...

08009288 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	4619      	mov	r1, r3
 800929a:	4808      	ldr	r0, [pc, #32]	; (80092bc <USBH_status+0x34>)
 800929c:	f001 f806 	bl	800a2ac <USBH_MSC_UnitIsReady>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d002      	beq.n	80092ac <USBH_status+0x24>
  {
    res = RES_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]
 80092aa:	e001      	b.n	80092b0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	2000050c 	.word	0x2000050c

080092c0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b094      	sub	sp, #80	; 0x50
 80092c4:	af02      	add	r7, sp, #8
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	607a      	str	r2, [r7, #4]
 80092ca:	603b      	str	r3, [r7, #0]
 80092cc:	4603      	mov	r3, r0
 80092ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	f003 0303 	and.w	r3, r3, #3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d02d      	beq.n	8009342 <USBH_read+0x82>
 80092e6:	4b35      	ldr	r3, [pc, #212]	; (80093bc <USBH_read+0xfc>)
 80092e8:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d027      	beq.n	8009342 <USBH_read+0x82>
  {
    while ((count--)&&(status == USBH_OK))
 80092f2:	e01a      	b.n	800932a <USBH_read+0x6a>
    {
      status = USBH_MSC_Read(&hUSBHost, lun, sector + count, (uint8_t *)scratch, 1);
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	441a      	add	r2, r3
 80092fa:	7bf9      	ldrb	r1, [r7, #15]
 80092fc:	2301      	movs	r3, #1
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	4b2f      	ldr	r3, [pc, #188]	; (80093c0 <USBH_read+0x100>)
 8009302:	482e      	ldr	r0, [pc, #184]	; (80093bc <USBH_read+0xfc>)
 8009304:	f001 f81c 	bl	800a340 <USBH_MSC_Read>
 8009308:	4603      	mov	r3, r0
 800930a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

      if(status == USBH_OK)
 800930e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009312:	2b00      	cmp	r3, #0
 8009314:	d113      	bne.n	800933e <USBH_read+0x7e>
      {
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	025b      	lsls	r3, r3, #9
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	4413      	add	r3, r2
 800931e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009322:	4927      	ldr	r1, [pc, #156]	; (80093c0 <USBH_read+0x100>)
 8009324:	4618      	mov	r0, r3
 8009326:	f004 f8fe 	bl	800d526 <memcpy>
    while ((count--)&&(status == USBH_OK))
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	1e5a      	subs	r2, r3, #1
 800932e:	603a      	str	r2, [r7, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d012      	beq.n	800935a <USBH_read+0x9a>
 8009334:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009338:	2b00      	cmp	r3, #0
 800933a:	d0db      	beq.n	80092f4 <USBH_read+0x34>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 800933c:	e00d      	b.n	800935a <USBH_read+0x9a>
      }
      else
      {
        break;
 800933e:	bf00      	nop
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8009340:	e00b      	b.n	800935a <USBH_read+0x9a>
      }
    }
  }
  else
  {
    status = USBH_MSC_Read(&hUSBHost, lun, sector, buff, count);
 8009342:	7bf9      	ldrb	r1, [r7, #15]
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	481b      	ldr	r0, [pc, #108]	; (80093bc <USBH_read+0xfc>)
 800934e:	f000 fff7 	bl	800a340 <USBH_MSC_Read>
 8009352:	4603      	mov	r3, r0
 8009354:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009358:	e000      	b.n	800935c <USBH_read+0x9c>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 800935a:	bf00      	nop
  }

  if(status == USBH_OK)
 800935c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009360:	2b00      	cmp	r3, #0
 8009362:	d103      	bne.n	800936c <USBH_read+0xac>
  {
    res = RES_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800936a:	e020      	b.n	80093ae <USBH_read+0xee>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
 800936c:	f107 0210 	add.w	r2, r7, #16
 8009370:	7bfb      	ldrb	r3, [r7, #15]
 8009372:	4619      	mov	r1, r3
 8009374:	4811      	ldr	r0, [pc, #68]	; (80093bc <USBH_read+0xfc>)
 8009376:	f000 ffbf 	bl	800a2f8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800937a:	7f7b      	ldrb	r3, [r7, #29]
 800937c:	2b3a      	cmp	r3, #58	; 0x3a
 800937e:	d005      	beq.n	800938c <USBH_read+0xcc>
 8009380:	2b3a      	cmp	r3, #58	; 0x3a
 8009382:	dc10      	bgt.n	80093a6 <USBH_read+0xe6>
 8009384:	2b04      	cmp	r3, #4
 8009386:	d001      	beq.n	800938c <USBH_read+0xcc>
 8009388:	2b28      	cmp	r3, #40	; 0x28
 800938a:	d10c      	bne.n	80093a6 <USBH_read+0xe6>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 800938c:	480d      	ldr	r0, [pc, #52]	; (80093c4 <USBH_read+0x104>)
 800938e:	f003 fea3 	bl	800d0d8 <iprintf>
 8009392:	480d      	ldr	r0, [pc, #52]	; (80093c8 <USBH_read+0x108>)
 8009394:	f003 fea0 	bl	800d0d8 <iprintf>
 8009398:	200a      	movs	r0, #10
 800939a:	f003 feaf 	bl	800d0fc <putchar>
      res = RES_NOTRDY;
 800939e:	2303      	movs	r3, #3
 80093a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80093a4:	e003      	b.n	80093ae <USBH_read+0xee>

    default:
      res = RES_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80093ac:	bf00      	nop
    }
  }

  return res;
 80093ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3748      	adds	r7, #72	; 0x48
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	2000050c 	.word	0x2000050c
 80093c0:	20001448 	.word	0x20001448
 80093c4:	0800e1a8 	.word	0x0800e1a8
 80093c8:	0800e1b0 	.word	0x0800e1b0

080093cc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b094      	sub	sp, #80	; 0x50
 80093d0:	af02      	add	r7, sp, #8
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	607a      	str	r2, [r7, #4]
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	4603      	mov	r3, r0
 80093da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d029      	beq.n	8009446 <USBH_write+0x7a>
 80093f2:	4b3a      	ldr	r3, [pc, #232]	; (80094dc <USBH_write+0x110>)
 80093f4:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d023      	beq.n	8009446 <USBH_write+0x7a>
  {

    while (count--)
 80093fe:	e01a      	b.n	8009436 <USBH_write+0x6a>
    {
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	025b      	lsls	r3, r3, #9
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	4413      	add	r3, r2
 8009408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800940c:	4619      	mov	r1, r3
 800940e:	4834      	ldr	r0, [pc, #208]	; (80094e0 <USBH_write+0x114>)
 8009410:	f004 f889 	bl	800d526 <memcpy>

      status = USBH_MSC_Write(&hUSBHost, lun, sector + count, (BYTE *)scratch, 1) ;
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	441a      	add	r2, r3
 800941a:	7bf9      	ldrb	r1, [r7, #15]
 800941c:	2301      	movs	r3, #1
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	4b2f      	ldr	r3, [pc, #188]	; (80094e0 <USBH_write+0x114>)
 8009422:	482e      	ldr	r0, [pc, #184]	; (80094dc <USBH_write+0x110>)
 8009424:	f000 fff5 	bl	800a412 <USBH_MSC_Write>
 8009428:	4603      	mov	r3, r0
 800942a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      if(status == USBH_FAIL)
 800942e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009432:	2b02      	cmp	r3, #2
 8009434:	d005      	beq.n	8009442 <USBH_write+0x76>
    while (count--)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	1e5a      	subs	r2, r3, #1
 800943a:	603a      	str	r2, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1df      	bne.n	8009400 <USBH_write+0x34>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8009440:	e00c      	b.n	800945c <USBH_write+0x90>
      {
        break;
 8009442:	bf00      	nop
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8009444:	e00a      	b.n	800945c <USBH_write+0x90>
      }
    }
  }
  else
  {
    status = USBH_MSC_Write(&hUSBHost, lun, sector, (BYTE *)buff, count);
 8009446:	7bf9      	ldrb	r1, [r7, #15]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	4822      	ldr	r0, [pc, #136]	; (80094dc <USBH_write+0x110>)
 8009452:	f000 ffde 	bl	800a412 <USBH_MSC_Write>
 8009456:	4603      	mov	r3, r0
 8009458:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }

  if(status == USBH_OK)
 800945c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009460:	2b00      	cmp	r3, #0
 8009462:	d103      	bne.n	800946c <USBH_write+0xa0>
  {
    res = RES_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800946a:	e031      	b.n	80094d0 <USBH_write+0x104>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
 800946c:	f107 0210 	add.w	r2, r7, #16
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	4619      	mov	r1, r3
 8009474:	4819      	ldr	r0, [pc, #100]	; (80094dc <USBH_write+0x110>)
 8009476:	f000 ff3f 	bl	800a2f8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800947a:	7f7b      	ldrb	r3, [r7, #29]
 800947c:	2b3a      	cmp	r3, #58	; 0x3a
 800947e:	d016      	beq.n	80094ae <USBH_write+0xe2>
 8009480:	2b3a      	cmp	r3, #58	; 0x3a
 8009482:	dc21      	bgt.n	80094c8 <USBH_write+0xfc>
 8009484:	2b28      	cmp	r3, #40	; 0x28
 8009486:	d012      	beq.n	80094ae <USBH_write+0xe2>
 8009488:	2b28      	cmp	r3, #40	; 0x28
 800948a:	dc1d      	bgt.n	80094c8 <USBH_write+0xfc>
 800948c:	2b04      	cmp	r3, #4
 800948e:	d00e      	beq.n	80094ae <USBH_write+0xe2>
 8009490:	2b27      	cmp	r3, #39	; 0x27
 8009492:	d119      	bne.n	80094c8 <USBH_write+0xfc>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 8009494:	4813      	ldr	r0, [pc, #76]	; (80094e4 <USBH_write+0x118>)
 8009496:	f003 fe1f 	bl	800d0d8 <iprintf>
 800949a:	4813      	ldr	r0, [pc, #76]	; (80094e8 <USBH_write+0x11c>)
 800949c:	f003 fe1c 	bl	800d0d8 <iprintf>
 80094a0:	200a      	movs	r0, #10
 80094a2:	f003 fe2b 	bl	800d0fc <putchar>
      res = RES_WRPRT;
 80094a6:	2302      	movs	r3, #2
 80094a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80094ac:	e010      	b.n	80094d0 <USBH_write+0x104>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 80094ae:	480d      	ldr	r0, [pc, #52]	; (80094e4 <USBH_write+0x118>)
 80094b0:	f003 fe12 	bl	800d0d8 <iprintf>
 80094b4:	480d      	ldr	r0, [pc, #52]	; (80094ec <USBH_write+0x120>)
 80094b6:	f003 fe0f 	bl	800d0d8 <iprintf>
 80094ba:	200a      	movs	r0, #10
 80094bc:	f003 fe1e 	bl	800d0fc <putchar>
      res = RES_NOTRDY;
 80094c0:	2303      	movs	r3, #3
 80094c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80094c6:	e003      	b.n	80094d0 <USBH_write+0x104>

    default:
      res = RES_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80094ce:	bf00      	nop
    }
  }

  return res;
 80094d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3748      	adds	r7, #72	; 0x48
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	2000050c 	.word	0x2000050c
 80094e0:	20001448 	.word	0x20001448
 80094e4:	0800e1a8 	.word	0x0800e1a8
 80094e8:	0800e1c8 	.word	0x0800e1c8
 80094ec:	0800e1b0 	.word	0x0800e1b0

080094f0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b090      	sub	sp, #64	; 0x40
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	603a      	str	r2, [r7, #0]
 80094fa:	71fb      	strb	r3, [r7, #7]
 80094fc:	460b      	mov	r3, r1
 80094fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009506:	79bb      	ldrb	r3, [r7, #6]
 8009508:	2b03      	cmp	r3, #3
 800950a:	d850      	bhi.n	80095ae <USBH_ioctl+0xbe>
 800950c:	a201      	add	r2, pc, #4	; (adr r2, 8009514 <USBH_ioctl+0x24>)
 800950e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009512:	bf00      	nop
 8009514:	08009525 	.word	0x08009525
 8009518:	0800952d 	.word	0x0800952d
 800951c:	08009557 	.word	0x08009557
 8009520:	08009583 	.word	0x08009583
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800952a:	e043      	b.n	80095b4 <USBH_ioctl+0xc4>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 800952c:	f107 0208 	add.w	r2, r7, #8
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	4619      	mov	r1, r3
 8009534:	4822      	ldr	r0, [pc, #136]	; (80095c0 <USBH_ioctl+0xd0>)
 8009536:	f000 fedf 	bl	800a2f8 <USBH_MSC_GetLUNInfo>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d106      	bne.n	800954e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800954c:	e032      	b.n	80095b4 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009554:	e02e      	b.n	80095b4 <USBH_ioctl+0xc4>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 8009556:	f107 0208 	add.w	r2, r7, #8
 800955a:	79fb      	ldrb	r3, [r7, #7]
 800955c:	4619      	mov	r1, r3
 800955e:	4818      	ldr	r0, [pc, #96]	; (80095c0 <USBH_ioctl+0xd0>)
 8009560:	f000 feca 	bl	800a2f8 <USBH_MSC_GetLUNInfo>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d107      	bne.n	800957a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800956a:	8a3b      	ldrh	r3, [r7, #16]
 800956c:	461a      	mov	r2, r3
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009578:	e01c      	b.n	80095b4 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009580:	e018      	b.n	80095b4 <USBH_ioctl+0xc4>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 8009582:	f107 0208 	add.w	r2, r7, #8
 8009586:	79fb      	ldrb	r3, [r7, #7]
 8009588:	4619      	mov	r1, r3
 800958a:	480d      	ldr	r0, [pc, #52]	; (80095c0 <USBH_ioctl+0xd0>)
 800958c:	f000 feb4 	bl	800a2f8 <USBH_MSC_GetLUNInfo>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d107      	bne.n	80095a6 <USBH_ioctl+0xb6>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009596:	8a3b      	ldrh	r3, [r7, #16]
 8009598:	461a      	mov	r2, r3
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80095a4:	e006      	b.n	80095b4 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80095ac:	e002      	b.n	80095b4 <USBH_ioctl+0xc4>

  default:
    res = RES_PARERR;
 80095ae:	2304      	movs	r3, #4
 80095b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80095b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3740      	adds	r7, #64	; 0x40
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	2000050c 	.word	0x2000050c

080095c4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80095c4:	b590      	push	{r4, r7, lr}
 80095c6:	b089      	sub	sp, #36	; 0x24
 80095c8:	af04      	add	r7, sp, #16
 80095ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 80095d2:	7919      	ldrb	r1, [r3, #4]
 80095d4:	2350      	movs	r3, #80	; 0x50
 80095d6:	2206      	movs	r2, #6
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f001 fe37 	bl	800b24c <USBH_FindInterface>
 80095de:	4603      	mov	r3, r0
 80095e0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	2bff      	cmp	r3, #255	; 0xff
 80095e6:	d002      	beq.n	80095ee <USBH_MSC_InterfaceInit+0x2a>
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d901      	bls.n	80095f2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80095ee:	2302      	movs	r3, #2
 80095f0:	e106      	b.n	8009800 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f001 fdc0 	bl	800b17c <USBH_SelectInterface>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8009606:	2302      	movs	r3, #2
 8009608:	e0fa      	b.n	8009800 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 447c 	ldr.w	r4, [r3, #1148]	; 0x47c
 8009610:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009614:	f003 fbaa 	bl	800cd6c <malloc>
 8009618:	4603      	mov	r3, r0
 800961a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8009622:	69db      	ldr	r3, [r3, #28]
 8009624:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800962c:	2302      	movs	r3, #2
 800962e:	e0e7      	b.n	8009800 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009634:	2100      	movs	r1, #0
 8009636:	68b8      	ldr	r0, [r7, #8]
 8009638:	f003 fe9c 	bl	800d374 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	211a      	movs	r1, #26
 8009642:	fb01 f303 	mul.w	r3, r1, r3
 8009646:	4413      	add	r3, r2
 8009648:	f203 434e 	addw	r3, r3, #1102	; 0x44e
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	b25b      	sxtb	r3, r3
 8009650:	2b00      	cmp	r3, #0
 8009652:	da16      	bge.n	8009682 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	211a      	movs	r1, #26
 800965a:	fb01 f303 	mul.w	r3, r1, r3
 800965e:	4413      	add	r3, r2
 8009660:	f203 434e 	addw	r3, r3, #1102	; 0x44e
 8009664:	781a      	ldrb	r2, [r3, #0]
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	211a      	movs	r1, #26
 8009670:	fb01 f303 	mul.w	r3, r1, r3
 8009674:	4413      	add	r3, r2
 8009676:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800967a:	881a      	ldrh	r2, [r3, #0]
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	815a      	strh	r2, [r3, #10]
 8009680:	e015      	b.n	80096ae <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009682:	7bfb      	ldrb	r3, [r7, #15]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	211a      	movs	r1, #26
 8009688:	fb01 f303 	mul.w	r3, r1, r3
 800968c:	4413      	add	r3, r2
 800968e:	f203 434e 	addw	r3, r3, #1102	; 0x44e
 8009692:	781a      	ldrb	r2, [r3, #0]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	211a      	movs	r1, #26
 800969e:	fb01 f303 	mul.w	r3, r1, r3
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80096a8:	881a      	ldrh	r2, [r3, #0]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	211a      	movs	r1, #26
 80096b4:	fb01 f303 	mul.w	r3, r1, r3
 80096b8:	4413      	add	r3, r2
 80096ba:	f203 4356 	addw	r3, r3, #1110	; 0x456
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	b25b      	sxtb	r3, r3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	da16      	bge.n	80096f4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	211a      	movs	r1, #26
 80096cc:	fb01 f303 	mul.w	r3, r1, r3
 80096d0:	4413      	add	r3, r2
 80096d2:	f203 4356 	addw	r3, r3, #1110	; 0x456
 80096d6:	781a      	ldrb	r2, [r3, #0]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	211a      	movs	r1, #26
 80096e2:	fb01 f303 	mul.w	r3, r1, r3
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80096ec:	881a      	ldrh	r2, [r3, #0]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	815a      	strh	r2, [r3, #10]
 80096f2:	e015      	b.n	8009720 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	211a      	movs	r1, #26
 80096fa:	fb01 f303 	mul.w	r3, r1, r3
 80096fe:	4413      	add	r3, r2
 8009700:	f203 4356 	addw	r3, r3, #1110	; 0x456
 8009704:	781a      	ldrb	r2, [r3, #0]
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	211a      	movs	r1, #26
 8009710:	fb01 f303 	mul.w	r3, r1, r3
 8009714:	4413      	add	r3, r2
 8009716:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 800971a:	881a      	ldrh	r2, [r3, #0]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2200      	movs	r2, #0
 8009724:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2200      	movs	r2, #0
 800972a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	2200      	movs	r2, #0
 8009730:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	799b      	ldrb	r3, [r3, #6]
 8009736:	4619      	mov	r1, r3
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f003 fab0 	bl	800cc9e <USBH_AllocPipe>
 800973e:	4603      	mov	r3, r0
 8009740:	461a      	mov	r2, r3
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	79db      	ldrb	r3, [r3, #7]
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f003 faa6 	bl	800cc9e <USBH_AllocPipe>
 8009752:	4603      	mov	r3, r0
 8009754:	461a      	mov	r2, r3
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fefe 	bl	800a55c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	799b      	ldrb	r3, [r3, #6]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d01e      	beq.n	80097a6 <USBH_MSC_InterfaceInit+0x1e2>
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	891b      	ldrh	r3, [r3, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d01a      	beq.n	80097a6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	7959      	ldrb	r1, [r3, #5]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	7998      	ldrb	r0, [r3, #6]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 441c 	ldrb.w	r4, [r3, #1052]	; 0x41c
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	8912      	ldrh	r2, [r2, #8]
 8009788:	9202      	str	r2, [sp, #8]
 800978a:	2202      	movs	r2, #2
 800978c:	9201      	str	r2, [sp, #4]
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	4623      	mov	r3, r4
 8009792:	4602      	mov	r2, r0
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f003 fa53 	bl	800cc40 <USBH_OpenPipe>
 800979a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	79db      	ldrb	r3, [r3, #7]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d02c      	beq.n	80097fe <USBH_MSC_InterfaceInit+0x23a>
 80097a4:	e001      	b.n	80097aa <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e02a      	b.n	8009800 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	895b      	ldrh	r3, [r3, #10]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d025      	beq.n	80097fe <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	7919      	ldrb	r1, [r3, #4]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	79d8      	ldrb	r0, [r3, #7]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 441c 	ldrb.w	r4, [r3, #1052]	; 0x41c
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	8952      	ldrh	r2, [r2, #10]
 80097ca:	9202      	str	r2, [sp, #8]
 80097cc:	2202      	movs	r2, #2
 80097ce:	9201      	str	r2, [sp, #4]
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	4623      	mov	r3, r4
 80097d4:	4602      	mov	r2, r0
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f003 fa32 	bl	800cc40 <USBH_OpenPipe>
 80097dc:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	791b      	ldrb	r3, [r3, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7f7 fd8c 	bl	8001304 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	795b      	ldrb	r3, [r3, #5]
 80097f0:	2200      	movs	r2, #0
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7f7 fd85 	bl	8001304 <USBH_LL_SetToggle>

  return USBH_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	e000      	b.n	8009800 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 80097fe:	2303      	movs	r3, #3
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	bd90      	pop	{r4, r7, pc}

08009808 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	795b      	ldrb	r3, [r3, #5]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00e      	beq.n	8009840 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	795b      	ldrb	r3, [r3, #5]
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f003 fa28 	bl	800cc7e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	795b      	ldrb	r3, [r3, #5]
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f003 fa54 	bl	800cce2 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	791b      	ldrb	r3, [r3, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00e      	beq.n	8009866 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	791b      	ldrb	r3, [r3, #4]
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f003 fa15 	bl	800cc7e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	791b      	ldrb	r3, [r3, #4]
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f003 fa41 	bl	800cce2 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800986c:	69db      	ldr	r3, [r3, #28]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00b      	beq.n	800988a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	4618      	mov	r0, r3
 800987c:	f003 fa7e 	bl	800cd7c <free>
    phost->pActiveClass->pData = 0U;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8009886:	2200      	movs	r2, #0
 8009888:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 80098a2:	69db      	ldr	r3, [r3, #28]
 80098a4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80098a6:	2301      	movs	r3, #1
 80098a8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	7b9b      	ldrb	r3, [r3, #14]
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d04a      	beq.n	8009948 <USBH_MSC_ClassRequest+0xb4>
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	dc54      	bgt.n	8009960 <USBH_MSC_ClassRequest+0xcc>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d001      	beq.n	80098be <USBH_MSC_ClassRequest+0x2a>
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d150      	bne.n	8009960 <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fe2b 	bl	800a51e <USBH_MSC_BOT_REQ_GetMaxLUN>
 80098c8:	4603      	mov	r3, r0
 80098ca:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d104      	bne.n	80098dc <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2200      	movs	r2, #0
 80098d6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d140      	bne.n	8009964 <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d804      	bhi.n	80098f4 <USBH_MSC_ClassRequest+0x60>
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	3301      	adds	r3, #1
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	e000      	b.n	80098f6 <USBH_MSC_ClassRequest+0x62>
 80098f4:	2202      	movs	r2, #2
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	4619      	mov	r1, r3
 8009900:	481c      	ldr	r0, [pc, #112]	; (8009974 <USBH_MSC_ClassRequest+0xe0>)
 8009902:	f003 fbe9 	bl	800d0d8 <iprintf>
 8009906:	200a      	movs	r0, #10
 8009908:	f003 fbf8 	bl	800d0fc <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800990c:	2300      	movs	r3, #0
 800990e:	73bb      	strb	r3, [r7, #14]
 8009910:	e014      	b.n	800993c <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009912:	7bbb      	ldrb	r3, [r7, #14]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	2134      	movs	r1, #52	; 0x34
 8009918:	fb01 f303 	mul.w	r3, r1, r3
 800991c:	4413      	add	r3, r2
 800991e:	3392      	adds	r3, #146	; 0x92
 8009920:	2202      	movs	r2, #2
 8009922:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	2134      	movs	r1, #52	; 0x34
 800992a:	fb01 f303 	mul.w	r3, r1, r3
 800992e:	4413      	add	r3, r2
 8009930:	33c1      	adds	r3, #193	; 0xc1
 8009932:	2200      	movs	r2, #0
 8009934:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009936:	7bbb      	ldrb	r3, [r7, #14]
 8009938:	3301      	adds	r3, #1
 800993a:	73bb      	strb	r3, [r7, #14]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	7bba      	ldrb	r2, [r7, #14]
 8009942:	429a      	cmp	r2, r3
 8009944:	d3e5      	bcc.n	8009912 <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 8009946:	e00d      	b.n	8009964 <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009948:	2100      	movs	r1, #0
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f002 fbdc 	bl	800c108 <USBH_ClrFeature>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d108      	bne.n	8009968 <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	7bda      	ldrb	r2, [r3, #15]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	739a      	strb	r2, [r3, #14]
      }
      break;
 800995e:	e003      	b.n	8009968 <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 8009960:	bf00      	nop
 8009962:	e002      	b.n	800996a <USBH_MSC_ClassRequest+0xd6>
      break;
 8009964:	bf00      	nop
 8009966:	e000      	b.n	800996a <USBH_MSC_ClassRequest+0xd6>
      break;
 8009968:	bf00      	nop
  }

  return status;
 800996a:	7bfb      	ldrb	r3, [r7, #15]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	0800e1ec 	.word	0x0800e1ec

08009978 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800998a:	2301      	movs	r3, #1
 800998c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800998e:	2301      	movs	r3, #1
 8009990:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009992:	2301      	movs	r3, #1
 8009994:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	7b1b      	ldrb	r3, [r3, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <USBH_MSC_Process+0x2e>
 800999e:	2b01      	cmp	r3, #1
 80099a0:	f000 8355 	beq.w	800a04e <USBH_MSC_Process+0x6d6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80099a4:	e356      	b.n	800a054 <USBH_MSC_Process+0x6dc>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	429a      	cmp	r2, r3
 80099b4:	f080 8333 	bcs.w	800a01e <USBH_MSC_Process+0x6a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099be:	4619      	mov	r1, r3
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	2334      	movs	r3, #52	; 0x34
 80099c4:	fb01 f303 	mul.w	r3, r1, r3
 80099c8:	4413      	add	r3, r2
 80099ca:	3391      	adds	r3, #145	; 0x91
 80099cc:	2201      	movs	r2, #1
 80099ce:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099d6:	4619      	mov	r1, r3
 80099d8:	693a      	ldr	r2, [r7, #16]
 80099da:	2334      	movs	r3, #52	; 0x34
 80099dc:	fb01 f303 	mul.w	r3, r1, r3
 80099e0:	4413      	add	r3, r2
 80099e2:	3390      	adds	r3, #144	; 0x90
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	2b08      	cmp	r3, #8
 80099e8:	f200 8327 	bhi.w	800a03a <USBH_MSC_Process+0x6c2>
 80099ec:	a201      	add	r2, pc, #4	; (adr r2, 80099f4 <USBH_MSC_Process+0x7c>)
 80099ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f2:	bf00      	nop
 80099f4:	08009a19 	.word	0x08009a19
 80099f8:	0800a03b 	.word	0x0800a03b
 80099fc:	08009b61 	.word	0x08009b61
 8009a00:	08009d15 	.word	0x08009d15
 8009a04:	08009a53 	.word	0x08009a53
 8009a08:	08009e81 	.word	0x08009e81
 8009a0c:	0800a03b 	.word	0x0800a03b
 8009a10:	0800a03b 	.word	0x0800a03b
 8009a14:	0800a00d 	.word	0x0800a00d
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a1e:	4619      	mov	r1, r3
 8009a20:	48b6      	ldr	r0, [pc, #728]	; (8009cfc <USBH_MSC_Process+0x384>)
 8009a22:	f003 fb59 	bl	800d0d8 <iprintf>
 8009a26:	200a      	movs	r0, #10
 8009a28:	f003 fb68 	bl	800d0fc <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a32:	4619      	mov	r1, r3
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	2334      	movs	r3, #52	; 0x34
 8009a38:	fb01 f303 	mul.w	r3, r1, r3
 8009a3c:	4413      	add	r3, r2
 8009a3e:	3390      	adds	r3, #144	; 0x90
 8009a40:	2204      	movs	r2, #4
 8009a42:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	; 0x4c4
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009a50:	e2fc      	b.n	800a04c <USBH_MSC_Process+0x6d4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a58:	b2d9      	uxtb	r1, r3
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a60:	461a      	mov	r2, r3
 8009a62:	2334      	movs	r3, #52	; 0x34
 8009a64:	fb02 f303 	mul.w	r3, r2, r3
 8009a68:	3398      	adds	r3, #152	; 0x98
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	3307      	adds	r3, #7
 8009a70:	461a      	mov	r2, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f001 f890 	bl	800ab98 <USBH_MSC_SCSI_Inquiry>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d141      	bne.n	8009b06 <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a88:	461a      	mov	r2, r3
 8009a8a:	2334      	movs	r3, #52	; 0x34
 8009a8c:	fb02 f303 	mul.w	r3, r2, r3
 8009a90:	3398      	adds	r3, #152	; 0x98
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	4413      	add	r3, r2
 8009a96:	330a      	adds	r3, #10
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4899      	ldr	r0, [pc, #612]	; (8009d00 <USBH_MSC_Process+0x388>)
 8009a9c:	f003 fb1c 	bl	800d0d8 <iprintf>
 8009aa0:	200a      	movs	r0, #10
 8009aa2:	f003 fb2b 	bl	800d0fc <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009aac:	461a      	mov	r2, r3
 8009aae:	2334      	movs	r3, #52	; 0x34
 8009ab0:	fb02 f303 	mul.w	r3, r2, r3
 8009ab4:	33a0      	adds	r3, #160	; 0xa0
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	4413      	add	r3, r2
 8009aba:	330b      	adds	r3, #11
 8009abc:	4619      	mov	r1, r3
 8009abe:	4891      	ldr	r0, [pc, #580]	; (8009d04 <USBH_MSC_Process+0x38c>)
 8009ac0:	f003 fb0a 	bl	800d0d8 <iprintf>
 8009ac4:	200a      	movs	r0, #10
 8009ac6:	f003 fb19 	bl	800d0fc <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	2334      	movs	r3, #52	; 0x34
 8009ad4:	fb02 f303 	mul.w	r3, r2, r3
 8009ad8:	33b0      	adds	r3, #176	; 0xb0
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	4413      	add	r3, r2
 8009ade:	330c      	adds	r3, #12
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4889      	ldr	r0, [pc, #548]	; (8009d08 <USBH_MSC_Process+0x390>)
 8009ae4:	f003 faf8 	bl	800d0d8 <iprintf>
 8009ae8:	200a      	movs	r0, #10
 8009aea:	f003 fb07 	bl	800d0fc <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009af4:	4619      	mov	r1, r3
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	2334      	movs	r3, #52	; 0x34
 8009afa:	fb01 f303 	mul.w	r3, r1, r3
 8009afe:	4413      	add	r3, r2
 8009b00:	3390      	adds	r3, #144	; 0x90
 8009b02:	2202      	movs	r2, #2
 8009b04:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d10c      	bne.n	8009b26 <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b12:	4619      	mov	r1, r3
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	2334      	movs	r3, #52	; 0x34
 8009b18:	fb01 f303 	mul.w	r3, r1, r3
 8009b1c:	4413      	add	r3, r2
 8009b1e:	3390      	adds	r3, #144	; 0x90
 8009b20:	2205      	movs	r2, #5
 8009b22:	701a      	strb	r2, [r3, #0]
            break;
 8009b24:	e28b      	b.n	800a03e <USBH_MSC_Process+0x6c6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
 8009b28:	2b04      	cmp	r3, #4
 8009b2a:	f040 8288 	bne.w	800a03e <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b34:	4619      	mov	r1, r3
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	2334      	movs	r3, #52	; 0x34
 8009b3a:	fb01 f303 	mul.w	r3, r1, r3
 8009b3e:	4413      	add	r3, r2
 8009b40:	3390      	adds	r3, #144	; 0x90
 8009b42:	2201      	movs	r2, #1
 8009b44:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	2334      	movs	r3, #52	; 0x34
 8009b52:	fb01 f303 	mul.w	r3, r1, r3
 8009b56:	4413      	add	r3, r2
 8009b58:	3391      	adds	r3, #145	; 0x91
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	701a      	strb	r2, [r3, #0]
            break;
 8009b5e:	e26e      	b.n	800a03e <USBH_MSC_Process+0x6c6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 ff56 	bl	800aa1c <USBH_MSC_SCSI_TestUnitReady>
 8009b70:	4603      	mov	r3, r0
 8009b72:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d14f      	bne.n	8009c1a <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b80:	4619      	mov	r1, r3
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	2334      	movs	r3, #52	; 0x34
 8009b86:	fb01 f303 	mul.w	r3, r1, r3
 8009b8a:	4413      	add	r3, r2
 8009b8c:	3392      	adds	r3, #146	; 0x92
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d012      	beq.n	8009bba <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	2334      	movs	r3, #52	; 0x34
 8009ba0:	fb01 f303 	mul.w	r3, r1, r3
 8009ba4:	4413      	add	r3, r2
 8009ba6:	33c1      	adds	r3, #193	; 0xc1
 8009ba8:	2201      	movs	r2, #1
 8009baa:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 8009bac:	4857      	ldr	r0, [pc, #348]	; (8009d0c <USBH_MSC_Process+0x394>)
 8009bae:	f003 fa93 	bl	800d0d8 <iprintf>
 8009bb2:	200a      	movs	r0, #10
 8009bb4:	f003 faa2 	bl	800d0fc <putchar>
 8009bb8:	e00b      	b.n	8009bd2 <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	2334      	movs	r3, #52	; 0x34
 8009bc6:	fb01 f303 	mul.w	r3, r1, r3
 8009bca:	4413      	add	r3, r2
 8009bcc:	33c1      	adds	r3, #193	; 0xc1
 8009bce:	2200      	movs	r2, #0
 8009bd0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009bd8:	4619      	mov	r1, r3
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	2334      	movs	r3, #52	; 0x34
 8009bde:	fb01 f303 	mul.w	r3, r1, r3
 8009be2:	4413      	add	r3, r2
 8009be4:	3390      	adds	r3, #144	; 0x90
 8009be6:	2203      	movs	r2, #3
 8009be8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	693a      	ldr	r2, [r7, #16]
 8009bf4:	2334      	movs	r3, #52	; 0x34
 8009bf6:	fb01 f303 	mul.w	r3, r1, r3
 8009bfa:	4413      	add	r3, r2
 8009bfc:	3391      	adds	r3, #145	; 0x91
 8009bfe:	2200      	movs	r2, #0
 8009c00:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c08:	4619      	mov	r1, r3
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	2334      	movs	r3, #52	; 0x34
 8009c0e:	fb01 f303 	mul.w	r3, r1, r3
 8009c12:	4413      	add	r3, r2
 8009c14:	3392      	adds	r3, #146	; 0x92
 8009c16:	2200      	movs	r2, #0
 8009c18:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009c1a:	7bbb      	ldrb	r3, [r7, #14]
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d150      	bne.n	8009cc2 <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c26:	4619      	mov	r1, r3
 8009c28:	693a      	ldr	r2, [r7, #16]
 8009c2a:	2334      	movs	r3, #52	; 0x34
 8009c2c:	fb01 f303 	mul.w	r3, r1, r3
 8009c30:	4413      	add	r3, r2
 8009c32:	3392      	adds	r3, #146	; 0x92
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d012      	beq.n	8009c60 <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c40:	4619      	mov	r1, r3
 8009c42:	693a      	ldr	r2, [r7, #16]
 8009c44:	2334      	movs	r3, #52	; 0x34
 8009c46:	fb01 f303 	mul.w	r3, r1, r3
 8009c4a:	4413      	add	r3, r2
 8009c4c:	33c1      	adds	r3, #193	; 0xc1
 8009c4e:	2201      	movs	r2, #1
 8009c50:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 8009c52:	482f      	ldr	r0, [pc, #188]	; (8009d10 <USBH_MSC_Process+0x398>)
 8009c54:	f003 fa40 	bl	800d0d8 <iprintf>
 8009c58:	200a      	movs	r0, #10
 8009c5a:	f003 fa4f 	bl	800d0fc <putchar>
 8009c5e:	e00b      	b.n	8009c78 <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c66:	4619      	mov	r1, r3
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	2334      	movs	r3, #52	; 0x34
 8009c6c:	fb01 f303 	mul.w	r3, r1, r3
 8009c70:	4413      	add	r3, r2
 8009c72:	33c1      	adds	r3, #193	; 0xc1
 8009c74:	2200      	movs	r2, #0
 8009c76:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c7e:	4619      	mov	r1, r3
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	2334      	movs	r3, #52	; 0x34
 8009c84:	fb01 f303 	mul.w	r3, r1, r3
 8009c88:	4413      	add	r3, r2
 8009c8a:	3390      	adds	r3, #144	; 0x90
 8009c8c:	2205      	movs	r2, #5
 8009c8e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c96:	4619      	mov	r1, r3
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	2334      	movs	r3, #52	; 0x34
 8009c9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ca0:	4413      	add	r3, r2
 8009ca2:	3391      	adds	r3, #145	; 0x91
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cae:	4619      	mov	r1, r3
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	2334      	movs	r3, #52	; 0x34
 8009cb4:	fb01 f303 	mul.w	r3, r1, r3
 8009cb8:	4413      	add	r3, r2
 8009cba:	3392      	adds	r3, #146	; 0x92
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	701a      	strb	r2, [r3, #0]
            break;
 8009cc0:	e1bf      	b.n	800a042 <USBH_MSC_Process+0x6ca>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	f040 81bc 	bne.w	800a042 <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	2334      	movs	r3, #52	; 0x34
 8009cd6:	fb01 f303 	mul.w	r3, r1, r3
 8009cda:	4413      	add	r3, r2
 8009cdc:	3390      	adds	r3, #144	; 0x90
 8009cde:	2201      	movs	r2, #1
 8009ce0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ce8:	4619      	mov	r1, r3
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	2334      	movs	r3, #52	; 0x34
 8009cee:	fb01 f303 	mul.w	r3, r1, r3
 8009cf2:	4413      	add	r3, r2
 8009cf4:	3391      	adds	r3, #145	; 0x91
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	701a      	strb	r2, [r3, #0]
            break;
 8009cfa:	e1a2      	b.n	800a042 <USBH_MSC_Process+0x6ca>
 8009cfc:	0800e208 	.word	0x0800e208
 8009d00:	0800e214 	.word	0x0800e214
 8009d04:	0800e22c 	.word	0x0800e22c
 8009d08:	0800e244 	.word	0x0800e244
 8009d0c:	0800e25c 	.word	0x0800e25c
 8009d10:	0800e270 	.word	0x0800e270
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d1a:	b2d9      	uxtb	r1, r3
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d22:	461a      	mov	r2, r3
 8009d24:	2334      	movs	r3, #52	; 0x34
 8009d26:	fb02 f303 	mul.w	r3, r2, r3
 8009d2a:	3390      	adds	r3, #144	; 0x90
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	4413      	add	r3, r2
 8009d30:	3304      	adds	r3, #4
 8009d32:	461a      	mov	r2, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 feb4 	bl	800aaa2 <USBH_MSC_SCSI_ReadCapacity>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d170      	bne.n	8009e26 <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	2334      	movs	r3, #52	; 0x34
 8009d50:	fb01 f303 	mul.w	r3, r1, r3
 8009d54:	4413      	add	r3, r2
 8009d56:	33c1      	adds	r3, #193	; 0xc1
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d142      	bne.n	8009de4 <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %u Bytes", \
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d64:	4619      	mov	r1, r3
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	2334      	movs	r3, #52	; 0x34
 8009d6a:	fb01 f303 	mul.w	r3, r1, r3
 8009d6e:	4413      	add	r3, r2
 8009d70:	3394      	adds	r3, #148	; 0x94
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	693a      	ldr	r2, [r7, #16]
 8009d76:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 8009d7a:	4610      	mov	r0, r2
 8009d7c:	6939      	ldr	r1, [r7, #16]
 8009d7e:	2234      	movs	r2, #52	; 0x34
 8009d80:	fb00 f202 	mul.w	r2, r0, r2
 8009d84:	440a      	add	r2, r1
 8009d86:	3298      	adds	r2, #152	; 0x98
 8009d88:	8812      	ldrh	r2, [r2, #0]
 8009d8a:	fb02 f303 	mul.w	r3, r2, r3
 8009d8e:	4619      	mov	r1, r3
 8009d90:	48b3      	ldr	r0, [pc, #716]	; (800a060 <USBH_MSC_Process+0x6e8>)
 8009d92:	f003 f9a1 	bl	800d0d8 <iprintf>
 8009d96:	200a      	movs	r0, #10
 8009d98:	f003 f9b0 	bl	800d0fc <putchar>
                USBH_UsrLog("Block number : %u", (unsigned int)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009da2:	4619      	mov	r1, r3
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	2334      	movs	r3, #52	; 0x34
 8009da8:	fb01 f303 	mul.w	r3, r1, r3
 8009dac:	4413      	add	r3, r2
 8009dae:	3394      	adds	r3, #148	; 0x94
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4619      	mov	r1, r3
 8009db4:	48ab      	ldr	r0, [pc, #684]	; (800a064 <USBH_MSC_Process+0x6ec>)
 8009db6:	f003 f98f 	bl	800d0d8 <iprintf>
 8009dba:	200a      	movs	r0, #10
 8009dbc:	f003 f99e 	bl	800d0fc <putchar>
                USBH_UsrLog("Block Size   : %u", (unsigned int)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	2334      	movs	r3, #52	; 0x34
 8009dcc:	fb01 f303 	mul.w	r3, r1, r3
 8009dd0:	4413      	add	r3, r2
 8009dd2:	3398      	adds	r3, #152	; 0x98
 8009dd4:	881b      	ldrh	r3, [r3, #0]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	48a3      	ldr	r0, [pc, #652]	; (800a068 <USBH_MSC_Process+0x6f0>)
 8009dda:	f003 f97d 	bl	800d0d8 <iprintf>
 8009dde:	200a      	movs	r0, #10
 8009de0:	f003 f98c 	bl	800d0fc <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dea:	4619      	mov	r1, r3
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	2334      	movs	r3, #52	; 0x34
 8009df0:	fb01 f303 	mul.w	r3, r1, r3
 8009df4:	4413      	add	r3, r2
 8009df6:	3390      	adds	r3, #144	; 0x90
 8009df8:	2201      	movs	r2, #1
 8009dfa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e02:	4619      	mov	r1, r3
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	2334      	movs	r3, #52	; 0x34
 8009e08:	fb01 f303 	mul.w	r3, r1, r3
 8009e0c:	4413      	add	r3, r2
 8009e0e:	3391      	adds	r3, #145	; 0x91
 8009e10:	2200      	movs	r2, #0
 8009e12:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009e24:	e10f      	b.n	800a046 <USBH_MSC_Process+0x6ce>
            else if (scsi_status == USBH_FAIL)
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d10c      	bne.n	8009e46 <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e32:	4619      	mov	r1, r3
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	2334      	movs	r3, #52	; 0x34
 8009e38:	fb01 f303 	mul.w	r3, r1, r3
 8009e3c:	4413      	add	r3, r2
 8009e3e:	3390      	adds	r3, #144	; 0x90
 8009e40:	2205      	movs	r2, #5
 8009e42:	701a      	strb	r2, [r3, #0]
            break;
 8009e44:	e0ff      	b.n	800a046 <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	f040 80fc 	bne.w	800a046 <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e54:	4619      	mov	r1, r3
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	2334      	movs	r3, #52	; 0x34
 8009e5a:	fb01 f303 	mul.w	r3, r1, r3
 8009e5e:	4413      	add	r3, r2
 8009e60:	3390      	adds	r3, #144	; 0x90
 8009e62:	2201      	movs	r2, #1
 8009e64:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	2334      	movs	r3, #52	; 0x34
 8009e72:	fb01 f303 	mul.w	r3, r1, r3
 8009e76:	4413      	add	r3, r2
 8009e78:	3391      	adds	r3, #145	; 0x91
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	701a      	strb	r2, [r3, #0]
            break;
 8009e7e:	e0e2      	b.n	800a046 <USBH_MSC_Process+0x6ce>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e86:	b2d9      	uxtb	r1, r3
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e8e:	461a      	mov	r2, r3
 8009e90:	2334      	movs	r3, #52	; 0x34
 8009e92:	fb02 f303 	mul.w	r3, r2, r3
 8009e96:	3398      	adds	r3, #152	; 0x98
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 ff1e 	bl	800ace2 <USBH_MSC_SCSI_RequestSense>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d17b      	bne.n	8009fa8 <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	2334      	movs	r3, #52	; 0x34
 8009ebc:	fb01 f303 	mul.w	r3, r1, r3
 8009ec0:	4413      	add	r3, r2
 8009ec2:	339c      	adds	r3, #156	; 0x9c
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	2b06      	cmp	r3, #6
 8009ec8:	d00c      	beq.n	8009ee4 <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	2334      	movs	r3, #52	; 0x34
 8009ed6:	fb01 f303 	mul.w	r3, r1, r3
 8009eda:	4413      	add	r3, r2
 8009edc:	339c      	adds	r3, #156	; 0x9c
 8009ede:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d117      	bne.n	8009f14 <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	; 0x4c4
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	f242 720f 	movw	r2, #9999	; 0x270f
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d80c      	bhi.n	8009f14 <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f00:	4619      	mov	r1, r3
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	2334      	movs	r3, #52	; 0x34
 8009f06:	fb01 f303 	mul.w	r3, r1, r3
 8009f0a:	4413      	add	r3, r2
 8009f0c:	3390      	adds	r3, #144	; 0x90
 8009f0e:	2202      	movs	r2, #2
 8009f10:	701a      	strb	r2, [r3, #0]
                  break;
 8009f12:	e09b      	b.n	800a04c <USBH_MSC_Process+0x6d4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	2334      	movs	r3, #52	; 0x34
 8009f20:	fb01 f303 	mul.w	r3, r1, r3
 8009f24:	4413      	add	r3, r2
 8009f26:	339c      	adds	r3, #156	; 0x9c
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	484f      	ldr	r0, [pc, #316]	; (800a06c <USBH_MSC_Process+0x6f4>)
 8009f2e:	f003 f8d3 	bl	800d0d8 <iprintf>
 8009f32:	200a      	movs	r0, #10
 8009f34:	f003 f8e2 	bl	800d0fc <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f3e:	4619      	mov	r1, r3
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	2334      	movs	r3, #52	; 0x34
 8009f44:	fb01 f303 	mul.w	r3, r1, r3
 8009f48:	4413      	add	r3, r2
 8009f4a:	339d      	adds	r3, #157	; 0x9d
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4847      	ldr	r0, [pc, #284]	; (800a070 <USBH_MSC_Process+0x6f8>)
 8009f52:	f003 f8c1 	bl	800d0d8 <iprintf>
 8009f56:	200a      	movs	r0, #10
 8009f58:	f003 f8d0 	bl	800d0fc <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f62:	4619      	mov	r1, r3
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	2334      	movs	r3, #52	; 0x34
 8009f68:	fb01 f303 	mul.w	r3, r1, r3
 8009f6c:	4413      	add	r3, r2
 8009f6e:	339e      	adds	r3, #158	; 0x9e
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	4619      	mov	r1, r3
 8009f74:	483f      	ldr	r0, [pc, #252]	; (800a074 <USBH_MSC_Process+0x6fc>)
 8009f76:	f003 f8af 	bl	800d0d8 <iprintf>
 8009f7a:	200a      	movs	r0, #10
 8009f7c:	f003 f8be 	bl	800d0fc <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f86:	4619      	mov	r1, r3
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	2334      	movs	r3, #52	; 0x34
 8009f8c:	fb01 f303 	mul.w	r3, r1, r3
 8009f90:	4413      	add	r3, r2
 8009f92:	3390      	adds	r3, #144	; 0x90
 8009f94:	2201      	movs	r2, #1
 8009f96:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d112      	bne.n	8009fd4 <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 8009fae:	4832      	ldr	r0, [pc, #200]	; (800a078 <USBH_MSC_Process+0x700>)
 8009fb0:	f003 f892 	bl	800d0d8 <iprintf>
 8009fb4:	200a      	movs	r0, #10
 8009fb6:	f003 f8a1 	bl	800d0fc <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	2334      	movs	r3, #52	; 0x34
 8009fc6:	fb01 f303 	mul.w	r3, r1, r3
 8009fca:	4413      	add	r3, r2
 8009fcc:	3390      	adds	r3, #144	; 0x90
 8009fce:	2208      	movs	r2, #8
 8009fd0:	701a      	strb	r2, [r3, #0]
            break;
 8009fd2:	e03a      	b.n	800a04a <USBH_MSC_Process+0x6d2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
 8009fd6:	2b04      	cmp	r3, #4
 8009fd8:	d137      	bne.n	800a04a <USBH_MSC_Process+0x6d2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	2334      	movs	r3, #52	; 0x34
 8009fe6:	fb01 f303 	mul.w	r3, r1, r3
 8009fea:	4413      	add	r3, r2
 8009fec:	3390      	adds	r3, #144	; 0x90
 8009fee:	2201      	movs	r2, #1
 8009ff0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	2334      	movs	r3, #52	; 0x34
 8009ffe:	fb01 f303 	mul.w	r3, r1, r3
 800a002:	4413      	add	r3, r2
 800a004:	3391      	adds	r3, #145	; 0x91
 800a006:	2202      	movs	r2, #2
 800a008:	701a      	strb	r2, [r3, #0]
            break;
 800a00a:	e01e      	b.n	800a04a <USBH_MSC_Process+0x6d2>
            MSC_Handle->current_lun++;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a012:	3301      	adds	r3, #1
 800a014:	b29a      	uxth	r2, r3
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a01c:	e016      	b.n	800a04c <USBH_MSC_Process+0x6d4>
        MSC_Handle->current_lun = 0U;
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	2200      	movs	r2, #0
 800a022:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	2201      	movs	r2, #1
 800a02a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800a032:	2102      	movs	r1, #2
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	4798      	blx	r3
      break;
 800a038:	e00c      	b.n	800a054 <USBH_MSC_Process+0x6dc>
            break;
 800a03a:	bf00      	nop
 800a03c:	e00a      	b.n	800a054 <USBH_MSC_Process+0x6dc>
            break;
 800a03e:	bf00      	nop
 800a040:	e008      	b.n	800a054 <USBH_MSC_Process+0x6dc>
            break;
 800a042:	bf00      	nop
 800a044:	e006      	b.n	800a054 <USBH_MSC_Process+0x6dc>
            break;
 800a046:	bf00      	nop
 800a048:	e004      	b.n	800a054 <USBH_MSC_Process+0x6dc>
            break;
 800a04a:	bf00      	nop
      break;
 800a04c:	e002      	b.n	800a054 <USBH_MSC_Process+0x6dc>
      error = USBH_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	75fb      	strb	r3, [r7, #23]
      break;
 800a052:	bf00      	nop
  }
  return error;
 800a054:	7dfb      	ldrb	r3, [r7, #23]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	0800e288 	.word	0x0800e288
 800a064:	0800e2a8 	.word	0x0800e2a8
 800a068:	0800e2bc 	.word	0x0800e2bc
 800a06c:	0800e2d0 	.word	0x0800e2d0
 800a070:	0800e2e0 	.word	0x0800e2e0
 800a074:	0800e2fc 	.word	0x0800e2fc
 800a078:	0800e270 	.word	0x0800e270

0800a07c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
	...

0800a094 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b088      	sub	sp, #32
 800a098:	af02      	add	r7, sp, #8
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	460b      	mov	r3, r1
 800a09e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a0a6:	69db      	ldr	r3, [r3, #28]
 800a0a8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a0b2:	78fb      	ldrb	r3, [r7, #3]
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	2134      	movs	r1, #52	; 0x34
 800a0b8:	fb01 f303 	mul.w	r3, r1, r3
 800a0bc:	4413      	add	r3, r2
 800a0be:	3390      	adds	r3, #144	; 0x90
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	2b07      	cmp	r3, #7
 800a0c4:	d03d      	beq.n	800a142 <USBH_MSC_RdWrProcess+0xae>
 800a0c6:	2b07      	cmp	r3, #7
 800a0c8:	f300 80dc 	bgt.w	800a284 <USBH_MSC_RdWrProcess+0x1f0>
 800a0cc:	2b05      	cmp	r3, #5
 800a0ce:	d06d      	beq.n	800a1ac <USBH_MSC_RdWrProcess+0x118>
 800a0d0:	2b06      	cmp	r3, #6
 800a0d2:	f040 80d7 	bne.w	800a284 <USBH_MSC_RdWrProcess+0x1f0>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a0d6:	78f9      	ldrb	r1, [r7, #3]
 800a0d8:	2300      	movs	r3, #0
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	2200      	movs	r2, #0
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fee2 	bl	800aeaa <USBH_MSC_SCSI_Read>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d10b      	bne.n	800a108 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	2134      	movs	r1, #52	; 0x34
 800a0f6:	fb01 f303 	mul.w	r3, r1, r3
 800a0fa:	4413      	add	r3, r2
 800a0fc:	3390      	adds	r3, #144	; 0x90
 800a0fe:	2201      	movs	r2, #1
 800a100:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a106:	e0bf      	b.n	800a288 <USBH_MSC_RdWrProcess+0x1f4>
      else if (scsi_status == USBH_FAIL)
 800a108:	7bfb      	ldrb	r3, [r7, #15]
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d109      	bne.n	800a122 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	2134      	movs	r1, #52	; 0x34
 800a114:	fb01 f303 	mul.w	r3, r1, r3
 800a118:	4413      	add	r3, r2
 800a11a:	3390      	adds	r3, #144	; 0x90
 800a11c:	2205      	movs	r2, #5
 800a11e:	701a      	strb	r2, [r3, #0]
      break;
 800a120:	e0b2      	b.n	800a288 <USBH_MSC_RdWrProcess+0x1f4>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a122:	7bfb      	ldrb	r3, [r7, #15]
 800a124:	2b04      	cmp	r3, #4
 800a126:	f040 80af 	bne.w	800a288 <USBH_MSC_RdWrProcess+0x1f4>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a12a:	78fb      	ldrb	r3, [r7, #3]
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	2134      	movs	r1, #52	; 0x34
 800a130:	fb01 f303 	mul.w	r3, r1, r3
 800a134:	4413      	add	r3, r2
 800a136:	3390      	adds	r3, #144	; 0x90
 800a138:	2208      	movs	r2, #8
 800a13a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a13c:	2302      	movs	r3, #2
 800a13e:	75fb      	strb	r3, [r7, #23]
      break;
 800a140:	e0a2      	b.n	800a288 <USBH_MSC_RdWrProcess+0x1f4>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a142:	78f9      	ldrb	r1, [r7, #3]
 800a144:	2300      	movs	r3, #0
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	2300      	movs	r3, #0
 800a14a:	2200      	movs	r2, #0
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fe41 	bl	800add4 <USBH_MSC_SCSI_Write>
 800a152:	4603      	mov	r3, r0
 800a154:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10b      	bne.n	800a174 <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a15c:	78fb      	ldrb	r3, [r7, #3]
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	2134      	movs	r1, #52	; 0x34
 800a162:	fb01 f303 	mul.w	r3, r1, r3
 800a166:	4413      	add	r3, r2
 800a168:	3390      	adds	r3, #144	; 0x90
 800a16a:	2201      	movs	r2, #1
 800a16c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a172:	e08b      	b.n	800a28c <USBH_MSC_RdWrProcess+0x1f8>
      else if (scsi_status == USBH_FAIL)
 800a174:	7bfb      	ldrb	r3, [r7, #15]
 800a176:	2b02      	cmp	r3, #2
 800a178:	d109      	bne.n	800a18e <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a17a:	78fb      	ldrb	r3, [r7, #3]
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	2134      	movs	r1, #52	; 0x34
 800a180:	fb01 f303 	mul.w	r3, r1, r3
 800a184:	4413      	add	r3, r2
 800a186:	3390      	adds	r3, #144	; 0x90
 800a188:	2205      	movs	r2, #5
 800a18a:	701a      	strb	r2, [r3, #0]
      break;
 800a18c:	e07e      	b.n	800a28c <USBH_MSC_RdWrProcess+0x1f8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a18e:	7bfb      	ldrb	r3, [r7, #15]
 800a190:	2b04      	cmp	r3, #4
 800a192:	d17b      	bne.n	800a28c <USBH_MSC_RdWrProcess+0x1f8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a194:	78fb      	ldrb	r3, [r7, #3]
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	2134      	movs	r1, #52	; 0x34
 800a19a:	fb01 f303 	mul.w	r3, r1, r3
 800a19e:	4413      	add	r3, r2
 800a1a0:	3390      	adds	r3, #144	; 0x90
 800a1a2:	2208      	movs	r2, #8
 800a1a4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1aa:	e06f      	b.n	800a28c <USBH_MSC_RdWrProcess+0x1f8>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a1ac:	78fb      	ldrb	r3, [r7, #3]
 800a1ae:	2234      	movs	r2, #52	; 0x34
 800a1b0:	fb02 f303 	mul.w	r3, r2, r3
 800a1b4:	3398      	adds	r3, #152	; 0x98
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	1d1a      	adds	r2, r3, #4
 800a1bc:	78fb      	ldrb	r3, [r7, #3]
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 fd8e 	bl	800ace2 <USBH_MSC_SCSI_RequestSense>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d140      	bne.n	800a252 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	2134      	movs	r1, #52	; 0x34
 800a1d6:	fb01 f303 	mul.w	r3, r1, r3
 800a1da:	4413      	add	r3, r2
 800a1dc:	339c      	adds	r3, #156	; 0x9c
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	482e      	ldr	r0, [pc, #184]	; (800a29c <USBH_MSC_RdWrProcess+0x208>)
 800a1e4:	f002 ff78 	bl	800d0d8 <iprintf>
 800a1e8:	200a      	movs	r0, #10
 800a1ea:	f002 ff87 	bl	800d0fc <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 800a1ee:	78fb      	ldrb	r3, [r7, #3]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	2134      	movs	r1, #52	; 0x34
 800a1f4:	fb01 f303 	mul.w	r3, r1, r3
 800a1f8:	4413      	add	r3, r2
 800a1fa:	339d      	adds	r3, #157	; 0x9d
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	4619      	mov	r1, r3
 800a200:	4827      	ldr	r0, [pc, #156]	; (800a2a0 <USBH_MSC_RdWrProcess+0x20c>)
 800a202:	f002 ff69 	bl	800d0d8 <iprintf>
 800a206:	200a      	movs	r0, #10
 800a208:	f002 ff78 	bl	800d0fc <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 800a20c:	78fb      	ldrb	r3, [r7, #3]
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	2134      	movs	r1, #52	; 0x34
 800a212:	fb01 f303 	mul.w	r3, r1, r3
 800a216:	4413      	add	r3, r2
 800a218:	339e      	adds	r3, #158	; 0x9e
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	4619      	mov	r1, r3
 800a21e:	4821      	ldr	r0, [pc, #132]	; (800a2a4 <USBH_MSC_RdWrProcess+0x210>)
 800a220:	f002 ff5a 	bl	800d0d8 <iprintf>
 800a224:	200a      	movs	r0, #10
 800a226:	f002 ff69 	bl	800d0fc <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a22a:	78fb      	ldrb	r3, [r7, #3]
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	2134      	movs	r1, #52	; 0x34
 800a230:	fb01 f303 	mul.w	r3, r1, r3
 800a234:	4413      	add	r3, r2
 800a236:	3390      	adds	r3, #144	; 0x90
 800a238:	2201      	movs	r2, #1
 800a23a:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a23c:	78fb      	ldrb	r3, [r7, #3]
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	2134      	movs	r1, #52	; 0x34
 800a242:	fb01 f303 	mul.w	r3, r1, r3
 800a246:	4413      	add	r3, r2
 800a248:	3391      	adds	r3, #145	; 0x91
 800a24a:	2202      	movs	r2, #2
 800a24c:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a24e:	2302      	movs	r3, #2
 800a250:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a252:	7bfb      	ldrb	r3, [r7, #15]
 800a254:	2b02      	cmp	r3, #2
 800a256:	d106      	bne.n	800a266 <USBH_MSC_RdWrProcess+0x1d2>
      {
        USBH_UsrLog("MSC Device NOT ready");
 800a258:	4813      	ldr	r0, [pc, #76]	; (800a2a8 <USBH_MSC_RdWrProcess+0x214>)
 800a25a:	f002 ff3d 	bl	800d0d8 <iprintf>
 800a25e:	200a      	movs	r0, #10
 800a260:	f002 ff4c 	bl	800d0fc <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a264:	e014      	b.n	800a290 <USBH_MSC_RdWrProcess+0x1fc>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a266:	7bfb      	ldrb	r3, [r7, #15]
 800a268:	2b04      	cmp	r3, #4
 800a26a:	d111      	bne.n	800a290 <USBH_MSC_RdWrProcess+0x1fc>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a26c:	78fb      	ldrb	r3, [r7, #3]
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	2134      	movs	r1, #52	; 0x34
 800a272:	fb01 f303 	mul.w	r3, r1, r3
 800a276:	4413      	add	r3, r2
 800a278:	3390      	adds	r3, #144	; 0x90
 800a27a:	2208      	movs	r2, #8
 800a27c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a27e:	2302      	movs	r3, #2
 800a280:	75fb      	strb	r3, [r7, #23]
      break;
 800a282:	e005      	b.n	800a290 <USBH_MSC_RdWrProcess+0x1fc>

    default:
      break;
 800a284:	bf00      	nop
 800a286:	e004      	b.n	800a292 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800a288:	bf00      	nop
 800a28a:	e002      	b.n	800a292 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800a28c:	bf00      	nop
 800a28e:	e000      	b.n	800a292 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800a290:	bf00      	nop

  }
  return error;
 800a292:	7dfb      	ldrb	r3, [r7, #23]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	0800e2d0 	.word	0x0800e2d0
 800a2a0:	0800e2e0 	.word	0x0800e2e0
 800a2a4:	0800e2fc 	.word	0x0800e2fc
 800a2a8:	0800e270 	.word	0x0800e270

0800a2ac <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a2be:	69db      	ldr	r3, [r3, #28]
 800a2c0:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b0b      	cmp	r3, #11
 800a2ca:	d10c      	bne.n	800a2e6 <USBH_MSC_UnitIsReady+0x3a>
 800a2cc:	78fb      	ldrb	r3, [r7, #3]
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	2134      	movs	r1, #52	; 0x34
 800a2d2:	fb01 f303 	mul.w	r3, r1, r3
 800a2d6:	4413      	add	r3, r2
 800a2d8:	3391      	adds	r3, #145	; 0x91
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d102      	bne.n	800a2e6 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	73fb      	strb	r3, [r7, #15]
 800a2e4:	e001      	b.n	800a2ea <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	460b      	mov	r3, r1
 800a302:	607a      	str	r2, [r7, #4]
 800a304:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b0b      	cmp	r3, #11
 800a318:	d10d      	bne.n	800a336 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a31a:	7afb      	ldrb	r3, [r7, #11]
 800a31c:	2234      	movs	r2, #52	; 0x34
 800a31e:	fb02 f303 	mul.w	r3, r2, r3
 800a322:	3390      	adds	r3, #144	; 0x90
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	4413      	add	r3, r2
 800a328:	2234      	movs	r2, #52	; 0x34
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f003 f8fa 	bl	800d526 <memcpy>
    return USBH_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	e000      	b.n	800a338 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a336:	2302      	movs	r3, #2
  }
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3718      	adds	r7, #24
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b088      	sub	sp, #32
 800a344:	af02      	add	r7, sp, #8
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	607a      	str	r2, [r7, #4]
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	460b      	mov	r3, r1
 800a34e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a356:	69db      	ldr	r3, [r3, #28]
 800a358:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00e      	beq.n	800a384 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a36c:	2b0b      	cmp	r3, #11
 800a36e:	d109      	bne.n	800a384 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a370:	7afb      	ldrb	r3, [r7, #11]
 800a372:	697a      	ldr	r2, [r7, #20]
 800a374:	2134      	movs	r1, #52	; 0x34
 800a376:	fb01 f303 	mul.w	r3, r1, r3
 800a37a:	4413      	add	r3, r2
 800a37c:	3390      	adds	r3, #144	; 0x90
 800a37e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a380:	2b01      	cmp	r3, #1
 800a382:	d001      	beq.n	800a388 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a384:	2302      	movs	r3, #2
 800a386:	e040      	b.n	800a40a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	2206      	movs	r2, #6
 800a38c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a38e:	7afb      	ldrb	r3, [r7, #11]
 800a390:	697a      	ldr	r2, [r7, #20]
 800a392:	2134      	movs	r1, #52	; 0x34
 800a394:	fb01 f303 	mul.w	r3, r1, r3
 800a398:	4413      	add	r3, r2
 800a39a:	3390      	adds	r3, #144	; 0x90
 800a39c:	2206      	movs	r2, #6
 800a39e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a3a0:	7afb      	ldrb	r3, [r7, #11]
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a3aa:	7af9      	ldrb	r1, [r7, #11]
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 fd78 	bl	800aeaa <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800a3c0:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a3c2:	e016      	b.n	800a3f2 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	; 0x4c4
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	1ad2      	subs	r2, r2, r3
 800a3ce:	6a3b      	ldr	r3, [r7, #32]
 800a3d0:	f242 7110 	movw	r1, #10000	; 0x2710
 800a3d4:	fb01 f303 	mul.w	r3, r1, r3
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d805      	bhi.n	800a3e8 <USBH_MSC_Read+0xa8>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d104      	bne.n	800a3f2 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	e00b      	b.n	800a40a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a3f2:	7afb      	ldrb	r3, [r7, #11]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f7ff fe4c 	bl	800a094 <USBH_MSC_RdWrProcess>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d0e0      	beq.n	800a3c4 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2201      	movs	r2, #1
 800a406:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b088      	sub	sp, #32
 800a416:	af02      	add	r7, sp, #8
 800a418:	60f8      	str	r0, [r7, #12]
 800a41a:	607a      	str	r2, [r7, #4]
 800a41c:	603b      	str	r3, [r7, #0]
 800a41e:	460b      	mov	r3, r1
 800a420:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00e      	beq.n	800a456 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a43e:	2b0b      	cmp	r3, #11
 800a440:	d109      	bne.n	800a456 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a442:	7afb      	ldrb	r3, [r7, #11]
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	2134      	movs	r1, #52	; 0x34
 800a448:	fb01 f303 	mul.w	r3, r1, r3
 800a44c:	4413      	add	r3, r2
 800a44e:	3390      	adds	r3, #144	; 0x90
 800a450:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a452:	2b01      	cmp	r3, #1
 800a454:	d001      	beq.n	800a45a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a456:	2302      	movs	r3, #2
 800a458:	e040      	b.n	800a4dc <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	2207      	movs	r2, #7
 800a45e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a460:	7afb      	ldrb	r3, [r7, #11]
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	2134      	movs	r1, #52	; 0x34
 800a466:	fb01 f303 	mul.w	r3, r1, r3
 800a46a:	4413      	add	r3, r2
 800a46c:	3390      	adds	r3, #144	; 0x90
 800a46e:	2207      	movs	r2, #7
 800a470:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a472:	7afb      	ldrb	r3, [r7, #11]
 800a474:	b29a      	uxth	r2, r3
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a47c:	7af9      	ldrb	r1, [r7, #11]
 800a47e:	6a3b      	ldr	r3, [r7, #32]
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f000 fca4 	bl	800add4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800a492:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a494:	e016      	b.n	800a4c4 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	; 0x4c4
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	1ad2      	subs	r2, r2, r3
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	f242 7110 	movw	r1, #10000	; 0x2710
 800a4a6:	fb01 f303 	mul.w	r3, r1, r3
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d805      	bhi.n	800a4ba <USBH_MSC_Write+0xa8>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d104      	bne.n	800a4c4 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	e00b      	b.n	800a4dc <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a4c4:	7afb      	ldrb	r3, [r7, #11]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f7ff fde3 	bl	800a094 <USBH_MSC_RdWrProcess>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d0e0      	beq.n	800a496 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3718      	adds	r7, #24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2221      	movs	r2, #33	; 0x21
 800a4f0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	22ff      	movs	r2, #255	; 0xff
 800a4f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a50a:	2200      	movs	r2, #0
 800a50c:	2100      	movs	r1, #0
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f002 f936 	bl	800c780 <USBH_CtlReq>
 800a514:	4603      	mov	r3, r0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b082      	sub	sp, #8
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	22a1      	movs	r2, #161	; 0xa1
 800a52c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	22fe      	movs	r2, #254	; 0xfe
 800a532:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a546:	2201      	movs	r2, #1
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f002 f918 	bl	800c780 <USBH_CtlReq>
 800a550:	4603      	mov	r3, r0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
	...

0800a55c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a56a:	69db      	ldr	r3, [r3, #28]
 800a56c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	4a09      	ldr	r2, [pc, #36]	; (800a598 <USBH_MSC_BOT_Init+0x3c>)
 800a572:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4a09      	ldr	r2, [pc, #36]	; (800a59c <USBH_MSC_BOT_Init+0x40>)
 800a578:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3714      	adds	r7, #20
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr
 800a598:	43425355 	.word	0x43425355
 800a59c:	20304050 	.word	0x20304050

0800a5a0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b088      	sub	sp, #32
 800a5a4:	af02      	add	r7, sp, #8
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a5c2:	69db      	ldr	r3, [r3, #28]
 800a5c4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	2b0a      	cmp	r3, #10
 800a5d4:	f200 819e 	bhi.w	800a914 <USBH_MSC_BOT_Process+0x374>
 800a5d8:	a201      	add	r2, pc, #4	; (adr r2, 800a5e0 <USBH_MSC_BOT_Process+0x40>)
 800a5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5de:	bf00      	nop
 800a5e0:	0800a60d 	.word	0x0800a60d
 800a5e4:	0800a635 	.word	0x0800a635
 800a5e8:	0800a69f 	.word	0x0800a69f
 800a5ec:	0800a6bd 	.word	0x0800a6bd
 800a5f0:	0800a741 	.word	0x0800a741
 800a5f4:	0800a763 	.word	0x0800a763
 800a5f8:	0800a7fb 	.word	0x0800a7fb
 800a5fc:	0800a817 	.word	0x0800a817
 800a600:	0800a869 	.word	0x0800a869
 800a604:	0800a899 	.word	0x0800a899
 800a608:	0800a8fb 	.word	0x0800a8fb
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	78fa      	ldrb	r2, [r7, #3]
 800a610:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	2202      	movs	r2, #2
 800a618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	795b      	ldrb	r3, [r3, #5]
 800a626:	2201      	movs	r2, #1
 800a628:	9200      	str	r2, [sp, #0]
 800a62a:	221f      	movs	r2, #31
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f002 fac4 	bl	800cbba <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a632:	e17e      	b.n	800a932 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	795b      	ldrb	r3, [r3, #5]
 800a638:	4619      	mov	r1, r3
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f7f6 fe2e 	bl	800129c <USBH_LL_GetURBState>
 800a640:	4603      	mov	r3, r0
 800a642:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a644:	7d3b      	ldrb	r3, [r7, #20]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d118      	bne.n	800a67c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00f      	beq.n	800a672 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a658:	b25b      	sxtb	r3, r3
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	da04      	bge.n	800a668 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	2203      	movs	r2, #3
 800a662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a666:	e157      	b.n	800a918 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	2205      	movs	r2, #5
 800a66c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a670:	e152      	b.n	800a918 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	2207      	movs	r2, #7
 800a676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a67a:	e14d      	b.n	800a918 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a67c:	7d3b      	ldrb	r3, [r7, #20]
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d104      	bne.n	800a68c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a68a:	e145      	b.n	800a918 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a68c:	7d3b      	ldrb	r3, [r7, #20]
 800a68e:	2b05      	cmp	r3, #5
 800a690:	f040 8142 	bne.w	800a918 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	220a      	movs	r2, #10
 800a698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a69c:	e13c      	b.n	800a918 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	895a      	ldrh	r2, [r3, #10]
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	791b      	ldrb	r3, [r3, #4]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f002 faa9 	bl	800cc04 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	2204      	movs	r2, #4
 800a6b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a6ba:	e13a      	b.n	800a932 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	791b      	ldrb	r3, [r3, #4]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7f6 fdea 	bl	800129c <USBH_LL_GetURBState>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a6cc:	7d3b      	ldrb	r3, [r7, #20]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d12d      	bne.n	800a72e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	8952      	ldrh	r2, [r2, #10]
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d910      	bls.n	800a700 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	8952      	ldrh	r2, [r2, #10]
 800a6e8:	441a      	add	r2, r3
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	8952      	ldrh	r2, [r2, #10]
 800a6f8:	1a9a      	subs	r2, r3, r2
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	65da      	str	r2, [r3, #92]	; 0x5c
 800a6fe:	e002      	b.n	800a706 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	2200      	movs	r2, #0
 800a704:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00a      	beq.n	800a724 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	895a      	ldrh	r2, [r3, #10]
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	791b      	ldrb	r3, [r3, #4]
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f002 fa71 	bl	800cc04 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a722:	e0fb      	b.n	800a91c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	2207      	movs	r2, #7
 800a728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a72c:	e0f6      	b.n	800a91c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a72e:	7d3b      	ldrb	r3, [r7, #20]
 800a730:	2b05      	cmp	r3, #5
 800a732:	f040 80f3 	bne.w	800a91c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	2209      	movs	r2, #9
 800a73a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a73e:	e0ed      	b.n	800a91c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	891a      	ldrh	r2, [r3, #8]
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	795b      	ldrb	r3, [r3, #5]
 800a74e:	2001      	movs	r0, #1
 800a750:	9000      	str	r0, [sp, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f002 fa31 	bl	800cbba <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	2206      	movs	r2, #6
 800a75c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a760:	e0e7      	b.n	800a932 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	795b      	ldrb	r3, [r3, #5]
 800a766:	4619      	mov	r1, r3
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f7f6 fd97 	bl	800129c <USBH_LL_GetURBState>
 800a76e:	4603      	mov	r3, r0
 800a770:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a772:	7d3b      	ldrb	r3, [r7, #20]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d12f      	bne.n	800a7d8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	8912      	ldrh	r2, [r2, #8]
 800a780:	4293      	cmp	r3, r2
 800a782:	d910      	bls.n	800a7a6 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	8912      	ldrh	r2, [r2, #8]
 800a78e:	441a      	add	r2, r3
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a79a:	693a      	ldr	r2, [r7, #16]
 800a79c:	8912      	ldrh	r2, [r2, #8]
 800a79e:	1a9a      	subs	r2, r3, r2
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	65da      	str	r2, [r3, #92]	; 0x5c
 800a7a4:	e002      	b.n	800a7ac <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00c      	beq.n	800a7ce <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	891a      	ldrh	r2, [r3, #8]
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	795b      	ldrb	r3, [r3, #5]
 800a7c2:	2001      	movs	r0, #1
 800a7c4:	9000      	str	r0, [sp, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f002 f9f7 	bl	800cbba <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a7cc:	e0a8      	b.n	800a920 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	2207      	movs	r2, #7
 800a7d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a7d6:	e0a3      	b.n	800a920 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a7d8:	7d3b      	ldrb	r3, [r7, #20]
 800a7da:	2b02      	cmp	r3, #2
 800a7dc:	d104      	bne.n	800a7e8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	2205      	movs	r2, #5
 800a7e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a7e6:	e09b      	b.n	800a920 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a7e8:	7d3b      	ldrb	r3, [r7, #20]
 800a7ea:	2b05      	cmp	r3, #5
 800a7ec:	f040 8098 	bne.w	800a920 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	220a      	movs	r2, #10
 800a7f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a7f8:	e092      	b.n	800a920 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	791b      	ldrb	r3, [r3, #4]
 800a804:	220d      	movs	r2, #13
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f002 f9fc 	bl	800cc04 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	2208      	movs	r2, #8
 800a810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a814:	e08d      	b.n	800a932 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	791b      	ldrb	r3, [r3, #4]
 800a81a:	4619      	mov	r1, r3
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f7f6 fd3d 	bl	800129c <USBH_LL_GetURBState>
 800a822:	4603      	mov	r3, r0
 800a824:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a826:	7d3b      	ldrb	r3, [r7, #20]
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d115      	bne.n	800a858 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f8a9 	bl	800a994 <USBH_MSC_DecodeCSW>
 800a842:	4603      	mov	r3, r0
 800a844:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a846:	7d7b      	ldrb	r3, [r7, #21]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d102      	bne.n	800a852 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a850:	e068      	b.n	800a924 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a852:	2302      	movs	r3, #2
 800a854:	75fb      	strb	r3, [r7, #23]
      break;
 800a856:	e065      	b.n	800a924 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a858:	7d3b      	ldrb	r3, [r7, #20]
 800a85a:	2b05      	cmp	r3, #5
 800a85c:	d162      	bne.n	800a924 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	2209      	movs	r2, #9
 800a862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a866:	e05d      	b.n	800a924 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a868:	78fb      	ldrb	r3, [r7, #3]
 800a86a:	2200      	movs	r2, #0
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f864 	bl	800a93c <USBH_MSC_BOT_Abort>
 800a874:	4603      	mov	r3, r0
 800a876:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a878:	7dbb      	ldrb	r3, [r7, #22]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d104      	bne.n	800a888 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	2207      	movs	r2, #7
 800a882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a886:	e04f      	b.n	800a928 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a888:	7dbb      	ldrb	r3, [r7, #22]
 800a88a:	2b04      	cmp	r3, #4
 800a88c:	d14c      	bne.n	800a928 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	220b      	movs	r2, #11
 800a892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a896:	e047      	b.n	800a928 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a898:	78fb      	ldrb	r3, [r7, #3]
 800a89a:	2201      	movs	r2, #1
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f84c 	bl	800a93c <USBH_MSC_BOT_Abort>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a8a8:	7dbb      	ldrb	r3, [r7, #22]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d11d      	bne.n	800a8ea <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	795b      	ldrb	r3, [r3, #5]
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7f6 fd57 	bl	8001368 <USBH_LL_GetToggle>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	7959      	ldrb	r1, [r3, #5]
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
 800a8c4:	f1c3 0301 	rsb	r3, r3, #1
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7f6 fd19 	bl	8001304 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	791b      	ldrb	r3, [r3, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f7f6 fd12 	bl	8001304 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	2209      	movs	r2, #9
 800a8e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a8e8:	e020      	b.n	800a92c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a8ea:	7dbb      	ldrb	r3, [r7, #22]
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d11d      	bne.n	800a92c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	220b      	movs	r2, #11
 800a8f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8f8:	e018      	b.n	800a92c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7ff fdf2 	bl	800a4e4 <USBH_MSC_BOT_REQ_Reset>
 800a900:	4603      	mov	r3, r0
 800a902:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a904:	7dfb      	ldrb	r3, [r7, #23]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d112      	bne.n	800a930 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a912:	e00d      	b.n	800a930 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a914:	bf00      	nop
 800a916:	e00c      	b.n	800a932 <USBH_MSC_BOT_Process+0x392>
      break;
 800a918:	bf00      	nop
 800a91a:	e00a      	b.n	800a932 <USBH_MSC_BOT_Process+0x392>
      break;
 800a91c:	bf00      	nop
 800a91e:	e008      	b.n	800a932 <USBH_MSC_BOT_Process+0x392>
      break;
 800a920:	bf00      	nop
 800a922:	e006      	b.n	800a932 <USBH_MSC_BOT_Process+0x392>
      break;
 800a924:	bf00      	nop
 800a926:	e004      	b.n	800a932 <USBH_MSC_BOT_Process+0x392>
      break;
 800a928:	bf00      	nop
 800a92a:	e002      	b.n	800a932 <USBH_MSC_BOT_Process+0x392>
      break;
 800a92c:	bf00      	nop
 800a92e:	e000      	b.n	800a932 <USBH_MSC_BOT_Process+0x392>
      break;
 800a930:	bf00      	nop
  }
  return status;
 800a932:	7dfb      	ldrb	r3, [r7, #23]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3718      	adds	r7, #24
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	460b      	mov	r3, r1
 800a946:	70fb      	strb	r3, [r7, #3]
 800a948:	4613      	mov	r3, r2
 800a94a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a94c:	2302      	movs	r3, #2
 800a94e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a95a:	78bb      	ldrb	r3, [r7, #2]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <USBH_MSC_BOT_Abort+0x2a>
 800a960:	2b01      	cmp	r3, #1
 800a962:	d009      	beq.n	800a978 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a964:	e011      	b.n	800a98a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	79db      	ldrb	r3, [r3, #7]
 800a96a:	4619      	mov	r1, r3
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f001 fbcb 	bl	800c108 <USBH_ClrFeature>
 800a972:	4603      	mov	r3, r0
 800a974:	73fb      	strb	r3, [r7, #15]
      break;
 800a976:	e008      	b.n	800a98a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	799b      	ldrb	r3, [r3, #6]
 800a97c:	4619      	mov	r1, r3
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f001 fbc2 	bl	800c108 <USBH_ClrFeature>
 800a984:	4603      	mov	r3, r0
 800a986:	73fb      	strb	r3, [r7, #15]
      break;
 800a988:	bf00      	nop
  }
  return status;
 800a98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	791b      	ldrb	r3, [r3, #4]
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7f6 fc08 	bl	80011c6 <USBH_LL_GetLastXferSize>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b0d      	cmp	r3, #13
 800a9ba:	d002      	beq.n	800a9c2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a9bc:	2302      	movs	r3, #2
 800a9be:	73fb      	strb	r3, [r7, #15]
 800a9c0:	e024      	b.n	800aa0c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9c6:	4a14      	ldr	r2, [pc, #80]	; (800aa18 <USBH_MSC_DecodeCSW+0x84>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d11d      	bne.n	800aa08 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d119      	bne.n	800aa0c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d102      	bne.n	800a9e8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	73fb      	strb	r3, [r7, #15]
 800a9e6:	e011      	b.n	800aa0c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d102      	bne.n	800a9f8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	73fb      	strb	r3, [r7, #15]
 800a9f6:	e009      	b.n	800aa0c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	d104      	bne.n	800aa0c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800aa02:	2302      	movs	r3, #2
 800aa04:	73fb      	strb	r3, [r7, #15]
 800aa06:	e001      	b.n	800aa0c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800aa08:	2302      	movs	r3, #2
 800aa0a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	53425355 	.word	0x53425355

0800aa1c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	460b      	mov	r3, r1
 800aa26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800aa28:	2302      	movs	r3, #2
 800aa2a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d002      	beq.n	800aa46 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	d021      	beq.n	800aa88 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800aa44:	e028      	b.n	800aa98 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	220a      	movs	r2, #10
 800aa58:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	3363      	adds	r3, #99	; 0x63
 800aa60:	2210      	movs	r2, #16
 800aa62:	2100      	movs	r1, #0
 800aa64:	4618      	mov	r0, r3
 800aa66:	f002 fc85 	bl	800d374 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	2201      	movs	r2, #1
 800aa76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800aa82:	2301      	movs	r3, #1
 800aa84:	73fb      	strb	r3, [r7, #15]
      break;
 800aa86:	e007      	b.n	800aa98 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800aa88:	78fb      	ldrb	r3, [r7, #3]
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7ff fd87 	bl	800a5a0 <USBH_MSC_BOT_Process>
 800aa92:	4603      	mov	r3, r0
 800aa94:	73fb      	strb	r3, [r7, #15]
      break;
 800aa96:	bf00      	nop
  }

  return error;
 800aa98:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b086      	sub	sp, #24
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	60f8      	str	r0, [r7, #12]
 800aaaa:	460b      	mov	r3, r1
 800aaac:	607a      	str	r2, [r7, #4]
 800aaae:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 800aab0:	2301      	movs	r3, #1
 800aab2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800aaba:	69db      	ldr	r3, [r3, #28]
 800aabc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d002      	beq.n	800aace <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d027      	beq.n	800ab1c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800aacc:	e05f      	b.n	800ab8e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	2208      	movs	r2, #8
 800aad2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	2280      	movs	r2, #128	; 0x80
 800aad8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	220a      	movs	r2, #10
 800aae0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	3363      	adds	r3, #99	; 0x63
 800aae8:	2210      	movs	r2, #16
 800aaea:	2100      	movs	r1, #0
 800aaec:	4618      	mov	r0, r3
 800aaee:	f002 fc41 	bl	800d374 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	2225      	movs	r2, #37	; 0x25
 800aaf6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2202      	movs	r2, #2
 800ab06:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	f103 0210 	add.w	r2, r3, #16
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ab16:	2301      	movs	r3, #1
 800ab18:	75fb      	strb	r3, [r7, #23]
      break;
 800ab1a:	e038      	b.n	800ab8e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ab1c:	7afb      	ldrb	r3, [r7, #11]
 800ab1e:	4619      	mov	r1, r3
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f7ff fd3d 	bl	800a5a0 <USBH_MSC_BOT_Process>
 800ab26:	4603      	mov	r3, r0
 800ab28:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d12d      	bne.n	800ab8c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab36:	3303      	adds	r3, #3
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab42:	3302      	adds	r3, #2
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	021b      	lsls	r3, r3, #8
 800ab48:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab50:	3301      	adds	r3, #1
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ab56:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	061b      	lsls	r3, r3, #24
 800ab62:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab6e:	3307      	adds	r3, #7
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab7a:	3306      	adds	r3, #6
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	021b      	lsls	r3, r3, #8
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	4313      	orrs	r3, r2
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	809a      	strh	r2, [r3, #4]
      break;
 800ab8c:	bf00      	nop
  }

  return error;
 800ab8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3718      	adds	r7, #24
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	460b      	mov	r3, r1
 800aba2:	607a      	str	r2, [r7, #4]
 800aba4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800aba6:	2302      	movs	r3, #2
 800aba8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800abb0:	69db      	ldr	r3, [r3, #28]
 800abb2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d002      	beq.n	800abc4 <USBH_MSC_SCSI_Inquiry+0x2c>
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d03d      	beq.n	800ac3e <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800abc2:	e089      	b.n	800acd8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	2224      	movs	r2, #36	; 0x24
 800abc8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	2280      	movs	r2, #128	; 0x80
 800abce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	220a      	movs	r2, #10
 800abd6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	3363      	adds	r3, #99	; 0x63
 800abde:	220a      	movs	r2, #10
 800abe0:	2100      	movs	r1, #0
 800abe2:	4618      	mov	r0, r3
 800abe4:	f002 fbc6 	bl	800d374 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	2212      	movs	r2, #18
 800abec:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800abf0:	7afb      	ldrb	r3, [r7, #11]
 800abf2:	015b      	lsls	r3, r3, #5
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	2224      	movs	r2, #36	; 0x24
 800ac10:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	2202      	movs	r2, #2
 800ac28:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	f103 0210 	add.w	r2, r3, #16
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac3c:	e04c      	b.n	800acd8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ac3e:	7afb      	ldrb	r3, [r7, #11]
 800ac40:	4619      	mov	r1, r3
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f7ff fcac 	bl	800a5a0 <USBH_MSC_BOT_Process>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ac4c:	7dfb      	ldrb	r3, [r7, #23]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d141      	bne.n	800acd6 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800ac52:	2222      	movs	r2, #34	; 0x22
 800ac54:	2100      	movs	r1, #0
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f002 fb8c 	bl	800d374 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	f003 031f 	and.w	r3, r3, #31
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	095b      	lsrs	r3, r3, #5
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac84:	3301      	adds	r3, #1
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	b25b      	sxtb	r3, r3
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	da03      	bge.n	800ac96 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2201      	movs	r2, #1
 800ac92:	709a      	strb	r2, [r3, #2]
 800ac94:	e002      	b.n	800ac9c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	1cd8      	adds	r0, r3, #3
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aca6:	3308      	adds	r3, #8
 800aca8:	2208      	movs	r2, #8
 800acaa:	4619      	mov	r1, r3
 800acac:	f002 fc3b 	bl	800d526 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f103 000c 	add.w	r0, r3, #12
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acbc:	3310      	adds	r3, #16
 800acbe:	2210      	movs	r2, #16
 800acc0:	4619      	mov	r1, r3
 800acc2:	f002 fc30 	bl	800d526 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	331d      	adds	r3, #29
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800acd0:	3220      	adds	r2, #32
 800acd2:	6812      	ldr	r2, [r2, #0]
 800acd4:	601a      	str	r2, [r3, #0]
      break;
 800acd6:	bf00      	nop
  }

  return error;
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b086      	sub	sp, #24
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	60f8      	str	r0, [r7, #12]
 800acea:	460b      	mov	r3, r1
 800acec:	607a      	str	r2, [r7, #4]
 800acee:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800acf0:	2302      	movs	r3, #2
 800acf2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800acfa:	69db      	ldr	r3, [r3, #28]
 800acfc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d002      	beq.n	800ad0e <USBH_MSC_SCSI_RequestSense+0x2c>
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d03d      	beq.n	800ad88 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800ad0c:	e05d      	b.n	800adca <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	220e      	movs	r2, #14
 800ad12:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	2280      	movs	r2, #128	; 0x80
 800ad18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	220a      	movs	r2, #10
 800ad20:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	3363      	adds	r3, #99	; 0x63
 800ad28:	2210      	movs	r2, #16
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f002 fb21 	bl	800d374 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	2203      	movs	r2, #3
 800ad36:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ad3a:	7afb      	ldrb	r3, [r7, #11]
 800ad3c:	015b      	lsls	r3, r3, #5
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	220e      	movs	r2, #14
 800ad5a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	2201      	movs	r2, #1
 800ad6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	2202      	movs	r2, #2
 800ad72:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	f103 0210 	add.w	r2, r3, #16
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ad82:	2301      	movs	r3, #1
 800ad84:	75fb      	strb	r3, [r7, #23]
      break;
 800ad86:	e020      	b.n	800adca <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ad88:	7afb      	ldrb	r3, [r7, #11]
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f7ff fc07 	bl	800a5a0 <USBH_MSC_BOT_Process>
 800ad92:	4603      	mov	r3, r0
 800ad94:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ad96:	7dfb      	ldrb	r3, [r7, #23]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d115      	bne.n	800adc8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ada2:	3302      	adds	r3, #2
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	f003 030f 	and.w	r3, r3, #15
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adb6:	7b1a      	ldrb	r2, [r3, #12]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adc2:	7b5a      	ldrb	r2, [r3, #13]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	709a      	strb	r2, [r3, #2]
      break;
 800adc8:	bf00      	nop
  }

  return error;
 800adca:	7dfb      	ldrb	r3, [r7, #23]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3718      	adds	r7, #24
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	607a      	str	r2, [r7, #4]
 800adde:	603b      	str	r3, [r7, #0]
 800ade0:	460b      	mov	r3, r1
 800ade2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800ade4:	2302      	movs	r3, #2
 800ade6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800adee:	69db      	ldr	r3, [r3, #28]
 800adf0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d002      	beq.n	800ae02 <USBH_MSC_SCSI_Write+0x2e>
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d047      	beq.n	800ae90 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ae00:	e04e      	b.n	800aea0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800ae08:	461a      	mov	r2, r3
 800ae0a:	6a3b      	ldr	r3, [r7, #32]
 800ae0c:	fb03 f202 	mul.w	r2, r3, r2
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	220a      	movs	r2, #10
 800ae20:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	3363      	adds	r3, #99	; 0x63
 800ae28:	2210      	movs	r2, #16
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f002 faa1 	bl	800d374 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	222a      	movs	r2, #42	; 0x2a
 800ae36:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ae3a:	79fa      	ldrb	r2, [r7, #7]
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ae42:	79ba      	ldrb	r2, [r7, #6]
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ae4a:	797a      	ldrb	r2, [r7, #5]
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ae52:	1d3b      	adds	r3, r7, #4
 800ae54:	781a      	ldrb	r2, [r3, #0]
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800ae5c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800ae66:	f107 0320 	add.w	r3, r7, #32
 800ae6a:	781a      	ldrb	r2, [r3, #0]
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	2201      	movs	r2, #1
 800ae76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	2202      	movs	r2, #2
 800ae7e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae8e:	e007      	b.n	800aea0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ae90:	7afb      	ldrb	r3, [r7, #11]
 800ae92:	4619      	mov	r1, r3
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f7ff fb83 	bl	800a5a0 <USBH_MSC_BOT_Process>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae9e:	bf00      	nop
  }

  return error;
 800aea0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3718      	adds	r7, #24
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b086      	sub	sp, #24
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	60f8      	str	r0, [r7, #12]
 800aeb2:	607a      	str	r2, [r7, #4]
 800aeb4:	603b      	str	r3, [r7, #0]
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800aeba:	2302      	movs	r3, #2
 800aebc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800aec4:	69db      	ldr	r3, [r3, #28]
 800aec6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d002      	beq.n	800aed8 <USBH_MSC_SCSI_Read+0x2e>
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	d047      	beq.n	800af66 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800aed6:	e04e      	b.n	800af76 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800aede:	461a      	mov	r2, r3
 800aee0:	6a3b      	ldr	r3, [r7, #32]
 800aee2:	fb03 f202 	mul.w	r2, r3, r2
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	2280      	movs	r2, #128	; 0x80
 800aeee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	220a      	movs	r2, #10
 800aef6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	3363      	adds	r3, #99	; 0x63
 800aefe:	2210      	movs	r2, #16
 800af00:	2100      	movs	r1, #0
 800af02:	4618      	mov	r0, r3
 800af04:	f002 fa36 	bl	800d374 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	2228      	movs	r2, #40	; 0x28
 800af0c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800af10:	79fa      	ldrb	r2, [r7, #7]
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800af18:	79ba      	ldrb	r2, [r7, #6]
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800af20:	797a      	ldrb	r2, [r7, #5]
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800af28:	1d3b      	adds	r3, r7, #4
 800af2a:	781a      	ldrb	r2, [r3, #0]
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800af32:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800af3c:	f107 0320 	add.w	r3, r7, #32
 800af40:	781a      	ldrb	r2, [r3, #0]
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	2202      	movs	r2, #2
 800af54:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	683a      	ldr	r2, [r7, #0]
 800af5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800af60:	2301      	movs	r3, #1
 800af62:	75fb      	strb	r3, [r7, #23]
      break;
 800af64:	e007      	b.n	800af76 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800af66:	7afb      	ldrb	r3, [r7, #11]
 800af68:	4619      	mov	r1, r3
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f7ff fb18 	bl	800a5a0 <USBH_MSC_BOT_Process>
 800af70:	4603      	mov	r3, r0
 800af72:	75fb      	strb	r3, [r7, #23]
      break;
 800af74:	bf00      	nop
  }

  return error;
 800af76:	7dfb      	ldrb	r3, [r7, #23]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3718      	adds	r7, #24
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	4613      	mov	r3, r2
 800af8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10a      	bne.n	800afaa <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800af94:	481c      	ldr	r0, [pc, #112]	; (800b008 <USBH_Init+0x88>)
 800af96:	f002 f89f 	bl	800d0d8 <iprintf>
 800af9a:	481c      	ldr	r0, [pc, #112]	; (800b00c <USBH_Init+0x8c>)
 800af9c:	f002 f89c 	bl	800d0d8 <iprintf>
 800afa0:	200a      	movs	r0, #10
 800afa2:	f002 f8ab 	bl	800d0fc <putchar>
    return USBH_FAIL;
 800afa6:	2302      	movs	r3, #2
 800afa8:	e029      	b.n	800affe <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	79fa      	ldrb	r2, [r7, #7]
 800afae:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
  phost->ClassNumber = 0U;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 f824 	bl	800b010 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
  phost->device.is_connected = 0U;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2200      	movs	r2, #0
 800afdc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422

  /* Assign User process */
  if (pUsrFunc != NULL)
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d003      	beq.n	800aff6 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f7f6 f864 	bl	80010c4 <USBH_LL_Init>

  return USBH_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	0800e320 	.word	0x0800e320
 800b00c:	0800e328 	.word	0x0800e328

0800b010 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b018:	2300      	movs	r3, #0
 800b01a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b01c:	2300      	movs	r3, #0
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	e00a      	b.n	800b038 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	2200      	movs	r2, #0
 800b030:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3301      	adds	r3, #1
 800b036:	60fb      	str	r3, [r7, #12]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2b0f      	cmp	r3, #15
 800b03c:	d9f1      	bls.n	800b022 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b03e:	2300      	movs	r3, #0
 800b040:	60fb      	str	r3, [r7, #12]
 800b042:	e009      	b.n	800b058 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	4413      	add	r3, r2
 800b04a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800b04e:	2200      	movs	r2, #0
 800b050:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	3301      	adds	r3, #1
 800b056:	60fb      	str	r3, [r7, #12]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b05e:	d3f1      	bcc.n	800b044 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4

  phost->Control.state = CTRL_SETUP;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2240      	movs	r2, #64	; 0x40
 800b084:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
  phost->device.RstCnt = 0U;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
  phost->device.EnumCnt = 0U;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	331c      	adds	r3, #28
 800b0b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f002 f95c 	bl	800d374 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800b0c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f002 f953 	bl	800d374 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f203 4326 	addw	r3, r3, #1062	; 0x426
 800b0d4:	2212      	movs	r2, #18
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f002 f94b 	bl	800d374 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800b0e4:	223e      	movs	r2, #62	; 0x3e
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f002 f943 	bl	800d374 <memset>

  return USBH_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b102:	2300      	movs	r3, #0
 800b104:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d020      	beq.n	800b14e <USBH_RegisterClass+0x56>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10f      	bne.n	800b136 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 800b11c:	1c59      	adds	r1, r3, #1
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	f8c2 1480 	str.w	r1, [r2, #1152]	; 0x480
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800b12a:	6839      	ldr	r1, [r7, #0]
 800b12c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b130:	2300      	movs	r3, #0
 800b132:	73fb      	strb	r3, [r7, #15]
 800b134:	e016      	b.n	800b164 <USBH_RegisterClass+0x6c>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800b136:	480e      	ldr	r0, [pc, #56]	; (800b170 <USBH_RegisterClass+0x78>)
 800b138:	f001 ffce 	bl	800d0d8 <iprintf>
 800b13c:	480d      	ldr	r0, [pc, #52]	; (800b174 <USBH_RegisterClass+0x7c>)
 800b13e:	f001 ffcb 	bl	800d0d8 <iprintf>
 800b142:	200a      	movs	r0, #10
 800b144:	f001 ffda 	bl	800d0fc <putchar>
      status = USBH_FAIL;
 800b148:	2302      	movs	r3, #2
 800b14a:	73fb      	strb	r3, [r7, #15]
 800b14c:	e00a      	b.n	800b164 <USBH_RegisterClass+0x6c>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800b14e:	4808      	ldr	r0, [pc, #32]	; (800b170 <USBH_RegisterClass+0x78>)
 800b150:	f001 ffc2 	bl	800d0d8 <iprintf>
 800b154:	4808      	ldr	r0, [pc, #32]	; (800b178 <USBH_RegisterClass+0x80>)
 800b156:	f001 ffbf 	bl	800d0d8 <iprintf>
 800b15a:	200a      	movs	r0, #10
 800b15c:	f001 ffce 	bl	800d0fc <putchar>
    status = USBH_FAIL;
 800b160:	2302      	movs	r3, #2
 800b162:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b164:	7bfb      	ldrb	r3, [r7, #15]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	0800e320 	.word	0x0800e320
 800b174:	0800e33c 	.word	0x0800e33c
 800b178:	0800e358 	.word	0x0800e358

0800b17c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	460b      	mov	r3, r1
 800b186:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800b192:	78fa      	ldrb	r2, [r7, #3]
 800b194:	429a      	cmp	r2, r3
 800b196:	d23c      	bcs.n	800b212 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	78fa      	ldrb	r2, [r7, #3]
 800b19c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800b1a0:	78fb      	ldrb	r3, [r7, #3]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	4823      	ldr	r0, [pc, #140]	; (800b234 <USBH_SelectInterface+0xb8>)
 800b1a6:	f001 ff97 	bl	800d0d8 <iprintf>
 800b1aa:	200a      	movs	r0, #10
 800b1ac:	f001 ffa6 	bl	800d0fc <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800b1b0:	78fb      	ldrb	r3, [r7, #3]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	211a      	movs	r1, #26
 800b1b6:	fb01 f303 	mul.w	r3, r1, r3
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f203 4347 	addw	r3, r3, #1095	; 0x447
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	481c      	ldr	r0, [pc, #112]	; (800b238 <USBH_SelectInterface+0xbc>)
 800b1c6:	f001 ff87 	bl	800d0d8 <iprintf>
 800b1ca:	200a      	movs	r0, #10
 800b1cc:	f001 ff96 	bl	800d0fc <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800b1d0:	78fb      	ldrb	r3, [r7, #3]
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	211a      	movs	r1, #26
 800b1d6:	fb01 f303 	mul.w	r3, r1, r3
 800b1da:	4413      	add	r3, r2
 800b1dc:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	4815      	ldr	r0, [pc, #84]	; (800b23c <USBH_SelectInterface+0xc0>)
 800b1e6:	f001 ff77 	bl	800d0d8 <iprintf>
 800b1ea:	200a      	movs	r0, #10
 800b1ec:	f001 ff86 	bl	800d0fc <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800b1f0:	78fb      	ldrb	r3, [r7, #3]
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	211a      	movs	r1, #26
 800b1f6:	fb01 f303 	mul.w	r3, r1, r3
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f203 4349 	addw	r3, r3, #1097	; 0x449
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	4619      	mov	r1, r3
 800b204:	480e      	ldr	r0, [pc, #56]	; (800b240 <USBH_SelectInterface+0xc4>)
 800b206:	f001 ff67 	bl	800d0d8 <iprintf>
 800b20a:	200a      	movs	r0, #10
 800b20c:	f001 ff76 	bl	800d0fc <putchar>
 800b210:	e00a      	b.n	800b228 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800b212:	480c      	ldr	r0, [pc, #48]	; (800b244 <USBH_SelectInterface+0xc8>)
 800b214:	f001 ff60 	bl	800d0d8 <iprintf>
 800b218:	480b      	ldr	r0, [pc, #44]	; (800b248 <USBH_SelectInterface+0xcc>)
 800b21a:	f001 ff5d 	bl	800d0d8 <iprintf>
 800b21e:	200a      	movs	r0, #10
 800b220:	f001 ff6c 	bl	800d0fc <putchar>
    status = USBH_FAIL;
 800b224:	2302      	movs	r3, #2
 800b226:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b228:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	0800e370 	.word	0x0800e370
 800b238:	0800e390 	.word	0x0800e390
 800b23c:	0800e3a0 	.word	0x0800e3a0
 800b240:	0800e3b0 	.word	0x0800e3b0
 800b244:	0800e320 	.word	0x0800e320
 800b248:	0800e3c0 	.word	0x0800e3c0

0800b24c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b087      	sub	sp, #28
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	4608      	mov	r0, r1
 800b256:	4611      	mov	r1, r2
 800b258:	461a      	mov	r2, r3
 800b25a:	4603      	mov	r3, r0
 800b25c:	70fb      	strb	r3, [r7, #3]
 800b25e:	460b      	mov	r3, r1
 800b260:	70bb      	strb	r3, [r7, #2]
 800b262:	4613      	mov	r3, r2
 800b264:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b266:	2300      	movs	r3, #0
 800b268:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800b274:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b276:	e025      	b.n	800b2c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b278:	7dfb      	ldrb	r3, [r7, #23]
 800b27a:	221a      	movs	r2, #26
 800b27c:	fb02 f303 	mul.w	r3, r2, r3
 800b280:	3308      	adds	r3, #8
 800b282:	68fa      	ldr	r2, [r7, #12]
 800b284:	4413      	add	r3, r2
 800b286:	3302      	adds	r3, #2
 800b288:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	795b      	ldrb	r3, [r3, #5]
 800b28e:	78fa      	ldrb	r2, [r7, #3]
 800b290:	429a      	cmp	r2, r3
 800b292:	d002      	beq.n	800b29a <USBH_FindInterface+0x4e>
 800b294:	78fb      	ldrb	r3, [r7, #3]
 800b296:	2bff      	cmp	r3, #255	; 0xff
 800b298:	d111      	bne.n	800b2be <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b29e:	78ba      	ldrb	r2, [r7, #2]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d002      	beq.n	800b2aa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b2a4:	78bb      	ldrb	r3, [r7, #2]
 800b2a6:	2bff      	cmp	r3, #255	; 0xff
 800b2a8:	d109      	bne.n	800b2be <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b2ae:	787a      	ldrb	r2, [r7, #1]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d002      	beq.n	800b2ba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b2b4:	787b      	ldrb	r3, [r7, #1]
 800b2b6:	2bff      	cmp	r3, #255	; 0xff
 800b2b8:	d101      	bne.n	800b2be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b2ba:	7dfb      	ldrb	r3, [r7, #23]
 800b2bc:	e006      	b.n	800b2cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b2be:	7dfb      	ldrb	r3, [r7, #23]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b2c4:	7dfb      	ldrb	r3, [r7, #23]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d9d6      	bls.n	800b278 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b2ca:	23ff      	movs	r3, #255	; 0xff
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	371c      	adds	r7, #28
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f7f5 ff23 	bl	800112c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b2e6:	2101      	movs	r1, #1
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f7f5 ffeb 	bl	80012c4 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b088      	sub	sp, #32
 800b2fc:	af04      	add	r7, sp, #16
 800b2fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b300:	2302      	movs	r3, #2
 800b302:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b304:	2300      	movs	r3, #0
 800b306:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 3421 	ldrb.w	r3, [r3, #1057]	; 0x421
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	2b01      	cmp	r3, #1
 800b312:	d102      	bne.n	800b31a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2203      	movs	r2, #3
 800b318:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	2b0b      	cmp	r3, #11
 800b322:	f200 823d 	bhi.w	800b7a0 <USBH_Process+0x4a8>
 800b326:	a201      	add	r2, pc, #4	; (adr r2, 800b32c <USBH_Process+0x34>)
 800b328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32c:	0800b35d 	.word	0x0800b35d
 800b330:	0800b39b 	.word	0x0800b39b
 800b334:	0800b41b 	.word	0x0800b41b
 800b338:	0800b72f 	.word	0x0800b72f
 800b33c:	0800b7a1 	.word	0x0800b7a1
 800b340:	0800b4bf 	.word	0x0800b4bf
 800b344:	0800b6b1 	.word	0x0800b6b1
 800b348:	0800b50d 	.word	0x0800b50d
 800b34c:	0800b52d 	.word	0x0800b52d
 800b350:	0800b559 	.word	0x0800b559
 800b354:	0800b5b5 	.word	0x0800b5b5
 800b358:	0800b717 	.word	0x0800b717
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 821d 	beq.w	800b7a4 <USBH_Process+0x4ac>
      {
        USBH_UsrLog("USB Device Connected");
 800b36a:	48a7      	ldr	r0, [pc, #668]	; (800b608 <USBH_Process+0x310>)
 800b36c:	f001 feb4 	bl	800d0d8 <iprintf>
 800b370:	200a      	movs	r0, #10
 800b372:	f001 fec3 	bl	800d0fc <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2201      	movs	r2, #1
 800b37a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b37c:	20c8      	movs	r0, #200	; 0xc8
 800b37e:	f7f6 f825 	bl	80013cc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7f5 ff10 	bl	80011a8 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        phost->Timeout = 0U;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b398:	e204      	b.n	800b7a4 <USBH_Process+0x4ac>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f893 3423 	ldrb.w	r3, [r3, #1059]	; 0x423
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d10d      	bne.n	800b3c0 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800b3a4:	4899      	ldr	r0, [pc, #612]	; (800b60c <USBH_Process+0x314>)
 800b3a6:	f001 fe97 	bl	800d0d8 <iprintf>
 800b3aa:	200a      	movs	r0, #10
 800b3ac:	f001 fea6 	bl	800d0fc <putchar>
        phost->device.RstCnt = 0U;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
        phost->gState = HOST_DEV_ATTACHED;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b3be:	e1fe      	b.n	800b7be <USBH_Process+0x4c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800b3c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3ca:	d91a      	bls.n	800b402 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
          if (phost->device.RstCnt > 3U)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800b3e2:	2b03      	cmp	r3, #3
 800b3e4:	d909      	bls.n	800b3fa <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800b3e6:	488a      	ldr	r0, [pc, #552]	; (800b610 <USBH_Process+0x318>)
 800b3e8:	f001 fe76 	bl	800d0d8 <iprintf>
 800b3ec:	200a      	movs	r0, #10
 800b3ee:	f001 fe85 	bl	800d0fc <putchar>
            phost->gState = HOST_ABORT_STATE;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	220d      	movs	r2, #13
 800b3f6:	701a      	strb	r2, [r3, #0]
      break;
 800b3f8:	e1e1      	b.n	800b7be <USBH_Process+0x4c6>
            phost->gState = HOST_IDLE;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	701a      	strb	r2, [r3, #0]
      break;
 800b400:	e1dd      	b.n	800b7be <USBH_Process+0x4c6>
          phost->Timeout += 10U;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800b408:	f103 020a 	add.w	r2, r3, #10
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
          USBH_Delay(10U);
 800b412:	200a      	movs	r0, #10
 800b414:	f7f5 ffda 	bl	80013cc <USBH_Delay>
      break;
 800b418:	e1d1      	b.n	800b7be <USBH_Process+0x4c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b420:	2b00      	cmp	r3, #0
 800b422:	d005      	beq.n	800b430 <USBH_Process+0x138>
      {
    	  //HAL_UART_Transmit(&huart1, "welcome", 7, 100);
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b42a:	2104      	movs	r1, #4
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b430:	2064      	movs	r0, #100	; 0x64
 800b432:	f7f5 ffcb 	bl	80013cc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f7f5 fe96 	bl	8001168 <USBH_LL_GetSpeed>
 800b43c:	4603      	mov	r3, r0
 800b43e:	461a      	mov	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d

      phost->gState = HOST_ENUMERATION;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2205      	movs	r2, #5
 800b44a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b44c:	2100      	movs	r1, #0
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f001 fc25 	bl	800cc9e <USBH_AllocPipe>
 800b454:	4603      	mov	r3, r0
 800b456:	461a      	mov	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b45c:	2180      	movs	r1, #128	; 0x80
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f001 fc1d 	bl	800cc9e <USBH_AllocPipe>
 800b464:	4603      	mov	r3, r0
 800b466:	461a      	mov	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	7919      	ldrb	r1, [r3, #4]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b480:	b292      	uxth	r2, r2
 800b482:	9202      	str	r2, [sp, #8]
 800b484:	2200      	movs	r2, #0
 800b486:	9201      	str	r2, [sp, #4]
 800b488:	9300      	str	r3, [sp, #0]
 800b48a:	4603      	mov	r3, r0
 800b48c:	2280      	movs	r2, #128	; 0x80
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f001 fbd6 	bl	800cc40 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	7959      	ldrb	r1, [r3, #5]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b4a8:	b292      	uxth	r2, r2
 800b4aa:	9202      	str	r2, [sp, #8]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	9201      	str	r2, [sp, #4]
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f001 fbc2 	bl	800cc40 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b4bc:	e17f      	b.n	800b7be <USBH_Process+0x4c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f990 	bl	800b7e4 <USBH_HandleEnum>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f040 816b 	bne.w	800b7a8 <USBH_Process+0x4b0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800b4d2:	4850      	ldr	r0, [pc, #320]	; (800b614 <USBH_Process+0x31c>)
 800b4d4:	f001 fe00 	bl	800d0d8 <iprintf>
 800b4d8:	200a      	movs	r0, #10
 800b4da:	f001 fe0f 	bl	800d0fc <putchar>

        phost->device.current_interface = 0U;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f893 3437 	ldrb.w	r3, [r3, #1079]	; 0x437
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d109      	bne.n	800b504 <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800b4f0:	4849      	ldr	r0, [pc, #292]	; (800b618 <USBH_Process+0x320>)
 800b4f2:	f001 fdf1 	bl	800d0d8 <iprintf>
 800b4f6:	200a      	movs	r0, #10
 800b4f8:	f001 fe00 	bl	800d0fc <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2208      	movs	r2, #8
 800b500:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b502:	e151      	b.n	800b7a8 <USBH_Process+0x4b0>
          phost->gState = HOST_INPUT;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2207      	movs	r2, #7
 800b508:	701a      	strb	r2, [r3, #0]
      break;
 800b50a:	e14d      	b.n	800b7a8 <USBH_Process+0x4b0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b512:	2b00      	cmp	r3, #0
 800b514:	f000 814a 	beq.w	800b7ac <USBH_Process+0x4b4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b51e:	2101      	movs	r1, #1
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2208      	movs	r2, #8
 800b528:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b52a:	e13f      	b.n	800b7ac <USBH_Process+0x4b4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800b532:	b29b      	uxth	r3, r3
 800b534:	4619      	mov	r1, r3
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fd9f 	bl	800c07a <USBH_SetCfg>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f040 8136 	bne.w	800b7b0 <USBH_Process+0x4b8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2209      	movs	r2, #9
 800b548:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800b54a:	4834      	ldr	r0, [pc, #208]	; (800b61c <USBH_Process+0x324>)
 800b54c:	f001 fdc4 	bl	800d0d8 <iprintf>
 800b550:	200a      	movs	r0, #10
 800b552:	f001 fdd3 	bl	800d0fc <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b556:	e12b      	b.n	800b7b0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 800b55e:	f003 0320 	and.w	r3, r3, #32
 800b562:	2b00      	cmp	r3, #0
 800b564:	d022      	beq.n	800b5ac <USBH_Process+0x2b4>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b566:	2101      	movs	r1, #1
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 fda9 	bl	800c0c0 <USBH_SetFeature>
 800b56e:	4603      	mov	r3, r0
 800b570:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b572:	7bbb      	ldrb	r3, [r7, #14]
 800b574:	b2db      	uxtb	r3, r3
 800b576:	2b00      	cmp	r3, #0
 800b578:	d109      	bne.n	800b58e <USBH_Process+0x296>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800b57a:	4829      	ldr	r0, [pc, #164]	; (800b620 <USBH_Process+0x328>)
 800b57c:	f001 fdac 	bl	800d0d8 <iprintf>
 800b580:	200a      	movs	r0, #10
 800b582:	f001 fdbb 	bl	800d0fc <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	220a      	movs	r2, #10
 800b58a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b58c:	e112      	b.n	800b7b4 <USBH_Process+0x4bc>
        else if (status == USBH_NOT_SUPPORTED)
 800b58e:	7bbb      	ldrb	r3, [r7, #14]
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b03      	cmp	r3, #3
 800b594:	f040 810e 	bne.w	800b7b4 <USBH_Process+0x4bc>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800b598:	4822      	ldr	r0, [pc, #136]	; (800b624 <USBH_Process+0x32c>)
 800b59a:	f001 fd9d 	bl	800d0d8 <iprintf>
 800b59e:	200a      	movs	r0, #10
 800b5a0:	f001 fdac 	bl	800d0fc <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	220a      	movs	r2, #10
 800b5a8:	701a      	strb	r2, [r3, #0]
      break;
 800b5aa:	e103      	b.n	800b7b4 <USBH_Process+0x4bc>
        phost->gState = HOST_CHECK_CLASS;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	220a      	movs	r2, #10
 800b5b0:	701a      	strb	r2, [r3, #0]
      break;
 800b5b2:	e0ff      	b.n	800b7b4 <USBH_Process+0x4bc>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d106      	bne.n	800b5cc <USBH_Process+0x2d4>
      {
        USBH_UsrLog("No Class has been registered.");
 800b5be:	481a      	ldr	r0, [pc, #104]	; (800b628 <USBH_Process+0x330>)
 800b5c0:	f001 fd8a 	bl	800d0d8 <iprintf>
 800b5c4:	200a      	movs	r0, #10
 800b5c6:	f001 fd99 	bl	800d0fc <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b5ca:	e0f8      	b.n	800b7be <USBH_Process+0x4c6>
        phost->pActiveClass = NULL;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	73fb      	strb	r3, [r7, #15]
 800b5d8:	e02b      	b.n	800b632 <USBH_Process+0x33a>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b5da:	7bfa      	ldrb	r2, [r7, #15]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f502 728f 	add.w	r2, r2, #286	; 0x11e
 800b5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e6:	791a      	ldrb	r2, [r3, #4]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f893 3447 	ldrb.w	r3, [r3, #1095]	; 0x447
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d11c      	bne.n	800b62c <USBH_Process+0x334>
            phost->pActiveClass = phost->pClass[idx];
 800b5f2:	7bfa      	ldrb	r2, [r7, #15]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f502 728f 	add.w	r2, r2, #286	; 0x11e
 800b5fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
            break;
 800b604:	e018      	b.n	800b638 <USBH_Process+0x340>
 800b606:	bf00      	nop
 800b608:	0800e3e0 	.word	0x0800e3e0
 800b60c:	0800e3f8 	.word	0x0800e3f8
 800b610:	0800e414 	.word	0x0800e414
 800b614:	0800e440 	.word	0x0800e440
 800b618:	0800e454 	.word	0x0800e454
 800b61c:	0800e47c 	.word	0x0800e47c
 800b620:	0800e498 	.word	0x0800e498
 800b624:	0800e4b8 	.word	0x0800e4b8
 800b628:	0800e4e4 	.word	0x0800e4e4
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
 800b62e:	3301      	adds	r3, #1
 800b630:	73fb      	strb	r3, [r7, #15]
 800b632:	7bfb      	ldrb	r3, [r7, #15]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d0d0      	beq.n	800b5da <USBH_Process+0x2e2>
        if (phost->pActiveClass != NULL)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d02c      	beq.n	800b69c <USBH_Process+0x3a4>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	4798      	blx	r3
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d114      	bne.n	800b67e <USBH_Process+0x386>
            phost->gState = HOST_CLASS_REQUEST;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2206      	movs	r2, #6
 800b658:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4619      	mov	r1, r3
 800b664:	4858      	ldr	r0, [pc, #352]	; (800b7c8 <USBH_Process+0x4d0>)
 800b666:	f001 fd37 	bl	800d0d8 <iprintf>
 800b66a:	200a      	movs	r0, #10
 800b66c:	f001 fd46 	bl	800d0fc <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b676:	2103      	movs	r1, #3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	4798      	blx	r3
      break;
 800b67c:	e09f      	b.n	800b7be <USBH_Process+0x4c6>
            phost->gState = HOST_ABORT_STATE;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	220d      	movs	r2, #13
 800b682:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4619      	mov	r1, r3
 800b68e:	484f      	ldr	r0, [pc, #316]	; (800b7cc <USBH_Process+0x4d4>)
 800b690:	f001 fd22 	bl	800d0d8 <iprintf>
 800b694:	200a      	movs	r0, #10
 800b696:	f001 fd31 	bl	800d0fc <putchar>
      break;
 800b69a:	e090      	b.n	800b7be <USBH_Process+0x4c6>
          phost->gState = HOST_ABORT_STATE;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	220d      	movs	r2, #13
 800b6a0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800b6a2:	484b      	ldr	r0, [pc, #300]	; (800b7d0 <USBH_Process+0x4d8>)
 800b6a4:	f001 fd18 	bl	800d0d8 <iprintf>
 800b6a8:	200a      	movs	r0, #10
 800b6aa:	f001 fd27 	bl	800d0fc <putchar>
      break;
 800b6ae:	e086      	b.n	800b7be <USBH_Process+0x4c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d020      	beq.n	800b6fc <USBH_Process+0x404>
      {
        status = phost->pActiveClass->Requests(phost);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	4798      	blx	r3
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b6ca:	7bbb      	ldrb	r3, [r7, #14]
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d103      	bne.n	800b6da <USBH_Process+0x3e2>
        {
          phost->gState = HOST_CLASS;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	220b      	movs	r2, #11
 800b6d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b6d8:	e06e      	b.n	800b7b8 <USBH_Process+0x4c0>
        else if (status == USBH_FAIL)
 800b6da:	7bbb      	ldrb	r3, [r7, #14]
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d16a      	bne.n	800b7b8 <USBH_Process+0x4c0>
          phost->gState = HOST_ABORT_STATE;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	220d      	movs	r2, #13
 800b6e6:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800b6e8:	483a      	ldr	r0, [pc, #232]	; (800b7d4 <USBH_Process+0x4dc>)
 800b6ea:	f001 fcf5 	bl	800d0d8 <iprintf>
 800b6ee:	483a      	ldr	r0, [pc, #232]	; (800b7d8 <USBH_Process+0x4e0>)
 800b6f0:	f001 fcf2 	bl	800d0d8 <iprintf>
 800b6f4:	200a      	movs	r0, #10
 800b6f6:	f001 fd01 	bl	800d0fc <putchar>
      break;
 800b6fa:	e05d      	b.n	800b7b8 <USBH_Process+0x4c0>
        phost->gState = HOST_ABORT_STATE;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	220d      	movs	r2, #13
 800b700:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800b702:	4834      	ldr	r0, [pc, #208]	; (800b7d4 <USBH_Process+0x4dc>)
 800b704:	f001 fce8 	bl	800d0d8 <iprintf>
 800b708:	4834      	ldr	r0, [pc, #208]	; (800b7dc <USBH_Process+0x4e4>)
 800b70a:	f001 fce5 	bl	800d0d8 <iprintf>
 800b70e:	200a      	movs	r0, #10
 800b710:	f001 fcf4 	bl	800d0fc <putchar>
      break;
 800b714:	e050      	b.n	800b7b8 <USBH_Process+0x4c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d04d      	beq.n	800b7bc <USBH_Process+0x4c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b726:	695b      	ldr	r3, [r3, #20]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	4798      	blx	r3
      }
      break;
 800b72c:	e046      	b.n	800b7bc <USBH_Process+0x4c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421

      (void)DeInitStateMachine(phost);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7ff fc6a 	bl	800b010 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b742:	2b00      	cmp	r3, #0
 800b744:	d009      	beq.n	800b75a <USBH_Process+0x462>
      {
        phost->pActiveClass->DeInit(phost);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
      }

      if (phost->pUser != NULL)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b760:	2b00      	cmp	r3, #0
 800b762:	d005      	beq.n	800b770 <USBH_Process+0x478>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b76a:	2105      	movs	r1, #5
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800b770:	481b      	ldr	r0, [pc, #108]	; (800b7e0 <USBH_Process+0x4e8>)
 800b772:	f001 fcb1 	bl	800d0d8 <iprintf>
 800b776:	200a      	movs	r0, #10
 800b778:	f001 fcc0 	bl	800d0fc <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
 800b782:	b2db      	uxtb	r3, r3
 800b784:	2b01      	cmp	r3, #1
 800b786:	d107      	bne.n	800b798 <USBH_Process+0x4a0>
      {
        phost->device.is_ReEnumerated = 0U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f7ff fda1 	bl	800b2d8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b796:	e012      	b.n	800b7be <USBH_Process+0x4c6>
        (void)USBH_LL_Start(phost);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7f5 fcc7 	bl	800112c <USBH_LL_Start>
      break;
 800b79e:	e00e      	b.n	800b7be <USBH_Process+0x4c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b7a0:	bf00      	nop
 800b7a2:	e00c      	b.n	800b7be <USBH_Process+0x4c6>
      break;
 800b7a4:	bf00      	nop
 800b7a6:	e00a      	b.n	800b7be <USBH_Process+0x4c6>
      break;
 800b7a8:	bf00      	nop
 800b7aa:	e008      	b.n	800b7be <USBH_Process+0x4c6>
    break;
 800b7ac:	bf00      	nop
 800b7ae:	e006      	b.n	800b7be <USBH_Process+0x4c6>
      break;
 800b7b0:	bf00      	nop
 800b7b2:	e004      	b.n	800b7be <USBH_Process+0x4c6>
      break;
 800b7b4:	bf00      	nop
 800b7b6:	e002      	b.n	800b7be <USBH_Process+0x4c6>
      break;
 800b7b8:	bf00      	nop
 800b7ba:	e000      	b.n	800b7be <USBH_Process+0x4c6>
      break;
 800b7bc:	bf00      	nop
  }
  return USBH_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	0800e504 	.word	0x0800e504
 800b7cc:	0800e518 	.word	0x0800e518
 800b7d0:	0800e538 	.word	0x0800e538
 800b7d4:	0800e320 	.word	0x0800e320
 800b7d8:	0800e560 	.word	0x0800e560
 800b7dc:	0800e588 	.word	0x0800e588
 800b7e0:	0800e5a0 	.word	0x0800e5a0

0800b7e4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b088      	sub	sp, #32
 800b7e8:	af04      	add	r7, sp, #16
 800b7ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	785b      	ldrb	r3, [r3, #1]
 800b7f8:	2b07      	cmp	r3, #7
 800b7fa:	f200 827f 	bhi.w	800bcfc <USBH_HandleEnum+0x518>
 800b7fe:	a201      	add	r2, pc, #4	; (adr r2, 800b804 <USBH_HandleEnum+0x20>)
 800b800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b804:	0800b825 	.word	0x0800b825
 800b808:	0800b901 	.word	0x0800b901
 800b80c:	0800b9b1 	.word	0x0800b9b1
 800b810:	0800ba71 	.word	0x0800ba71
 800b814:	0800baf9 	.word	0x0800baf9
 800b818:	0800bbab 	.word	0x0800bbab
 800b81c:	0800bc1f 	.word	0x0800bc1f
 800b820:	0800bc91 	.word	0x0800bc91
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b824:	2108      	movs	r1, #8
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fb1a 	bl	800be60 <USBH_Get_DevDesc>
 800b82c:	4603      	mov	r3, r0
 800b82e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b830:	7bbb      	ldrb	r3, [r7, #14]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d130      	bne.n	800b898 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 242d 	ldrb.w	r2, [r3, #1069]	; 0x42d
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	7919      	ldrb	r1, [r3, #4]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b85a:	b292      	uxth	r2, r2
 800b85c:	9202      	str	r2, [sp, #8]
 800b85e:	2200      	movs	r2, #0
 800b860:	9201      	str	r2, [sp, #4]
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	4603      	mov	r3, r0
 800b866:	2280      	movs	r2, #128	; 0x80
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f001 f9e9 	bl	800cc40 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	7959      	ldrb	r1, [r3, #5]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b882:	b292      	uxth	r2, r2
 800b884:	9202      	str	r2, [sp, #8]
 800b886:	2200      	movs	r2, #0
 800b888:	9201      	str	r2, [sp, #4]
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	4603      	mov	r3, r0
 800b88e:	2200      	movs	r2, #0
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f001 f9d5 	bl	800cc40 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b896:	e233      	b.n	800bd00 <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b898:	7bbb      	ldrb	r3, [r7, #14]
 800b89a:	2b03      	cmp	r3, #3
 800b89c:	f040 8230 	bne.w	800bd00 <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800b8a0:	48af      	ldr	r0, [pc, #700]	; (800bb60 <USBH_HandleEnum+0x37c>)
 800b8a2:	f001 fc19 	bl	800d0d8 <iprintf>
 800b8a6:	48af      	ldr	r0, [pc, #700]	; (800bb64 <USBH_HandleEnum+0x380>)
 800b8a8:	f001 fc16 	bl	800d0d8 <iprintf>
 800b8ac:	200a      	movs	r0, #10
 800b8ae:	f001 fc25 	bl	800d0fc <putchar>
        phost->device.EnumCnt++;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	b2da      	uxtb	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800b8c8:	2b03      	cmp	r3, #3
 800b8ca:	d909      	bls.n	800b8e0 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b8cc:	48a6      	ldr	r0, [pc, #664]	; (800bb68 <USBH_HandleEnum+0x384>)
 800b8ce:	f001 fc03 	bl	800d0d8 <iprintf>
 800b8d2:	200a      	movs	r0, #10
 800b8d4:	f001 fc12 	bl	800d0fc <putchar>
          phost->gState = HOST_ABORT_STATE;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	220d      	movs	r2, #13
 800b8dc:	701a      	strb	r2, [r3, #0]
      break;
 800b8de:	e20f      	b.n	800bd00 <USBH_HandleEnum+0x51c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	795b      	ldrb	r3, [r3, #5]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f001 f9fb 	bl	800cce2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	791b      	ldrb	r3, [r3, #4]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f001 f9f5 	bl	800cce2 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	701a      	strb	r2, [r3, #0]
      break;
 800b8fe:	e1ff      	b.n	800bd00 <USBH_HandleEnum+0x51c>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b900:	2112      	movs	r1, #18
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 faac 	bl	800be60 <USBH_Get_DevDesc>
 800b908:	4603      	mov	r3, r0
 800b90a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b90c:	7bbb      	ldrb	r3, [r7, #14]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d117      	bne.n	800b942 <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f8b3 3430 	ldrh.w	r3, [r3, #1072]	; 0x430
 800b918:	4619      	mov	r1, r3
 800b91a:	4894      	ldr	r0, [pc, #592]	; (800bb6c <USBH_HandleEnum+0x388>)
 800b91c:	f001 fbdc 	bl	800d0d8 <iprintf>
 800b920:	200a      	movs	r0, #10
 800b922:	f001 fbeb 	bl	800d0fc <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8b3 342e 	ldrh.w	r3, [r3, #1070]	; 0x42e
 800b92c:	4619      	mov	r1, r3
 800b92e:	4890      	ldr	r0, [pc, #576]	; (800bb70 <USBH_HandleEnum+0x38c>)
 800b930:	f001 fbd2 	bl	800d0d8 <iprintf>
 800b934:	200a      	movs	r0, #10
 800b936:	f001 fbe1 	bl	800d0fc <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2202      	movs	r2, #2
 800b93e:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b940:	e1e0      	b.n	800bd04 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b942:	7bbb      	ldrb	r3, [r7, #14]
 800b944:	2b03      	cmp	r3, #3
 800b946:	f040 81dd 	bne.w	800bd04 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800b94a:	4885      	ldr	r0, [pc, #532]	; (800bb60 <USBH_HandleEnum+0x37c>)
 800b94c:	f001 fbc4 	bl	800d0d8 <iprintf>
 800b950:	4888      	ldr	r0, [pc, #544]	; (800bb74 <USBH_HandleEnum+0x390>)
 800b952:	f001 fbc1 	bl	800d0d8 <iprintf>
 800b956:	200a      	movs	r0, #10
 800b958:	f001 fbd0 	bl	800d0fc <putchar>
        phost->device.EnumCnt++;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800b962:	3301      	adds	r3, #1
 800b964:	b2da      	uxtb	r2, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800b972:	2b03      	cmp	r3, #3
 800b974:	d909      	bls.n	800b98a <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b976:	487c      	ldr	r0, [pc, #496]	; (800bb68 <USBH_HandleEnum+0x384>)
 800b978:	f001 fbae 	bl	800d0d8 <iprintf>
 800b97c:	200a      	movs	r0, #10
 800b97e:	f001 fbbd 	bl	800d0fc <putchar>
          phost->gState = HOST_ABORT_STATE;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	220d      	movs	r2, #13
 800b986:	701a      	strb	r2, [r3, #0]
      break;
 800b988:	e1bc      	b.n	800bd04 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	795b      	ldrb	r3, [r3, #5]
 800b98e:	4619      	mov	r1, r3
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f001 f9a6 	bl	800cce2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	791b      	ldrb	r3, [r3, #4]
 800b99a:	4619      	mov	r1, r3
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f001 f9a0 	bl	800cce2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	701a      	strb	r2, [r3, #0]
      break;
 800b9ae:	e1a9      	b.n	800bd04 <USBH_HandleEnum+0x520>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b9b0:	2101      	movs	r1, #1
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fb3d 	bl	800c032 <USBH_SetAddress>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b9bc:	7bbb      	ldrb	r3, [r7, #14]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d13c      	bne.n	800ba3c <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 800b9c2:	2002      	movs	r0, #2
 800b9c4:	f7f5 fd02 	bl	80013cc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	4867      	ldr	r0, [pc, #412]	; (800bb78 <USBH_HandleEnum+0x394>)
 800b9da:	f001 fb7d 	bl	800d0d8 <iprintf>
 800b9de:	200a      	movs	r0, #10
 800b9e0:	f001 fb8c 	bl	800d0fc <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2203      	movs	r2, #3
 800b9e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	7919      	ldrb	r1, [r3, #4]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b9fe:	b292      	uxth	r2, r2
 800ba00:	9202      	str	r2, [sp, #8]
 800ba02:	2200      	movs	r2, #0
 800ba04:	9201      	str	r2, [sp, #4]
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2280      	movs	r2, #128	; 0x80
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f001 f917 	bl	800cc40 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	7959      	ldrb	r1, [r3, #5]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ba26:	b292      	uxth	r2, r2
 800ba28:	9202      	str	r2, [sp, #8]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	9201      	str	r2, [sp, #4]
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	4603      	mov	r3, r0
 800ba32:	2200      	movs	r2, #0
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f001 f903 	bl	800cc40 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ba3a:	e165      	b.n	800bd08 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba3c:	7bbb      	ldrb	r3, [r7, #14]
 800ba3e:	2b03      	cmp	r3, #3
 800ba40:	f040 8162 	bne.w	800bd08 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800ba44:	4846      	ldr	r0, [pc, #280]	; (800bb60 <USBH_HandleEnum+0x37c>)
 800ba46:	f001 fb47 	bl	800d0d8 <iprintf>
 800ba4a:	484c      	ldr	r0, [pc, #304]	; (800bb7c <USBH_HandleEnum+0x398>)
 800ba4c:	f001 fb44 	bl	800d0d8 <iprintf>
 800ba50:	200a      	movs	r0, #10
 800ba52:	f001 fb53 	bl	800d0fc <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ba56:	4844      	ldr	r0, [pc, #272]	; (800bb68 <USBH_HandleEnum+0x384>)
 800ba58:	f001 fb3e 	bl	800d0d8 <iprintf>
 800ba5c:	200a      	movs	r0, #10
 800ba5e:	f001 fb4d 	bl	800d0fc <putchar>
        phost->gState = HOST_ABORT_STATE;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	220d      	movs	r2, #13
 800ba66:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	705a      	strb	r2, [r3, #1]
      break;
 800ba6e:	e14b      	b.n	800bd08 <USBH_HandleEnum+0x524>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ba70:	2109      	movs	r1, #9
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fa2e 	bl	800bed4 <USBH_Get_CfgDesc>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ba7c:	7bbb      	ldrb	r3, [r7, #14]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d103      	bne.n	800ba8a <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2204      	movs	r2, #4
 800ba86:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ba88:	e140      	b.n	800bd0c <USBH_HandleEnum+0x528>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba8a:	7bbb      	ldrb	r3, [r7, #14]
 800ba8c:	2b03      	cmp	r3, #3
 800ba8e:	f040 813d 	bne.w	800bd0c <USBH_HandleEnum+0x528>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800ba92:	4833      	ldr	r0, [pc, #204]	; (800bb60 <USBH_HandleEnum+0x37c>)
 800ba94:	f001 fb20 	bl	800d0d8 <iprintf>
 800ba98:	4839      	ldr	r0, [pc, #228]	; (800bb80 <USBH_HandleEnum+0x39c>)
 800ba9a:	f001 fb1d 	bl	800d0d8 <iprintf>
 800ba9e:	200a      	movs	r0, #10
 800baa0:	f001 fb2c 	bl	800d0fc <putchar>
        phost->device.EnumCnt++;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800baaa:	3301      	adds	r3, #1
 800baac:	b2da      	uxtb	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800baba:	2b03      	cmp	r3, #3
 800babc:	d909      	bls.n	800bad2 <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800babe:	482a      	ldr	r0, [pc, #168]	; (800bb68 <USBH_HandleEnum+0x384>)
 800bac0:	f001 fb0a 	bl	800d0d8 <iprintf>
 800bac4:	200a      	movs	r0, #10
 800bac6:	f001 fb19 	bl	800d0fc <putchar>
          phost->gState = HOST_ABORT_STATE;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	220d      	movs	r2, #13
 800bace:	701a      	strb	r2, [r3, #0]
      break;
 800bad0:	e11c      	b.n	800bd0c <USBH_HandleEnum+0x528>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	795b      	ldrb	r3, [r3, #5]
 800bad6:	4619      	mov	r1, r3
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f001 f902 	bl	800cce2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	791b      	ldrb	r3, [r3, #4]
 800bae2:	4619      	mov	r1, r3
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f001 f8fc 	bl	800cce2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	701a      	strb	r2, [r3, #0]
      break;
 800baf6:	e109      	b.n	800bd0c <USBH_HandleEnum+0x528>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8b3 343a 	ldrh.w	r3, [r3, #1082]	; 0x43a
 800bafe:	4619      	mov	r1, r3
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 f9e7 	bl	800bed4 <USBH_Get_CfgDesc>
 800bb06:	4603      	mov	r3, r0
 800bb08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb0a:	7bbb      	ldrb	r3, [r7, #14]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d103      	bne.n	800bb18 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2205      	movs	r2, #5
 800bb14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bb16:	e0fb      	b.n	800bd10 <USBH_HandleEnum+0x52c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	f040 80f8 	bne.w	800bd10 <USBH_HandleEnum+0x52c>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800bb20:	480f      	ldr	r0, [pc, #60]	; (800bb60 <USBH_HandleEnum+0x37c>)
 800bb22:	f001 fad9 	bl	800d0d8 <iprintf>
 800bb26:	4816      	ldr	r0, [pc, #88]	; (800bb80 <USBH_HandleEnum+0x39c>)
 800bb28:	f001 fad6 	bl	800d0d8 <iprintf>
 800bb2c:	200a      	movs	r0, #10
 800bb2e:	f001 fae5 	bl	800d0fc <putchar>
        phost->device.EnumCnt++;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800bb38:	3301      	adds	r3, #1
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800bb48:	2b03      	cmp	r3, #3
 800bb4a:	d91b      	bls.n	800bb84 <USBH_HandleEnum+0x3a0>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800bb4c:	4806      	ldr	r0, [pc, #24]	; (800bb68 <USBH_HandleEnum+0x384>)
 800bb4e:	f001 fac3 	bl	800d0d8 <iprintf>
 800bb52:	200a      	movs	r0, #10
 800bb54:	f001 fad2 	bl	800d0fc <putchar>
          phost->gState = HOST_ABORT_STATE;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	220d      	movs	r2, #13
 800bb5c:	701a      	strb	r2, [r3, #0]
      break;
 800bb5e:	e0d7      	b.n	800bd10 <USBH_HandleEnum+0x52c>
 800bb60:	0800e320 	.word	0x0800e320
 800bb64:	0800e5b8 	.word	0x0800e5b8
 800bb68:	0800e5ec 	.word	0x0800e5ec
 800bb6c:	0800e62c 	.word	0x0800e62c
 800bb70:	0800e638 	.word	0x0800e638
 800bb74:	0800e644 	.word	0x0800e644
 800bb78:	0800e680 	.word	0x0800e680
 800bb7c:	0800e698 	.word	0x0800e698
 800bb80:	0800e6cc 	.word	0x0800e6cc
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	795b      	ldrb	r3, [r3, #5]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f001 f8a9 	bl	800cce2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	791b      	ldrb	r3, [r3, #4]
 800bb94:	4619      	mov	r1, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f001 f8a3 	bl	800cce2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	701a      	strb	r2, [r3, #0]
      break;
 800bba8:	e0b2      	b.n	800bd10 <USBH_HandleEnum+0x52c>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d02a      	beq.n	800bc0a <USBH_HandleEnum+0x426>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f893 1434 	ldrb.w	r1, [r3, #1076]	; 0x434
                                        phost->device.Data, 0xFFU);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f503 7207 	add.w	r2, r3, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bbc0:	23ff      	movs	r3, #255	; 0xff
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f9be 	bl	800bf44 <USBH_Get_StringDesc>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bbcc:	7bbb      	ldrb	r3, [r7, #14]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10d      	bne.n	800bbee <USBH_HandleEnum+0x40a>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4853      	ldr	r0, [pc, #332]	; (800bd28 <USBH_HandleEnum+0x544>)
 800bbdc:	f001 fa7c 	bl	800d0d8 <iprintf>
 800bbe0:	200a      	movs	r0, #10
 800bbe2:	f001 fa8b 	bl	800d0fc <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2206      	movs	r2, #6
 800bbea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bbec:	e092      	b.n	800bd14 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bbee:	7bbb      	ldrb	r3, [r7, #14]
 800bbf0:	2b03      	cmp	r3, #3
 800bbf2:	f040 808f 	bne.w	800bd14 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Manufacturer : N/A");
 800bbf6:	484d      	ldr	r0, [pc, #308]	; (800bd2c <USBH_HandleEnum+0x548>)
 800bbf8:	f001 fa6e 	bl	800d0d8 <iprintf>
 800bbfc:	200a      	movs	r0, #10
 800bbfe:	f001 fa7d 	bl	800d0fc <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2206      	movs	r2, #6
 800bc06:	705a      	strb	r2, [r3, #1]
      break;
 800bc08:	e084      	b.n	800bd14 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Manufacturer : N/A");
 800bc0a:	4848      	ldr	r0, [pc, #288]	; (800bd2c <USBH_HandleEnum+0x548>)
 800bc0c:	f001 fa64 	bl	800d0d8 <iprintf>
 800bc10:	200a      	movs	r0, #10
 800bc12:	f001 fa73 	bl	800d0fc <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2206      	movs	r2, #6
 800bc1a:	705a      	strb	r2, [r3, #1]
      break;
 800bc1c:	e07a      	b.n	800bd14 <USBH_HandleEnum+0x530>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 3435 	ldrb.w	r3, [r3, #1077]	; 0x435
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d029      	beq.n	800bc7c <USBH_HandleEnum+0x498>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 1435 	ldrb.w	r1, [r3, #1077]	; 0x435
                                        phost->device.Data, 0xFFU);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f503 7207 	add.w	r2, r3, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bc34:	23ff      	movs	r3, #255	; 0xff
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f984 	bl	800bf44 <USBH_Get_StringDesc>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bc40:	7bbb      	ldrb	r3, [r7, #14]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10d      	bne.n	800bc62 <USBH_HandleEnum+0x47e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	4838      	ldr	r0, [pc, #224]	; (800bd30 <USBH_HandleEnum+0x54c>)
 800bc50:	f001 fa42 	bl	800d0d8 <iprintf>
 800bc54:	200a      	movs	r0, #10
 800bc56:	f001 fa51 	bl	800d0fc <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2207      	movs	r2, #7
 800bc5e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bc60:	e05a      	b.n	800bd18 <USBH_HandleEnum+0x534>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc62:	7bbb      	ldrb	r3, [r7, #14]
 800bc64:	2b03      	cmp	r3, #3
 800bc66:	d157      	bne.n	800bd18 <USBH_HandleEnum+0x534>
          USBH_UsrLog("Product : N/A");
 800bc68:	4832      	ldr	r0, [pc, #200]	; (800bd34 <USBH_HandleEnum+0x550>)
 800bc6a:	f001 fa35 	bl	800d0d8 <iprintf>
 800bc6e:	200a      	movs	r0, #10
 800bc70:	f001 fa44 	bl	800d0fc <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2207      	movs	r2, #7
 800bc78:	705a      	strb	r2, [r3, #1]
      break;
 800bc7a:	e04d      	b.n	800bd18 <USBH_HandleEnum+0x534>
        USBH_UsrLog("Product : N/A");
 800bc7c:	482d      	ldr	r0, [pc, #180]	; (800bd34 <USBH_HandleEnum+0x550>)
 800bc7e:	f001 fa2b 	bl	800d0d8 <iprintf>
 800bc82:	200a      	movs	r0, #10
 800bc84:	f001 fa3a 	bl	800d0fc <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2207      	movs	r2, #7
 800bc8c:	705a      	strb	r2, [r3, #1]
      break;
 800bc8e:	e043      	b.n	800bd18 <USBH_HandleEnum+0x534>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 3436 	ldrb.w	r3, [r3, #1078]	; 0x436
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d027      	beq.n	800bcea <USBH_HandleEnum+0x506>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 1436 	ldrb.w	r1, [r3, #1078]	; 0x436
                                        phost->device.Data, 0xFFU);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f503 7207 	add.w	r2, r3, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bca6:	23ff      	movs	r3, #255	; 0xff
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 f94b 	bl	800bf44 <USBH_Get_StringDesc>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bcb2:	7bbb      	ldrb	r3, [r7, #14]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10c      	bne.n	800bcd2 <USBH_HandleEnum+0x4ee>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	481d      	ldr	r0, [pc, #116]	; (800bd38 <USBH_HandleEnum+0x554>)
 800bcc2:	f001 fa09 	bl	800d0d8 <iprintf>
 800bcc6:	200a      	movs	r0, #10
 800bcc8:	f001 fa18 	bl	800d0fc <putchar>
          Status = USBH_OK;
 800bccc:	2300      	movs	r3, #0
 800bcce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bcd0:	e024      	b.n	800bd1c <USBH_HandleEnum+0x538>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bcd2:	7bbb      	ldrb	r3, [r7, #14]
 800bcd4:	2b03      	cmp	r3, #3
 800bcd6:	d121      	bne.n	800bd1c <USBH_HandleEnum+0x538>
          USBH_UsrLog("Serial Number : N/A");
 800bcd8:	4818      	ldr	r0, [pc, #96]	; (800bd3c <USBH_HandleEnum+0x558>)
 800bcda:	f001 f9fd 	bl	800d0d8 <iprintf>
 800bcde:	200a      	movs	r0, #10
 800bce0:	f001 fa0c 	bl	800d0fc <putchar>
          Status = USBH_OK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	73fb      	strb	r3, [r7, #15]
      break;
 800bce8:	e018      	b.n	800bd1c <USBH_HandleEnum+0x538>
        USBH_UsrLog("Serial Number : N/A");
 800bcea:	4814      	ldr	r0, [pc, #80]	; (800bd3c <USBH_HandleEnum+0x558>)
 800bcec:	f001 f9f4 	bl	800d0d8 <iprintf>
 800bcf0:	200a      	movs	r0, #10
 800bcf2:	f001 fa03 	bl	800d0fc <putchar>
        Status = USBH_OK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	73fb      	strb	r3, [r7, #15]
      break;
 800bcfa:	e00f      	b.n	800bd1c <USBH_HandleEnum+0x538>

    default:
      break;
 800bcfc:	bf00      	nop
 800bcfe:	e00e      	b.n	800bd1e <USBH_HandleEnum+0x53a>
      break;
 800bd00:	bf00      	nop
 800bd02:	e00c      	b.n	800bd1e <USBH_HandleEnum+0x53a>
      break;
 800bd04:	bf00      	nop
 800bd06:	e00a      	b.n	800bd1e <USBH_HandleEnum+0x53a>
      break;
 800bd08:	bf00      	nop
 800bd0a:	e008      	b.n	800bd1e <USBH_HandleEnum+0x53a>
      break;
 800bd0c:	bf00      	nop
 800bd0e:	e006      	b.n	800bd1e <USBH_HandleEnum+0x53a>
      break;
 800bd10:	bf00      	nop
 800bd12:	e004      	b.n	800bd1e <USBH_HandleEnum+0x53a>
      break;
 800bd14:	bf00      	nop
 800bd16:	e002      	b.n	800bd1e <USBH_HandleEnum+0x53a>
      break;
 800bd18:	bf00      	nop
 800bd1a:	e000      	b.n	800bd1e <USBH_HandleEnum+0x53a>
      break;
 800bd1c:	bf00      	nop
  }
  return Status;
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	0800e710 	.word	0x0800e710
 800bd2c:	0800e724 	.word	0x0800e724
 800bd30:	0800e738 	.word	0x0800e738
 800bd34:	0800e748 	.word	0x0800e748
 800bd38:	0800e758 	.word	0x0800e758
 800bd3c:	0800e76c 	.word	0x0800e76c

0800bd40 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	683a      	ldr	r2, [r7, #0]
 800bd4e:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
}
 800bd52:	bf00      	nop
 800bd54:	370c      	adds	r7, #12
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b082      	sub	sp, #8
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800bd6c:	1c5a      	adds	r2, r3, #1
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
  USBH_HandleSof(phost);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 f804 	bl	800bd82 <USBH_HandleSof>
}
 800bd7a:	bf00      	nop
 800bd7c:	3708      	adds	r7, #8
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	b082      	sub	sp, #8
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	2b0b      	cmp	r3, #11
 800bd92:	d10a      	bne.n	800bdaa <USBH_HandleSof+0x28>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d005      	beq.n	800bdaa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800bda4:	699b      	ldr	r3, [r3, #24]
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	4798      	blx	r3
  }
}
 800bdaa:	bf00      	nop
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bdb2:	b480      	push	{r7}
 800bdb4:	b083      	sub	sp, #12
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800bdc2:	bf00      	nop
}
 800bdc4:	370c      	adds	r7, #12
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr

0800bdce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bdce:	b480      	push	{r7}
 800bdd0:	b083      	sub	sp, #12
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423

  return;
 800bdde:	bf00      	nop
}
 800bde0:	370c      	adds	r7, #12
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr

0800bdea <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bdea:	b480      	push	{r7}
 800bdec:	b083      	sub	sp, #12
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
  phost->device.is_connected = 0U;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  phost->device.PortEnabled = 0U;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7f5 f986 	bl	800114a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	791b      	ldrb	r3, [r3, #4]
 800be42:	4619      	mov	r1, r3
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 ff4c 	bl	800cce2 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	795b      	ldrb	r3, [r3, #5]
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 ff46 	bl	800cce2 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af02      	add	r7, sp, #8
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	460b      	mov	r3, r1
 800be6a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800be6c:	887b      	ldrh	r3, [r7, #2]
 800be6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be72:	d90a      	bls.n	800be8a <USBH_Get_DevDesc+0x2a>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 800be74:	4815      	ldr	r0, [pc, #84]	; (800becc <USBH_Get_DevDesc+0x6c>)
 800be76:	f001 f92f 	bl	800d0d8 <iprintf>
 800be7a:	4815      	ldr	r0, [pc, #84]	; (800bed0 <USBH_Get_DevDesc+0x70>)
 800be7c:	f001 f92c 	bl	800d0d8 <iprintf>
 800be80:	200a      	movs	r0, #10
 800be82:	f001 f93b 	bl	800d0fc <putchar>
    return USBH_NOT_SUPPORTED;
 800be86:	2303      	movs	r3, #3
 800be88:	e01b      	b.n	800bec2 <USBH_Get_DevDesc+0x62>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f503 7207 	add.w	r2, r3, #540	; 0x21c
  status = USBH_GetDescriptor(phost,
 800be90:	887b      	ldrh	r3, [r7, #2]
 800be92:	9300      	str	r3, [sp, #0]
 800be94:	4613      	mov	r3, r2
 800be96:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be9a:	2100      	movs	r1, #0
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f893 	bl	800bfc8 <USBH_GetDescriptor>
 800bea2:	4603      	mov	r3, r0
 800bea4:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800bea6:	7bfb      	ldrb	r3, [r7, #15]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d109      	bne.n	800bec0 <USBH_Get_DevDesc+0x60>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800beb2:	887a      	ldrh	r2, [r7, #2]
 800beb4:	4619      	mov	r1, r3
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f94a 	bl	800c150 <USBH_ParseDevDesc>
 800bebc:	4603      	mov	r3, r0
 800bebe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	0800e780 	.word	0x0800e780
 800bed0:	0800e788 	.word	0x0800e788

0800bed4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b086      	sub	sp, #24
 800bed8:	af02      	add	r7, sp, #8
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	460b      	mov	r3, r1
 800bede:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	331c      	adds	r3, #28
 800bee4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800bee6:	887b      	ldrh	r3, [r7, #2]
 800bee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800beec:	d90a      	bls.n	800bf04 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 800beee:	4813      	ldr	r0, [pc, #76]	; (800bf3c <USBH_Get_CfgDesc+0x68>)
 800bef0:	f001 f8f2 	bl	800d0d8 <iprintf>
 800bef4:	4812      	ldr	r0, [pc, #72]	; (800bf40 <USBH_Get_CfgDesc+0x6c>)
 800bef6:	f001 f8ef 	bl	800d0d8 <iprintf>
 800befa:	200a      	movs	r0, #10
 800befc:	f001 f8fe 	bl	800d0fc <putchar>
    return USBH_NOT_SUPPORTED;
 800bf00:	2303      	movs	r3, #3
 800bf02:	e016      	b.n	800bf32 <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bf04:	887b      	ldrh	r3, [r7, #2]
 800bf06:	9300      	str	r3, [sp, #0]
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf0e:	2100      	movs	r1, #0
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 f859 	bl	800bfc8 <USBH_GetDescriptor>
 800bf16:	4603      	mov	r3, r0
 800bf18:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d107      	bne.n	800bf30 <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bf20:	887b      	ldrh	r3, [r7, #2]
 800bf22:	461a      	mov	r2, r3
 800bf24:	68b9      	ldr	r1, [r7, #8]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f9c6 	bl	800c2b8 <USBH_ParseCfgDesc>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bf30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	0800e780 	.word	0x0800e780
 800bf40:	0800e7cc 	.word	0x0800e7cc

0800bf44 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b088      	sub	sp, #32
 800bf48:	af02      	add	r7, sp, #8
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	607a      	str	r2, [r7, #4]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	460b      	mov	r3, r1
 800bf52:	72fb      	strb	r3, [r7, #11]
 800bf54:	4613      	mov	r3, r2
 800bf56:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800bf58:	893b      	ldrh	r3, [r7, #8]
 800bf5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf5e:	d802      	bhi.n	800bf66 <USBH_Get_StringDesc+0x22>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10a      	bne.n	800bf7c <USBH_Get_StringDesc+0x38>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 800bf66:	4816      	ldr	r0, [pc, #88]	; (800bfc0 <USBH_Get_StringDesc+0x7c>)
 800bf68:	f001 f8b6 	bl	800d0d8 <iprintf>
 800bf6c:	4815      	ldr	r0, [pc, #84]	; (800bfc4 <USBH_Get_StringDesc+0x80>)
 800bf6e:	f001 f8b3 	bl	800d0d8 <iprintf>
 800bf72:	200a      	movs	r0, #10
 800bf74:	f001 f8c2 	bl	800d0fc <putchar>
    return USBH_NOT_SUPPORTED;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	e01c      	b.n	800bfb6 <USBH_Get_StringDesc+0x72>
  }

  status = USBH_GetDescriptor(phost,
 800bf7c:	7afb      	ldrb	r3, [r7, #11]
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bf84:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f503 7107 	add.w	r1, r3, #540	; 0x21c
  status = USBH_GetDescriptor(phost,
 800bf8c:	893b      	ldrh	r3, [r7, #8]
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	460b      	mov	r3, r1
 800bf92:	2100      	movs	r1, #0
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f000 f817 	bl	800bfc8 <USBH_GetDescriptor>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800bf9e:	7dfb      	ldrb	r3, [r7, #23]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d107      	bne.n	800bfb4 <USBH_Get_StringDesc+0x70>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800bfaa:	893a      	ldrh	r2, [r7, #8]
 800bfac:	6879      	ldr	r1, [r7, #4]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f000 fb98 	bl	800c6e4 <USBH_ParseStringDesc>
  }

  return status;
 800bfb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3718      	adds	r7, #24
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	0800e780 	.word	0x0800e780
 800bfc4:	0800e818 	.word	0x0800e818

0800bfc8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	607b      	str	r3, [r7, #4]
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	72fb      	strb	r3, [r7, #11]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	789b      	ldrb	r3, [r3, #2]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d11c      	bne.n	800c01c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bfe2:	7afb      	ldrb	r3, [r7, #11]
 800bfe4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2206      	movs	r2, #6
 800bff2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	893a      	ldrh	r2, [r7, #8]
 800bff8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bffa:	893b      	ldrh	r3, [r7, #8]
 800bffc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c004:	d104      	bne.n	800c010 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f240 4209 	movw	r2, #1033	; 0x409
 800c00c:	829a      	strh	r2, [r3, #20]
 800c00e:	e002      	b.n	800c016 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2200      	movs	r2, #0
 800c014:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	8b3a      	ldrh	r2, [r7, #24]
 800c01a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c01c:	8b3b      	ldrh	r3, [r7, #24]
 800c01e:	461a      	mov	r2, r3
 800c020:	6879      	ldr	r1, [r7, #4]
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f000 fbac 	bl	800c780 <USBH_CtlReq>
 800c028:	4603      	mov	r3, r0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	460b      	mov	r3, r1
 800c03c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	789b      	ldrb	r3, [r3, #2]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d10f      	bne.n	800c066 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2200      	movs	r2, #0
 800c04a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2205      	movs	r2, #5
 800c050:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c052:	78fb      	ldrb	r3, [r7, #3]
 800c054:	b29a      	uxth	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c066:	2200      	movs	r2, #0
 800c068:	2100      	movs	r1, #0
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fb88 	bl	800c780 <USBH_CtlReq>
 800c070:	4603      	mov	r3, r0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b082      	sub	sp, #8
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
 800c082:	460b      	mov	r3, r1
 800c084:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	789b      	ldrb	r3, [r3, #2]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d10e      	bne.n	800c0ac <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2209      	movs	r2, #9
 800c098:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	887a      	ldrh	r2, [r7, #2]
 800c09e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fb65 	bl	800c780 <USBH_CtlReq>
 800c0b6:	4603      	mov	r3, r0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3708      	adds	r7, #8
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	789b      	ldrb	r3, [r3, #2]
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d10f      	bne.n	800c0f4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2203      	movs	r2, #3
 800c0de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c0e0:	78fb      	ldrb	r3, [r7, #3]
 800c0e2:	b29a      	uxth	r2, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 fb41 	bl	800c780 <USBH_CtlReq>
 800c0fe:	4603      	mov	r3, r0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	460b      	mov	r3, r1
 800c112:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	789b      	ldrb	r3, [r3, #2]
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d10f      	bne.n	800c13c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2202      	movs	r2, #2
 800c120:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2201      	movs	r2, #1
 800c126:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c12e:	78fb      	ldrb	r3, [r7, #3]
 800c130:	b29a      	uxth	r2, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c13c:	2200      	movs	r2, #0
 800c13e:	2100      	movs	r1, #0
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 fb1d 	bl	800c780 <USBH_CtlReq>
 800c146:	4603      	mov	r3, r0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c150:	b480      	push	{r7}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	4613      	mov	r3, r2
 800c15c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f203 4326 	addw	r3, r3, #1062	; 0x426
 800c164:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800c166:	2300      	movs	r3, #0
 800c168:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d101      	bne.n	800c174 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800c170:	2302      	movs	r3, #2
 800c172:	e098      	b.n	800c2a6 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	781a      	ldrb	r2, [r3, #0]
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	785a      	ldrb	r2, [r3, #1]
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	3302      	adds	r3, #2
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	b29a      	uxth	r2, r3
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	3303      	adds	r3, #3
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	b29b      	uxth	r3, r3
 800c194:	021b      	lsls	r3, r3, #8
 800c196:	b29b      	uxth	r3, r3
 800c198:	4313      	orrs	r3, r2
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	791a      	ldrb	r2, [r3, #4]
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	795a      	ldrb	r2, [r3, #5]
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	799a      	ldrb	r2, [r3, #6]
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	79da      	ldrb	r2, [r3, #7]
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d004      	beq.n	800c1d4 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d11b      	bne.n	800c20c <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	79db      	ldrb	r3, [r3, #7]
 800c1d8:	2b20      	cmp	r3, #32
 800c1da:	dc0f      	bgt.n	800c1fc <USBH_ParseDevDesc+0xac>
 800c1dc:	2b08      	cmp	r3, #8
 800c1de:	db0f      	blt.n	800c200 <USBH_ParseDevDesc+0xb0>
 800c1e0:	3b08      	subs	r3, #8
 800c1e2:	4a34      	ldr	r2, [pc, #208]	; (800c2b4 <USBH_ParseDevDesc+0x164>)
 800c1e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c1e8:	f003 0301 	and.w	r3, r3, #1
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	bf14      	ite	ne
 800c1f0:	2301      	movne	r3, #1
 800c1f2:	2300      	moveq	r3, #0
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d106      	bne.n	800c208 <USBH_ParseDevDesc+0xb8>
 800c1fa:	e001      	b.n	800c200 <USBH_ParseDevDesc+0xb0>
 800c1fc:	2b40      	cmp	r3, #64	; 0x40
 800c1fe:	d003      	beq.n	800c208 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	2208      	movs	r2, #8
 800c204:	71da      	strb	r2, [r3, #7]
        break;
 800c206:	e000      	b.n	800c20a <USBH_ParseDevDesc+0xba>
        break;
 800c208:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800c20a:	e00e      	b.n	800c22a <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800c212:	2b02      	cmp	r3, #2
 800c214:	d107      	bne.n	800c226 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	79db      	ldrb	r3, [r3, #7]
 800c21a:	2b08      	cmp	r3, #8
 800c21c:	d005      	beq.n	800c22a <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	2208      	movs	r2, #8
 800c222:	71da      	strb	r2, [r3, #7]
 800c224:	e001      	b.n	800c22a <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c226:	2303      	movs	r3, #3
 800c228:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800c22a:	88fb      	ldrh	r3, [r7, #6]
 800c22c:	2b08      	cmp	r3, #8
 800c22e:	d939      	bls.n	800c2a4 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	3308      	adds	r3, #8
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	b29a      	uxth	r2, r3
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	3309      	adds	r3, #9
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	b29b      	uxth	r3, r3
 800c240:	021b      	lsls	r3, r3, #8
 800c242:	b29b      	uxth	r3, r3
 800c244:	4313      	orrs	r3, r2
 800c246:	b29a      	uxth	r2, r3
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	330a      	adds	r3, #10
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	b29a      	uxth	r2, r3
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	330b      	adds	r3, #11
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	021b      	lsls	r3, r3, #8
 800c25e:	b29b      	uxth	r3, r3
 800c260:	4313      	orrs	r3, r2
 800c262:	b29a      	uxth	r2, r3
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	330c      	adds	r3, #12
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	b29a      	uxth	r2, r3
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	330d      	adds	r3, #13
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	b29b      	uxth	r3, r3
 800c278:	021b      	lsls	r3, r3, #8
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	4313      	orrs	r3, r2
 800c27e:	b29a      	uxth	r2, r3
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	7b9a      	ldrb	r2, [r3, #14]
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	7bda      	ldrb	r2, [r3, #15]
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	7c1a      	ldrb	r2, [r3, #16]
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	7c5a      	ldrb	r2, [r3, #17]
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800c2a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	371c      	adds	r7, #28
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	01000101 	.word	0x01000101

0800c2b8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b08c      	sub	sp, #48	; 0x30
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800c2cc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d101      	bne.n	800c2ea <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800c2e6:	2302      	movs	r3, #2
 800c2e8:	e0db      	b.n	800c4a2 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	781a      	ldrb	r2, [r3, #0]
 800c2f2:	6a3b      	ldr	r3, [r7, #32]
 800c2f4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	785a      	ldrb	r2, [r3, #1]
 800c2fa:	6a3b      	ldr	r3, [r7, #32]
 800c2fc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	3302      	adds	r3, #2
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	b29a      	uxth	r2, r3
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	3303      	adds	r3, #3
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	021b      	lsls	r3, r3, #8
 800c310:	b29b      	uxth	r3, r3
 800c312:	4313      	orrs	r3, r2
 800c314:	b29b      	uxth	r3, r3
 800c316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c31a:	bf28      	it	cs
 800c31c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800c320:	b29a      	uxth	r2, r3
 800c322:	6a3b      	ldr	r3, [r7, #32]
 800c324:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	791a      	ldrb	r2, [r3, #4]
 800c32a:	6a3b      	ldr	r3, [r7, #32]
 800c32c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	795a      	ldrb	r2, [r3, #5]
 800c332:	6a3b      	ldr	r3, [r7, #32]
 800c334:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	799a      	ldrb	r2, [r3, #6]
 800c33a:	6a3b      	ldr	r3, [r7, #32]
 800c33c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	79da      	ldrb	r2, [r3, #7]
 800c342:	6a3b      	ldr	r3, [r7, #32]
 800c344:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	7a1a      	ldrb	r2, [r3, #8]
 800c34a:	6a3b      	ldr	r3, [r7, #32]
 800c34c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800c34e:	6a3b      	ldr	r3, [r7, #32]
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	2b09      	cmp	r3, #9
 800c354:	d002      	beq.n	800c35c <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c356:	6a3b      	ldr	r3, [r7, #32]
 800c358:	2209      	movs	r2, #9
 800c35a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c35c:	88fb      	ldrh	r3, [r7, #6]
 800c35e:	2b09      	cmp	r3, #9
 800c360:	f240 809d 	bls.w	800c49e <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800c364:	2309      	movs	r3, #9
 800c366:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c368:	2300      	movs	r3, #0
 800c36a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c36c:	e081      	b.n	800c472 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c36e:	f107 0316 	add.w	r3, r7, #22
 800c372:	4619      	mov	r1, r3
 800c374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c376:	f000 f9e8 	bl	800c74a <USBH_GetNextDesc>
 800c37a:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37e:	785b      	ldrb	r3, [r3, #1]
 800c380:	2b04      	cmp	r3, #4
 800c382:	d176      	bne.n	800c472 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	2b09      	cmp	r3, #9
 800c38a:	d002      	beq.n	800c392 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38e:	2209      	movs	r2, #9
 800c390:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c396:	221a      	movs	r2, #26
 800c398:	fb02 f303 	mul.w	r3, r2, r3
 800c39c:	3308      	adds	r3, #8
 800c39e:	6a3a      	ldr	r2, [r7, #32]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	3302      	adds	r3, #2
 800c3a4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c3a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3a8:	69f8      	ldr	r0, [r7, #28]
 800c3aa:	f000 f87e 	bl	800c4aa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c3b8:	e043      	b.n	800c442 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c3ba:	f107 0316 	add.w	r3, r7, #22
 800c3be:	4619      	mov	r1, r3
 800c3c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3c2:	f000 f9c2 	bl	800c74a <USBH_GetNextDesc>
 800c3c6:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ca:	785b      	ldrb	r3, [r3, #1]
 800c3cc:	2b05      	cmp	r3, #5
 800c3ce:	d138      	bne.n	800c442 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	795b      	ldrb	r3, [r3, #5]
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d113      	bne.n	800c400 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c3dc:	2b02      	cmp	r3, #2
 800c3de:	d003      	beq.n	800c3e8 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	799b      	ldrb	r3, [r3, #6]
 800c3e4:	2b03      	cmp	r3, #3
 800c3e6:	d10b      	bne.n	800c400 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	79db      	ldrb	r3, [r3, #7]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d10b      	bne.n	800c408 <USBH_ParseCfgDesc+0x150>
 800c3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	2b09      	cmp	r3, #9
 800c3f6:	d007      	beq.n	800c408 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800c3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fa:	2209      	movs	r2, #9
 800c3fc:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c3fe:	e003      	b.n	800c408 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c402:	2207      	movs	r2, #7
 800c404:	701a      	strb	r2, [r3, #0]
 800c406:	e000      	b.n	800c40a <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c408:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c40a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c40e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c412:	3201      	adds	r2, #1
 800c414:	00d2      	lsls	r2, r2, #3
 800c416:	211a      	movs	r1, #26
 800c418:	fb01 f303 	mul.w	r3, r1, r3
 800c41c:	4413      	add	r3, r2
 800c41e:	3308      	adds	r3, #8
 800c420:	6a3a      	ldr	r2, [r7, #32]
 800c422:	4413      	add	r3, r2
 800c424:	3304      	adds	r3, #4
 800c426:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c42a:	69b9      	ldr	r1, [r7, #24]
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f000 f870 	bl	800c512 <USBH_ParseEPDesc>
 800c432:	4603      	mov	r3, r0
 800c434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c438:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c43c:	3301      	adds	r3, #1
 800c43e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	791b      	ldrb	r3, [r3, #4]
 800c446:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d204      	bcs.n	800c458 <USBH_ParseCfgDesc+0x1a0>
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	885a      	ldrh	r2, [r3, #2]
 800c452:	8afb      	ldrh	r3, [r7, #22]
 800c454:	429a      	cmp	r2, r3
 800c456:	d8b0      	bhi.n	800c3ba <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	791b      	ldrb	r3, [r3, #4]
 800c45c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c460:	429a      	cmp	r2, r3
 800c462:	d201      	bcs.n	800c468 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800c464:	2303      	movs	r3, #3
 800c466:	e01c      	b.n	800c4a2 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800c468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c46c:	3301      	adds	r3, #1
 800c46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c476:	2b01      	cmp	r3, #1
 800c478:	d805      	bhi.n	800c486 <USBH_ParseCfgDesc+0x1ce>
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	885a      	ldrh	r2, [r3, #2]
 800c47e:	8afb      	ldrh	r3, [r7, #22]
 800c480:	429a      	cmp	r2, r3
 800c482:	f63f af74 	bhi.w	800c36e <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c486:	6a3b      	ldr	r3, [r7, #32]
 800c488:	791b      	ldrb	r3, [r3, #4]
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	bf28      	it	cs
 800c48e:	2302      	movcs	r3, #2
 800c490:	b2db      	uxtb	r3, r3
 800c492:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c496:	429a      	cmp	r2, r3
 800c498:	d201      	bcs.n	800c49e <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800c49a:	2303      	movs	r3, #3
 800c49c:	e001      	b.n	800c4a2 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800c49e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3730      	adds	r7, #48	; 0x30
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c4aa:	b480      	push	{r7}
 800c4ac:	b083      	sub	sp, #12
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
 800c4b2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	781a      	ldrb	r2, [r3, #0]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	785a      	ldrb	r2, [r3, #1]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	789a      	ldrb	r2, [r3, #2]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	78da      	ldrb	r2, [r3, #3]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	bf28      	it	cs
 800c4de:	2302      	movcs	r3, #2
 800c4e0:	b2da      	uxtb	r2, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	795a      	ldrb	r2, [r3, #5]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	799a      	ldrb	r2, [r3, #6]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	79da      	ldrb	r2, [r3, #7]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	7a1a      	ldrb	r2, [r3, #8]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	721a      	strb	r2, [r3, #8]
}
 800c506:	bf00      	nop
 800c508:	370c      	adds	r7, #12
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr

0800c512 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c512:	b480      	push	{r7}
 800c514:	b087      	sub	sp, #28
 800c516:	af00      	add	r7, sp, #0
 800c518:	60f8      	str	r0, [r7, #12]
 800c51a:	60b9      	str	r1, [r7, #8]
 800c51c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	781a      	ldrb	r2, [r3, #0]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	785a      	ldrb	r2, [r3, #1]
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	789a      	ldrb	r2, [r3, #2]
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	78da      	ldrb	r2, [r3, #3]
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	3304      	adds	r3, #4
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	b29a      	uxth	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	3305      	adds	r3, #5
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	b29b      	uxth	r3, r3
 800c552:	021b      	lsls	r3, r3, #8
 800c554:	b29b      	uxth	r3, r3
 800c556:	4313      	orrs	r3, r2
 800c558:	b29a      	uxth	r2, r3
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	799a      	ldrb	r2, [r3, #6]
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	889b      	ldrh	r3, [r3, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d009      	beq.n	800c582 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c576:	d804      	bhi.n	800c582 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c57c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c580:	d901      	bls.n	800c586 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800c582:	2303      	movs	r3, #3
 800c584:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d136      	bne.n	800c5fe <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	78db      	ldrb	r3, [r3, #3]
 800c594:	f003 0303 	and.w	r3, r3, #3
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d108      	bne.n	800c5ae <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	889b      	ldrh	r3, [r3, #4]
 800c5a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5a4:	f240 8097 	bls.w	800c6d6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	75fb      	strb	r3, [r7, #23]
 800c5ac:	e093      	b.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	78db      	ldrb	r3, [r3, #3]
 800c5b2:	f003 0303 	and.w	r3, r3, #3
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d107      	bne.n	800c5ca <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	889b      	ldrh	r3, [r3, #4]
 800c5be:	2b40      	cmp	r3, #64	; 0x40
 800c5c0:	f240 8089 	bls.w	800c6d6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c5c4:	2303      	movs	r3, #3
 800c5c6:	75fb      	strb	r3, [r7, #23]
 800c5c8:	e085      	b.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	78db      	ldrb	r3, [r3, #3]
 800c5ce:	f003 0303 	and.w	r3, r3, #3
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d005      	beq.n	800c5e2 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	78db      	ldrb	r3, [r3, #3]
 800c5da:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c5de:	2b03      	cmp	r3, #3
 800c5e0:	d10a      	bne.n	800c5f8 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	799b      	ldrb	r3, [r3, #6]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d003      	beq.n	800c5f2 <USBH_ParseEPDesc+0xe0>
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	799b      	ldrb	r3, [r3, #6]
 800c5ee:	2b10      	cmp	r3, #16
 800c5f0:	d970      	bls.n	800c6d4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c5f2:	2303      	movs	r3, #3
 800c5f4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c5f6:	e06d      	b.n	800c6d4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	75fb      	strb	r3, [r7, #23]
 800c5fc:	e06b      	b.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800c604:	2b01      	cmp	r3, #1
 800c606:	d13c      	bne.n	800c682 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	78db      	ldrb	r3, [r3, #3]
 800c60c:	f003 0303 	and.w	r3, r3, #3
 800c610:	2b02      	cmp	r3, #2
 800c612:	d005      	beq.n	800c620 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	78db      	ldrb	r3, [r3, #3]
 800c618:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d106      	bne.n	800c62e <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	889b      	ldrh	r3, [r3, #4]
 800c624:	2b40      	cmp	r3, #64	; 0x40
 800c626:	d956      	bls.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c628:	2303      	movs	r3, #3
 800c62a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c62c:	e053      	b.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	78db      	ldrb	r3, [r3, #3]
 800c632:	f003 0303 	and.w	r3, r3, #3
 800c636:	2b01      	cmp	r3, #1
 800c638:	d10e      	bne.n	800c658 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	799b      	ldrb	r3, [r3, #6]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d007      	beq.n	800c652 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c646:	2b10      	cmp	r3, #16
 800c648:	d803      	bhi.n	800c652 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c64e:	2b40      	cmp	r3, #64	; 0x40
 800c650:	d941      	bls.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c652:	2303      	movs	r3, #3
 800c654:	75fb      	strb	r3, [r7, #23]
 800c656:	e03e      	b.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	78db      	ldrb	r3, [r3, #3]
 800c65c:	f003 0303 	and.w	r3, r3, #3
 800c660:	2b03      	cmp	r3, #3
 800c662:	d10b      	bne.n	800c67c <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	799b      	ldrb	r3, [r3, #6]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d004      	beq.n	800c676 <USBH_ParseEPDesc+0x164>
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	889b      	ldrh	r3, [r3, #4]
 800c670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c674:	d32f      	bcc.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c676:	2303      	movs	r3, #3
 800c678:	75fb      	strb	r3, [r7, #23]
 800c67a:	e02c      	b.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c67c:	2303      	movs	r3, #3
 800c67e:	75fb      	strb	r3, [r7, #23]
 800c680:	e029      	b.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d120      	bne.n	800c6ce <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	78db      	ldrb	r3, [r3, #3]
 800c690:	f003 0303 	and.w	r3, r3, #3
 800c694:	2b00      	cmp	r3, #0
 800c696:	d106      	bne.n	800c6a6 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	889b      	ldrh	r3, [r3, #4]
 800c69c:	2b08      	cmp	r3, #8
 800c69e:	d01a      	beq.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	75fb      	strb	r3, [r7, #23]
 800c6a4:	e017      	b.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	78db      	ldrb	r3, [r3, #3]
 800c6aa:	f003 0303 	and.w	r3, r3, #3
 800c6ae:	2b03      	cmp	r3, #3
 800c6b0:	d10a      	bne.n	800c6c8 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	799b      	ldrb	r3, [r3, #6]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d003      	beq.n	800c6c2 <USBH_ParseEPDesc+0x1b0>
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	889b      	ldrh	r3, [r3, #4]
 800c6be:	2b08      	cmp	r3, #8
 800c6c0:	d909      	bls.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c6c2:	2303      	movs	r3, #3
 800c6c4:	75fb      	strb	r3, [r7, #23]
 800c6c6:	e006      	b.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	75fb      	strb	r3, [r7, #23]
 800c6cc:	e003      	b.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c6ce:	2303      	movs	r3, #3
 800c6d0:	75fb      	strb	r3, [r7, #23]
 800c6d2:	e000      	b.n	800c6d6 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c6d4:	bf00      	nop
  }

  return status;
 800c6d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	371c      	adds	r7, #28
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b087      	sub	sp, #28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	2b03      	cmp	r3, #3
 800c6fa:	d120      	bne.n	800c73e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	1e9a      	subs	r2, r3, #2
 800c702:	88fb      	ldrh	r3, [r7, #6]
 800c704:	4293      	cmp	r3, r2
 800c706:	bf28      	it	cs
 800c708:	4613      	movcs	r3, r2
 800c70a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	3302      	adds	r3, #2
 800c710:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c712:	2300      	movs	r3, #0
 800c714:	82fb      	strh	r3, [r7, #22]
 800c716:	e00b      	b.n	800c730 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c718:	8afb      	ldrh	r3, [r7, #22]
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	4413      	add	r3, r2
 800c71e:	781a      	ldrb	r2, [r3, #0]
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	3301      	adds	r3, #1
 800c728:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c72a:	8afb      	ldrh	r3, [r7, #22]
 800c72c:	3302      	adds	r3, #2
 800c72e:	82fb      	strh	r3, [r7, #22]
 800c730:	8afa      	ldrh	r2, [r7, #22]
 800c732:	8abb      	ldrh	r3, [r7, #20]
 800c734:	429a      	cmp	r2, r3
 800c736:	d3ef      	bcc.n	800c718 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	2200      	movs	r2, #0
 800c73c:	701a      	strb	r2, [r3, #0]
  }
}
 800c73e:	bf00      	nop
 800c740:	371c      	adds	r7, #28
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr

0800c74a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c74a:	b480      	push	{r7}
 800c74c:	b085      	sub	sp, #20
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
 800c752:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	881a      	ldrh	r2, [r3, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	4413      	add	r3, r2
 800c760:	b29a      	uxth	r2, r3
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4413      	add	r3, r2
 800c770:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c772:	68fb      	ldr	r3, [r7, #12]
}
 800c774:	4618      	mov	r0, r3
 800c776:	3714      	adds	r7, #20
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	4613      	mov	r3, r2
 800c78c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c78e:	2301      	movs	r3, #1
 800c790:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	789b      	ldrb	r3, [r3, #2]
 800c796:	2b01      	cmp	r3, #1
 800c798:	d002      	beq.n	800c7a0 <USBH_CtlReq+0x20>
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d00f      	beq.n	800c7be <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c79e:	e027      	b.n	800c7f0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	88fa      	ldrh	r2, [r7, #6]
 800c7aa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2202      	movs	r2, #2
 800c7b6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	75fb      	strb	r3, [r7, #23]
      break;
 800c7bc:	e018      	b.n	800c7f0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f000 f81c 	bl	800c7fc <USBH_HandleControl>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c7c8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <USBH_CtlReq+0x54>
 800c7ce:	7dfb      	ldrb	r3, [r7, #23]
 800c7d0:	2b03      	cmp	r3, #3
 800c7d2:	d106      	bne.n	800c7e2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	761a      	strb	r2, [r3, #24]
      break;
 800c7e0:	e005      	b.n	800c7ee <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c7e2:	7dfb      	ldrb	r3, [r7, #23]
 800c7e4:	2b02      	cmp	r3, #2
 800c7e6:	d102      	bne.n	800c7ee <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	709a      	strb	r2, [r3, #2]
      break;
 800c7ee:	bf00      	nop
  }
  return status;
 800c7f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3718      	adds	r7, #24
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
	...

0800c7fc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b086      	sub	sp, #24
 800c800:	af02      	add	r7, sp, #8
 800c802:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c804:	2301      	movs	r3, #1
 800c806:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c808:	2300      	movs	r3, #0
 800c80a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	7e1b      	ldrb	r3, [r3, #24]
 800c810:	3b01      	subs	r3, #1
 800c812:	2b0a      	cmp	r3, #10
 800c814:	f200 815f 	bhi.w	800cad6 <USBH_HandleControl+0x2da>
 800c818:	a201      	add	r2, pc, #4	; (adr r2, 800c820 <USBH_HandleControl+0x24>)
 800c81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c81e:	bf00      	nop
 800c820:	0800c84d 	.word	0x0800c84d
 800c824:	0800c867 	.word	0x0800c867
 800c828:	0800c8d1 	.word	0x0800c8d1
 800c82c:	0800c8f7 	.word	0x0800c8f7
 800c830:	0800c92f 	.word	0x0800c92f
 800c834:	0800c959 	.word	0x0800c959
 800c838:	0800c9ab 	.word	0x0800c9ab
 800c83c:	0800c9cd 	.word	0x0800c9cd
 800c840:	0800ca09 	.word	0x0800ca09
 800c844:	0800ca2f 	.word	0x0800ca2f
 800c848:	0800ca6d 	.word	0x0800ca6d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f103 0110 	add.w	r1, r3, #16
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	795b      	ldrb	r3, [r3, #5]
 800c856:	461a      	mov	r2, r3
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 f951 	bl	800cb00 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2202      	movs	r2, #2
 800c862:	761a      	strb	r2, [r3, #24]
      break;
 800c864:	e142      	b.n	800caec <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	795b      	ldrb	r3, [r3, #5]
 800c86a:	4619      	mov	r1, r3
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7f4 fd15 	bl	800129c <USBH_LL_GetURBState>
 800c872:	4603      	mov	r3, r0
 800c874:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c876:	7bbb      	ldrb	r3, [r7, #14]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d11e      	bne.n	800c8ba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	7c1b      	ldrb	r3, [r3, #16]
 800c880:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c884:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	8adb      	ldrh	r3, [r3, #22]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00a      	beq.n	800c8a4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c88e:	7b7b      	ldrb	r3, [r7, #13]
 800c890:	2b80      	cmp	r3, #128	; 0x80
 800c892:	d103      	bne.n	800c89c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2203      	movs	r2, #3
 800c898:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c89a:	e11e      	b.n	800cada <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2205      	movs	r2, #5
 800c8a0:	761a      	strb	r2, [r3, #24]
      break;
 800c8a2:	e11a      	b.n	800cada <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800c8a4:	7b7b      	ldrb	r3, [r7, #13]
 800c8a6:	2b80      	cmp	r3, #128	; 0x80
 800c8a8:	d103      	bne.n	800c8b2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2209      	movs	r2, #9
 800c8ae:	761a      	strb	r2, [r3, #24]
      break;
 800c8b0:	e113      	b.n	800cada <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2207      	movs	r2, #7
 800c8b6:	761a      	strb	r2, [r3, #24]
      break;
 800c8b8:	e10f      	b.n	800cada <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c8ba:	7bbb      	ldrb	r3, [r7, #14]
 800c8bc:	2b04      	cmp	r3, #4
 800c8be:	d003      	beq.n	800c8c8 <USBH_HandleControl+0xcc>
 800c8c0:	7bbb      	ldrb	r3, [r7, #14]
 800c8c2:	2b02      	cmp	r3, #2
 800c8c4:	f040 8109 	bne.w	800cada <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	220b      	movs	r2, #11
 800c8cc:	761a      	strb	r2, [r3, #24]
      break;
 800c8ce:	e104      	b.n	800cada <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800c8d6:	b29a      	uxth	r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6899      	ldr	r1, [r3, #8]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	899a      	ldrh	r2, [r3, #12]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	791b      	ldrb	r3, [r3, #4]
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 f948 	bl	800cb7e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2204      	movs	r2, #4
 800c8f2:	761a      	strb	r2, [r3, #24]
      break;
 800c8f4:	e0fa      	b.n	800caec <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	791b      	ldrb	r3, [r3, #4]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7f4 fccd 	bl	800129c <USBH_LL_GetURBState>
 800c902:	4603      	mov	r3, r0
 800c904:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c906:	7bbb      	ldrb	r3, [r7, #14]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d102      	bne.n	800c912 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2209      	movs	r2, #9
 800c910:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c912:	7bbb      	ldrb	r3, [r7, #14]
 800c914:	2b05      	cmp	r3, #5
 800c916:	d102      	bne.n	800c91e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c918:	2303      	movs	r3, #3
 800c91a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c91c:	e0df      	b.n	800cade <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800c91e:	7bbb      	ldrb	r3, [r7, #14]
 800c920:	2b04      	cmp	r3, #4
 800c922:	f040 80dc 	bne.w	800cade <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	220b      	movs	r2, #11
 800c92a:	761a      	strb	r2, [r3, #24]
      break;
 800c92c:	e0d7      	b.n	800cade <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6899      	ldr	r1, [r3, #8]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	899a      	ldrh	r2, [r3, #12]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	795b      	ldrb	r3, [r3, #5]
 800c93a:	2001      	movs	r0, #1
 800c93c:	9000      	str	r0, [sp, #0]
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f8f8 	bl	800cb34 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2206      	movs	r2, #6
 800c954:	761a      	strb	r2, [r3, #24]
      break;
 800c956:	e0c9      	b.n	800caec <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	795b      	ldrb	r3, [r3, #5]
 800c95c:	4619      	mov	r1, r3
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f7f4 fc9c 	bl	800129c <USBH_LL_GetURBState>
 800c964:	4603      	mov	r3, r0
 800c966:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c968:	7bbb      	ldrb	r3, [r7, #14]
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d103      	bne.n	800c976 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2207      	movs	r2, #7
 800c972:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c974:	e0b5      	b.n	800cae2 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800c976:	7bbb      	ldrb	r3, [r7, #14]
 800c978:	2b05      	cmp	r3, #5
 800c97a:	d105      	bne.n	800c988 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	220c      	movs	r2, #12
 800c980:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c982:	2303      	movs	r3, #3
 800c984:	73fb      	strb	r3, [r7, #15]
      break;
 800c986:	e0ac      	b.n	800cae2 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c988:	7bbb      	ldrb	r3, [r7, #14]
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	d103      	bne.n	800c996 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2205      	movs	r2, #5
 800c992:	761a      	strb	r2, [r3, #24]
      break;
 800c994:	e0a5      	b.n	800cae2 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800c996:	7bbb      	ldrb	r3, [r7, #14]
 800c998:	2b04      	cmp	r3, #4
 800c99a:	f040 80a2 	bne.w	800cae2 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	220b      	movs	r2, #11
 800c9a2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c9a4:	2302      	movs	r3, #2
 800c9a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c9a8:	e09b      	b.n	800cae2 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	791b      	ldrb	r3, [r3, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 f8e3 	bl	800cb7e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2208      	movs	r2, #8
 800c9c8:	761a      	strb	r2, [r3, #24]

      break;
 800c9ca:	e08f      	b.n	800caec <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	791b      	ldrb	r3, [r3, #4]
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7f4 fc62 	bl	800129c <USBH_LL_GetURBState>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c9dc:	7bbb      	ldrb	r3, [r7, #14]
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d105      	bne.n	800c9ee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	220d      	movs	r2, #13
 800c9e6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c9ec:	e07b      	b.n	800cae6 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800c9ee:	7bbb      	ldrb	r3, [r7, #14]
 800c9f0:	2b04      	cmp	r3, #4
 800c9f2:	d103      	bne.n	800c9fc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	220b      	movs	r2, #11
 800c9f8:	761a      	strb	r2, [r3, #24]
      break;
 800c9fa:	e074      	b.n	800cae6 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800c9fc:	7bbb      	ldrb	r3, [r7, #14]
 800c9fe:	2b05      	cmp	r3, #5
 800ca00:	d171      	bne.n	800cae6 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800ca02:	2303      	movs	r3, #3
 800ca04:	73fb      	strb	r3, [r7, #15]
      break;
 800ca06:	e06e      	b.n	800cae6 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	795b      	ldrb	r3, [r3, #5]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	9200      	str	r2, [sp, #0]
 800ca10:	2200      	movs	r2, #0
 800ca12:	2100      	movs	r1, #0
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 f88d 	bl	800cb34 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	220a      	movs	r2, #10
 800ca2a:	761a      	strb	r2, [r3, #24]
      break;
 800ca2c:	e05e      	b.n	800caec <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	795b      	ldrb	r3, [r3, #5]
 800ca32:	4619      	mov	r1, r3
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f7f4 fc31 	bl	800129c <USBH_LL_GetURBState>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ca3e:	7bbb      	ldrb	r3, [r7, #14]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d105      	bne.n	800ca50 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ca44:	2300      	movs	r3, #0
 800ca46:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	220d      	movs	r2, #13
 800ca4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ca4e:	e04c      	b.n	800caea <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ca50:	7bbb      	ldrb	r3, [r7, #14]
 800ca52:	2b02      	cmp	r3, #2
 800ca54:	d103      	bne.n	800ca5e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2209      	movs	r2, #9
 800ca5a:	761a      	strb	r2, [r3, #24]
      break;
 800ca5c:	e045      	b.n	800caea <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800ca5e:	7bbb      	ldrb	r3, [r7, #14]
 800ca60:	2b04      	cmp	r3, #4
 800ca62:	d142      	bne.n	800caea <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	220b      	movs	r2, #11
 800ca68:	761a      	strb	r2, [r3, #24]
      break;
 800ca6a:	e03e      	b.n	800caea <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	7e5b      	ldrb	r3, [r3, #25]
 800ca70:	3301      	adds	r3, #1
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	765a      	strb	r2, [r3, #25]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	7e5b      	ldrb	r3, [r3, #25]
 800ca7c:	2b02      	cmp	r3, #2
 800ca7e:	d806      	bhi.n	800ca8e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ca8c:	e02e      	b.n	800caec <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800ca94:	2106      	movs	r1, #6
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800caa0:	4815      	ldr	r0, [pc, #84]	; (800caf8 <USBH_HandleControl+0x2fc>)
 800caa2:	f000 fb19 	bl	800d0d8 <iprintf>
 800caa6:	4815      	ldr	r0, [pc, #84]	; (800cafc <USBH_HandleControl+0x300>)
 800caa8:	f000 fb16 	bl	800d0d8 <iprintf>
 800caac:	200a      	movs	r0, #10
 800caae:	f000 fb25 	bl	800d0fc <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	795b      	ldrb	r3, [r3, #5]
 800cab6:	4619      	mov	r1, r3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 f912 	bl	800cce2 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	791b      	ldrb	r3, [r3, #4]
 800cac2:	4619      	mov	r1, r3
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 f90c 	bl	800cce2 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cad0:	2302      	movs	r3, #2
 800cad2:	73fb      	strb	r3, [r7, #15]
      break;
 800cad4:	e00a      	b.n	800caec <USBH_HandleControl+0x2f0>

    default:
      break;
 800cad6:	bf00      	nop
 800cad8:	e008      	b.n	800caec <USBH_HandleControl+0x2f0>
      break;
 800cada:	bf00      	nop
 800cadc:	e006      	b.n	800caec <USBH_HandleControl+0x2f0>
      break;
 800cade:	bf00      	nop
 800cae0:	e004      	b.n	800caec <USBH_HandleControl+0x2f0>
      break;
 800cae2:	bf00      	nop
 800cae4:	e002      	b.n	800caec <USBH_HandleControl+0x2f0>
      break;
 800cae6:	bf00      	nop
 800cae8:	e000      	b.n	800caec <USBH_HandleControl+0x2f0>
      break;
 800caea:	bf00      	nop
  }

  return status;
 800caec:	7bfb      	ldrb	r3, [r7, #15]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	0800e780 	.word	0x0800e780
 800cafc:	0800e85c 	.word	0x0800e85c

0800cb00 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b088      	sub	sp, #32
 800cb04:	af04      	add	r7, sp, #16
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cb0e:	79f9      	ldrb	r1, [r7, #7]
 800cb10:	2300      	movs	r3, #0
 800cb12:	9303      	str	r3, [sp, #12]
 800cb14:	2308      	movs	r3, #8
 800cb16:	9302      	str	r3, [sp, #8]
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	9301      	str	r3, [sp, #4]
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	2300      	movs	r3, #0
 800cb22:	2200      	movs	r2, #0
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	f7f4 fb95 	bl	8001254 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b088      	sub	sp, #32
 800cb38:	af04      	add	r7, sp, #16
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	4611      	mov	r1, r2
 800cb40:	461a      	mov	r2, r3
 800cb42:	460b      	mov	r3, r1
 800cb44:	80fb      	strh	r3, [r7, #6]
 800cb46:	4613      	mov	r3, r2
 800cb48:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d001      	beq.n	800cb58 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cb54:	2300      	movs	r3, #0
 800cb56:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cb58:	7979      	ldrb	r1, [r7, #5]
 800cb5a:	7e3b      	ldrb	r3, [r7, #24]
 800cb5c:	9303      	str	r3, [sp, #12]
 800cb5e:	88fb      	ldrh	r3, [r7, #6]
 800cb60:	9302      	str	r3, [sp, #8]
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	9301      	str	r3, [sp, #4]
 800cb66:	2301      	movs	r3, #1
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f7f4 fb70 	bl	8001254 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cb74:	2300      	movs	r3, #0
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b088      	sub	sp, #32
 800cb82:	af04      	add	r7, sp, #16
 800cb84:	60f8      	str	r0, [r7, #12]
 800cb86:	60b9      	str	r1, [r7, #8]
 800cb88:	4611      	mov	r1, r2
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	80fb      	strh	r3, [r7, #6]
 800cb90:	4613      	mov	r3, r2
 800cb92:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cb94:	7979      	ldrb	r1, [r7, #5]
 800cb96:	2300      	movs	r3, #0
 800cb98:	9303      	str	r3, [sp, #12]
 800cb9a:	88fb      	ldrh	r3, [r7, #6]
 800cb9c:	9302      	str	r3, [sp, #8]
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	9301      	str	r3, [sp, #4]
 800cba2:	2301      	movs	r3, #1
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	2300      	movs	r3, #0
 800cba8:	2201      	movs	r2, #1
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f7f4 fb52 	bl	8001254 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cbb0:	2300      	movs	r3, #0

}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b088      	sub	sp, #32
 800cbbe:	af04      	add	r7, sp, #16
 800cbc0:	60f8      	str	r0, [r7, #12]
 800cbc2:	60b9      	str	r1, [r7, #8]
 800cbc4:	4611      	mov	r1, r2
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	460b      	mov	r3, r1
 800cbca:	80fb      	strh	r3, [r7, #6]
 800cbcc:	4613      	mov	r3, r2
 800cbce:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d001      	beq.n	800cbde <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cbde:	7979      	ldrb	r1, [r7, #5]
 800cbe0:	7e3b      	ldrb	r3, [r7, #24]
 800cbe2:	9303      	str	r3, [sp, #12]
 800cbe4:	88fb      	ldrh	r3, [r7, #6]
 800cbe6:	9302      	str	r3, [sp, #8]
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	9301      	str	r3, [sp, #4]
 800cbec:	2301      	movs	r3, #1
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	2302      	movs	r3, #2
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	f7f4 fb2d 	bl	8001254 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b088      	sub	sp, #32
 800cc08:	af04      	add	r7, sp, #16
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	4611      	mov	r1, r2
 800cc10:	461a      	mov	r2, r3
 800cc12:	460b      	mov	r3, r1
 800cc14:	80fb      	strh	r3, [r7, #6]
 800cc16:	4613      	mov	r3, r2
 800cc18:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc1a:	7979      	ldrb	r1, [r7, #5]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	9303      	str	r3, [sp, #12]
 800cc20:	88fb      	ldrh	r3, [r7, #6]
 800cc22:	9302      	str	r3, [sp, #8]
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	9301      	str	r3, [sp, #4]
 800cc28:	2301      	movs	r3, #1
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	2302      	movs	r3, #2
 800cc2e:	2201      	movs	r2, #1
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f7f4 fb0f 	bl	8001254 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cc36:	2300      	movs	r3, #0
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b086      	sub	sp, #24
 800cc44:	af04      	add	r7, sp, #16
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	4608      	mov	r0, r1
 800cc4a:	4611      	mov	r1, r2
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	4603      	mov	r3, r0
 800cc50:	70fb      	strb	r3, [r7, #3]
 800cc52:	460b      	mov	r3, r1
 800cc54:	70bb      	strb	r3, [r7, #2]
 800cc56:	4613      	mov	r3, r2
 800cc58:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cc5a:	7878      	ldrb	r0, [r7, #1]
 800cc5c:	78ba      	ldrb	r2, [r7, #2]
 800cc5e:	78f9      	ldrb	r1, [r7, #3]
 800cc60:	8b3b      	ldrh	r3, [r7, #24]
 800cc62:	9302      	str	r3, [sp, #8]
 800cc64:	7d3b      	ldrb	r3, [r7, #20]
 800cc66:	9301      	str	r3, [sp, #4]
 800cc68:	7c3b      	ldrb	r3, [r7, #16]
 800cc6a:	9300      	str	r3, [sp, #0]
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f7f4 fabc 	bl	80011ec <USBH_LL_OpenPipe>

  return USBH_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b082      	sub	sp, #8
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
 800cc86:	460b      	mov	r3, r1
 800cc88:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800cc8a:	78fb      	ldrb	r3, [r7, #3]
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7f4 facd 	bl	800122e <USBH_LL_ClosePipe>

  return USBH_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b084      	sub	sp, #16
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
 800cca6:	460b      	mov	r3, r1
 800cca8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 f839 	bl	800cd22 <USBH_GetFreePipe>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ccb4:	89fb      	ldrh	r3, [r7, #14]
 800ccb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d00b      	beq.n	800ccd6 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ccbe:	78fa      	ldrb	r2, [r7, #3]
 800ccc0:	89fb      	ldrh	r3, [r7, #14]
 800ccc2:	f003 030f 	and.w	r3, r3, #15
 800ccc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ccca:	6879      	ldr	r1, [r7, #4]
 800cccc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	440b      	add	r3, r1
 800ccd4:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ccd6:	89fb      	ldrh	r3, [r7, #14]
 800ccd8:	b2db      	uxtb	r3, r3
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cce2:	b480      	push	{r7}
 800cce4:	b083      	sub	sp, #12
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	460b      	mov	r3, r1
 800ccec:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ccee:	78fb      	ldrb	r3, [r7, #3]
 800ccf0:	2b0f      	cmp	r3, #15
 800ccf2:	d80f      	bhi.n	800cd14 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ccf4:	78fb      	ldrb	r3, [r7, #3]
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	4413      	add	r3, r2
 800cd00:	685a      	ldr	r2, [r3, #4]
 800cd02:	78fb      	ldrb	r3, [r7, #3]
 800cd04:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cd08:	6879      	ldr	r1, [r7, #4]
 800cd0a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	440b      	add	r3, r1
 800cd12:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	370c      	adds	r7, #12
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr

0800cd22 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cd22:	b480      	push	{r7}
 800cd24:	b085      	sub	sp, #20
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800cd2e:	2300      	movs	r3, #0
 800cd30:	73fb      	strb	r3, [r7, #15]
 800cd32:	e010      	b.n	800cd56 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d102      	bne.n	800cd50 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800cd4a:	7bfb      	ldrb	r3, [r7, #15]
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	e007      	b.n	800cd60 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
 800cd52:	3301      	adds	r3, #1
 800cd54:	73fb      	strb	r3, [r7, #15]
 800cd56:	7bfb      	ldrb	r3, [r7, #15]
 800cd58:	2b0f      	cmp	r3, #15
 800cd5a:	d9eb      	bls.n	800cd34 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800cd5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3714      	adds	r7, #20
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <malloc>:
 800cd6c:	4b02      	ldr	r3, [pc, #8]	; (800cd78 <malloc+0xc>)
 800cd6e:	4601      	mov	r1, r0
 800cd70:	6818      	ldr	r0, [r3, #0]
 800cd72:	f000 b82b 	b.w	800cdcc <_malloc_r>
 800cd76:	bf00      	nop
 800cd78:	20000088 	.word	0x20000088

0800cd7c <free>:
 800cd7c:	4b02      	ldr	r3, [pc, #8]	; (800cd88 <free+0xc>)
 800cd7e:	4601      	mov	r1, r0
 800cd80:	6818      	ldr	r0, [r3, #0]
 800cd82:	f000 bbdf 	b.w	800d544 <_free_r>
 800cd86:	bf00      	nop
 800cd88:	20000088 	.word	0x20000088

0800cd8c <sbrk_aligned>:
 800cd8c:	b570      	push	{r4, r5, r6, lr}
 800cd8e:	4e0e      	ldr	r6, [pc, #56]	; (800cdc8 <sbrk_aligned+0x3c>)
 800cd90:	460c      	mov	r4, r1
 800cd92:	6831      	ldr	r1, [r6, #0]
 800cd94:	4605      	mov	r5, r0
 800cd96:	b911      	cbnz	r1, 800cd9e <sbrk_aligned+0x12>
 800cd98:	f000 fb6e 	bl	800d478 <_sbrk_r>
 800cd9c:	6030      	str	r0, [r6, #0]
 800cd9e:	4621      	mov	r1, r4
 800cda0:	4628      	mov	r0, r5
 800cda2:	f000 fb69 	bl	800d478 <_sbrk_r>
 800cda6:	1c43      	adds	r3, r0, #1
 800cda8:	d00a      	beq.n	800cdc0 <sbrk_aligned+0x34>
 800cdaa:	1cc4      	adds	r4, r0, #3
 800cdac:	f024 0403 	bic.w	r4, r4, #3
 800cdb0:	42a0      	cmp	r0, r4
 800cdb2:	d007      	beq.n	800cdc4 <sbrk_aligned+0x38>
 800cdb4:	1a21      	subs	r1, r4, r0
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	f000 fb5e 	bl	800d478 <_sbrk_r>
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	d101      	bne.n	800cdc4 <sbrk_aligned+0x38>
 800cdc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	bd70      	pop	{r4, r5, r6, pc}
 800cdc8:	2000164c 	.word	0x2000164c

0800cdcc <_malloc_r>:
 800cdcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdd0:	1ccd      	adds	r5, r1, #3
 800cdd2:	f025 0503 	bic.w	r5, r5, #3
 800cdd6:	3508      	adds	r5, #8
 800cdd8:	2d0c      	cmp	r5, #12
 800cdda:	bf38      	it	cc
 800cddc:	250c      	movcc	r5, #12
 800cdde:	2d00      	cmp	r5, #0
 800cde0:	4607      	mov	r7, r0
 800cde2:	db01      	blt.n	800cde8 <_malloc_r+0x1c>
 800cde4:	42a9      	cmp	r1, r5
 800cde6:	d905      	bls.n	800cdf4 <_malloc_r+0x28>
 800cde8:	230c      	movs	r3, #12
 800cdea:	603b      	str	r3, [r7, #0]
 800cdec:	2600      	movs	r6, #0
 800cdee:	4630      	mov	r0, r6
 800cdf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cec8 <_malloc_r+0xfc>
 800cdf8:	f000 f868 	bl	800cecc <__malloc_lock>
 800cdfc:	f8d8 3000 	ldr.w	r3, [r8]
 800ce00:	461c      	mov	r4, r3
 800ce02:	bb5c      	cbnz	r4, 800ce5c <_malloc_r+0x90>
 800ce04:	4629      	mov	r1, r5
 800ce06:	4638      	mov	r0, r7
 800ce08:	f7ff ffc0 	bl	800cd8c <sbrk_aligned>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	4604      	mov	r4, r0
 800ce10:	d155      	bne.n	800cebe <_malloc_r+0xf2>
 800ce12:	f8d8 4000 	ldr.w	r4, [r8]
 800ce16:	4626      	mov	r6, r4
 800ce18:	2e00      	cmp	r6, #0
 800ce1a:	d145      	bne.n	800cea8 <_malloc_r+0xdc>
 800ce1c:	2c00      	cmp	r4, #0
 800ce1e:	d048      	beq.n	800ceb2 <_malloc_r+0xe6>
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	4631      	mov	r1, r6
 800ce24:	4638      	mov	r0, r7
 800ce26:	eb04 0903 	add.w	r9, r4, r3
 800ce2a:	f000 fb25 	bl	800d478 <_sbrk_r>
 800ce2e:	4581      	cmp	r9, r0
 800ce30:	d13f      	bne.n	800ceb2 <_malloc_r+0xe6>
 800ce32:	6821      	ldr	r1, [r4, #0]
 800ce34:	1a6d      	subs	r5, r5, r1
 800ce36:	4629      	mov	r1, r5
 800ce38:	4638      	mov	r0, r7
 800ce3a:	f7ff ffa7 	bl	800cd8c <sbrk_aligned>
 800ce3e:	3001      	adds	r0, #1
 800ce40:	d037      	beq.n	800ceb2 <_malloc_r+0xe6>
 800ce42:	6823      	ldr	r3, [r4, #0]
 800ce44:	442b      	add	r3, r5
 800ce46:	6023      	str	r3, [r4, #0]
 800ce48:	f8d8 3000 	ldr.w	r3, [r8]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d038      	beq.n	800cec2 <_malloc_r+0xf6>
 800ce50:	685a      	ldr	r2, [r3, #4]
 800ce52:	42a2      	cmp	r2, r4
 800ce54:	d12b      	bne.n	800ceae <_malloc_r+0xe2>
 800ce56:	2200      	movs	r2, #0
 800ce58:	605a      	str	r2, [r3, #4]
 800ce5a:	e00f      	b.n	800ce7c <_malloc_r+0xb0>
 800ce5c:	6822      	ldr	r2, [r4, #0]
 800ce5e:	1b52      	subs	r2, r2, r5
 800ce60:	d41f      	bmi.n	800cea2 <_malloc_r+0xd6>
 800ce62:	2a0b      	cmp	r2, #11
 800ce64:	d917      	bls.n	800ce96 <_malloc_r+0xca>
 800ce66:	1961      	adds	r1, r4, r5
 800ce68:	42a3      	cmp	r3, r4
 800ce6a:	6025      	str	r5, [r4, #0]
 800ce6c:	bf18      	it	ne
 800ce6e:	6059      	strne	r1, [r3, #4]
 800ce70:	6863      	ldr	r3, [r4, #4]
 800ce72:	bf08      	it	eq
 800ce74:	f8c8 1000 	streq.w	r1, [r8]
 800ce78:	5162      	str	r2, [r4, r5]
 800ce7a:	604b      	str	r3, [r1, #4]
 800ce7c:	4638      	mov	r0, r7
 800ce7e:	f104 060b 	add.w	r6, r4, #11
 800ce82:	f000 f829 	bl	800ced8 <__malloc_unlock>
 800ce86:	f026 0607 	bic.w	r6, r6, #7
 800ce8a:	1d23      	adds	r3, r4, #4
 800ce8c:	1af2      	subs	r2, r6, r3
 800ce8e:	d0ae      	beq.n	800cdee <_malloc_r+0x22>
 800ce90:	1b9b      	subs	r3, r3, r6
 800ce92:	50a3      	str	r3, [r4, r2]
 800ce94:	e7ab      	b.n	800cdee <_malloc_r+0x22>
 800ce96:	42a3      	cmp	r3, r4
 800ce98:	6862      	ldr	r2, [r4, #4]
 800ce9a:	d1dd      	bne.n	800ce58 <_malloc_r+0x8c>
 800ce9c:	f8c8 2000 	str.w	r2, [r8]
 800cea0:	e7ec      	b.n	800ce7c <_malloc_r+0xb0>
 800cea2:	4623      	mov	r3, r4
 800cea4:	6864      	ldr	r4, [r4, #4]
 800cea6:	e7ac      	b.n	800ce02 <_malloc_r+0x36>
 800cea8:	4634      	mov	r4, r6
 800ceaa:	6876      	ldr	r6, [r6, #4]
 800ceac:	e7b4      	b.n	800ce18 <_malloc_r+0x4c>
 800ceae:	4613      	mov	r3, r2
 800ceb0:	e7cc      	b.n	800ce4c <_malloc_r+0x80>
 800ceb2:	230c      	movs	r3, #12
 800ceb4:	603b      	str	r3, [r7, #0]
 800ceb6:	4638      	mov	r0, r7
 800ceb8:	f000 f80e 	bl	800ced8 <__malloc_unlock>
 800cebc:	e797      	b.n	800cdee <_malloc_r+0x22>
 800cebe:	6025      	str	r5, [r4, #0]
 800cec0:	e7dc      	b.n	800ce7c <_malloc_r+0xb0>
 800cec2:	605b      	str	r3, [r3, #4]
 800cec4:	deff      	udf	#255	; 0xff
 800cec6:	bf00      	nop
 800cec8:	20001648 	.word	0x20001648

0800cecc <__malloc_lock>:
 800cecc:	4801      	ldr	r0, [pc, #4]	; (800ced4 <__malloc_lock+0x8>)
 800cece:	f000 bb20 	b.w	800d512 <__retarget_lock_acquire_recursive>
 800ced2:	bf00      	nop
 800ced4:	20001790 	.word	0x20001790

0800ced8 <__malloc_unlock>:
 800ced8:	4801      	ldr	r0, [pc, #4]	; (800cee0 <__malloc_unlock+0x8>)
 800ceda:	f000 bb1b 	b.w	800d514 <__retarget_lock_release_recursive>
 800cede:	bf00      	nop
 800cee0:	20001790 	.word	0x20001790

0800cee4 <realloc>:
 800cee4:	4b02      	ldr	r3, [pc, #8]	; (800cef0 <realloc+0xc>)
 800cee6:	460a      	mov	r2, r1
 800cee8:	4601      	mov	r1, r0
 800ceea:	6818      	ldr	r0, [r3, #0]
 800ceec:	f000 b802 	b.w	800cef4 <_realloc_r>
 800cef0:	20000088 	.word	0x20000088

0800cef4 <_realloc_r>:
 800cef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef8:	4680      	mov	r8, r0
 800cefa:	4614      	mov	r4, r2
 800cefc:	460e      	mov	r6, r1
 800cefe:	b921      	cbnz	r1, 800cf0a <_realloc_r+0x16>
 800cf00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf04:	4611      	mov	r1, r2
 800cf06:	f7ff bf61 	b.w	800cdcc <_malloc_r>
 800cf0a:	b92a      	cbnz	r2, 800cf18 <_realloc_r+0x24>
 800cf0c:	f000 fb1a 	bl	800d544 <_free_r>
 800cf10:	4625      	mov	r5, r4
 800cf12:	4628      	mov	r0, r5
 800cf14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf18:	f000 fb60 	bl	800d5dc <_malloc_usable_size_r>
 800cf1c:	4284      	cmp	r4, r0
 800cf1e:	4607      	mov	r7, r0
 800cf20:	d802      	bhi.n	800cf28 <_realloc_r+0x34>
 800cf22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf26:	d812      	bhi.n	800cf4e <_realloc_r+0x5a>
 800cf28:	4621      	mov	r1, r4
 800cf2a:	4640      	mov	r0, r8
 800cf2c:	f7ff ff4e 	bl	800cdcc <_malloc_r>
 800cf30:	4605      	mov	r5, r0
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d0ed      	beq.n	800cf12 <_realloc_r+0x1e>
 800cf36:	42bc      	cmp	r4, r7
 800cf38:	4622      	mov	r2, r4
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	bf28      	it	cs
 800cf3e:	463a      	movcs	r2, r7
 800cf40:	f000 faf1 	bl	800d526 <memcpy>
 800cf44:	4631      	mov	r1, r6
 800cf46:	4640      	mov	r0, r8
 800cf48:	f000 fafc 	bl	800d544 <_free_r>
 800cf4c:	e7e1      	b.n	800cf12 <_realloc_r+0x1e>
 800cf4e:	4635      	mov	r5, r6
 800cf50:	e7df      	b.n	800cf12 <_realloc_r+0x1e>
	...

0800cf54 <std>:
 800cf54:	2300      	movs	r3, #0
 800cf56:	b510      	push	{r4, lr}
 800cf58:	4604      	mov	r4, r0
 800cf5a:	e9c0 3300 	strd	r3, r3, [r0]
 800cf5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf62:	6083      	str	r3, [r0, #8]
 800cf64:	8181      	strh	r1, [r0, #12]
 800cf66:	6643      	str	r3, [r0, #100]	; 0x64
 800cf68:	81c2      	strh	r2, [r0, #14]
 800cf6a:	6183      	str	r3, [r0, #24]
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	2208      	movs	r2, #8
 800cf70:	305c      	adds	r0, #92	; 0x5c
 800cf72:	f000 f9ff 	bl	800d374 <memset>
 800cf76:	4b0d      	ldr	r3, [pc, #52]	; (800cfac <std+0x58>)
 800cf78:	6263      	str	r3, [r4, #36]	; 0x24
 800cf7a:	4b0d      	ldr	r3, [pc, #52]	; (800cfb0 <std+0x5c>)
 800cf7c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf7e:	4b0d      	ldr	r3, [pc, #52]	; (800cfb4 <std+0x60>)
 800cf80:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf82:	4b0d      	ldr	r3, [pc, #52]	; (800cfb8 <std+0x64>)
 800cf84:	6323      	str	r3, [r4, #48]	; 0x30
 800cf86:	4b0d      	ldr	r3, [pc, #52]	; (800cfbc <std+0x68>)
 800cf88:	6224      	str	r4, [r4, #32]
 800cf8a:	429c      	cmp	r4, r3
 800cf8c:	d006      	beq.n	800cf9c <std+0x48>
 800cf8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cf92:	4294      	cmp	r4, r2
 800cf94:	d002      	beq.n	800cf9c <std+0x48>
 800cf96:	33d0      	adds	r3, #208	; 0xd0
 800cf98:	429c      	cmp	r4, r3
 800cf9a:	d105      	bne.n	800cfa8 <std+0x54>
 800cf9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cfa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfa4:	f000 bab4 	b.w	800d510 <__retarget_lock_init_recursive>
 800cfa8:	bd10      	pop	{r4, pc}
 800cfaa:	bf00      	nop
 800cfac:	0800d1c5 	.word	0x0800d1c5
 800cfb0:	0800d1e7 	.word	0x0800d1e7
 800cfb4:	0800d21f 	.word	0x0800d21f
 800cfb8:	0800d243 	.word	0x0800d243
 800cfbc:	20001650 	.word	0x20001650

0800cfc0 <stdio_exit_handler>:
 800cfc0:	4a02      	ldr	r2, [pc, #8]	; (800cfcc <stdio_exit_handler+0xc>)
 800cfc2:	4903      	ldr	r1, [pc, #12]	; (800cfd0 <stdio_exit_handler+0x10>)
 800cfc4:	4803      	ldr	r0, [pc, #12]	; (800cfd4 <stdio_exit_handler+0x14>)
 800cfc6:	f000 b869 	b.w	800d09c <_fwalk_sglue>
 800cfca:	bf00      	nop
 800cfcc:	20000030 	.word	0x20000030
 800cfd0:	0800dca1 	.word	0x0800dca1
 800cfd4:	2000003c 	.word	0x2000003c

0800cfd8 <cleanup_stdio>:
 800cfd8:	6841      	ldr	r1, [r0, #4]
 800cfda:	4b0c      	ldr	r3, [pc, #48]	; (800d00c <cleanup_stdio+0x34>)
 800cfdc:	4299      	cmp	r1, r3
 800cfde:	b510      	push	{r4, lr}
 800cfe0:	4604      	mov	r4, r0
 800cfe2:	d001      	beq.n	800cfe8 <cleanup_stdio+0x10>
 800cfe4:	f000 fe5c 	bl	800dca0 <_fflush_r>
 800cfe8:	68a1      	ldr	r1, [r4, #8]
 800cfea:	4b09      	ldr	r3, [pc, #36]	; (800d010 <cleanup_stdio+0x38>)
 800cfec:	4299      	cmp	r1, r3
 800cfee:	d002      	beq.n	800cff6 <cleanup_stdio+0x1e>
 800cff0:	4620      	mov	r0, r4
 800cff2:	f000 fe55 	bl	800dca0 <_fflush_r>
 800cff6:	68e1      	ldr	r1, [r4, #12]
 800cff8:	4b06      	ldr	r3, [pc, #24]	; (800d014 <cleanup_stdio+0x3c>)
 800cffa:	4299      	cmp	r1, r3
 800cffc:	d004      	beq.n	800d008 <cleanup_stdio+0x30>
 800cffe:	4620      	mov	r0, r4
 800d000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d004:	f000 be4c 	b.w	800dca0 <_fflush_r>
 800d008:	bd10      	pop	{r4, pc}
 800d00a:	bf00      	nop
 800d00c:	20001650 	.word	0x20001650
 800d010:	200016b8 	.word	0x200016b8
 800d014:	20001720 	.word	0x20001720

0800d018 <global_stdio_init.part.0>:
 800d018:	b510      	push	{r4, lr}
 800d01a:	4b0b      	ldr	r3, [pc, #44]	; (800d048 <global_stdio_init.part.0+0x30>)
 800d01c:	4c0b      	ldr	r4, [pc, #44]	; (800d04c <global_stdio_init.part.0+0x34>)
 800d01e:	4a0c      	ldr	r2, [pc, #48]	; (800d050 <global_stdio_init.part.0+0x38>)
 800d020:	601a      	str	r2, [r3, #0]
 800d022:	4620      	mov	r0, r4
 800d024:	2200      	movs	r2, #0
 800d026:	2104      	movs	r1, #4
 800d028:	f7ff ff94 	bl	800cf54 <std>
 800d02c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d030:	2201      	movs	r2, #1
 800d032:	2109      	movs	r1, #9
 800d034:	f7ff ff8e 	bl	800cf54 <std>
 800d038:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d03c:	2202      	movs	r2, #2
 800d03e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d042:	2112      	movs	r1, #18
 800d044:	f7ff bf86 	b.w	800cf54 <std>
 800d048:	20001788 	.word	0x20001788
 800d04c:	20001650 	.word	0x20001650
 800d050:	0800cfc1 	.word	0x0800cfc1

0800d054 <__sfp_lock_acquire>:
 800d054:	4801      	ldr	r0, [pc, #4]	; (800d05c <__sfp_lock_acquire+0x8>)
 800d056:	f000 ba5c 	b.w	800d512 <__retarget_lock_acquire_recursive>
 800d05a:	bf00      	nop
 800d05c:	20001791 	.word	0x20001791

0800d060 <__sfp_lock_release>:
 800d060:	4801      	ldr	r0, [pc, #4]	; (800d068 <__sfp_lock_release+0x8>)
 800d062:	f000 ba57 	b.w	800d514 <__retarget_lock_release_recursive>
 800d066:	bf00      	nop
 800d068:	20001791 	.word	0x20001791

0800d06c <__sinit>:
 800d06c:	b510      	push	{r4, lr}
 800d06e:	4604      	mov	r4, r0
 800d070:	f7ff fff0 	bl	800d054 <__sfp_lock_acquire>
 800d074:	6a23      	ldr	r3, [r4, #32]
 800d076:	b11b      	cbz	r3, 800d080 <__sinit+0x14>
 800d078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d07c:	f7ff bff0 	b.w	800d060 <__sfp_lock_release>
 800d080:	4b04      	ldr	r3, [pc, #16]	; (800d094 <__sinit+0x28>)
 800d082:	6223      	str	r3, [r4, #32]
 800d084:	4b04      	ldr	r3, [pc, #16]	; (800d098 <__sinit+0x2c>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1f5      	bne.n	800d078 <__sinit+0xc>
 800d08c:	f7ff ffc4 	bl	800d018 <global_stdio_init.part.0>
 800d090:	e7f2      	b.n	800d078 <__sinit+0xc>
 800d092:	bf00      	nop
 800d094:	0800cfd9 	.word	0x0800cfd9
 800d098:	20001788 	.word	0x20001788

0800d09c <_fwalk_sglue>:
 800d09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0a0:	4607      	mov	r7, r0
 800d0a2:	4688      	mov	r8, r1
 800d0a4:	4614      	mov	r4, r2
 800d0a6:	2600      	movs	r6, #0
 800d0a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0ac:	f1b9 0901 	subs.w	r9, r9, #1
 800d0b0:	d505      	bpl.n	800d0be <_fwalk_sglue+0x22>
 800d0b2:	6824      	ldr	r4, [r4, #0]
 800d0b4:	2c00      	cmp	r4, #0
 800d0b6:	d1f7      	bne.n	800d0a8 <_fwalk_sglue+0xc>
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0be:	89ab      	ldrh	r3, [r5, #12]
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d907      	bls.n	800d0d4 <_fwalk_sglue+0x38>
 800d0c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	d003      	beq.n	800d0d4 <_fwalk_sglue+0x38>
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	4638      	mov	r0, r7
 800d0d0:	47c0      	blx	r8
 800d0d2:	4306      	orrs	r6, r0
 800d0d4:	3568      	adds	r5, #104	; 0x68
 800d0d6:	e7e9      	b.n	800d0ac <_fwalk_sglue+0x10>

0800d0d8 <iprintf>:
 800d0d8:	b40f      	push	{r0, r1, r2, r3}
 800d0da:	b507      	push	{r0, r1, r2, lr}
 800d0dc:	4906      	ldr	r1, [pc, #24]	; (800d0f8 <iprintf+0x20>)
 800d0de:	ab04      	add	r3, sp, #16
 800d0e0:	6808      	ldr	r0, [r1, #0]
 800d0e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0e6:	6881      	ldr	r1, [r0, #8]
 800d0e8:	9301      	str	r3, [sp, #4]
 800d0ea:	f000 faa9 	bl	800d640 <_vfiprintf_r>
 800d0ee:	b003      	add	sp, #12
 800d0f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0f4:	b004      	add	sp, #16
 800d0f6:	4770      	bx	lr
 800d0f8:	20000088 	.word	0x20000088

0800d0fc <putchar>:
 800d0fc:	4b02      	ldr	r3, [pc, #8]	; (800d108 <putchar+0xc>)
 800d0fe:	4601      	mov	r1, r0
 800d100:	6818      	ldr	r0, [r3, #0]
 800d102:	6882      	ldr	r2, [r0, #8]
 800d104:	f000 be56 	b.w	800ddb4 <_putc_r>
 800d108:	20000088 	.word	0x20000088

0800d10c <_puts_r>:
 800d10c:	6a03      	ldr	r3, [r0, #32]
 800d10e:	b570      	push	{r4, r5, r6, lr}
 800d110:	6884      	ldr	r4, [r0, #8]
 800d112:	4605      	mov	r5, r0
 800d114:	460e      	mov	r6, r1
 800d116:	b90b      	cbnz	r3, 800d11c <_puts_r+0x10>
 800d118:	f7ff ffa8 	bl	800d06c <__sinit>
 800d11c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d11e:	07db      	lsls	r3, r3, #31
 800d120:	d405      	bmi.n	800d12e <_puts_r+0x22>
 800d122:	89a3      	ldrh	r3, [r4, #12]
 800d124:	0598      	lsls	r0, r3, #22
 800d126:	d402      	bmi.n	800d12e <_puts_r+0x22>
 800d128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d12a:	f000 f9f2 	bl	800d512 <__retarget_lock_acquire_recursive>
 800d12e:	89a3      	ldrh	r3, [r4, #12]
 800d130:	0719      	lsls	r1, r3, #28
 800d132:	d513      	bpl.n	800d15c <_puts_r+0x50>
 800d134:	6923      	ldr	r3, [r4, #16]
 800d136:	b18b      	cbz	r3, 800d15c <_puts_r+0x50>
 800d138:	3e01      	subs	r6, #1
 800d13a:	68a3      	ldr	r3, [r4, #8]
 800d13c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d140:	3b01      	subs	r3, #1
 800d142:	60a3      	str	r3, [r4, #8]
 800d144:	b9e9      	cbnz	r1, 800d182 <_puts_r+0x76>
 800d146:	2b00      	cmp	r3, #0
 800d148:	da2e      	bge.n	800d1a8 <_puts_r+0x9c>
 800d14a:	4622      	mov	r2, r4
 800d14c:	210a      	movs	r1, #10
 800d14e:	4628      	mov	r0, r5
 800d150:	f000 f87b 	bl	800d24a <__swbuf_r>
 800d154:	3001      	adds	r0, #1
 800d156:	d007      	beq.n	800d168 <_puts_r+0x5c>
 800d158:	250a      	movs	r5, #10
 800d15a:	e007      	b.n	800d16c <_puts_r+0x60>
 800d15c:	4621      	mov	r1, r4
 800d15e:	4628      	mov	r0, r5
 800d160:	f000 f8b0 	bl	800d2c4 <__swsetup_r>
 800d164:	2800      	cmp	r0, #0
 800d166:	d0e7      	beq.n	800d138 <_puts_r+0x2c>
 800d168:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d16c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d16e:	07da      	lsls	r2, r3, #31
 800d170:	d405      	bmi.n	800d17e <_puts_r+0x72>
 800d172:	89a3      	ldrh	r3, [r4, #12]
 800d174:	059b      	lsls	r3, r3, #22
 800d176:	d402      	bmi.n	800d17e <_puts_r+0x72>
 800d178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d17a:	f000 f9cb 	bl	800d514 <__retarget_lock_release_recursive>
 800d17e:	4628      	mov	r0, r5
 800d180:	bd70      	pop	{r4, r5, r6, pc}
 800d182:	2b00      	cmp	r3, #0
 800d184:	da04      	bge.n	800d190 <_puts_r+0x84>
 800d186:	69a2      	ldr	r2, [r4, #24]
 800d188:	429a      	cmp	r2, r3
 800d18a:	dc06      	bgt.n	800d19a <_puts_r+0x8e>
 800d18c:	290a      	cmp	r1, #10
 800d18e:	d004      	beq.n	800d19a <_puts_r+0x8e>
 800d190:	6823      	ldr	r3, [r4, #0]
 800d192:	1c5a      	adds	r2, r3, #1
 800d194:	6022      	str	r2, [r4, #0]
 800d196:	7019      	strb	r1, [r3, #0]
 800d198:	e7cf      	b.n	800d13a <_puts_r+0x2e>
 800d19a:	4622      	mov	r2, r4
 800d19c:	4628      	mov	r0, r5
 800d19e:	f000 f854 	bl	800d24a <__swbuf_r>
 800d1a2:	3001      	adds	r0, #1
 800d1a4:	d1c9      	bne.n	800d13a <_puts_r+0x2e>
 800d1a6:	e7df      	b.n	800d168 <_puts_r+0x5c>
 800d1a8:	6823      	ldr	r3, [r4, #0]
 800d1aa:	250a      	movs	r5, #10
 800d1ac:	1c5a      	adds	r2, r3, #1
 800d1ae:	6022      	str	r2, [r4, #0]
 800d1b0:	701d      	strb	r5, [r3, #0]
 800d1b2:	e7db      	b.n	800d16c <_puts_r+0x60>

0800d1b4 <puts>:
 800d1b4:	4b02      	ldr	r3, [pc, #8]	; (800d1c0 <puts+0xc>)
 800d1b6:	4601      	mov	r1, r0
 800d1b8:	6818      	ldr	r0, [r3, #0]
 800d1ba:	f7ff bfa7 	b.w	800d10c <_puts_r>
 800d1be:	bf00      	nop
 800d1c0:	20000088 	.word	0x20000088

0800d1c4 <__sread>:
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	460c      	mov	r4, r1
 800d1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1cc:	f000 f942 	bl	800d454 <_read_r>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	bfab      	itete	ge
 800d1d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d1d6:	89a3      	ldrhlt	r3, [r4, #12]
 800d1d8:	181b      	addge	r3, r3, r0
 800d1da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d1de:	bfac      	ite	ge
 800d1e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d1e2:	81a3      	strhlt	r3, [r4, #12]
 800d1e4:	bd10      	pop	{r4, pc}

0800d1e6 <__swrite>:
 800d1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ea:	461f      	mov	r7, r3
 800d1ec:	898b      	ldrh	r3, [r1, #12]
 800d1ee:	05db      	lsls	r3, r3, #23
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	460c      	mov	r4, r1
 800d1f4:	4616      	mov	r6, r2
 800d1f6:	d505      	bpl.n	800d204 <__swrite+0x1e>
 800d1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	2200      	movs	r2, #0
 800d200:	f000 f916 	bl	800d430 <_lseek_r>
 800d204:	89a3      	ldrh	r3, [r4, #12]
 800d206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d20a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d20e:	81a3      	strh	r3, [r4, #12]
 800d210:	4632      	mov	r2, r6
 800d212:	463b      	mov	r3, r7
 800d214:	4628      	mov	r0, r5
 800d216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d21a:	f000 b93d 	b.w	800d498 <_write_r>

0800d21e <__sseek>:
 800d21e:	b510      	push	{r4, lr}
 800d220:	460c      	mov	r4, r1
 800d222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d226:	f000 f903 	bl	800d430 <_lseek_r>
 800d22a:	1c43      	adds	r3, r0, #1
 800d22c:	89a3      	ldrh	r3, [r4, #12]
 800d22e:	bf15      	itete	ne
 800d230:	6560      	strne	r0, [r4, #84]	; 0x54
 800d232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d23a:	81a3      	strheq	r3, [r4, #12]
 800d23c:	bf18      	it	ne
 800d23e:	81a3      	strhne	r3, [r4, #12]
 800d240:	bd10      	pop	{r4, pc}

0800d242 <__sclose>:
 800d242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d246:	f000 b8e3 	b.w	800d410 <_close_r>

0800d24a <__swbuf_r>:
 800d24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24c:	460e      	mov	r6, r1
 800d24e:	4614      	mov	r4, r2
 800d250:	4605      	mov	r5, r0
 800d252:	b118      	cbz	r0, 800d25c <__swbuf_r+0x12>
 800d254:	6a03      	ldr	r3, [r0, #32]
 800d256:	b90b      	cbnz	r3, 800d25c <__swbuf_r+0x12>
 800d258:	f7ff ff08 	bl	800d06c <__sinit>
 800d25c:	69a3      	ldr	r3, [r4, #24]
 800d25e:	60a3      	str	r3, [r4, #8]
 800d260:	89a3      	ldrh	r3, [r4, #12]
 800d262:	071a      	lsls	r2, r3, #28
 800d264:	d525      	bpl.n	800d2b2 <__swbuf_r+0x68>
 800d266:	6923      	ldr	r3, [r4, #16]
 800d268:	b31b      	cbz	r3, 800d2b2 <__swbuf_r+0x68>
 800d26a:	6823      	ldr	r3, [r4, #0]
 800d26c:	6922      	ldr	r2, [r4, #16]
 800d26e:	1a98      	subs	r0, r3, r2
 800d270:	6963      	ldr	r3, [r4, #20]
 800d272:	b2f6      	uxtb	r6, r6
 800d274:	4283      	cmp	r3, r0
 800d276:	4637      	mov	r7, r6
 800d278:	dc04      	bgt.n	800d284 <__swbuf_r+0x3a>
 800d27a:	4621      	mov	r1, r4
 800d27c:	4628      	mov	r0, r5
 800d27e:	f000 fd0f 	bl	800dca0 <_fflush_r>
 800d282:	b9e0      	cbnz	r0, 800d2be <__swbuf_r+0x74>
 800d284:	68a3      	ldr	r3, [r4, #8]
 800d286:	3b01      	subs	r3, #1
 800d288:	60a3      	str	r3, [r4, #8]
 800d28a:	6823      	ldr	r3, [r4, #0]
 800d28c:	1c5a      	adds	r2, r3, #1
 800d28e:	6022      	str	r2, [r4, #0]
 800d290:	701e      	strb	r6, [r3, #0]
 800d292:	6962      	ldr	r2, [r4, #20]
 800d294:	1c43      	adds	r3, r0, #1
 800d296:	429a      	cmp	r2, r3
 800d298:	d004      	beq.n	800d2a4 <__swbuf_r+0x5a>
 800d29a:	89a3      	ldrh	r3, [r4, #12]
 800d29c:	07db      	lsls	r3, r3, #31
 800d29e:	d506      	bpl.n	800d2ae <__swbuf_r+0x64>
 800d2a0:	2e0a      	cmp	r6, #10
 800d2a2:	d104      	bne.n	800d2ae <__swbuf_r+0x64>
 800d2a4:	4621      	mov	r1, r4
 800d2a6:	4628      	mov	r0, r5
 800d2a8:	f000 fcfa 	bl	800dca0 <_fflush_r>
 800d2ac:	b938      	cbnz	r0, 800d2be <__swbuf_r+0x74>
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2b2:	4621      	mov	r1, r4
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	f000 f805 	bl	800d2c4 <__swsetup_r>
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	d0d5      	beq.n	800d26a <__swbuf_r+0x20>
 800d2be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d2c2:	e7f4      	b.n	800d2ae <__swbuf_r+0x64>

0800d2c4 <__swsetup_r>:
 800d2c4:	b538      	push	{r3, r4, r5, lr}
 800d2c6:	4b2a      	ldr	r3, [pc, #168]	; (800d370 <__swsetup_r+0xac>)
 800d2c8:	4605      	mov	r5, r0
 800d2ca:	6818      	ldr	r0, [r3, #0]
 800d2cc:	460c      	mov	r4, r1
 800d2ce:	b118      	cbz	r0, 800d2d8 <__swsetup_r+0x14>
 800d2d0:	6a03      	ldr	r3, [r0, #32]
 800d2d2:	b90b      	cbnz	r3, 800d2d8 <__swsetup_r+0x14>
 800d2d4:	f7ff feca 	bl	800d06c <__sinit>
 800d2d8:	89a3      	ldrh	r3, [r4, #12]
 800d2da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2de:	0718      	lsls	r0, r3, #28
 800d2e0:	d422      	bmi.n	800d328 <__swsetup_r+0x64>
 800d2e2:	06d9      	lsls	r1, r3, #27
 800d2e4:	d407      	bmi.n	800d2f6 <__swsetup_r+0x32>
 800d2e6:	2309      	movs	r3, #9
 800d2e8:	602b      	str	r3, [r5, #0]
 800d2ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2ee:	81a3      	strh	r3, [r4, #12]
 800d2f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2f4:	e034      	b.n	800d360 <__swsetup_r+0x9c>
 800d2f6:	0758      	lsls	r0, r3, #29
 800d2f8:	d512      	bpl.n	800d320 <__swsetup_r+0x5c>
 800d2fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2fc:	b141      	cbz	r1, 800d310 <__swsetup_r+0x4c>
 800d2fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d302:	4299      	cmp	r1, r3
 800d304:	d002      	beq.n	800d30c <__swsetup_r+0x48>
 800d306:	4628      	mov	r0, r5
 800d308:	f000 f91c 	bl	800d544 <_free_r>
 800d30c:	2300      	movs	r3, #0
 800d30e:	6363      	str	r3, [r4, #52]	; 0x34
 800d310:	89a3      	ldrh	r3, [r4, #12]
 800d312:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d316:	81a3      	strh	r3, [r4, #12]
 800d318:	2300      	movs	r3, #0
 800d31a:	6063      	str	r3, [r4, #4]
 800d31c:	6923      	ldr	r3, [r4, #16]
 800d31e:	6023      	str	r3, [r4, #0]
 800d320:	89a3      	ldrh	r3, [r4, #12]
 800d322:	f043 0308 	orr.w	r3, r3, #8
 800d326:	81a3      	strh	r3, [r4, #12]
 800d328:	6923      	ldr	r3, [r4, #16]
 800d32a:	b94b      	cbnz	r3, 800d340 <__swsetup_r+0x7c>
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d336:	d003      	beq.n	800d340 <__swsetup_r+0x7c>
 800d338:	4621      	mov	r1, r4
 800d33a:	4628      	mov	r0, r5
 800d33c:	f000 fcfe 	bl	800dd3c <__smakebuf_r>
 800d340:	89a0      	ldrh	r0, [r4, #12]
 800d342:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d346:	f010 0301 	ands.w	r3, r0, #1
 800d34a:	d00a      	beq.n	800d362 <__swsetup_r+0x9e>
 800d34c:	2300      	movs	r3, #0
 800d34e:	60a3      	str	r3, [r4, #8]
 800d350:	6963      	ldr	r3, [r4, #20]
 800d352:	425b      	negs	r3, r3
 800d354:	61a3      	str	r3, [r4, #24]
 800d356:	6923      	ldr	r3, [r4, #16]
 800d358:	b943      	cbnz	r3, 800d36c <__swsetup_r+0xa8>
 800d35a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d35e:	d1c4      	bne.n	800d2ea <__swsetup_r+0x26>
 800d360:	bd38      	pop	{r3, r4, r5, pc}
 800d362:	0781      	lsls	r1, r0, #30
 800d364:	bf58      	it	pl
 800d366:	6963      	ldrpl	r3, [r4, #20]
 800d368:	60a3      	str	r3, [r4, #8]
 800d36a:	e7f4      	b.n	800d356 <__swsetup_r+0x92>
 800d36c:	2000      	movs	r0, #0
 800d36e:	e7f7      	b.n	800d360 <__swsetup_r+0x9c>
 800d370:	20000088 	.word	0x20000088

0800d374 <memset>:
 800d374:	4402      	add	r2, r0
 800d376:	4603      	mov	r3, r0
 800d378:	4293      	cmp	r3, r2
 800d37a:	d100      	bne.n	800d37e <memset+0xa>
 800d37c:	4770      	bx	lr
 800d37e:	f803 1b01 	strb.w	r1, [r3], #1
 800d382:	e7f9      	b.n	800d378 <memset+0x4>

0800d384 <strcat>:
 800d384:	b510      	push	{r4, lr}
 800d386:	4602      	mov	r2, r0
 800d388:	7814      	ldrb	r4, [r2, #0]
 800d38a:	4613      	mov	r3, r2
 800d38c:	3201      	adds	r2, #1
 800d38e:	2c00      	cmp	r4, #0
 800d390:	d1fa      	bne.n	800d388 <strcat+0x4>
 800d392:	3b01      	subs	r3, #1
 800d394:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d398:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d39c:	2a00      	cmp	r2, #0
 800d39e:	d1f9      	bne.n	800d394 <strcat+0x10>
 800d3a0:	bd10      	pop	{r4, pc}

0800d3a2 <strchr>:
 800d3a2:	b2c9      	uxtb	r1, r1
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3aa:	b11a      	cbz	r2, 800d3b4 <strchr+0x12>
 800d3ac:	428a      	cmp	r2, r1
 800d3ae:	d1f9      	bne.n	800d3a4 <strchr+0x2>
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	4770      	bx	lr
 800d3b4:	2900      	cmp	r1, #0
 800d3b6:	bf18      	it	ne
 800d3b8:	2300      	movne	r3, #0
 800d3ba:	e7f9      	b.n	800d3b0 <strchr+0xe>

0800d3bc <strncpy>:
 800d3bc:	b510      	push	{r4, lr}
 800d3be:	3901      	subs	r1, #1
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	b132      	cbz	r2, 800d3d2 <strncpy+0x16>
 800d3c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d3c8:	f803 4b01 	strb.w	r4, [r3], #1
 800d3cc:	3a01      	subs	r2, #1
 800d3ce:	2c00      	cmp	r4, #0
 800d3d0:	d1f7      	bne.n	800d3c2 <strncpy+0x6>
 800d3d2:	441a      	add	r2, r3
 800d3d4:	2100      	movs	r1, #0
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d100      	bne.n	800d3dc <strncpy+0x20>
 800d3da:	bd10      	pop	{r4, pc}
 800d3dc:	f803 1b01 	strb.w	r1, [r3], #1
 800d3e0:	e7f9      	b.n	800d3d6 <strncpy+0x1a>

0800d3e2 <strstr>:
 800d3e2:	780a      	ldrb	r2, [r1, #0]
 800d3e4:	b570      	push	{r4, r5, r6, lr}
 800d3e6:	b96a      	cbnz	r2, 800d404 <strstr+0x22>
 800d3e8:	bd70      	pop	{r4, r5, r6, pc}
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d109      	bne.n	800d402 <strstr+0x20>
 800d3ee:	460c      	mov	r4, r1
 800d3f0:	4605      	mov	r5, r0
 800d3f2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d0f6      	beq.n	800d3e8 <strstr+0x6>
 800d3fa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d3fe:	429e      	cmp	r6, r3
 800d400:	d0f7      	beq.n	800d3f2 <strstr+0x10>
 800d402:	3001      	adds	r0, #1
 800d404:	7803      	ldrb	r3, [r0, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1ef      	bne.n	800d3ea <strstr+0x8>
 800d40a:	4618      	mov	r0, r3
 800d40c:	e7ec      	b.n	800d3e8 <strstr+0x6>
	...

0800d410 <_close_r>:
 800d410:	b538      	push	{r3, r4, r5, lr}
 800d412:	4d06      	ldr	r5, [pc, #24]	; (800d42c <_close_r+0x1c>)
 800d414:	2300      	movs	r3, #0
 800d416:	4604      	mov	r4, r0
 800d418:	4608      	mov	r0, r1
 800d41a:	602b      	str	r3, [r5, #0]
 800d41c:	f7f3 fd07 	bl	8000e2e <_close>
 800d420:	1c43      	adds	r3, r0, #1
 800d422:	d102      	bne.n	800d42a <_close_r+0x1a>
 800d424:	682b      	ldr	r3, [r5, #0]
 800d426:	b103      	cbz	r3, 800d42a <_close_r+0x1a>
 800d428:	6023      	str	r3, [r4, #0]
 800d42a:	bd38      	pop	{r3, r4, r5, pc}
 800d42c:	2000178c 	.word	0x2000178c

0800d430 <_lseek_r>:
 800d430:	b538      	push	{r3, r4, r5, lr}
 800d432:	4d07      	ldr	r5, [pc, #28]	; (800d450 <_lseek_r+0x20>)
 800d434:	4604      	mov	r4, r0
 800d436:	4608      	mov	r0, r1
 800d438:	4611      	mov	r1, r2
 800d43a:	2200      	movs	r2, #0
 800d43c:	602a      	str	r2, [r5, #0]
 800d43e:	461a      	mov	r2, r3
 800d440:	f7f3 fd1c 	bl	8000e7c <_lseek>
 800d444:	1c43      	adds	r3, r0, #1
 800d446:	d102      	bne.n	800d44e <_lseek_r+0x1e>
 800d448:	682b      	ldr	r3, [r5, #0]
 800d44a:	b103      	cbz	r3, 800d44e <_lseek_r+0x1e>
 800d44c:	6023      	str	r3, [r4, #0]
 800d44e:	bd38      	pop	{r3, r4, r5, pc}
 800d450:	2000178c 	.word	0x2000178c

0800d454 <_read_r>:
 800d454:	b538      	push	{r3, r4, r5, lr}
 800d456:	4d07      	ldr	r5, [pc, #28]	; (800d474 <_read_r+0x20>)
 800d458:	4604      	mov	r4, r0
 800d45a:	4608      	mov	r0, r1
 800d45c:	4611      	mov	r1, r2
 800d45e:	2200      	movs	r2, #0
 800d460:	602a      	str	r2, [r5, #0]
 800d462:	461a      	mov	r2, r3
 800d464:	f7f3 fcaa 	bl	8000dbc <_read>
 800d468:	1c43      	adds	r3, r0, #1
 800d46a:	d102      	bne.n	800d472 <_read_r+0x1e>
 800d46c:	682b      	ldr	r3, [r5, #0]
 800d46e:	b103      	cbz	r3, 800d472 <_read_r+0x1e>
 800d470:	6023      	str	r3, [r4, #0]
 800d472:	bd38      	pop	{r3, r4, r5, pc}
 800d474:	2000178c 	.word	0x2000178c

0800d478 <_sbrk_r>:
 800d478:	b538      	push	{r3, r4, r5, lr}
 800d47a:	4d06      	ldr	r5, [pc, #24]	; (800d494 <_sbrk_r+0x1c>)
 800d47c:	2300      	movs	r3, #0
 800d47e:	4604      	mov	r4, r0
 800d480:	4608      	mov	r0, r1
 800d482:	602b      	str	r3, [r5, #0]
 800d484:	f7f3 fd08 	bl	8000e98 <_sbrk>
 800d488:	1c43      	adds	r3, r0, #1
 800d48a:	d102      	bne.n	800d492 <_sbrk_r+0x1a>
 800d48c:	682b      	ldr	r3, [r5, #0]
 800d48e:	b103      	cbz	r3, 800d492 <_sbrk_r+0x1a>
 800d490:	6023      	str	r3, [r4, #0]
 800d492:	bd38      	pop	{r3, r4, r5, pc}
 800d494:	2000178c 	.word	0x2000178c

0800d498 <_write_r>:
 800d498:	b538      	push	{r3, r4, r5, lr}
 800d49a:	4d07      	ldr	r5, [pc, #28]	; (800d4b8 <_write_r+0x20>)
 800d49c:	4604      	mov	r4, r0
 800d49e:	4608      	mov	r0, r1
 800d4a0:	4611      	mov	r1, r2
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	602a      	str	r2, [r5, #0]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	f7f3 fca5 	bl	8000df6 <_write>
 800d4ac:	1c43      	adds	r3, r0, #1
 800d4ae:	d102      	bne.n	800d4b6 <_write_r+0x1e>
 800d4b0:	682b      	ldr	r3, [r5, #0]
 800d4b2:	b103      	cbz	r3, 800d4b6 <_write_r+0x1e>
 800d4b4:	6023      	str	r3, [r4, #0]
 800d4b6:	bd38      	pop	{r3, r4, r5, pc}
 800d4b8:	2000178c 	.word	0x2000178c

0800d4bc <__errno>:
 800d4bc:	4b01      	ldr	r3, [pc, #4]	; (800d4c4 <__errno+0x8>)
 800d4be:	6818      	ldr	r0, [r3, #0]
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	20000088 	.word	0x20000088

0800d4c8 <__libc_init_array>:
 800d4c8:	b570      	push	{r4, r5, r6, lr}
 800d4ca:	4d0d      	ldr	r5, [pc, #52]	; (800d500 <__libc_init_array+0x38>)
 800d4cc:	4c0d      	ldr	r4, [pc, #52]	; (800d504 <__libc_init_array+0x3c>)
 800d4ce:	1b64      	subs	r4, r4, r5
 800d4d0:	10a4      	asrs	r4, r4, #2
 800d4d2:	2600      	movs	r6, #0
 800d4d4:	42a6      	cmp	r6, r4
 800d4d6:	d109      	bne.n	800d4ec <__libc_init_array+0x24>
 800d4d8:	4d0b      	ldr	r5, [pc, #44]	; (800d508 <__libc_init_array+0x40>)
 800d4da:	4c0c      	ldr	r4, [pc, #48]	; (800d50c <__libc_init_array+0x44>)
 800d4dc:	f000 fcc0 	bl	800de60 <_init>
 800d4e0:	1b64      	subs	r4, r4, r5
 800d4e2:	10a4      	asrs	r4, r4, #2
 800d4e4:	2600      	movs	r6, #0
 800d4e6:	42a6      	cmp	r6, r4
 800d4e8:	d105      	bne.n	800d4f6 <__libc_init_array+0x2e>
 800d4ea:	bd70      	pop	{r4, r5, r6, pc}
 800d4ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4f0:	4798      	blx	r3
 800d4f2:	3601      	adds	r6, #1
 800d4f4:	e7ee      	b.n	800d4d4 <__libc_init_array+0xc>
 800d4f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4fa:	4798      	blx	r3
 800d4fc:	3601      	adds	r6, #1
 800d4fe:	e7f2      	b.n	800d4e6 <__libc_init_array+0x1e>
 800d500:	0800e99c 	.word	0x0800e99c
 800d504:	0800e99c 	.word	0x0800e99c
 800d508:	0800e99c 	.word	0x0800e99c
 800d50c:	0800e9a0 	.word	0x0800e9a0

0800d510 <__retarget_lock_init_recursive>:
 800d510:	4770      	bx	lr

0800d512 <__retarget_lock_acquire_recursive>:
 800d512:	4770      	bx	lr

0800d514 <__retarget_lock_release_recursive>:
 800d514:	4770      	bx	lr

0800d516 <strcpy>:
 800d516:	4603      	mov	r3, r0
 800d518:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d51c:	f803 2b01 	strb.w	r2, [r3], #1
 800d520:	2a00      	cmp	r2, #0
 800d522:	d1f9      	bne.n	800d518 <strcpy+0x2>
 800d524:	4770      	bx	lr

0800d526 <memcpy>:
 800d526:	440a      	add	r2, r1
 800d528:	4291      	cmp	r1, r2
 800d52a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d52e:	d100      	bne.n	800d532 <memcpy+0xc>
 800d530:	4770      	bx	lr
 800d532:	b510      	push	{r4, lr}
 800d534:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d53c:	4291      	cmp	r1, r2
 800d53e:	d1f9      	bne.n	800d534 <memcpy+0xe>
 800d540:	bd10      	pop	{r4, pc}
	...

0800d544 <_free_r>:
 800d544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d546:	2900      	cmp	r1, #0
 800d548:	d044      	beq.n	800d5d4 <_free_r+0x90>
 800d54a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d54e:	9001      	str	r0, [sp, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	f1a1 0404 	sub.w	r4, r1, #4
 800d556:	bfb8      	it	lt
 800d558:	18e4      	addlt	r4, r4, r3
 800d55a:	f7ff fcb7 	bl	800cecc <__malloc_lock>
 800d55e:	4a1e      	ldr	r2, [pc, #120]	; (800d5d8 <_free_r+0x94>)
 800d560:	9801      	ldr	r0, [sp, #4]
 800d562:	6813      	ldr	r3, [r2, #0]
 800d564:	b933      	cbnz	r3, 800d574 <_free_r+0x30>
 800d566:	6063      	str	r3, [r4, #4]
 800d568:	6014      	str	r4, [r2, #0]
 800d56a:	b003      	add	sp, #12
 800d56c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d570:	f7ff bcb2 	b.w	800ced8 <__malloc_unlock>
 800d574:	42a3      	cmp	r3, r4
 800d576:	d908      	bls.n	800d58a <_free_r+0x46>
 800d578:	6825      	ldr	r5, [r4, #0]
 800d57a:	1961      	adds	r1, r4, r5
 800d57c:	428b      	cmp	r3, r1
 800d57e:	bf01      	itttt	eq
 800d580:	6819      	ldreq	r1, [r3, #0]
 800d582:	685b      	ldreq	r3, [r3, #4]
 800d584:	1949      	addeq	r1, r1, r5
 800d586:	6021      	streq	r1, [r4, #0]
 800d588:	e7ed      	b.n	800d566 <_free_r+0x22>
 800d58a:	461a      	mov	r2, r3
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	b10b      	cbz	r3, 800d594 <_free_r+0x50>
 800d590:	42a3      	cmp	r3, r4
 800d592:	d9fa      	bls.n	800d58a <_free_r+0x46>
 800d594:	6811      	ldr	r1, [r2, #0]
 800d596:	1855      	adds	r5, r2, r1
 800d598:	42a5      	cmp	r5, r4
 800d59a:	d10b      	bne.n	800d5b4 <_free_r+0x70>
 800d59c:	6824      	ldr	r4, [r4, #0]
 800d59e:	4421      	add	r1, r4
 800d5a0:	1854      	adds	r4, r2, r1
 800d5a2:	42a3      	cmp	r3, r4
 800d5a4:	6011      	str	r1, [r2, #0]
 800d5a6:	d1e0      	bne.n	800d56a <_free_r+0x26>
 800d5a8:	681c      	ldr	r4, [r3, #0]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	6053      	str	r3, [r2, #4]
 800d5ae:	440c      	add	r4, r1
 800d5b0:	6014      	str	r4, [r2, #0]
 800d5b2:	e7da      	b.n	800d56a <_free_r+0x26>
 800d5b4:	d902      	bls.n	800d5bc <_free_r+0x78>
 800d5b6:	230c      	movs	r3, #12
 800d5b8:	6003      	str	r3, [r0, #0]
 800d5ba:	e7d6      	b.n	800d56a <_free_r+0x26>
 800d5bc:	6825      	ldr	r5, [r4, #0]
 800d5be:	1961      	adds	r1, r4, r5
 800d5c0:	428b      	cmp	r3, r1
 800d5c2:	bf04      	itt	eq
 800d5c4:	6819      	ldreq	r1, [r3, #0]
 800d5c6:	685b      	ldreq	r3, [r3, #4]
 800d5c8:	6063      	str	r3, [r4, #4]
 800d5ca:	bf04      	itt	eq
 800d5cc:	1949      	addeq	r1, r1, r5
 800d5ce:	6021      	streq	r1, [r4, #0]
 800d5d0:	6054      	str	r4, [r2, #4]
 800d5d2:	e7ca      	b.n	800d56a <_free_r+0x26>
 800d5d4:	b003      	add	sp, #12
 800d5d6:	bd30      	pop	{r4, r5, pc}
 800d5d8:	20001648 	.word	0x20001648

0800d5dc <_malloc_usable_size_r>:
 800d5dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5e0:	1f18      	subs	r0, r3, #4
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	bfbc      	itt	lt
 800d5e6:	580b      	ldrlt	r3, [r1, r0]
 800d5e8:	18c0      	addlt	r0, r0, r3
 800d5ea:	4770      	bx	lr

0800d5ec <__sfputc_r>:
 800d5ec:	6893      	ldr	r3, [r2, #8]
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	b410      	push	{r4}
 800d5f4:	6093      	str	r3, [r2, #8]
 800d5f6:	da08      	bge.n	800d60a <__sfputc_r+0x1e>
 800d5f8:	6994      	ldr	r4, [r2, #24]
 800d5fa:	42a3      	cmp	r3, r4
 800d5fc:	db01      	blt.n	800d602 <__sfputc_r+0x16>
 800d5fe:	290a      	cmp	r1, #10
 800d600:	d103      	bne.n	800d60a <__sfputc_r+0x1e>
 800d602:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d606:	f7ff be20 	b.w	800d24a <__swbuf_r>
 800d60a:	6813      	ldr	r3, [r2, #0]
 800d60c:	1c58      	adds	r0, r3, #1
 800d60e:	6010      	str	r0, [r2, #0]
 800d610:	7019      	strb	r1, [r3, #0]
 800d612:	4608      	mov	r0, r1
 800d614:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d618:	4770      	bx	lr

0800d61a <__sfputs_r>:
 800d61a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61c:	4606      	mov	r6, r0
 800d61e:	460f      	mov	r7, r1
 800d620:	4614      	mov	r4, r2
 800d622:	18d5      	adds	r5, r2, r3
 800d624:	42ac      	cmp	r4, r5
 800d626:	d101      	bne.n	800d62c <__sfputs_r+0x12>
 800d628:	2000      	movs	r0, #0
 800d62a:	e007      	b.n	800d63c <__sfputs_r+0x22>
 800d62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d630:	463a      	mov	r2, r7
 800d632:	4630      	mov	r0, r6
 800d634:	f7ff ffda 	bl	800d5ec <__sfputc_r>
 800d638:	1c43      	adds	r3, r0, #1
 800d63a:	d1f3      	bne.n	800d624 <__sfputs_r+0xa>
 800d63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d640 <_vfiprintf_r>:
 800d640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d644:	460d      	mov	r5, r1
 800d646:	b09d      	sub	sp, #116	; 0x74
 800d648:	4614      	mov	r4, r2
 800d64a:	4698      	mov	r8, r3
 800d64c:	4606      	mov	r6, r0
 800d64e:	b118      	cbz	r0, 800d658 <_vfiprintf_r+0x18>
 800d650:	6a03      	ldr	r3, [r0, #32]
 800d652:	b90b      	cbnz	r3, 800d658 <_vfiprintf_r+0x18>
 800d654:	f7ff fd0a 	bl	800d06c <__sinit>
 800d658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d65a:	07d9      	lsls	r1, r3, #31
 800d65c:	d405      	bmi.n	800d66a <_vfiprintf_r+0x2a>
 800d65e:	89ab      	ldrh	r3, [r5, #12]
 800d660:	059a      	lsls	r2, r3, #22
 800d662:	d402      	bmi.n	800d66a <_vfiprintf_r+0x2a>
 800d664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d666:	f7ff ff54 	bl	800d512 <__retarget_lock_acquire_recursive>
 800d66a:	89ab      	ldrh	r3, [r5, #12]
 800d66c:	071b      	lsls	r3, r3, #28
 800d66e:	d501      	bpl.n	800d674 <_vfiprintf_r+0x34>
 800d670:	692b      	ldr	r3, [r5, #16]
 800d672:	b99b      	cbnz	r3, 800d69c <_vfiprintf_r+0x5c>
 800d674:	4629      	mov	r1, r5
 800d676:	4630      	mov	r0, r6
 800d678:	f7ff fe24 	bl	800d2c4 <__swsetup_r>
 800d67c:	b170      	cbz	r0, 800d69c <_vfiprintf_r+0x5c>
 800d67e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d680:	07dc      	lsls	r4, r3, #31
 800d682:	d504      	bpl.n	800d68e <_vfiprintf_r+0x4e>
 800d684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d688:	b01d      	add	sp, #116	; 0x74
 800d68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68e:	89ab      	ldrh	r3, [r5, #12]
 800d690:	0598      	lsls	r0, r3, #22
 800d692:	d4f7      	bmi.n	800d684 <_vfiprintf_r+0x44>
 800d694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d696:	f7ff ff3d 	bl	800d514 <__retarget_lock_release_recursive>
 800d69a:	e7f3      	b.n	800d684 <_vfiprintf_r+0x44>
 800d69c:	2300      	movs	r3, #0
 800d69e:	9309      	str	r3, [sp, #36]	; 0x24
 800d6a0:	2320      	movs	r3, #32
 800d6a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6aa:	2330      	movs	r3, #48	; 0x30
 800d6ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d860 <_vfiprintf_r+0x220>
 800d6b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6b4:	f04f 0901 	mov.w	r9, #1
 800d6b8:	4623      	mov	r3, r4
 800d6ba:	469a      	mov	sl, r3
 800d6bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6c0:	b10a      	cbz	r2, 800d6c6 <_vfiprintf_r+0x86>
 800d6c2:	2a25      	cmp	r2, #37	; 0x25
 800d6c4:	d1f9      	bne.n	800d6ba <_vfiprintf_r+0x7a>
 800d6c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d6ca:	d00b      	beq.n	800d6e4 <_vfiprintf_r+0xa4>
 800d6cc:	465b      	mov	r3, fp
 800d6ce:	4622      	mov	r2, r4
 800d6d0:	4629      	mov	r1, r5
 800d6d2:	4630      	mov	r0, r6
 800d6d4:	f7ff ffa1 	bl	800d61a <__sfputs_r>
 800d6d8:	3001      	adds	r0, #1
 800d6da:	f000 80a9 	beq.w	800d830 <_vfiprintf_r+0x1f0>
 800d6de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6e0:	445a      	add	r2, fp
 800d6e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d6e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f000 80a1 	beq.w	800d830 <_vfiprintf_r+0x1f0>
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6f8:	f10a 0a01 	add.w	sl, sl, #1
 800d6fc:	9304      	str	r3, [sp, #16]
 800d6fe:	9307      	str	r3, [sp, #28]
 800d700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d704:	931a      	str	r3, [sp, #104]	; 0x68
 800d706:	4654      	mov	r4, sl
 800d708:	2205      	movs	r2, #5
 800d70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d70e:	4854      	ldr	r0, [pc, #336]	; (800d860 <_vfiprintf_r+0x220>)
 800d710:	f7f2 fd66 	bl	80001e0 <memchr>
 800d714:	9a04      	ldr	r2, [sp, #16]
 800d716:	b9d8      	cbnz	r0, 800d750 <_vfiprintf_r+0x110>
 800d718:	06d1      	lsls	r1, r2, #27
 800d71a:	bf44      	itt	mi
 800d71c:	2320      	movmi	r3, #32
 800d71e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d722:	0713      	lsls	r3, r2, #28
 800d724:	bf44      	itt	mi
 800d726:	232b      	movmi	r3, #43	; 0x2b
 800d728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d72c:	f89a 3000 	ldrb.w	r3, [sl]
 800d730:	2b2a      	cmp	r3, #42	; 0x2a
 800d732:	d015      	beq.n	800d760 <_vfiprintf_r+0x120>
 800d734:	9a07      	ldr	r2, [sp, #28]
 800d736:	4654      	mov	r4, sl
 800d738:	2000      	movs	r0, #0
 800d73a:	f04f 0c0a 	mov.w	ip, #10
 800d73e:	4621      	mov	r1, r4
 800d740:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d744:	3b30      	subs	r3, #48	; 0x30
 800d746:	2b09      	cmp	r3, #9
 800d748:	d94d      	bls.n	800d7e6 <_vfiprintf_r+0x1a6>
 800d74a:	b1b0      	cbz	r0, 800d77a <_vfiprintf_r+0x13a>
 800d74c:	9207      	str	r2, [sp, #28]
 800d74e:	e014      	b.n	800d77a <_vfiprintf_r+0x13a>
 800d750:	eba0 0308 	sub.w	r3, r0, r8
 800d754:	fa09 f303 	lsl.w	r3, r9, r3
 800d758:	4313      	orrs	r3, r2
 800d75a:	9304      	str	r3, [sp, #16]
 800d75c:	46a2      	mov	sl, r4
 800d75e:	e7d2      	b.n	800d706 <_vfiprintf_r+0xc6>
 800d760:	9b03      	ldr	r3, [sp, #12]
 800d762:	1d19      	adds	r1, r3, #4
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	9103      	str	r1, [sp, #12]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	bfbb      	ittet	lt
 800d76c:	425b      	neglt	r3, r3
 800d76e:	f042 0202 	orrlt.w	r2, r2, #2
 800d772:	9307      	strge	r3, [sp, #28]
 800d774:	9307      	strlt	r3, [sp, #28]
 800d776:	bfb8      	it	lt
 800d778:	9204      	strlt	r2, [sp, #16]
 800d77a:	7823      	ldrb	r3, [r4, #0]
 800d77c:	2b2e      	cmp	r3, #46	; 0x2e
 800d77e:	d10c      	bne.n	800d79a <_vfiprintf_r+0x15a>
 800d780:	7863      	ldrb	r3, [r4, #1]
 800d782:	2b2a      	cmp	r3, #42	; 0x2a
 800d784:	d134      	bne.n	800d7f0 <_vfiprintf_r+0x1b0>
 800d786:	9b03      	ldr	r3, [sp, #12]
 800d788:	1d1a      	adds	r2, r3, #4
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	9203      	str	r2, [sp, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	bfb8      	it	lt
 800d792:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d796:	3402      	adds	r4, #2
 800d798:	9305      	str	r3, [sp, #20]
 800d79a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d870 <_vfiprintf_r+0x230>
 800d79e:	7821      	ldrb	r1, [r4, #0]
 800d7a0:	2203      	movs	r2, #3
 800d7a2:	4650      	mov	r0, sl
 800d7a4:	f7f2 fd1c 	bl	80001e0 <memchr>
 800d7a8:	b138      	cbz	r0, 800d7ba <_vfiprintf_r+0x17a>
 800d7aa:	9b04      	ldr	r3, [sp, #16]
 800d7ac:	eba0 000a 	sub.w	r0, r0, sl
 800d7b0:	2240      	movs	r2, #64	; 0x40
 800d7b2:	4082      	lsls	r2, r0
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	3401      	adds	r4, #1
 800d7b8:	9304      	str	r3, [sp, #16]
 800d7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7be:	4829      	ldr	r0, [pc, #164]	; (800d864 <_vfiprintf_r+0x224>)
 800d7c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7c4:	2206      	movs	r2, #6
 800d7c6:	f7f2 fd0b 	bl	80001e0 <memchr>
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	d03f      	beq.n	800d84e <_vfiprintf_r+0x20e>
 800d7ce:	4b26      	ldr	r3, [pc, #152]	; (800d868 <_vfiprintf_r+0x228>)
 800d7d0:	bb1b      	cbnz	r3, 800d81a <_vfiprintf_r+0x1da>
 800d7d2:	9b03      	ldr	r3, [sp, #12]
 800d7d4:	3307      	adds	r3, #7
 800d7d6:	f023 0307 	bic.w	r3, r3, #7
 800d7da:	3308      	adds	r3, #8
 800d7dc:	9303      	str	r3, [sp, #12]
 800d7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7e0:	443b      	add	r3, r7
 800d7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d7e4:	e768      	b.n	800d6b8 <_vfiprintf_r+0x78>
 800d7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7ea:	460c      	mov	r4, r1
 800d7ec:	2001      	movs	r0, #1
 800d7ee:	e7a6      	b.n	800d73e <_vfiprintf_r+0xfe>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	3401      	adds	r4, #1
 800d7f4:	9305      	str	r3, [sp, #20]
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	f04f 0c0a 	mov.w	ip, #10
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d802:	3a30      	subs	r2, #48	; 0x30
 800d804:	2a09      	cmp	r2, #9
 800d806:	d903      	bls.n	800d810 <_vfiprintf_r+0x1d0>
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d0c6      	beq.n	800d79a <_vfiprintf_r+0x15a>
 800d80c:	9105      	str	r1, [sp, #20]
 800d80e:	e7c4      	b.n	800d79a <_vfiprintf_r+0x15a>
 800d810:	fb0c 2101 	mla	r1, ip, r1, r2
 800d814:	4604      	mov	r4, r0
 800d816:	2301      	movs	r3, #1
 800d818:	e7f0      	b.n	800d7fc <_vfiprintf_r+0x1bc>
 800d81a:	ab03      	add	r3, sp, #12
 800d81c:	9300      	str	r3, [sp, #0]
 800d81e:	462a      	mov	r2, r5
 800d820:	4b12      	ldr	r3, [pc, #72]	; (800d86c <_vfiprintf_r+0x22c>)
 800d822:	a904      	add	r1, sp, #16
 800d824:	4630      	mov	r0, r6
 800d826:	f3af 8000 	nop.w
 800d82a:	4607      	mov	r7, r0
 800d82c:	1c78      	adds	r0, r7, #1
 800d82e:	d1d6      	bne.n	800d7de <_vfiprintf_r+0x19e>
 800d830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d832:	07d9      	lsls	r1, r3, #31
 800d834:	d405      	bmi.n	800d842 <_vfiprintf_r+0x202>
 800d836:	89ab      	ldrh	r3, [r5, #12]
 800d838:	059a      	lsls	r2, r3, #22
 800d83a:	d402      	bmi.n	800d842 <_vfiprintf_r+0x202>
 800d83c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d83e:	f7ff fe69 	bl	800d514 <__retarget_lock_release_recursive>
 800d842:	89ab      	ldrh	r3, [r5, #12]
 800d844:	065b      	lsls	r3, r3, #25
 800d846:	f53f af1d 	bmi.w	800d684 <_vfiprintf_r+0x44>
 800d84a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d84c:	e71c      	b.n	800d688 <_vfiprintf_r+0x48>
 800d84e:	ab03      	add	r3, sp, #12
 800d850:	9300      	str	r3, [sp, #0]
 800d852:	462a      	mov	r2, r5
 800d854:	4b05      	ldr	r3, [pc, #20]	; (800d86c <_vfiprintf_r+0x22c>)
 800d856:	a904      	add	r1, sp, #16
 800d858:	4630      	mov	r0, r6
 800d85a:	f000 f879 	bl	800d950 <_printf_i>
 800d85e:	e7e4      	b.n	800d82a <_vfiprintf_r+0x1ea>
 800d860:	0800e960 	.word	0x0800e960
 800d864:	0800e96a 	.word	0x0800e96a
 800d868:	00000000 	.word	0x00000000
 800d86c:	0800d61b 	.word	0x0800d61b
 800d870:	0800e966 	.word	0x0800e966

0800d874 <_printf_common>:
 800d874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d878:	4616      	mov	r6, r2
 800d87a:	4699      	mov	r9, r3
 800d87c:	688a      	ldr	r2, [r1, #8]
 800d87e:	690b      	ldr	r3, [r1, #16]
 800d880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d884:	4293      	cmp	r3, r2
 800d886:	bfb8      	it	lt
 800d888:	4613      	movlt	r3, r2
 800d88a:	6033      	str	r3, [r6, #0]
 800d88c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d890:	4607      	mov	r7, r0
 800d892:	460c      	mov	r4, r1
 800d894:	b10a      	cbz	r2, 800d89a <_printf_common+0x26>
 800d896:	3301      	adds	r3, #1
 800d898:	6033      	str	r3, [r6, #0]
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	0699      	lsls	r1, r3, #26
 800d89e:	bf42      	ittt	mi
 800d8a0:	6833      	ldrmi	r3, [r6, #0]
 800d8a2:	3302      	addmi	r3, #2
 800d8a4:	6033      	strmi	r3, [r6, #0]
 800d8a6:	6825      	ldr	r5, [r4, #0]
 800d8a8:	f015 0506 	ands.w	r5, r5, #6
 800d8ac:	d106      	bne.n	800d8bc <_printf_common+0x48>
 800d8ae:	f104 0a19 	add.w	sl, r4, #25
 800d8b2:	68e3      	ldr	r3, [r4, #12]
 800d8b4:	6832      	ldr	r2, [r6, #0]
 800d8b6:	1a9b      	subs	r3, r3, r2
 800d8b8:	42ab      	cmp	r3, r5
 800d8ba:	dc26      	bgt.n	800d90a <_printf_common+0x96>
 800d8bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8c0:	1e13      	subs	r3, r2, #0
 800d8c2:	6822      	ldr	r2, [r4, #0]
 800d8c4:	bf18      	it	ne
 800d8c6:	2301      	movne	r3, #1
 800d8c8:	0692      	lsls	r2, r2, #26
 800d8ca:	d42b      	bmi.n	800d924 <_printf_common+0xb0>
 800d8cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8d0:	4649      	mov	r1, r9
 800d8d2:	4638      	mov	r0, r7
 800d8d4:	47c0      	blx	r8
 800d8d6:	3001      	adds	r0, #1
 800d8d8:	d01e      	beq.n	800d918 <_printf_common+0xa4>
 800d8da:	6823      	ldr	r3, [r4, #0]
 800d8dc:	6922      	ldr	r2, [r4, #16]
 800d8de:	f003 0306 	and.w	r3, r3, #6
 800d8e2:	2b04      	cmp	r3, #4
 800d8e4:	bf02      	ittt	eq
 800d8e6:	68e5      	ldreq	r5, [r4, #12]
 800d8e8:	6833      	ldreq	r3, [r6, #0]
 800d8ea:	1aed      	subeq	r5, r5, r3
 800d8ec:	68a3      	ldr	r3, [r4, #8]
 800d8ee:	bf0c      	ite	eq
 800d8f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8f4:	2500      	movne	r5, #0
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	bfc4      	itt	gt
 800d8fa:	1a9b      	subgt	r3, r3, r2
 800d8fc:	18ed      	addgt	r5, r5, r3
 800d8fe:	2600      	movs	r6, #0
 800d900:	341a      	adds	r4, #26
 800d902:	42b5      	cmp	r5, r6
 800d904:	d11a      	bne.n	800d93c <_printf_common+0xc8>
 800d906:	2000      	movs	r0, #0
 800d908:	e008      	b.n	800d91c <_printf_common+0xa8>
 800d90a:	2301      	movs	r3, #1
 800d90c:	4652      	mov	r2, sl
 800d90e:	4649      	mov	r1, r9
 800d910:	4638      	mov	r0, r7
 800d912:	47c0      	blx	r8
 800d914:	3001      	adds	r0, #1
 800d916:	d103      	bne.n	800d920 <_printf_common+0xac>
 800d918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d920:	3501      	adds	r5, #1
 800d922:	e7c6      	b.n	800d8b2 <_printf_common+0x3e>
 800d924:	18e1      	adds	r1, r4, r3
 800d926:	1c5a      	adds	r2, r3, #1
 800d928:	2030      	movs	r0, #48	; 0x30
 800d92a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d92e:	4422      	add	r2, r4
 800d930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d934:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d938:	3302      	adds	r3, #2
 800d93a:	e7c7      	b.n	800d8cc <_printf_common+0x58>
 800d93c:	2301      	movs	r3, #1
 800d93e:	4622      	mov	r2, r4
 800d940:	4649      	mov	r1, r9
 800d942:	4638      	mov	r0, r7
 800d944:	47c0      	blx	r8
 800d946:	3001      	adds	r0, #1
 800d948:	d0e6      	beq.n	800d918 <_printf_common+0xa4>
 800d94a:	3601      	adds	r6, #1
 800d94c:	e7d9      	b.n	800d902 <_printf_common+0x8e>
	...

0800d950 <_printf_i>:
 800d950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d954:	7e0f      	ldrb	r7, [r1, #24]
 800d956:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d958:	2f78      	cmp	r7, #120	; 0x78
 800d95a:	4691      	mov	r9, r2
 800d95c:	4680      	mov	r8, r0
 800d95e:	460c      	mov	r4, r1
 800d960:	469a      	mov	sl, r3
 800d962:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d966:	d807      	bhi.n	800d978 <_printf_i+0x28>
 800d968:	2f62      	cmp	r7, #98	; 0x62
 800d96a:	d80a      	bhi.n	800d982 <_printf_i+0x32>
 800d96c:	2f00      	cmp	r7, #0
 800d96e:	f000 80d4 	beq.w	800db1a <_printf_i+0x1ca>
 800d972:	2f58      	cmp	r7, #88	; 0x58
 800d974:	f000 80c0 	beq.w	800daf8 <_printf_i+0x1a8>
 800d978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d97c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d980:	e03a      	b.n	800d9f8 <_printf_i+0xa8>
 800d982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d986:	2b15      	cmp	r3, #21
 800d988:	d8f6      	bhi.n	800d978 <_printf_i+0x28>
 800d98a:	a101      	add	r1, pc, #4	; (adr r1, 800d990 <_printf_i+0x40>)
 800d98c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d990:	0800d9e9 	.word	0x0800d9e9
 800d994:	0800d9fd 	.word	0x0800d9fd
 800d998:	0800d979 	.word	0x0800d979
 800d99c:	0800d979 	.word	0x0800d979
 800d9a0:	0800d979 	.word	0x0800d979
 800d9a4:	0800d979 	.word	0x0800d979
 800d9a8:	0800d9fd 	.word	0x0800d9fd
 800d9ac:	0800d979 	.word	0x0800d979
 800d9b0:	0800d979 	.word	0x0800d979
 800d9b4:	0800d979 	.word	0x0800d979
 800d9b8:	0800d979 	.word	0x0800d979
 800d9bc:	0800db01 	.word	0x0800db01
 800d9c0:	0800da29 	.word	0x0800da29
 800d9c4:	0800dabb 	.word	0x0800dabb
 800d9c8:	0800d979 	.word	0x0800d979
 800d9cc:	0800d979 	.word	0x0800d979
 800d9d0:	0800db23 	.word	0x0800db23
 800d9d4:	0800d979 	.word	0x0800d979
 800d9d8:	0800da29 	.word	0x0800da29
 800d9dc:	0800d979 	.word	0x0800d979
 800d9e0:	0800d979 	.word	0x0800d979
 800d9e4:	0800dac3 	.word	0x0800dac3
 800d9e8:	682b      	ldr	r3, [r5, #0]
 800d9ea:	1d1a      	adds	r2, r3, #4
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	602a      	str	r2, [r5, #0]
 800d9f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e09f      	b.n	800db3c <_printf_i+0x1ec>
 800d9fc:	6820      	ldr	r0, [r4, #0]
 800d9fe:	682b      	ldr	r3, [r5, #0]
 800da00:	0607      	lsls	r7, r0, #24
 800da02:	f103 0104 	add.w	r1, r3, #4
 800da06:	6029      	str	r1, [r5, #0]
 800da08:	d501      	bpl.n	800da0e <_printf_i+0xbe>
 800da0a:	681e      	ldr	r6, [r3, #0]
 800da0c:	e003      	b.n	800da16 <_printf_i+0xc6>
 800da0e:	0646      	lsls	r6, r0, #25
 800da10:	d5fb      	bpl.n	800da0a <_printf_i+0xba>
 800da12:	f9b3 6000 	ldrsh.w	r6, [r3]
 800da16:	2e00      	cmp	r6, #0
 800da18:	da03      	bge.n	800da22 <_printf_i+0xd2>
 800da1a:	232d      	movs	r3, #45	; 0x2d
 800da1c:	4276      	negs	r6, r6
 800da1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da22:	485a      	ldr	r0, [pc, #360]	; (800db8c <_printf_i+0x23c>)
 800da24:	230a      	movs	r3, #10
 800da26:	e012      	b.n	800da4e <_printf_i+0xfe>
 800da28:	682b      	ldr	r3, [r5, #0]
 800da2a:	6820      	ldr	r0, [r4, #0]
 800da2c:	1d19      	adds	r1, r3, #4
 800da2e:	6029      	str	r1, [r5, #0]
 800da30:	0605      	lsls	r5, r0, #24
 800da32:	d501      	bpl.n	800da38 <_printf_i+0xe8>
 800da34:	681e      	ldr	r6, [r3, #0]
 800da36:	e002      	b.n	800da3e <_printf_i+0xee>
 800da38:	0641      	lsls	r1, r0, #25
 800da3a:	d5fb      	bpl.n	800da34 <_printf_i+0xe4>
 800da3c:	881e      	ldrh	r6, [r3, #0]
 800da3e:	4853      	ldr	r0, [pc, #332]	; (800db8c <_printf_i+0x23c>)
 800da40:	2f6f      	cmp	r7, #111	; 0x6f
 800da42:	bf0c      	ite	eq
 800da44:	2308      	moveq	r3, #8
 800da46:	230a      	movne	r3, #10
 800da48:	2100      	movs	r1, #0
 800da4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da4e:	6865      	ldr	r5, [r4, #4]
 800da50:	60a5      	str	r5, [r4, #8]
 800da52:	2d00      	cmp	r5, #0
 800da54:	bfa2      	ittt	ge
 800da56:	6821      	ldrge	r1, [r4, #0]
 800da58:	f021 0104 	bicge.w	r1, r1, #4
 800da5c:	6021      	strge	r1, [r4, #0]
 800da5e:	b90e      	cbnz	r6, 800da64 <_printf_i+0x114>
 800da60:	2d00      	cmp	r5, #0
 800da62:	d04b      	beq.n	800dafc <_printf_i+0x1ac>
 800da64:	4615      	mov	r5, r2
 800da66:	fbb6 f1f3 	udiv	r1, r6, r3
 800da6a:	fb03 6711 	mls	r7, r3, r1, r6
 800da6e:	5dc7      	ldrb	r7, [r0, r7]
 800da70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da74:	4637      	mov	r7, r6
 800da76:	42bb      	cmp	r3, r7
 800da78:	460e      	mov	r6, r1
 800da7a:	d9f4      	bls.n	800da66 <_printf_i+0x116>
 800da7c:	2b08      	cmp	r3, #8
 800da7e:	d10b      	bne.n	800da98 <_printf_i+0x148>
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	07de      	lsls	r6, r3, #31
 800da84:	d508      	bpl.n	800da98 <_printf_i+0x148>
 800da86:	6923      	ldr	r3, [r4, #16]
 800da88:	6861      	ldr	r1, [r4, #4]
 800da8a:	4299      	cmp	r1, r3
 800da8c:	bfde      	ittt	le
 800da8e:	2330      	movle	r3, #48	; 0x30
 800da90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da94:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800da98:	1b52      	subs	r2, r2, r5
 800da9a:	6122      	str	r2, [r4, #16]
 800da9c:	f8cd a000 	str.w	sl, [sp]
 800daa0:	464b      	mov	r3, r9
 800daa2:	aa03      	add	r2, sp, #12
 800daa4:	4621      	mov	r1, r4
 800daa6:	4640      	mov	r0, r8
 800daa8:	f7ff fee4 	bl	800d874 <_printf_common>
 800daac:	3001      	adds	r0, #1
 800daae:	d14a      	bne.n	800db46 <_printf_i+0x1f6>
 800dab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dab4:	b004      	add	sp, #16
 800dab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daba:	6823      	ldr	r3, [r4, #0]
 800dabc:	f043 0320 	orr.w	r3, r3, #32
 800dac0:	6023      	str	r3, [r4, #0]
 800dac2:	4833      	ldr	r0, [pc, #204]	; (800db90 <_printf_i+0x240>)
 800dac4:	2778      	movs	r7, #120	; 0x78
 800dac6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800daca:	6823      	ldr	r3, [r4, #0]
 800dacc:	6829      	ldr	r1, [r5, #0]
 800dace:	061f      	lsls	r7, r3, #24
 800dad0:	f851 6b04 	ldr.w	r6, [r1], #4
 800dad4:	d402      	bmi.n	800dadc <_printf_i+0x18c>
 800dad6:	065f      	lsls	r7, r3, #25
 800dad8:	bf48      	it	mi
 800dada:	b2b6      	uxthmi	r6, r6
 800dadc:	07df      	lsls	r7, r3, #31
 800dade:	bf48      	it	mi
 800dae0:	f043 0320 	orrmi.w	r3, r3, #32
 800dae4:	6029      	str	r1, [r5, #0]
 800dae6:	bf48      	it	mi
 800dae8:	6023      	strmi	r3, [r4, #0]
 800daea:	b91e      	cbnz	r6, 800daf4 <_printf_i+0x1a4>
 800daec:	6823      	ldr	r3, [r4, #0]
 800daee:	f023 0320 	bic.w	r3, r3, #32
 800daf2:	6023      	str	r3, [r4, #0]
 800daf4:	2310      	movs	r3, #16
 800daf6:	e7a7      	b.n	800da48 <_printf_i+0xf8>
 800daf8:	4824      	ldr	r0, [pc, #144]	; (800db8c <_printf_i+0x23c>)
 800dafa:	e7e4      	b.n	800dac6 <_printf_i+0x176>
 800dafc:	4615      	mov	r5, r2
 800dafe:	e7bd      	b.n	800da7c <_printf_i+0x12c>
 800db00:	682b      	ldr	r3, [r5, #0]
 800db02:	6826      	ldr	r6, [r4, #0]
 800db04:	6961      	ldr	r1, [r4, #20]
 800db06:	1d18      	adds	r0, r3, #4
 800db08:	6028      	str	r0, [r5, #0]
 800db0a:	0635      	lsls	r5, r6, #24
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	d501      	bpl.n	800db14 <_printf_i+0x1c4>
 800db10:	6019      	str	r1, [r3, #0]
 800db12:	e002      	b.n	800db1a <_printf_i+0x1ca>
 800db14:	0670      	lsls	r0, r6, #25
 800db16:	d5fb      	bpl.n	800db10 <_printf_i+0x1c0>
 800db18:	8019      	strh	r1, [r3, #0]
 800db1a:	2300      	movs	r3, #0
 800db1c:	6123      	str	r3, [r4, #16]
 800db1e:	4615      	mov	r5, r2
 800db20:	e7bc      	b.n	800da9c <_printf_i+0x14c>
 800db22:	682b      	ldr	r3, [r5, #0]
 800db24:	1d1a      	adds	r2, r3, #4
 800db26:	602a      	str	r2, [r5, #0]
 800db28:	681d      	ldr	r5, [r3, #0]
 800db2a:	6862      	ldr	r2, [r4, #4]
 800db2c:	2100      	movs	r1, #0
 800db2e:	4628      	mov	r0, r5
 800db30:	f7f2 fb56 	bl	80001e0 <memchr>
 800db34:	b108      	cbz	r0, 800db3a <_printf_i+0x1ea>
 800db36:	1b40      	subs	r0, r0, r5
 800db38:	6060      	str	r0, [r4, #4]
 800db3a:	6863      	ldr	r3, [r4, #4]
 800db3c:	6123      	str	r3, [r4, #16]
 800db3e:	2300      	movs	r3, #0
 800db40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db44:	e7aa      	b.n	800da9c <_printf_i+0x14c>
 800db46:	6923      	ldr	r3, [r4, #16]
 800db48:	462a      	mov	r2, r5
 800db4a:	4649      	mov	r1, r9
 800db4c:	4640      	mov	r0, r8
 800db4e:	47d0      	blx	sl
 800db50:	3001      	adds	r0, #1
 800db52:	d0ad      	beq.n	800dab0 <_printf_i+0x160>
 800db54:	6823      	ldr	r3, [r4, #0]
 800db56:	079b      	lsls	r3, r3, #30
 800db58:	d413      	bmi.n	800db82 <_printf_i+0x232>
 800db5a:	68e0      	ldr	r0, [r4, #12]
 800db5c:	9b03      	ldr	r3, [sp, #12]
 800db5e:	4298      	cmp	r0, r3
 800db60:	bfb8      	it	lt
 800db62:	4618      	movlt	r0, r3
 800db64:	e7a6      	b.n	800dab4 <_printf_i+0x164>
 800db66:	2301      	movs	r3, #1
 800db68:	4632      	mov	r2, r6
 800db6a:	4649      	mov	r1, r9
 800db6c:	4640      	mov	r0, r8
 800db6e:	47d0      	blx	sl
 800db70:	3001      	adds	r0, #1
 800db72:	d09d      	beq.n	800dab0 <_printf_i+0x160>
 800db74:	3501      	adds	r5, #1
 800db76:	68e3      	ldr	r3, [r4, #12]
 800db78:	9903      	ldr	r1, [sp, #12]
 800db7a:	1a5b      	subs	r3, r3, r1
 800db7c:	42ab      	cmp	r3, r5
 800db7e:	dcf2      	bgt.n	800db66 <_printf_i+0x216>
 800db80:	e7eb      	b.n	800db5a <_printf_i+0x20a>
 800db82:	2500      	movs	r5, #0
 800db84:	f104 0619 	add.w	r6, r4, #25
 800db88:	e7f5      	b.n	800db76 <_printf_i+0x226>
 800db8a:	bf00      	nop
 800db8c:	0800e971 	.word	0x0800e971
 800db90:	0800e982 	.word	0x0800e982

0800db94 <__sflush_r>:
 800db94:	898a      	ldrh	r2, [r1, #12]
 800db96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db9a:	4605      	mov	r5, r0
 800db9c:	0710      	lsls	r0, r2, #28
 800db9e:	460c      	mov	r4, r1
 800dba0:	d458      	bmi.n	800dc54 <__sflush_r+0xc0>
 800dba2:	684b      	ldr	r3, [r1, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	dc05      	bgt.n	800dbb4 <__sflush_r+0x20>
 800dba8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	dc02      	bgt.n	800dbb4 <__sflush_r+0x20>
 800dbae:	2000      	movs	r0, #0
 800dbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbb6:	2e00      	cmp	r6, #0
 800dbb8:	d0f9      	beq.n	800dbae <__sflush_r+0x1a>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dbc0:	682f      	ldr	r7, [r5, #0]
 800dbc2:	6a21      	ldr	r1, [r4, #32]
 800dbc4:	602b      	str	r3, [r5, #0]
 800dbc6:	d032      	beq.n	800dc2e <__sflush_r+0x9a>
 800dbc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dbca:	89a3      	ldrh	r3, [r4, #12]
 800dbcc:	075a      	lsls	r2, r3, #29
 800dbce:	d505      	bpl.n	800dbdc <__sflush_r+0x48>
 800dbd0:	6863      	ldr	r3, [r4, #4]
 800dbd2:	1ac0      	subs	r0, r0, r3
 800dbd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dbd6:	b10b      	cbz	r3, 800dbdc <__sflush_r+0x48>
 800dbd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dbda:	1ac0      	subs	r0, r0, r3
 800dbdc:	2300      	movs	r3, #0
 800dbde:	4602      	mov	r2, r0
 800dbe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbe2:	6a21      	ldr	r1, [r4, #32]
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	47b0      	blx	r6
 800dbe8:	1c43      	adds	r3, r0, #1
 800dbea:	89a3      	ldrh	r3, [r4, #12]
 800dbec:	d106      	bne.n	800dbfc <__sflush_r+0x68>
 800dbee:	6829      	ldr	r1, [r5, #0]
 800dbf0:	291d      	cmp	r1, #29
 800dbf2:	d82b      	bhi.n	800dc4c <__sflush_r+0xb8>
 800dbf4:	4a29      	ldr	r2, [pc, #164]	; (800dc9c <__sflush_r+0x108>)
 800dbf6:	410a      	asrs	r2, r1
 800dbf8:	07d6      	lsls	r6, r2, #31
 800dbfa:	d427      	bmi.n	800dc4c <__sflush_r+0xb8>
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	6062      	str	r2, [r4, #4]
 800dc00:	04d9      	lsls	r1, r3, #19
 800dc02:	6922      	ldr	r2, [r4, #16]
 800dc04:	6022      	str	r2, [r4, #0]
 800dc06:	d504      	bpl.n	800dc12 <__sflush_r+0x7e>
 800dc08:	1c42      	adds	r2, r0, #1
 800dc0a:	d101      	bne.n	800dc10 <__sflush_r+0x7c>
 800dc0c:	682b      	ldr	r3, [r5, #0]
 800dc0e:	b903      	cbnz	r3, 800dc12 <__sflush_r+0x7e>
 800dc10:	6560      	str	r0, [r4, #84]	; 0x54
 800dc12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc14:	602f      	str	r7, [r5, #0]
 800dc16:	2900      	cmp	r1, #0
 800dc18:	d0c9      	beq.n	800dbae <__sflush_r+0x1a>
 800dc1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc1e:	4299      	cmp	r1, r3
 800dc20:	d002      	beq.n	800dc28 <__sflush_r+0x94>
 800dc22:	4628      	mov	r0, r5
 800dc24:	f7ff fc8e 	bl	800d544 <_free_r>
 800dc28:	2000      	movs	r0, #0
 800dc2a:	6360      	str	r0, [r4, #52]	; 0x34
 800dc2c:	e7c0      	b.n	800dbb0 <__sflush_r+0x1c>
 800dc2e:	2301      	movs	r3, #1
 800dc30:	4628      	mov	r0, r5
 800dc32:	47b0      	blx	r6
 800dc34:	1c41      	adds	r1, r0, #1
 800dc36:	d1c8      	bne.n	800dbca <__sflush_r+0x36>
 800dc38:	682b      	ldr	r3, [r5, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d0c5      	beq.n	800dbca <__sflush_r+0x36>
 800dc3e:	2b1d      	cmp	r3, #29
 800dc40:	d001      	beq.n	800dc46 <__sflush_r+0xb2>
 800dc42:	2b16      	cmp	r3, #22
 800dc44:	d101      	bne.n	800dc4a <__sflush_r+0xb6>
 800dc46:	602f      	str	r7, [r5, #0]
 800dc48:	e7b1      	b.n	800dbae <__sflush_r+0x1a>
 800dc4a:	89a3      	ldrh	r3, [r4, #12]
 800dc4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc50:	81a3      	strh	r3, [r4, #12]
 800dc52:	e7ad      	b.n	800dbb0 <__sflush_r+0x1c>
 800dc54:	690f      	ldr	r7, [r1, #16]
 800dc56:	2f00      	cmp	r7, #0
 800dc58:	d0a9      	beq.n	800dbae <__sflush_r+0x1a>
 800dc5a:	0793      	lsls	r3, r2, #30
 800dc5c:	680e      	ldr	r6, [r1, #0]
 800dc5e:	bf08      	it	eq
 800dc60:	694b      	ldreq	r3, [r1, #20]
 800dc62:	600f      	str	r7, [r1, #0]
 800dc64:	bf18      	it	ne
 800dc66:	2300      	movne	r3, #0
 800dc68:	eba6 0807 	sub.w	r8, r6, r7
 800dc6c:	608b      	str	r3, [r1, #8]
 800dc6e:	f1b8 0f00 	cmp.w	r8, #0
 800dc72:	dd9c      	ble.n	800dbae <__sflush_r+0x1a>
 800dc74:	6a21      	ldr	r1, [r4, #32]
 800dc76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc78:	4643      	mov	r3, r8
 800dc7a:	463a      	mov	r2, r7
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	47b0      	blx	r6
 800dc80:	2800      	cmp	r0, #0
 800dc82:	dc06      	bgt.n	800dc92 <__sflush_r+0xfe>
 800dc84:	89a3      	ldrh	r3, [r4, #12]
 800dc86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc8a:	81a3      	strh	r3, [r4, #12]
 800dc8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc90:	e78e      	b.n	800dbb0 <__sflush_r+0x1c>
 800dc92:	4407      	add	r7, r0
 800dc94:	eba8 0800 	sub.w	r8, r8, r0
 800dc98:	e7e9      	b.n	800dc6e <__sflush_r+0xda>
 800dc9a:	bf00      	nop
 800dc9c:	dfbffffe 	.word	0xdfbffffe

0800dca0 <_fflush_r>:
 800dca0:	b538      	push	{r3, r4, r5, lr}
 800dca2:	690b      	ldr	r3, [r1, #16]
 800dca4:	4605      	mov	r5, r0
 800dca6:	460c      	mov	r4, r1
 800dca8:	b913      	cbnz	r3, 800dcb0 <_fflush_r+0x10>
 800dcaa:	2500      	movs	r5, #0
 800dcac:	4628      	mov	r0, r5
 800dcae:	bd38      	pop	{r3, r4, r5, pc}
 800dcb0:	b118      	cbz	r0, 800dcba <_fflush_r+0x1a>
 800dcb2:	6a03      	ldr	r3, [r0, #32]
 800dcb4:	b90b      	cbnz	r3, 800dcba <_fflush_r+0x1a>
 800dcb6:	f7ff f9d9 	bl	800d06c <__sinit>
 800dcba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d0f3      	beq.n	800dcaa <_fflush_r+0xa>
 800dcc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dcc4:	07d0      	lsls	r0, r2, #31
 800dcc6:	d404      	bmi.n	800dcd2 <_fflush_r+0x32>
 800dcc8:	0599      	lsls	r1, r3, #22
 800dcca:	d402      	bmi.n	800dcd2 <_fflush_r+0x32>
 800dccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcce:	f7ff fc20 	bl	800d512 <__retarget_lock_acquire_recursive>
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	4621      	mov	r1, r4
 800dcd6:	f7ff ff5d 	bl	800db94 <__sflush_r>
 800dcda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcdc:	07da      	lsls	r2, r3, #31
 800dcde:	4605      	mov	r5, r0
 800dce0:	d4e4      	bmi.n	800dcac <_fflush_r+0xc>
 800dce2:	89a3      	ldrh	r3, [r4, #12]
 800dce4:	059b      	lsls	r3, r3, #22
 800dce6:	d4e1      	bmi.n	800dcac <_fflush_r+0xc>
 800dce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcea:	f7ff fc13 	bl	800d514 <__retarget_lock_release_recursive>
 800dcee:	e7dd      	b.n	800dcac <_fflush_r+0xc>

0800dcf0 <__swhatbuf_r>:
 800dcf0:	b570      	push	{r4, r5, r6, lr}
 800dcf2:	460c      	mov	r4, r1
 800dcf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcf8:	2900      	cmp	r1, #0
 800dcfa:	b096      	sub	sp, #88	; 0x58
 800dcfc:	4615      	mov	r5, r2
 800dcfe:	461e      	mov	r6, r3
 800dd00:	da0d      	bge.n	800dd1e <__swhatbuf_r+0x2e>
 800dd02:	89a3      	ldrh	r3, [r4, #12]
 800dd04:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dd08:	f04f 0100 	mov.w	r1, #0
 800dd0c:	bf0c      	ite	eq
 800dd0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dd12:	2340      	movne	r3, #64	; 0x40
 800dd14:	2000      	movs	r0, #0
 800dd16:	6031      	str	r1, [r6, #0]
 800dd18:	602b      	str	r3, [r5, #0]
 800dd1a:	b016      	add	sp, #88	; 0x58
 800dd1c:	bd70      	pop	{r4, r5, r6, pc}
 800dd1e:	466a      	mov	r2, sp
 800dd20:	f000 f87c 	bl	800de1c <_fstat_r>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	dbec      	blt.n	800dd02 <__swhatbuf_r+0x12>
 800dd28:	9901      	ldr	r1, [sp, #4]
 800dd2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dd2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dd32:	4259      	negs	r1, r3
 800dd34:	4159      	adcs	r1, r3
 800dd36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd3a:	e7eb      	b.n	800dd14 <__swhatbuf_r+0x24>

0800dd3c <__smakebuf_r>:
 800dd3c:	898b      	ldrh	r3, [r1, #12]
 800dd3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd40:	079d      	lsls	r5, r3, #30
 800dd42:	4606      	mov	r6, r0
 800dd44:	460c      	mov	r4, r1
 800dd46:	d507      	bpl.n	800dd58 <__smakebuf_r+0x1c>
 800dd48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd4c:	6023      	str	r3, [r4, #0]
 800dd4e:	6123      	str	r3, [r4, #16]
 800dd50:	2301      	movs	r3, #1
 800dd52:	6163      	str	r3, [r4, #20]
 800dd54:	b002      	add	sp, #8
 800dd56:	bd70      	pop	{r4, r5, r6, pc}
 800dd58:	ab01      	add	r3, sp, #4
 800dd5a:	466a      	mov	r2, sp
 800dd5c:	f7ff ffc8 	bl	800dcf0 <__swhatbuf_r>
 800dd60:	9900      	ldr	r1, [sp, #0]
 800dd62:	4605      	mov	r5, r0
 800dd64:	4630      	mov	r0, r6
 800dd66:	f7ff f831 	bl	800cdcc <_malloc_r>
 800dd6a:	b948      	cbnz	r0, 800dd80 <__smakebuf_r+0x44>
 800dd6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd70:	059a      	lsls	r2, r3, #22
 800dd72:	d4ef      	bmi.n	800dd54 <__smakebuf_r+0x18>
 800dd74:	f023 0303 	bic.w	r3, r3, #3
 800dd78:	f043 0302 	orr.w	r3, r3, #2
 800dd7c:	81a3      	strh	r3, [r4, #12]
 800dd7e:	e7e3      	b.n	800dd48 <__smakebuf_r+0xc>
 800dd80:	89a3      	ldrh	r3, [r4, #12]
 800dd82:	6020      	str	r0, [r4, #0]
 800dd84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd88:	81a3      	strh	r3, [r4, #12]
 800dd8a:	9b00      	ldr	r3, [sp, #0]
 800dd8c:	6163      	str	r3, [r4, #20]
 800dd8e:	9b01      	ldr	r3, [sp, #4]
 800dd90:	6120      	str	r0, [r4, #16]
 800dd92:	b15b      	cbz	r3, 800ddac <__smakebuf_r+0x70>
 800dd94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd98:	4630      	mov	r0, r6
 800dd9a:	f000 f851 	bl	800de40 <_isatty_r>
 800dd9e:	b128      	cbz	r0, 800ddac <__smakebuf_r+0x70>
 800dda0:	89a3      	ldrh	r3, [r4, #12]
 800dda2:	f023 0303 	bic.w	r3, r3, #3
 800dda6:	f043 0301 	orr.w	r3, r3, #1
 800ddaa:	81a3      	strh	r3, [r4, #12]
 800ddac:	89a3      	ldrh	r3, [r4, #12]
 800ddae:	431d      	orrs	r5, r3
 800ddb0:	81a5      	strh	r5, [r4, #12]
 800ddb2:	e7cf      	b.n	800dd54 <__smakebuf_r+0x18>

0800ddb4 <_putc_r>:
 800ddb4:	b570      	push	{r4, r5, r6, lr}
 800ddb6:	460d      	mov	r5, r1
 800ddb8:	4614      	mov	r4, r2
 800ddba:	4606      	mov	r6, r0
 800ddbc:	b118      	cbz	r0, 800ddc6 <_putc_r+0x12>
 800ddbe:	6a03      	ldr	r3, [r0, #32]
 800ddc0:	b90b      	cbnz	r3, 800ddc6 <_putc_r+0x12>
 800ddc2:	f7ff f953 	bl	800d06c <__sinit>
 800ddc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddc8:	07d8      	lsls	r0, r3, #31
 800ddca:	d405      	bmi.n	800ddd8 <_putc_r+0x24>
 800ddcc:	89a3      	ldrh	r3, [r4, #12]
 800ddce:	0599      	lsls	r1, r3, #22
 800ddd0:	d402      	bmi.n	800ddd8 <_putc_r+0x24>
 800ddd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddd4:	f7ff fb9d 	bl	800d512 <__retarget_lock_acquire_recursive>
 800ddd8:	68a3      	ldr	r3, [r4, #8]
 800ddda:	3b01      	subs	r3, #1
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	60a3      	str	r3, [r4, #8]
 800dde0:	da05      	bge.n	800ddee <_putc_r+0x3a>
 800dde2:	69a2      	ldr	r2, [r4, #24]
 800dde4:	4293      	cmp	r3, r2
 800dde6:	db12      	blt.n	800de0e <_putc_r+0x5a>
 800dde8:	b2eb      	uxtb	r3, r5
 800ddea:	2b0a      	cmp	r3, #10
 800ddec:	d00f      	beq.n	800de0e <_putc_r+0x5a>
 800ddee:	6823      	ldr	r3, [r4, #0]
 800ddf0:	1c5a      	adds	r2, r3, #1
 800ddf2:	6022      	str	r2, [r4, #0]
 800ddf4:	701d      	strb	r5, [r3, #0]
 800ddf6:	b2ed      	uxtb	r5, r5
 800ddf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddfa:	07da      	lsls	r2, r3, #31
 800ddfc:	d405      	bmi.n	800de0a <_putc_r+0x56>
 800ddfe:	89a3      	ldrh	r3, [r4, #12]
 800de00:	059b      	lsls	r3, r3, #22
 800de02:	d402      	bmi.n	800de0a <_putc_r+0x56>
 800de04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de06:	f7ff fb85 	bl	800d514 <__retarget_lock_release_recursive>
 800de0a:	4628      	mov	r0, r5
 800de0c:	bd70      	pop	{r4, r5, r6, pc}
 800de0e:	4629      	mov	r1, r5
 800de10:	4622      	mov	r2, r4
 800de12:	4630      	mov	r0, r6
 800de14:	f7ff fa19 	bl	800d24a <__swbuf_r>
 800de18:	4605      	mov	r5, r0
 800de1a:	e7ed      	b.n	800ddf8 <_putc_r+0x44>

0800de1c <_fstat_r>:
 800de1c:	b538      	push	{r3, r4, r5, lr}
 800de1e:	4d07      	ldr	r5, [pc, #28]	; (800de3c <_fstat_r+0x20>)
 800de20:	2300      	movs	r3, #0
 800de22:	4604      	mov	r4, r0
 800de24:	4608      	mov	r0, r1
 800de26:	4611      	mov	r1, r2
 800de28:	602b      	str	r3, [r5, #0]
 800de2a:	f7f3 f80c 	bl	8000e46 <_fstat>
 800de2e:	1c43      	adds	r3, r0, #1
 800de30:	d102      	bne.n	800de38 <_fstat_r+0x1c>
 800de32:	682b      	ldr	r3, [r5, #0]
 800de34:	b103      	cbz	r3, 800de38 <_fstat_r+0x1c>
 800de36:	6023      	str	r3, [r4, #0]
 800de38:	bd38      	pop	{r3, r4, r5, pc}
 800de3a:	bf00      	nop
 800de3c:	2000178c 	.word	0x2000178c

0800de40 <_isatty_r>:
 800de40:	b538      	push	{r3, r4, r5, lr}
 800de42:	4d06      	ldr	r5, [pc, #24]	; (800de5c <_isatty_r+0x1c>)
 800de44:	2300      	movs	r3, #0
 800de46:	4604      	mov	r4, r0
 800de48:	4608      	mov	r0, r1
 800de4a:	602b      	str	r3, [r5, #0]
 800de4c:	f7f3 f80b 	bl	8000e66 <_isatty>
 800de50:	1c43      	adds	r3, r0, #1
 800de52:	d102      	bne.n	800de5a <_isatty_r+0x1a>
 800de54:	682b      	ldr	r3, [r5, #0]
 800de56:	b103      	cbz	r3, 800de5a <_isatty_r+0x1a>
 800de58:	6023      	str	r3, [r4, #0]
 800de5a:	bd38      	pop	{r3, r4, r5, pc}
 800de5c:	2000178c 	.word	0x2000178c

0800de60 <_init>:
 800de60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de62:	bf00      	nop
 800de64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de66:	bc08      	pop	{r3}
 800de68:	469e      	mov	lr, r3
 800de6a:	4770      	bx	lr

0800de6c <_fini>:
 800de6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de6e:	bf00      	nop
 800de70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de72:	bc08      	pop	{r3}
 800de74:	469e      	mov	lr, r3
 800de76:	4770      	bx	lr
