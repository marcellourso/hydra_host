
MSC_Standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d4  0800df90  0800df90  0001df90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e964  0800e964  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e964  0800e964  0001e964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e96c  0800e96c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e96c  0800e96c  0001e96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e970  0800e970  0001e970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800e974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          000017b8  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00008004  20001844  20001844  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 14 .debug_line   0001bc90  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000b8  00000000  00000000  0003bd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   0001d27b  00000000  00000000  0003be47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00004704  00000000  00000000  000590c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001398  00000000  00000000  0005d7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6b4c  00000000  00000000  0005eb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000ee7  00000000  00000000  001556ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002b010  00000000  00000000  00156593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000059a0  00000000  00000000  001815a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800df78 	.word	0x0800df78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800df78 	.word	0x0800df78

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800057c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000580:	f001 f80a 	bl	8001598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000586:	490d      	ldr	r1, [pc, #52]	; (80005bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <LoopForever+0xe>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800058c:	e002      	b.n	8000594 <LoopCopyDataInit>

0800058e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000592:	3304      	adds	r3, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000598:	d3f9      	bcc.n	800058e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059a:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800059c:	4c0a      	ldr	r4, [pc, #40]	; (80005c8 <LoopForever+0x16>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a0:	e001      	b.n	80005a6 <LoopFillZerobss>

080005a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a4:	3204      	adds	r2, #4

080005a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a8:	d3fb      	bcc.n	80005a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005aa:	f00d f819 	bl	800d5e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ae:	f000 f80f 	bl	80005d0 <main>

080005b2 <LoopForever>:

LoopForever:
    b LoopForever
 80005b2:	e7fe      	b.n	80005b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005bc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80005c0:	0800e974 	.word	0x0800e974
  ldr r2, =_sbss
 80005c4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80005c8:	20001844 	.word	0x20001844

080005cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005cc:	e7fe      	b.n	80005cc <ADC1_2_IRQHandler>
	...

080005d0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b08b      	sub	sp, #44	; 0x2c
 80005d4:	af00      	add	r7, sp, #0
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 80005d6:	f001 f815 	bl	8001604 <HAL_Init>

  MX_RTC_Init();
 80005da:	f000 fb81 	bl	8000ce0 <MX_RTC_Init>

  // Imposta la data e l'ora
  //    RTC_DateTypeDef sDate;
  //    RTC_TimeTypeDef sTime;

    tx_buff[0] = 0x34;
 80005de:	4b5d      	ldr	r3, [pc, #372]	; (8000754 <main+0x184>)
 80005e0:	2234      	movs	r2, #52	; 0x34
 80005e2:	701a      	strb	r2, [r3, #0]
    tx_buff[1] = 0x34;
 80005e4:	4b5b      	ldr	r3, [pc, #364]	; (8000754 <main+0x184>)
 80005e6:	2234      	movs	r2, #52	; 0x34
 80005e8:	705a      	strb	r2, [r3, #1]
    tx_buff[2] = 0x0D;
 80005ea:	4b5a      	ldr	r3, [pc, #360]	; (8000754 <main+0x184>)
 80005ec:	220d      	movs	r2, #13
 80005ee:	709a      	strb	r2, [r3, #2]
    buf_index = 0;
 80005f0:	4b59      	ldr	r3, [pc, #356]	; (8000758 <main+0x188>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
    buf_size = RX_BUFFER_SIZE;
 80005f6:	4b59      	ldr	r3, [pc, #356]	; (800075c <main+0x18c>)
 80005f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005fc:	601a      	str	r2, [r3, #0]

    SN[0] = '\0';
 80005fe:	4b58      	ldr	r3, [pc, #352]	; (8000760 <main+0x190>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
    data = NULL;
 8000604:	4b57      	ldr	r3, [pc, #348]	; (8000764 <main+0x194>)
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
    txflag=0;
 800060a:	4b57      	ldr	r3, [pc, #348]	; (8000768 <main+0x198>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]

  /* Configure the system clock to 80 MHz */
  SystemClock_Config();
 8000610:	f000 faec 	bl	8000bec <SystemClock_Config>
  //MX_RTC_Init();

  /* Enable Power Clock*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	4b55      	ldr	r3, [pc, #340]	; (800076c <main+0x19c>)
 8000616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000618:	4a54      	ldr	r2, [pc, #336]	; (800076c <main+0x19c>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6593      	str	r3, [r2, #88]	; 0x58
 8000620:	4b52      	ldr	r3, [pc, #328]	; (800076c <main+0x19c>)
 8000622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
             Program 7 data bits + 1 parity bit in PC HyperTerminal
      - Stop Bit    = One Stop bit
      - Parity      = None parity
      - BaudRate    = 115200 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 800062c:	4b50      	ldr	r3, [pc, #320]	; (8000770 <main+0x1a0>)
 800062e:	4a51      	ldr	r2, [pc, #324]	; (8000774 <main+0x1a4>)
 8000630:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate   = 115200;
 8000632:	4b4f      	ldr	r3, [pc, #316]	; (8000770 <main+0x1a0>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b4d      	ldr	r3, [pc, #308]	; (8000770 <main+0x1a0>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000640:	4b4b      	ldr	r3, [pc, #300]	; (8000770 <main+0x1a0>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000646:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <main+0x1a0>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800064c:	4b48      	ldr	r3, [pc, #288]	; (8000770 <main+0x1a0>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000652:	4b47      	ldr	r3, [pc, #284]	; (8000770 <main+0x1a0>)
 8000654:	220c      	movs	r2, #12
 8000656:	615a      	str	r2, [r3, #20]

  Uart4Handle.Instance        = UARTx;
 8000658:	4b47      	ldr	r3, [pc, #284]	; (8000778 <main+0x1a8>)
 800065a:	4a48      	ldr	r2, [pc, #288]	; (800077c <main+0x1ac>)
 800065c:	601a      	str	r2, [r3, #0]
  Uart4Handle.Init.BaudRate   = 19200;
 800065e:	4b46      	ldr	r3, [pc, #280]	; (8000778 <main+0x1a8>)
 8000660:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000664:	605a      	str	r2, [r3, #4]
  Uart4Handle.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b44      	ldr	r3, [pc, #272]	; (8000778 <main+0x1a8>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  Uart4Handle.Init.StopBits   = UART_STOPBITS_1;
 800066c:	4b42      	ldr	r3, [pc, #264]	; (8000778 <main+0x1a8>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  Uart4Handle.Init.Parity     = UART_PARITY_NONE;
 8000672:	4b41      	ldr	r3, [pc, #260]	; (8000778 <main+0x1a8>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  Uart4Handle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000678:	4b3f      	ldr	r3, [pc, #252]	; (8000778 <main+0x1a8>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  Uart4Handle.Init.Mode       = UART_MODE_TX_RX;
 800067e:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <main+0x1a8>)
 8000680:	220c      	movs	r2, #12
 8000682:	615a      	str	r2, [r3, #20]

  if (HAL_UART_Init(&UartHandle) != HAL_OK || HAL_UART_Init(&Uart4Handle) != HAL_OK)
 8000684:	483a      	ldr	r0, [pc, #232]	; (8000770 <main+0x1a0>)
 8000686:	f004 fb6f 	bl	8004d68 <HAL_UART_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d105      	bne.n	800069c <main+0xcc>
 8000690:	4839      	ldr	r0, [pc, #228]	; (8000778 <main+0x1a8>)
 8000692:	f004 fb69 	bl	8004d68 <HAL_UART_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <main+0xd2>
  {
    /* Initialization Error */
    Error_Handler("uart or usart init error");
 800069c:	4838      	ldr	r0, [pc, #224]	; (8000780 <main+0x1b0>)
 800069e:	f000 fb71 	bl	8000d84 <Error_Handler>
  }

  // HAL_UART_Receive_IT(&UartHandle, rxBuffer, 1); //interrupt serial

  initRxBuffer();
 80006a2:	f000 fa51 	bl	8000b48 <initRxBuffer>
  //HAL_UART_Transmit(&Uart4Handle, "prova", 5, 0xFFFF);
  //USBH_UsrLog("VAFFA");


  /* Enable USB power on Pwrctrl CR2 register */
  HAL_PWREx_EnableVddUSB();
 80006a6:	f003 f883 	bl	80037b0 <HAL_PWREx_EnableVddUSB>

  /*##-1- Link the USB Host disk I/O driver ##################################*/
  if(FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
 80006aa:	4936      	ldr	r1, [pc, #216]	; (8000784 <main+0x1b4>)
 80006ac:	4836      	ldr	r0, [pc, #216]	; (8000788 <main+0x1b8>)
 80006ae:	f008 fe63 	bl	8009378 <FATFS_LinkDriver>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	f040 8157 	bne.w	8000968 <main+0x398>
  {
    /*##-2- Init Host Library ################################################*/
    USBH_Init(&hUSBHost, USBH_UserProcess, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	4933      	ldr	r1, [pc, #204]	; (800078c <main+0x1bc>)
 80006be:	4834      	ldr	r0, [pc, #208]	; (8000790 <main+0x1c0>)
 80006c0:	f00a fd38 	bl	800b134 <USBH_Init>

    /*##-3- Add Supported Class ##############################################*/
    USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
 80006c4:	4933      	ldr	r1, [pc, #204]	; (8000794 <main+0x1c4>)
 80006c6:	4832      	ldr	r0, [pc, #200]	; (8000790 <main+0x1c0>)
 80006c8:	f00a fdf0 	bl	800b2ac <USBH_RegisterClass>

    /*##-4- Start Host Process ###############################################*/
    USBH_Start(&hUSBHost);
 80006cc:	4830      	ldr	r0, [pc, #192]	; (8000790 <main+0x1c0>)
 80006ce:	f00a fedd 	bl	800b48c <USBH_Start>

    /*##-5- Run Application (Blocking mode) ##################################*/
    while (1)
    {
      /* USB Host Background task */
      USBH_Process(&hUSBHost);
 80006d2:	482f      	ldr	r0, [pc, #188]	; (8000790 <main+0x1c0>)
 80006d4:	f00a feea 	bl	800b4ac <USBH_Process>

      /* Mass Storage Application State Machine */
     switch(Appli_state)
 80006d8:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <main+0x1c8>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d00f      	beq.n	8000700 <main+0x130>
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d10f      	bne.n	8000704 <main+0x134>
    	//const uint8_t myText[] = "demo write";
    	//const TCHAR* filename = _T("H0346");
    	//MSC_Application(myText,filename);
    	//USBH_UsrLog("started!\n");

    	HAL_UART_Transmit(&Uart4Handle, tx_buff, 3, 0xFFFF);
 80006e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e8:	2203      	movs	r2, #3
 80006ea:	491a      	ldr	r1, [pc, #104]	; (8000754 <main+0x184>)
 80006ec:	4822      	ldr	r0, [pc, #136]	; (8000778 <main+0x1a8>)
 80006ee:	f004 fb89 	bl	8004e04 <HAL_UART_Transmit>
    	txflag=1;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <main+0x198>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	601a      	str	r2, [r3, #0]
    	//USBH_UsrLog("started with flag %d\n",txflag);
       Appli_state = APPLICATION_IDLE;
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <main+0x1c8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
       break;
 80006fe:	e002      	b.n	8000706 <main+0x136>
      case APPLICATION_IDLE:

    	  break;
 8000700:	bf00      	nop
 8000702:	e000      	b.n	8000706 <main+0x136>

     default:

    	 break;
 8000704:	bf00      	nop
      }


     if (UARTx->ISR & USART_ISR_RXNE) {  // se c'è un carattere in arrivo dalla seriale
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <main+0x1ac>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 0320 	and.w	r3, r3, #32
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0df      	beq.n	80006d2 <main+0x102>


    	 // Controlla e ridimensiona il buffer se necessario
    	                          if (buf_index >= buf_size - 1) { // Lascia spazio per '\0'
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <main+0x18c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <main+0x188>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	429a      	cmp	r2, r3
 800071e:	dc42      	bgt.n	80007a6 <main+0x1d6>
    	                              buf_size += RX_BUFFER_SIZE;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <main+0x18c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000728:	4a0c      	ldr	r2, [pc, #48]	; (800075c <main+0x18c>)
 800072a:	6013      	str	r3, [r2, #0]
    	                              uint8_t *newBuffer = realloc(rxBuffer, buf_size * sizeof(char));
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <main+0x1cc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a0a      	ldr	r2, [pc, #40]	; (800075c <main+0x18c>)
 8000732:	6812      	ldr	r2, [r2, #0]
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f00c fc60 	bl	800cffc <realloc>
 800073c:	6278      	str	r0, [r7, #36]	; 0x24
    	                              if (newBuffer == NULL) {
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	2b00      	cmp	r3, #0
 8000742:	d12d      	bne.n	80007a0 <main+0x1d0>
    	                                  // Gestione dell'errore di reallocazione della memoria
    	                                  free(rxBuffer);
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <main+0x1cc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f00c fba3 	bl	800ce94 <free>
    	                                  return 1;
 800074e:	2301      	movs	r3, #1
 8000750:	e10d      	b.n	800096e <main+0x39e>
 8000752:	bf00      	nop
 8000754:	20000b20 	.word	0x20000b20
 8000758:	20000f34 	.word	0x20000f34
 800075c:	20000f38 	.word	0x20000f38
 8000760:	20000f28 	.word	0x20000f28
 8000764:	20000f24 	.word	0x20000f24
 8000768:	20000f3c 	.word	0x20000f3c
 800076c:	40021000 	.word	0x40021000
 8000770:	20000a0c 	.word	0x20000a0c
 8000774:	40013800 	.word	0x40013800
 8000778:	20000a94 	.word	0x20000a94
 800077c:	40004c00 	.word	0x40004c00
 8000780:	0800e088 	.word	0x0800e088
 8000784:	20000508 	.word	0x20000508
 8000788:	0800e91c 	.word	0x0800e91c
 800078c:	08000ad5 	.word	0x08000ad5
 8000790:	2000050c 	.word	0x2000050c
 8000794:	20000010 	.word	0x20000010
 8000798:	20000a08 	.word	0x20000a08
 800079c:	20000b1c 	.word	0x20000b1c
    	                              }
    	                              rxBuffer = newBuffer;
 80007a0:	4a75      	ldr	r2, [pc, #468]	; (8000978 <main+0x3a8>)
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	6013      	str	r3, [r2, #0]
    	                          }

         sdata = (uint8_t)(UARTx->RDR); // Leggi un byte dal buffer di ricezione di USARTx
 80007a6:	4b75      	ldr	r3, [pc, #468]	; (800097c <main+0x3ac>)
 80007a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b74      	ldr	r3, [pc, #464]	; (8000980 <main+0x3b0>)
 80007b0:	701a      	strb	r2, [r3, #0]
         rxBuffer[buf_index++] = sdata;
 80007b2:	4b71      	ldr	r3, [pc, #452]	; (8000978 <main+0x3a8>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b73      	ldr	r3, [pc, #460]	; (8000984 <main+0x3b4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	1c59      	adds	r1, r3, #1
 80007bc:	4871      	ldr	r0, [pc, #452]	; (8000984 <main+0x3b4>)
 80007be:	6001      	str	r1, [r0, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a6f      	ldr	r2, [pc, #444]	; (8000980 <main+0x3b0>)
 80007c4:	7812      	ldrb	r2, [r2, #0]
 80007c6:	701a      	strb	r2, [r3, #0]
         rxBuffer[buf_index] = '\0';
 80007c8:	4b6b      	ldr	r3, [pc, #428]	; (8000978 <main+0x3a8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a6d      	ldr	r2, [pc, #436]	; (8000984 <main+0x3b4>)
 80007ce:	6812      	ldr	r2, [r2, #0]
 80007d0:	4413      	add	r3, r2
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]

                    if ((strstr(rxBuffer, "\r\r\r") != NULL)) {
 80007d6:	4b68      	ldr	r3, [pc, #416]	; (8000978 <main+0x3a8>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	496b      	ldr	r1, [pc, #428]	; (8000988 <main+0x3b8>)
 80007dc:	4618      	mov	r0, r3
 80007de:	f00c fe8c 	bl	800d4fa <strstr>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f43f af74 	beq.w	80006d2 <main+0x102>

        	   //USBH_UsrLog("terminatore trovato, stringa: %s",rxBuffer);
        	   txflag=0;
 80007ea:	4b68      	ldr	r3, [pc, #416]	; (800098c <main+0x3bc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]

        	   // Estrai SN
        	       char *startSN = strchr(rxBuffer, '=') + 1;
 80007f0:	4b61      	ldr	r3, [pc, #388]	; (8000978 <main+0x3a8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	213d      	movs	r1, #61	; 0x3d
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00c fe5f 	bl	800d4ba <strchr>
 80007fc:	4603      	mov	r3, r0
 80007fe:	3301      	adds	r3, #1
 8000800:	623b      	str	r3, [r7, #32]
        	       if (startSN != NULL) {
 8000802:	6a3b      	ldr	r3, [r7, #32]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d01a      	beq.n	800083e <main+0x26e>
        	           char *endSN = strchr(startSN, '\r');
 8000808:	210d      	movs	r1, #13
 800080a:	6a38      	ldr	r0, [r7, #32]
 800080c:	f00c fe55 	bl	800d4ba <strchr>
 8000810:	61f8      	str	r0, [r7, #28]
        	           if (endSN != NULL && (endSN - startSN < sizeof(SN))) {
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d012      	beq.n	800083e <main+0x26e>
 8000818:	69fa      	ldr	r2, [r7, #28]
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	2b09      	cmp	r3, #9
 8000820:	d80d      	bhi.n	800083e <main+0x26e>
        	               strncpy(SN, startSN, endSN - startSN);
 8000822:	69fa      	ldr	r2, [r7, #28]
 8000824:	6a3b      	ldr	r3, [r7, #32]
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	461a      	mov	r2, r3
 800082a:	6a39      	ldr	r1, [r7, #32]
 800082c:	4858      	ldr	r0, [pc, #352]	; (8000990 <main+0x3c0>)
 800082e:	f00c fe51 	bl	800d4d4 <strncpy>
        	               SN[endSN - startSN] = '\0';  // Termina correttamente la stringa SN
 8000832:	69fa      	ldr	r2, [r7, #28]
 8000834:	6a3b      	ldr	r3, [r7, #32]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	4a55      	ldr	r2, [pc, #340]	; (8000990 <main+0x3c0>)
 800083a:	2100      	movs	r1, #0
 800083c:	54d1      	strb	r1, [r2, r3]
        	           }
        	       }

        	       // Estrai data
        	       //char *startData = strchr(rxBuffer, '\r') + 1;  // Inizio dei dati dopo il primo '\r'
        	       char *startData = startSN + 8; // Inizio dei dati dopo il numero seriale (8 caratteri)
 800083e:	6a3b      	ldr	r3, [r7, #32]
 8000840:	3308      	adds	r3, #8
 8000842:	61bb      	str	r3, [r7, #24]
        	       if (startData != NULL) {
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d02e      	beq.n	80008a8 <main+0x2d8>
        	           char *endData = strstr(startData, "\r\r\r");  // Fine dei dati prima dei tre '\r'
 800084a:	494f      	ldr	r1, [pc, #316]	; (8000988 <main+0x3b8>)
 800084c:	69b8      	ldr	r0, [r7, #24]
 800084e:	f00c fe54 	bl	800d4fa <strstr>
 8000852:	6178      	str	r0, [r7, #20]
        	           if (endData != NULL) {
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d026      	beq.n	80008a8 <main+0x2d8>
        	               size_t dataSize = endData - startData;
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	613b      	str	r3, [r7, #16]
        	               data = (char *)malloc(dataSize + 1);  // Alloca memoria per i dati
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	3301      	adds	r3, #1
 8000866:	4618      	mov	r0, r3
 8000868:	f00c fb0c 	bl	800ce84 <malloc>
 800086c:	4603      	mov	r3, r0
 800086e:	461a      	mov	r2, r3
 8000870:	4b48      	ldr	r3, [pc, #288]	; (8000994 <main+0x3c4>)
 8000872:	601a      	str	r2, [r3, #0]
        	               if (data != NULL) {
 8000874:	4b47      	ldr	r3, [pc, #284]	; (8000994 <main+0x3c4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d015      	beq.n	80008a8 <main+0x2d8>
        	                   strncpy(data, startData, dataSize);
 800087c:	4b45      	ldr	r3, [pc, #276]	; (8000994 <main+0x3c4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	69b9      	ldr	r1, [r7, #24]
 8000884:	4618      	mov	r0, r3
 8000886:	f00c fe25 	bl	800d4d4 <strncpy>
        	                   data[dataSize] = '\0';  // Termina correttamente la stringa data
 800088a:	4b42      	ldr	r3, [pc, #264]	; (8000994 <main+0x3c4>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	4413      	add	r3, r2
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
        	                   USBH_UsrLog("data: %s",data);
 8000896:	4b3f      	ldr	r3, [pc, #252]	; (8000994 <main+0x3c4>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4619      	mov	r1, r3
 800089c:	483e      	ldr	r0, [pc, #248]	; (8000998 <main+0x3c8>)
 800089e:	f00c fca7 	bl	800d1f0 <iprintf>
 80008a2:	200a      	movs	r0, #10
 80008a4:	f00c fcb6 	bl	800d214 <putchar>
        	               }
        	           }
        	       }

        	       int bufferSize = strlen(header) + strlen((char *)data) + 1; // +1 per '\0'
 80008a8:	4b3c      	ldr	r3, [pc, #240]	; (800099c <main+0x3cc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fc8f 	bl	80001d0 <strlen>
 80008b2:	4604      	mov	r4, r0
 80008b4:	4b37      	ldr	r3, [pc, #220]	; (8000994 <main+0x3c4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fc89 	bl	80001d0 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	4423      	add	r3, r4
 80008c2:	3301      	adds	r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]

        	             // Alloca il buffer per la stringa finale
        	             char *finalString = (char *)malloc(bufferSize);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f00c fadb 	bl	800ce84 <malloc>
 80008ce:	4603      	mov	r3, r0
 80008d0:	60bb      	str	r3, [r7, #8]
        	             if (finalString == NULL) {
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d106      	bne.n	80008e6 <main+0x316>
        	                 USBH_UsrLog("null final");
 80008d8:	4831      	ldr	r0, [pc, #196]	; (80009a0 <main+0x3d0>)
 80008da:	f00c fc89 	bl	800d1f0 <iprintf>
 80008de:	200a      	movs	r0, #10
 80008e0:	f00c fc98 	bl	800d214 <putchar>
        	                 return; // Termina la funzione in caso di errore
 80008e4:	e043      	b.n	800096e <main+0x39e>
        	             }

        	             // Costruisci la stringa finale
        	             strcpy(finalString, header);
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <main+0x3cc>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4619      	mov	r1, r3
 80008ec:	68b8      	ldr	r0, [r7, #8]
 80008ee:	f00c fe9e 	bl	800d62e <strcpy>
        	             strcat(finalString, (char *)data);
 80008f2:	4b28      	ldr	r3, [pc, #160]	; (8000994 <main+0x3c4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4619      	mov	r1, r3
 80008f8:	68b8      	ldr	r0, [r7, #8]
 80008fa:	f00c fdcf 	bl	800d49c <strcat>
        	             USBH_UsrLog("final: %s",finalString);
 80008fe:	68b9      	ldr	r1, [r7, #8]
 8000900:	4828      	ldr	r0, [pc, #160]	; (80009a4 <main+0x3d4>)
 8000902:	f00c fc75 	bl	800d1f0 <iprintf>
 8000906:	200a      	movs	r0, #10
 8000908:	f00c fc84 	bl	800d214 <putchar>
        	             USBH_UsrLog("SN: %s",SN);
 800090c:	4920      	ldr	r1, [pc, #128]	; (8000990 <main+0x3c0>)
 800090e:	4826      	ldr	r0, [pc, #152]	; (80009a8 <main+0x3d8>)
 8000910:	f00c fc6e 	bl	800d1f0 <iprintf>
 8000914:	200a      	movs	r0, #10
 8000916:	f00c fc7d 	bl	800d214 <putchar>

        	       // Reset del buffer dopo l'elaborazione
        	       memset(rxBuffer, 0, RX_BUFFER_SIZE);
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <main+0x3a8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f00c fdb1 	bl	800d48c <memset>
        	       buf_index = 0;
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <main+0x3b4>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]

        	       strcat(SN,".csv");
 8000930:	4817      	ldr	r0, [pc, #92]	; (8000990 <main+0x3c0>)
 8000932:	f7ff fc4d 	bl	80001d0 <strlen>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <main+0x3c0>)
 800093c:	4413      	add	r3, r2
 800093e:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <main+0x3dc>)
 8000940:	6810      	ldr	r0, [r2, #0]
 8000942:	6018      	str	r0, [r3, #0]
 8000944:	7912      	ldrb	r2, [r2, #4]
 8000946:	711a      	strb	r2, [r3, #4]
        	       //USBH_UsrLog("serial:%s\nDATA:%s\nFinal:%s",SN,data,finalString);
        	       MSC_Application(finalString,SN);
 8000948:	4911      	ldr	r1, [pc, #68]	; (8000990 <main+0x3c0>)
 800094a:	68b8      	ldr	r0, [r7, #8]
 800094c:	f000 f830 	bl	80009b0 <MSC_Application>

        	       free(finalString); // libera la memoria allocata
 8000950:	68b8      	ldr	r0, [r7, #8]
 8000952:	f00c fa9f 	bl	800ce94 <free>
   	               free(data);  // libera la memoria allocata
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <main+0x3c4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f00c fa9a 	bl	800ce94 <free>
   	               SN[0] = '\0';
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <main+0x3c0>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
      USBH_Process(&hUSBHost);
 8000966:	e6b4      	b.n	80006d2 <main+0x102>

    } // end infinite loop

   }  // end link usb stick init

  deinitRxBuffer(); // Pulisci alla fine
 8000968:	f000 f914 	bl	8000b94 <deinitRxBuffer>
  return 0;
 800096c:	2300      	movs	r3, #0
  /* Infinite loop */
  //for(;;);

} // end main
 800096e:	4618      	mov	r0, r3
 8000970:	372c      	adds	r7, #44	; 0x2c
 8000972:	46bd      	mov	sp, r7
 8000974:	bd90      	pop	{r4, r7, pc}
 8000976:	bf00      	nop
 8000978:	20000b1c 	.word	0x20000b1c
 800097c:	40004c00 	.word	0x40004c00
 8000980:	20000f20 	.word	0x20000f20
 8000984:	20000f34 	.word	0x20000f34
 8000988:	0800e0a4 	.word	0x0800e0a4
 800098c:	20000f3c 	.word	0x20000f3c
 8000990:	20000f28 	.word	0x20000f28
 8000994:	20000f24 	.word	0x20000f24
 8000998:	0800e0a8 	.word	0x0800e0a8
 800099c:	20000000 	.word	0x20000000
 80009a0:	0800e0b4 	.word	0x0800e0b4
 80009a4:	0800e0c0 	.word	0x0800e0c0
 80009a8:	0800e0cc 	.word	0x0800e0cc
 80009ac:	0800e0d4 	.word	0x0800e0d4

080009b0 <MSC_Application>:
/**
  * @brief  Main routine for Mass Storage Class
  * @param  None
  * @retval None
  */
void MSC_Application(const uint8_t* wtext,const TCHAR* path){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b09e      	sub	sp, #120	; 0x78
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
	  uint32_t byteswritten, bytesread;                     /* File write/read counts */
	  //uint8_t wtext[] = "This is hydra working with FatFs"; /* File write buffer */
	  uint8_t rtext[100];                                   /* File read buffer */

	  /* Register the file system object to the FatFs module */
	    if(f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0) != FR_OK)
 80009ba:	2200      	movs	r2, #0
 80009bc:	4939      	ldr	r1, [pc, #228]	; (8000aa4 <MSC_Application+0xf4>)
 80009be:	483a      	ldr	r0, [pc, #232]	; (8000aa8 <MSC_Application+0xf8>)
 80009c0:	f007 ff2e 	bl	8008820 <f_mount>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d003      	beq.n	80009d2 <MSC_Application+0x22>
	    {
	      /* FatFs Initialization Error */
	      Error_Handler("mount error");
 80009ca:	4838      	ldr	r0, [pc, #224]	; (8000aac <MSC_Application+0xfc>)
 80009cc:	f000 f9da 	bl	8000d84 <Error_Handler>
 80009d0:	e05a      	b.n	8000a88 <MSC_Application+0xd8>
	    }
	    else
	    {
	      /* Create and Open a new text file object with write access */
	      if(f_open(&MyFile, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80009d2:	220a      	movs	r2, #10
 80009d4:	6839      	ldr	r1, [r7, #0]
 80009d6:	4836      	ldr	r0, [pc, #216]	; (8000ab0 <MSC_Application+0x100>)
 80009d8:	f007 ff68 	bl	80088ac <f_open>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <MSC_Application+0x3a>
	      {
	        /* path file Open for write Error */
	        Error_Handler("write open error");
 80009e2:	4834      	ldr	r0, [pc, #208]	; (8000ab4 <MSC_Application+0x104>)
 80009e4:	f000 f9ce 	bl	8000d84 <Error_Handler>
 80009e8:	e04e      	b.n	8000a88 <MSC_Application+0xd8>
	      }
	      else
	      {
	        /* Write data to the text file */
	        res = f_write(&MyFile, wtext, strlen((char*)wtext), (void *)&byteswritten);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff fbf0 	bl	80001d0 <strlen>
 80009f0:	4602      	mov	r2, r0
 80009f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	482d      	ldr	r0, [pc, #180]	; (8000ab0 <MSC_Application+0x100>)
 80009fa:	f008 fa54 	bl	8008ea6 <f_write>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	        if((byteswritten == 0) || (res != FR_OK))
 8000a04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <MSC_Application+0x62>
 8000a0a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <MSC_Application+0x6a>
	        {
	          /* wtext file Write or EOF Error */
	          Error_Handler("write error");
 8000a12:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <MSC_Application+0x108>)
 8000a14:	f000 f9b6 	bl	8000d84 <Error_Handler>
 8000a18:	e036      	b.n	8000a88 <MSC_Application+0xd8>
	        }
	        else
	        {
	          /* Close the open text file */
	          f_close(&MyFile);
 8000a1a:	4825      	ldr	r0, [pc, #148]	; (8000ab0 <MSC_Application+0x100>)
 8000a1c:	f008 fc36 	bl	800928c <f_close>

	          /* Open the text file object with read access */
	          if(f_open(&MyFile, path, FA_READ) != FR_OK)
 8000a20:	2201      	movs	r2, #1
 8000a22:	6839      	ldr	r1, [r7, #0]
 8000a24:	4822      	ldr	r0, [pc, #136]	; (8000ab0 <MSC_Application+0x100>)
 8000a26:	f007 ff41 	bl	80088ac <f_open>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <MSC_Application+0x88>
	          {
	            /* 'data.txt' file Open for read Error */
	            Error_Handler("read open error");
 8000a30:	4822      	ldr	r0, [pc, #136]	; (8000abc <MSC_Application+0x10c>)
 8000a32:	f000 f9a7 	bl	8000d84 <Error_Handler>
 8000a36:	e027      	b.n	8000a88 <MSC_Application+0xd8>
	          }
	          else
	          {
	            /* Read data from the text file */
	            res = f_read(&MyFile, rtext, sizeof(rtext), (void *)&bytesread);
 8000a38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a3c:	f107 0108 	add.w	r1, r7, #8
 8000a40:	2264      	movs	r2, #100	; 0x64
 8000a42:	481b      	ldr	r0, [pc, #108]	; (8000ab0 <MSC_Application+0x100>)
 8000a44:	f008 f8f0 	bl	8008c28 <f_read>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	            if((bytesread == 0) || (res != FR_OK))
 8000a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <MSC_Application+0xac>
 8000a54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <MSC_Application+0xb4>
	            {
	              /* 'data.txt' file Read or EOF Error */
	              Error_Handler("final read error");
 8000a5c:	4818      	ldr	r0, [pc, #96]	; (8000ac0 <MSC_Application+0x110>)
 8000a5e:	f000 f991 	bl	8000d84 <Error_Handler>
 8000a62:	e011      	b.n	8000a88 <MSC_Application+0xd8>
	            }
	            else
	            {
	              /* Close the open text file */
	              f_close(&MyFile);
 8000a64:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <MSC_Application+0x100>)
 8000a66:	f008 fc11 	bl	800928c <f_close>
//	                //Error_Handler("compare read error");
//	              }
//	              else
	              {
	                /* Success of the demo: no error occurrence */
	                USBH_UsrLog ("Success data writing");
 8000a6a:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <MSC_Application+0x114>)
 8000a6c:	f00c fbc0 	bl	800d1f0 <iprintf>
 8000a70:	200a      	movs	r0, #10
 8000a72:	f00c fbcf 	bl	800d214 <putchar>
	                USBH_UsrLog ("\nflag: %d",txflag);
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MSC_Application+0x118>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <MSC_Application+0x11c>)
 8000a7e:	f00c fbb7 	bl	800d1f0 <iprintf>
 8000a82:	200a      	movs	r0, #10
 8000a84:	f00c fbc6 	bl	800d214 <putchar>
	      }
	    }


  /* Unlink the USB disk I/O driver */
  FATFS_UnLinkDriver(USBDISKPath);
 8000a88:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <MSC_Application+0xf4>)
 8000a8a:	f008 fcbd 	bl	8009408 <FATFS_UnLinkDriver>

  USBH_UsrLog ("fat driver disconnesso");
 8000a8e:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <MSC_Application+0x120>)
 8000a90:	f00c fbae 	bl	800d1f0 <iprintf>
 8000a94:	200a      	movs	r0, #10
 8000a96:	f00c fbbd 	bl	800d214 <putchar>
}
 8000a9a:	bf00      	nop
 8000a9c:	3778      	adds	r7, #120	; 0x78
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000508 	.word	0x20000508
 8000aa8:	200000a8 	.word	0x200000a8
 8000aac:	0800e0dc 	.word	0x0800e0dc
 8000ab0:	200002d8 	.word	0x200002d8
 8000ab4:	0800e0e8 	.word	0x0800e0e8
 8000ab8:	0800e0fc 	.word	0x0800e0fc
 8000abc:	0800e108 	.word	0x0800e108
 8000ac0:	0800e118 	.word	0x0800e118
 8000ac4:	0800e12c 	.word	0x0800e12c
 8000ac8:	20000f3c 	.word	0x20000f3c
 8000acc:	0800e144 	.word	0x0800e144
 8000ad0:	0800e150 	.word	0x0800e150

08000ad4 <USBH_UserProcess>:
  * @param  phost: Host handle
  * @param  id: Host Library user message ID
  * @retval None
  */
static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
  switch(id)
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	2b05      	cmp	r3, #5
 8000ae4:	d006      	beq.n	8000af4 <USBH_UserProcess+0x20>
 8000ae6:	2b05      	cmp	r3, #5
 8000ae8:	dc1d      	bgt.n	8000b26 <USBH_UserProcess+0x52>
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d01d      	beq.n	8000b2a <USBH_UserProcess+0x56>
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d00c      	beq.n	8000b0c <USBH_UserProcess+0x38>
    f_mount(&USBH_fatfs, "", 0);

    break;

  default:
    break;
 8000af2:	e018      	b.n	8000b26 <USBH_UserProcess+0x52>
    Appli_state = APPLICATION_IDLE;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <USBH_UserProcess+0x60>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
    f_mount(NULL, (TCHAR const*)"", 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	490e      	ldr	r1, [pc, #56]	; (8000b38 <USBH_UserProcess+0x64>)
 8000afe:	2000      	movs	r0, #0
 8000b00:	f007 fe8e 	bl	8008820 <f_mount>
    FATFS_UnLinkDriver(USBDISKPath);
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <USBH_UserProcess+0x68>)
 8000b06:	f008 fc7f 	bl	8009408 <FATFS_UnLinkDriver>
    break;
 8000b0a:	e00f      	b.n	8000b2c <USBH_UserProcess+0x58>
    Appli_state = APPLICATION_START;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <USBH_UserProcess+0x60>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
    FATFS_LinkDriver(&USBH_Driver, USBDISKPath);
 8000b12:	490a      	ldr	r1, [pc, #40]	; (8000b3c <USBH_UserProcess+0x68>)
 8000b14:	480a      	ldr	r0, [pc, #40]	; (8000b40 <USBH_UserProcess+0x6c>)
 8000b16:	f008 fc2f 	bl	8009378 <FATFS_LinkDriver>
    f_mount(&USBH_fatfs, "", 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	4906      	ldr	r1, [pc, #24]	; (8000b38 <USBH_UserProcess+0x64>)
 8000b1e:	4809      	ldr	r0, [pc, #36]	; (8000b44 <USBH_UserProcess+0x70>)
 8000b20:	f007 fe7e 	bl	8008820 <f_mount>
    break;
 8000b24:	e002      	b.n	8000b2c <USBH_UserProcess+0x58>
    break;
 8000b26:	bf00      	nop
 8000b28:	e000      	b.n	8000b2c <USBH_UserProcess+0x58>
    break;
 8000b2a:	bf00      	nop
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000a08 	.word	0x20000a08
 8000b38:	0800e168 	.word	0x0800e168
 8000b3c:	20000508 	.word	0x20000508
 8000b40:	0800e91c 	.word	0x0800e91c
 8000b44:	20001288 	.word	0x20001288

08000b48 <initRxBuffer>:

void initRxBuffer() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    rxBuffer = (uint8_t*)malloc(buf_size * sizeof(uint8_t));
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <initRxBuffer+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f00c f997 	bl	800ce84 <malloc>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <initRxBuffer+0x44>)
 8000b5c:	601a      	str	r2, [r3, #0]
    memset(rxBuffer, 0, buf_size);
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <initRxBuffer+0x44>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <initRxBuffer+0x40>)
 8000b64:	6812      	ldr	r2, [r2, #0]
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f00c fc8f 	bl	800d48c <memset>
    if (rxBuffer == NULL) {
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <initRxBuffer+0x44>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d105      	bne.n	8000b82 <initRxBuffer+0x3a>
        // Gestione dell'errore di allocazione della memoria
        // Potresti voler stampare un messaggio di errore o terminare il programma
    	USBH_UsrLog("buffer error");
 8000b76:	4806      	ldr	r0, [pc, #24]	; (8000b90 <initRxBuffer+0x48>)
 8000b78:	f00c fb3a 	bl	800d1f0 <iprintf>
 8000b7c:	200a      	movs	r0, #10
 8000b7e:	f00c fb49 	bl	800d214 <putchar>
    }
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000f38 	.word	0x20000f38
 8000b8c:	20000b1c 	.word	0x20000b1c
 8000b90:	0800e16c 	.word	0x0800e16c

08000b94 <deinitRxBuffer>:

void deinitRxBuffer() {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    free(rxBuffer);
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <deinitRxBuffer+0x28>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00c f979 	bl	800ce94 <free>
    rxBuffer = NULL;
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <deinitRxBuffer+0x28>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
    buf_index = 0;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <deinitRxBuffer+0x2c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
    buf_size = RX_BUFFER_SIZE;
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <deinitRxBuffer+0x30>)
 8000bb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bb4:	601a      	str	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000b1c 	.word	0x20000b1c
 8000bc0:	20000f34 	.word	0x20000f34
 8000bc4:	20000f38 	.word	0x20000f38

08000bc8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8000bd0:	1d39      	adds	r1, r7, #4
 8000bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <__io_putchar+0x20>)
 8000bda:	f004 f913 	bl	8004e04 <HAL_UART_Transmit>

  return ch;
 8000bde:	687b      	ldr	r3, [r7, #4]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000a0c 	.word	0x20000a0c

08000bec <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0b8      	sub	sp, #224	; 0xe0
 8000bf0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  /* Configure LSE Drive Capability */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bf2:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <SystemClock_Config+0xe4>)
 8000bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bf8:	4a35      	ldr	r2, [pc, #212]	; (8000cd0 <SystemClock_Config+0xe4>)
 8000bfa:	f023 0318 	bic.w	r3, r3, #24
 8000bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Initialize the CPU, AHB and APB busses clocks */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000c02:	2316      	movs	r3, #22
 8000c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                    |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c16:	2310      	movs	r3, #16
 8000c18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000c28:	23b0      	movs	r3, #176	; 0xb0
 8000c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c34:	2302      	movs	r3, #2
 8000c36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c40:	230a      	movs	r3, #10
 8000c42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c46:	2307      	movs	r3, #7
 8000c48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 fdb7 	bl	80037d0 <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <SystemClock_Config+0x82>
  {
    Error_Handler("rcc error");
 8000c68:	481a      	ldr	r0, [pc, #104]	; (8000cd4 <SystemClock_Config+0xe8>)
 8000c6a:	f000 f88b 	bl	8000d84 <Error_Handler>
  }

  /* Initialize the CPU, AHB and APB busses clocks  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	230f      	movs	r3, #15
 8000c70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c74:	2303      	movs	r3, #3
 8000c76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c90:	2104      	movs	r1, #4
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 f978 	bl	8003f88 <HAL_RCC_ClockConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <SystemClock_Config+0xb8>
  {
    Error_Handler("clock error");
 8000c9e:	480e      	ldr	r0, [pc, #56]	; (8000cd8 <SystemClock_Config+0xec>)
 8000ca0:	f000 f870 	bl	8000d84 <Error_Handler>
  }

  /* Initialize the USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000caa:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000cae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f003 fb8c 	bl	80043d0 <HAL_RCCEx_PeriphCLKConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <SystemClock_Config+0xd8>
  {
    Error_Handler("periph error");
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <SystemClock_Config+0xf0>)
 8000cc0:	f000 f860 	bl	8000d84 <Error_Handler>
  }

  /* Enable MSI Auto calibration */
  HAL_RCCEx_EnableMSIPLLMode();
 8000cc4:	f003 fe6e 	bl	80049a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000cc8:	bf00      	nop
 8000cca:	37e0      	adds	r7, #224	; 0xe0
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	0800e200 	.word	0x0800e200
 8000cd8:	0800e20c 	.word	0x0800e20c
 8000cdc:	0800e218 	.word	0x0800e218

08000ce0 <MX_RTC_Init>:

	// HAL_UART_Receive_IT(&UartHandle,rxBuffer,1);

}

static void MX_RTC_Init(void){
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0

	 RTC_TimeTypeDef sTime = {0};
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
	 RTC_DateTypeDef sDate = {0};
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	603b      	str	r3, [r7, #0]

	 /** Attiva l'orologio LSE */
	    __HAL_RCC_LSE_CONFIG(RCC_LSE_ON);
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_RTC_Init+0x98>)
 8000cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <MX_RTC_Init+0x98>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d08:	bf00      	nop
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_RTC_Init+0x98>)
 8000d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d0f8      	beq.n	8000d0a <MX_RTC_Init+0x2a>
	    {
	    }

	    hrtc.Instance = RTC;
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_RTC_Init+0x9c>)
 8000d1a:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <MX_RTC_Init+0xa0>)
 8000d1c:	601a      	str	r2, [r3, #0]
	       hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_RTC_Init+0x9c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
	       hrtc.Init.AsynchPrediv = 127;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_RTC_Init+0x9c>)
 8000d26:	227f      	movs	r2, #127	; 0x7f
 8000d28:	609a      	str	r2, [r3, #8]
	       hrtc.Init.SynchPrediv = 255;
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_RTC_Init+0x9c>)
 8000d2c:	22ff      	movs	r2, #255	; 0xff
 8000d2e:	60da      	str	r2, [r3, #12]
	       hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_RTC_Init+0x9c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
	       hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_RTC_Init+0x9c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	615a      	str	r2, [r3, #20]
	       hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_RTC_Init+0x9c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
	       hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_RTC_Init+0x9c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	61da      	str	r2, [r3, #28]
	          {
	              Error_Handler("RTC_INIT error");
	          }*/

	       /** Inizializzazione data */
	           sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	703b      	strb	r3, [r7, #0]
	           sDate.Month = RTC_MONTH_JANUARY;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	707b      	strb	r3, [r7, #1]
	           sDate.Date = 1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	70bb      	strb	r3, [r7, #2]
	           sDate.Year = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	70fb      	strb	r3, [r7, #3]
	              {
	                  Error_Handler();
	              }*/

	              /** Inizializzazione ora */
	              sTime.Hours = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	713b      	strb	r3, [r7, #4]
	              sTime.Minutes = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	717b      	strb	r3, [r7, #5]
	              sTime.Seconds = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	71bb      	strb	r3, [r7, #6]
	              sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
	              sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
	                  Error_Handler("set time error");
	              }*/

	          //    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // Valore di backup arbitrario

}
 8000d6c:	bf00      	nop
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	200009e4 	.word	0x200009e4
 8000d80:	40002800 	.word	0x40002800

08000d84 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(const char *errorMessage)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

	USBH_UsrLog("Errore: %s", errorMessage);
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <Error_Handler+0x20>)
 8000d90:	f00c fa2e 	bl	800d1f0 <iprintf>
 8000d94:	200a      	movs	r0, #10
 8000d96:	f00c fa3d 	bl	800d214 <putchar>
  //while(1){}
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	0800e228 	.word	0x0800e228

08000da8 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b092      	sub	sp, #72	; 0x48
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  GPIO_InitTypeDef  GPIO_Init4Struct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8000db0:	4b48      	ldr	r3, [pc, #288]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db4:	4a47      	ldr	r2, [pc, #284]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000db6:	f043 0302 	orr.w	r3, r3, #2
 8000dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbc:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
  USARTx_RX_GPIO_CLK_ENABLE();
 8000dc8:	4b42      	ldr	r3, [pc, #264]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	4a41      	ldr	r2, [pc, #260]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd4:	4b3f      	ldr	r3, [pc, #252]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	69bb      	ldr	r3, [r7, #24]

  UARTx_TX_GPIO_CLK_ENABLE();
 8000de0:	4b3c      	ldr	r3, [pc, #240]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	4a3b      	ldr	r2, [pc, #236]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dec:	4b39      	ldr	r3, [pc, #228]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697b      	ldr	r3, [r7, #20]
  UARTx_RX_GPIO_CLK_ENABLE();
 8000df8:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	4a35      	ldr	r2, [pc, #212]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e04:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]

  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8000e10:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e14:	4a2f      	ldr	r2, [pc, #188]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]

  UARTx_CLK_ENABLE();
 8000e28:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2c:	4a29      	ldr	r2, [pc, #164]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000e2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e32:	6593      	str	r3, [r2, #88]	; 0x58
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <HAL_UART_MspInit+0x12c>)
 8000e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8000e40:	2340      	movs	r3, #64	; 0x40
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000e50:	2307      	movs	r3, #7
 8000e52:	647b      	str	r3, [r7, #68]	; 0x44

    GPIO_Init4Struct.Pin       = UARTx_TX_PIN;
 8000e54:	2301      	movs	r3, #1
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_Init4Struct.Mode      = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_Init4Struct.Pull      = GPIO_PULLUP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init4Struct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_Init4Struct.Alternate = UARTx_TX_AF;
 8000e64:	2308      	movs	r3, #8
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8000e68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	481a      	ldr	r0, [pc, #104]	; (8000ed8 <HAL_UART_MspInit+0x130>)
 8000e70:	f000 fdf8 	bl	8001a64 <HAL_GPIO_Init>

  HAL_GPIO_Init(UARTx_TX_GPIO_PORT, &GPIO_Init4Struct);
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f000 fdf1 	bl	8001a64 <HAL_GPIO_Init>


  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8000e86:	2307      	movs	r3, #7
 8000e88:	647b      	str	r3, [r7, #68]	; 0x44

  GPIO_Init4Struct.Pin = UARTx_RX_PIN;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	623b      	str	r3, [r7, #32]
  GPIO_Init4Struct.Alternate = UARTx_RX_AF;
 8000e8e:	2308      	movs	r3, #8
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000e92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e96:	4619      	mov	r1, r3
 8000e98:	480f      	ldr	r0, [pc, #60]	; (8000ed8 <HAL_UART_MspInit+0x130>)
 8000e9a:	f000 fde3 	bl	8001a64 <HAL_GPIO_Init>

  HAL_GPIO_Init(UARTx_RX_GPIO_PORT, &GPIO_Init4Struct);
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f000 fddc 	bl	8001a64 <HAL_GPIO_Init>

  /* USART1 interrupt Init */
     HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2025      	movs	r0, #37	; 0x25
 8000eb2:	f000 fd22 	bl	80018fa <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eb6:	2025      	movs	r0, #37	; 0x25
 8000eb8:	f000 fd3b 	bl	8001932 <HAL_NVIC_EnableIRQ>
   /* USER CODE BEGIN USART1_MspInit 1 */

     /* UART4 interrupt Init */
        HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2034      	movs	r0, #52	; 0x34
 8000ec2:	f000 fd1a 	bl	80018fa <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ec6:	2034      	movs	r0, #52	; 0x34
 8000ec8:	f000 fd33 	bl	8001932 <HAL_NVIC_EnableIRQ>
      /* USER CODE BEGIN UART4_MspInit 1 */

}
 8000ecc:	bf00      	nop
 8000ece:	3748      	adds	r7, #72	; 0x48
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	48000400 	.word	0x48000400

08000edc <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000f30:	f000 fbc4 	bl	80016bc <HAL_IncTick>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <OTG_FS_IRQHandler+0x10>)
 8000f3e:	f001 fa01 	bl	8002344 <HAL_HCD_IRQHandler>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000f44 	.word	0x20000f44

08000f4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(UART_HandleTypeDef *huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USART1_IRQn 0 */
if (huart->Instance == USART1){
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <USART1_IRQHandler+0x20>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d102      	bne.n	8000f64 <USART1_IRQHandler+0x18>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(USART1);
 8000f5e:	4803      	ldr	r0, [pc, #12]	; (8000f6c <USART1_IRQHandler+0x20>)
 8000f60:	f003 ffda 	bl	8004f18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  extern void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
}
  /* USER CODE END USART1_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40013800 	.word	0x40013800

08000f70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e00a      	b.n	8000f98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f82:	f3af 8000 	nop.w
 8000f86:	4601      	mov	r1, r0
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbf0      	blt.n	8000f82 <_read+0x12>
  }

  return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	e009      	b.n	8000fd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fdff 	bl	8000bc8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dbf1      	blt.n	8000fbc <_write+0x12>
  }
  return len;
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_close>:

int _close(int file)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100a:	605a      	str	r2, [r3, #4]
  return 0;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_isatty>:

int _isatty(int file)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f00c faaa 	bl	800d5d4 <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20018000 	.word	0x20018000
 80010ac:	00004000 	.word	0x00004000
 80010b0:	20000f40 	.word	0x20000f40
 80010b4:	20001848 	.word	0x20001848

080010b8 <HAL_HCD_MspInit>:
  * @brief  Initializes the HCD MSP.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hhcd)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;



  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <HAL_HCD_MspInit+0xc8>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c4:	4a2e      	ldr	r2, [pc, #184]	; (8001180 <HAL_HCD_MspInit+0xc8>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010cc:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <HAL_HCD_MspInit+0xc8>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]

  /* Configure USBOTG_PPWR GPIO */
  USBOTG_PPWR_GPIO_CLK_ENABLE();
 80010d8:	4b29      	ldr	r3, [pc, #164]	; (8001180 <HAL_HCD_MspInit+0xc8>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010dc:	4a28      	ldr	r2, [pc, #160]	; (8001180 <HAL_HCD_MspInit+0xc8>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_HCD_MspInit+0xc8>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 80010f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001102:	230a      	movs	r3, #10
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001110:	f000 fca8 	bl	8001a64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111a:	2312      	movs	r3, #18
 800111c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111e:	2301      	movs	r3, #1
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001122:	230a      	movs	r3, #10
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f000 fc98 	bl	8001a64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USBOTG_PPWR_GPIO_PIN;
 8001134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113e:	2301      	movs	r3, #1
 8001140:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USBOTG_PPWR_GPIO_PORT, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	480e      	ldr	r0, [pc, #56]	; (8001184 <HAL_HCD_MspInit+0xcc>)
 800114a:	f000 fc8b 	bl	8001a64 <HAL_GPIO_Init>



  /* Enable USB FS Clocks */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_HCD_MspInit+0xc8>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_HCD_MspInit+0xc8>)
 8001154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_HCD_MspInit+0xc8>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]

  /* Set USBFS Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	2043      	movs	r0, #67	; 0x43
 800116c:	f000 fbc5 	bl	80018fa <HAL_NVIC_SetPriority>

  /* Enable USBFS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001170:	2043      	movs	r0, #67	; 0x43
 8001172:	f000 fbde 	bl	8001932 <HAL_NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	48000c00 	.word	0x48000c00

08001188 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer (hhcd->pData);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8001196:	4618      	mov	r0, r3
 8001198:	f00a fe6d 	bl	800be76 <USBH_LL_IncTimer>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]

  USBH_LL_Connect(hhcd->pData);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80011b6:	4618      	mov	r0, r3
 80011b8:	f00a fea3 	bl	800bf02 <USBH_LL_Connect>

  /* Register the file system object to the FatFs module */
  if(f_mount(&USBH_fatfs, "", 0) != FR_OK)
 80011bc:	2200      	movs	r2, #0
 80011be:	490e      	ldr	r1, [pc, #56]	; (80011f8 <HAL_HCD_Connect_Callback+0x54>)
 80011c0:	480e      	ldr	r0, [pc, #56]	; (80011fc <HAL_HCD_Connect_Callback+0x58>)
 80011c2:	f007 fb2d 	bl	8008820 <f_mount>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_HCD_Connect_Callback+0x34>
  {
    USBH_UsrLog ("ERROR : Cannot Initialize FatFs! \n");
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <HAL_HCD_Connect_Callback+0x5c>)
 80011ce:	f00c f87d 	bl	800d2cc <puts>
 80011d2:	200a      	movs	r0, #10
 80011d4:	f00c f81e 	bl	800d214 <putchar>
  }

  for (i = 0; i< 200000; i ++)
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	e003      	b.n	80011e6 <HAL_HCD_Connect_Callback+0x42>
  {
    __asm ("nop");
 80011de:	bf00      	nop
  for (i = 0; i< 200000; i ++)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <HAL_HCD_Connect_Callback+0x60>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d9f7      	bls.n	80011de <HAL_HCD_Connect_Callback+0x3a>
  }
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	0800e234 	.word	0x0800e234
 80011fc:	20001288 	.word	0x20001288
 8001200:	0800e238 	.word	0x0800e238
 8001204:	00030d3f 	.word	0x00030d3f

08001208 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8001216:	4618      	mov	r0, r3
 8001218:	f00a fe8a 	bl	800bf30 <USBH_LL_Disconnect>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8001232:	4618      	mov	r0, r3
 8001234:	f00a fe49 	bl	800beca <USBH_LL_PortEnabled>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800124e:	4618      	mov	r0, r3
 8001250:	f00a fe49 	bl	800bee6 <USBH_LL_PortDisabled>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: Channel number
  * @param  urb_state: URB State
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]
 8001268:	4613      	mov	r3, r2
 800126a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <USBH_LL_Init>:
  *         Initialize the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Init (USBH_HandleTypeDef *phost)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Set the LL Driver parameters */
  hhcd.Instance = USB_OTG_FS;
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <USBH_LL_Init+0x64>)
 8001282:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001286:	601a      	str	r2, [r3, #0]
  hhcd.Init.Host_channels = 11;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <USBH_LL_Init+0x64>)
 800128a:	220b      	movs	r2, #11
 800128c:	609a      	str	r2, [r3, #8]
  hhcd.Init.dma_enable = 0;
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <USBH_LL_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hhcd.Init.low_power_enable = 0;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <USBH_LL_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <USBH_LL_Init+0x64>)
 800129c:	2202      	movs	r2, #2
 800129e:	619a      	str	r2, [r3, #24]
  hhcd.Init.Sof_enable = 0;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <USBH_LL_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  hhcd.Init.speed = HCD_SPEED_FULL;
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <USBH_LL_Init+0x64>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	611a      	str	r2, [r3, #16]
  /* Link the driver to the stack */
  hhcd.pData = phost;
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <USBH_LL_Init+0x64>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
  phost->pData = &hhcd;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <USBH_LL_Init+0x64>)
 80012b8:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
  /* Initialize the LL Driver */
  HAL_HCD_Init(&hhcd);
 80012bc:	4807      	ldr	r0, [pc, #28]	; (80012dc <USBH_LL_Init+0x64>)
 80012be:	f000 fd93 	bl	8001de8 <HAL_HCD_Init>

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd));
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <USBH_LL_Init+0x64>)
 80012c4:	f001 f9c5 	bl	8002652 <HAL_HCD_GetCurrentFrame>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4619      	mov	r1, r3
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f00a fdc3 	bl	800be58 <USBH_LL_SetTimer>

  return USBH_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000f44 	.word	0x20000f44

080012e0 <USBH_LL_Start>:
  *         Start the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_HCD_Start(phost->pData);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 f937 	bl	8002562 <HAL_HCD_Start>
  return USBH_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <USBH_LL_Stop>:
  *         Stop the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Stop (USBH_HandleTypeDef *phost)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 800130c:	4618      	mov	r0, r3
 800130e:	f001 f94b 	bl	80025a8 <HAL_HCD_Stop>
  return USBH_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <USBH_LL_GetSpeed>:
  *         Return the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed  (USBH_HandleTypeDef *phost)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 800132e:	4618      	mov	r0, r3
 8001330:	f001 f99d 	bl	800266e <HAL_HCD_GetCurrentSpeed>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d002      	beq.n	8001340 <USBH_LL_GetSpeed+0x24>
 800133a:	2b02      	cmp	r3, #2
 800133c:	d003      	beq.n	8001346 <USBH_LL_GetSpeed+0x2a>
 800133e:	e005      	b.n	800134c <USBH_LL_GetSpeed+0x30>
  {
  case 1:
    speed = USBH_SPEED_FULL;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
    break;
 8001344:	e005      	b.n	8001352 <USBH_LL_GetSpeed+0x36>

  case 2:
    speed = USBH_SPEED_LOW;
 8001346:	2302      	movs	r3, #2
 8001348:	73fb      	strb	r3, [r7, #15]
    break;
 800134a:	e002      	b.n	8001352 <USBH_LL_GetSpeed+0x36>

   default:
    speed = USBH_SPEED_FULL;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
    break;
 8001350:	bf00      	nop
  }
  return speed;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <USBH_LL_ResetPort>:
  *         Reset the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_HCD_ResetPort(phost->pData);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 800136a:	4618      	mov	r0, r3
 800136c:	f001 f939 	bl	80025e2 <HAL_HCD_ResetPort>
  return USBH_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize  (USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 800138c:	78fa      	ldrb	r2, [r7, #3]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f001 f949 	bl	8002628 <HAL_HCD_HC_GetXferCount>
 8001396:	4603      	mov	r3, r0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <USBH_LL_OpenPipe>:
                                      uint8_t epnum,
                                      uint8_t dev_address,
                                      uint8_t speed,
                                      uint8_t ep_type,
                                      uint16_t mps)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af04      	add	r7, sp, #16
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4603      	mov	r3, r0
 80013b0:	70fb      	strb	r3, [r7, #3]
 80013b2:	460b      	mov	r3, r1
 80013b4:	70bb      	strb	r3, [r7, #2]
 80013b6:	4613      	mov	r3, r2
 80013b8:	707b      	strb	r3, [r7, #1]
  HAL_HCD_HC_Init(phost->pData,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8d3 04d0 	ldr.w	r0, [r3, #1232]	; 0x4d0
 80013c0:	787c      	ldrb	r4, [r7, #1]
 80013c2:	78ba      	ldrb	r2, [r7, #2]
 80013c4:	78f9      	ldrb	r1, [r7, #3]
 80013c6:	8c3b      	ldrh	r3, [r7, #32]
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	7f3b      	ldrb	r3, [r7, #28]
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	7e3b      	ldrb	r3, [r7, #24]
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	4623      	mov	r3, r4
 80013d4:	f000 fd83 	bl	8001ede <HAL_HCD_HC_Init>
                  epnum,
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}

080013e2 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH Status
  */
USBH_StatusTypeDef   USBH_LL_ClosePipe   (USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	70fb      	strb	r3, [r7, #3]
  HAL_HCD_HC_Halt(phost->pData, pipe);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 80013f4:	78fa      	ldrb	r2, [r7, #3]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fe12 	bl	8002022 <HAL_HCD_HC_Halt>
  return USBH_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <USBH_LL_SubmitURB>:
                                            uint8_t ep_type,
                                            uint8_t token,
                                            uint8_t* pbuff,
                                            uint16_t length,
                                            uint8_t do_ping )
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b087      	sub	sp, #28
 800140c:	af04      	add	r7, sp, #16
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	4608      	mov	r0, r1
 8001412:	4611      	mov	r1, r2
 8001414:	461a      	mov	r2, r3
 8001416:	4603      	mov	r3, r0
 8001418:	70fb      	strb	r3, [r7, #3]
 800141a:	460b      	mov	r3, r1
 800141c:	70bb      	strb	r3, [r7, #2]
 800141e:	4613      	mov	r3, r2
 8001420:	707b      	strb	r3, [r7, #1]
  HAL_HCD_HC_SubmitRequest(phost->pData,
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f8d3 04d0 	ldr.w	r0, [r3, #1232]	; 0x4d0
 8001428:	787c      	ldrb	r4, [r7, #1]
 800142a:	78ba      	ldrb	r2, [r7, #2]
 800142c:	78f9      	ldrb	r1, [r7, #3]
 800142e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001432:	9303      	str	r3, [sp, #12]
 8001434:	8c3b      	ldrh	r3, [r7, #32]
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	7e3b      	ldrb	r3, [r7, #24]
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	4623      	mov	r3, r4
 8001442:	f000 fe11 	bl	8002068 <HAL_HCD_HC_SubmitRequest>
                           ep_type,
                           token,
                           pbuff,
                           length,
                           do_ping);
  return USBH_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bd90      	pop	{r4, r7, pc}

08001450 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef  USBH_LL_GetURBState (USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8001462:	78fa      	ldrb	r2, [r7, #3]
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f001 f8c9 	bl	80025fe <HAL_HCD_HC_GetURBState>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <USBH_LL_DriverVBUS>:
  *           1 : VBUS Inactive
  * @retval Status
  */

USBH_StatusTypeDef  USBH_LL_DriverVBUS (USBH_HandleTypeDef *phost, uint8_t state)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	70fb      	strb	r3, [r7, #3]
  if(state == 0)
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <USBH_LL_DriverVBUS+0x20>
  {
    /* Configure Low Charge pump */
    HAL_GPIO_WritePin(USBOTG_PPWR_GPIO_PORT, USBOTG_PPWR_GPIO_PIN, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001490:	4808      	ldr	r0, [pc, #32]	; (80014b4 <USBH_LL_DriverVBUS+0x3c>)
 8001492:	f000 fc91 	bl	8001db8 <HAL_GPIO_WritePin>
 8001496:	e005      	b.n	80014a4 <USBH_LL_DriverVBUS+0x2c>
  }
  else
  {
    /* Drive High Charge pump */
    HAL_GPIO_WritePin(USBOTG_PPWR_GPIO_PORT, USBOTG_PPWR_GPIO_PIN, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <USBH_LL_DriverVBUS+0x3c>)
 80014a0:	f000 fc8a 	bl	8001db8 <HAL_GPIO_WritePin>
  }

  HAL_Delay(200);
 80014a4:	20c8      	movs	r0, #200	; 0xc8
 80014a6:	f000 f929 	bl	80016fc <HAL_Delay>
  return USBH_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	48000c00 	.word	0x48000c00

080014b8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef   USBH_LL_SetToggle   (USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
 80014c4:	4613      	mov	r3, r2
 80014c6:	70bb      	strb	r3, [r7, #2]
  if(hhcd.hc[pipe].ep_is_in)
 80014c8:	78fa      	ldrb	r2, [r7, #3]
 80014ca:	4913      	ldr	r1, [pc, #76]	; (8001518 <USBH_LL_SetToggle+0x60>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	440b      	add	r3, r1
 80014d6:	333b      	adds	r3, #59	; 0x3b
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00a      	beq.n	80014f4 <USBH_LL_SetToggle+0x3c>
  {
    hhcd.hc[pipe].toggle_in = toggle;
 80014de:	78fa      	ldrb	r2, [r7, #3]
 80014e0:	490d      	ldr	r1, [pc, #52]	; (8001518 <USBH_LL_SetToggle+0x60>)
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	440b      	add	r3, r1
 80014ec:	3358      	adds	r3, #88	; 0x58
 80014ee:	78ba      	ldrb	r2, [r7, #2]
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e009      	b.n	8001508 <USBH_LL_SetToggle+0x50>
  }
  else
  {
    hhcd.hc[pipe].toggle_out = toggle;
 80014f4:	78fa      	ldrb	r2, [r7, #3]
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <USBH_LL_SetToggle+0x60>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	440b      	add	r3, r1
 8001502:	3359      	adds	r3, #89	; 0x59
 8001504:	78ba      	ldrb	r2, [r7, #2]
 8001506:	701a      	strb	r2, [r3, #0]
  }
  return USBH_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000f44 	.word	0x20000f44

0800151c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t  USBH_LL_GetToggle   (USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]

  if(hhcd.hc[pipe].ep_is_in)
 800152c:	78fa      	ldrb	r2, [r7, #3]
 800152e:	4913      	ldr	r1, [pc, #76]	; (800157c <USBH_LL_GetToggle+0x60>)
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	440b      	add	r3, r1
 800153a:	333b      	adds	r3, #59	; 0x3b
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00a      	beq.n	8001558 <USBH_LL_GetToggle+0x3c>
  {
    toggle = hhcd.hc[pipe].toggle_in;
 8001542:	78fa      	ldrb	r2, [r7, #3]
 8001544:	490d      	ldr	r1, [pc, #52]	; (800157c <USBH_LL_GetToggle+0x60>)
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	440b      	add	r3, r1
 8001550:	3358      	adds	r3, #88	; 0x58
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e009      	b.n	800156c <USBH_LL_GetToggle+0x50>
  }
  else
  {
    toggle = hhcd.hc[pipe].toggle_out;
 8001558:	78fa      	ldrb	r2, [r7, #3]
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <USBH_LL_GetToggle+0x60>)
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	440b      	add	r3, r1
 8001566:	3359      	adds	r3, #89	; 0x59
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000f44 	.word	0x20000f44

08001580 <USBH_Delay>:
  *         Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void  USBH_Delay (uint32_t Delay)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f8b7 	bl	80016fc <HAL_Delay>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <SystemInit+0x64>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	4a16      	ldr	r2, [pc, #88]	; (80015fc <SystemInit+0x64>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <SystemInit+0x68>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a13      	ldr	r2, [pc, #76]	; (8001600 <SystemInit+0x68>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <SystemInit+0x68>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <SystemInit+0x68>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <SystemInit+0x68>)
 80015c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <SystemInit+0x68>)
 80015d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <SystemInit+0x68>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <SystemInit+0x68>)
 80015dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <SystemInit+0x68>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SystemInit+0x64>)
 80015ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ee:	609a      	str	r2, [r3, #8]
#endif
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00
 8001600:	40021000 	.word	0x40021000

08001604 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160e:	2003      	movs	r0, #3
 8001610:	f000 f968 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001614:	2000      	movs	r0, #0
 8001616:	f000 f815 	bl	8001644 <HAL_InitTick>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	e001      	b.n	800162a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001626:	f000 f805 	bl	8001634 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800162a:	79fb      	ldrb	r3, [r7, #7]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_InitTick+0x6c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d023      	beq.n	80016a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_InitTick+0x70>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_InitTick+0x6c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f96d 	bl	800194e <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10f      	bne.n	800169a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d809      	bhi.n	8001694 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001688:	f000 f937 	bl	80018fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800168c:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <HAL_InitTick+0x74>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e007      	b.n	80016a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	e004      	b.n	80016a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	e001      	b.n	80016a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000000c 	.word	0x2000000c
 80016b4:	20000004 	.word	0x20000004
 80016b8:	20000008 	.word	0x20000008

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	2000000c 	.word	0x2000000c
 80016e0:	200014b8 	.word	0x200014b8

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	200014b8 	.word	0x200014b8

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff ffee 	bl	80016e4 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffde 	bl	80016e4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000000c 	.word	0x2000000c

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4907      	ldr	r1, [pc, #28]	; (80017e0 <__NVIC_EnableIRQ+0x38>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	; (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	; (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff29 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff3e 	bl	800178c <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff8e 	bl	8001838 <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5d 	bl	80017e4 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff31 	bl	80017a8 <__NVIC_EnableIRQ>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffa2 	bl	80018a0 <SysTick_Config>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001966:	b480      	push	{r7}
 8001968:	b085      	sub	sp, #20
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d008      	beq.n	8001990 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2204      	movs	r2, #4
 8001982:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e022      	b.n	80019d6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 020e 	bic.w	r2, r2, #14
 800199e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0201 	bic.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	f003 021c 	and.w	r2, r3, #28
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	2101      	movs	r1, #1
 80019be:	fa01 f202 	lsl.w	r2, r1, r2
 80019c2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d005      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2204      	movs	r2, #4
 80019fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e029      	b.n	8001a5a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 020e 	bic.w	r2, r2, #14
 8001a14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f003 021c 	and.w	r2, r3, #28
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	2101      	movs	r1, #1
 8001a34:	fa01 f202 	lsl.w	r2, r1, r2
 8001a38:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	4798      	blx	r3
    }
  }
  return status;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a72:	e17f      	b.n	8001d74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	4013      	ands	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8171 	beq.w	8001d6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d005      	beq.n	8001aa4 <HAL_GPIO_Init+0x40>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d130      	bne.n	8001b06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ada:	2201      	movs	r2, #1
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	f003 0201 	and.w	r2, r3, #1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d118      	bne.n	8001b44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	f003 0201 	and.w	r2, r3, #1
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d017      	beq.n	8001b80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d123      	bne.n	8001bd4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	6939      	ldr	r1, [r7, #16]
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80ac 	beq.w	8001d6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b5f      	ldr	r3, [pc, #380]	; (8001d94 <HAL_GPIO_Init+0x330>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1a:	4a5e      	ldr	r2, [pc, #376]	; (8001d94 <HAL_GPIO_Init+0x330>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6613      	str	r3, [r2, #96]	; 0x60
 8001c22:	4b5c      	ldr	r3, [pc, #368]	; (8001d94 <HAL_GPIO_Init+0x330>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c2e:	4a5a      	ldr	r2, [pc, #360]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c58:	d025      	beq.n	8001ca6 <HAL_GPIO_Init+0x242>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4f      	ldr	r2, [pc, #316]	; (8001d9c <HAL_GPIO_Init+0x338>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01f      	beq.n	8001ca2 <HAL_GPIO_Init+0x23e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4e      	ldr	r2, [pc, #312]	; (8001da0 <HAL_GPIO_Init+0x33c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d019      	beq.n	8001c9e <HAL_GPIO_Init+0x23a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4d      	ldr	r2, [pc, #308]	; (8001da4 <HAL_GPIO_Init+0x340>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_GPIO_Init+0x236>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4c      	ldr	r2, [pc, #304]	; (8001da8 <HAL_GPIO_Init+0x344>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00d      	beq.n	8001c96 <HAL_GPIO_Init+0x232>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4b      	ldr	r2, [pc, #300]	; (8001dac <HAL_GPIO_Init+0x348>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <HAL_GPIO_Init+0x22e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4a      	ldr	r2, [pc, #296]	; (8001db0 <HAL_GPIO_Init+0x34c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_GPIO_Init+0x22a>
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	e00c      	b.n	8001ca8 <HAL_GPIO_Init+0x244>
 8001c8e:	2307      	movs	r3, #7
 8001c90:	e00a      	b.n	8001ca8 <HAL_GPIO_Init+0x244>
 8001c92:	2305      	movs	r3, #5
 8001c94:	e008      	b.n	8001ca8 <HAL_GPIO_Init+0x244>
 8001c96:	2304      	movs	r3, #4
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x244>
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x244>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x244>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x244>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	f002 0203 	and.w	r2, r2, #3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cb8:	4937      	ldr	r1, [pc, #220]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <HAL_GPIO_Init+0x350>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cea:	4a32      	ldr	r2, [pc, #200]	; (8001db4 <HAL_GPIO_Init+0x350>)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cf0:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <HAL_GPIO_Init+0x350>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d14:	4a27      	ldr	r2, [pc, #156]	; (8001db4 <HAL_GPIO_Init+0x350>)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_GPIO_Init+0x350>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d3e:	4a1d      	ldr	r2, [pc, #116]	; (8001db4 <HAL_GPIO_Init+0x350>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_GPIO_Init+0x350>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <HAL_GPIO_Init+0x350>)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f47f ae78 	bne.w	8001a74 <HAL_GPIO_Init+0x10>
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010000 	.word	0x40010000
 8001d9c:	48000400 	.word	0x48000400
 8001da0:	48000800 	.word	0x48000800
 8001da4:	48000c00 	.word	0x48000c00
 8001da8:	48001000 	.word	0x48001000
 8001dac:	48001400 	.word	0x48001400
 8001db0:	48001800 	.word	0x48001800
 8001db4:	40010400 	.word	0x40010400

08001db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dea:	b08f      	sub	sp, #60	; 0x3c
 8001dec:	af0a      	add	r7, sp, #40	; 0x28
 8001dee:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e06d      	b.n	8001ed6 <HAL_HCD_Init+0xee>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d106      	bne.n	8001e1a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff f94f 	bl	80010b8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e28:	d102      	bne.n	8001e30 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f004 f8d3 	bl	8005fe0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	687e      	ldr	r6, [r7, #4]
 8001e42:	466d      	mov	r5, sp
 8001e44:	f106 0410 	add.w	r4, r6, #16
 8001e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e54:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e58:	1d33      	adds	r3, r6, #4
 8001e5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e5c:	6838      	ldr	r0, [r7, #0]
 8001e5e:	f004 f882 	bl	8005f66 <USB_CoreInit>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_HCD_Init+0x8c>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e030      	b.n	8001ed6 <HAL_HCD_Init+0xee>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2101      	movs	r1, #1
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f004 f8c1 	bl	8006002 <USB_SetCurrentMode>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_HCD_Init+0xaa>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e021      	b.n	8001ed6 <HAL_HCD_Init+0xee>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	687e      	ldr	r6, [r7, #4]
 8001e9a:	466d      	mov	r5, sp
 8001e9c:	f106 0410 	add.w	r4, r6, #16
 8001ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eac:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eb0:	1d33      	adds	r3, r6, #4
 8001eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb4:	6838      	ldr	r0, [r7, #0]
 8001eb6:	f004 fa5d 	bl	8006374 <USB_HostInit>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_HCD_Init+0xe4>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e004      	b.n	8001ed6 <HAL_HCD_Init+0xee>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ede <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001ede:	b590      	push	{r4, r7, lr}
 8001ee0:	b089      	sub	sp, #36	; 0x24
 8001ee2:	af04      	add	r7, sp, #16
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	4608      	mov	r0, r1
 8001ee8:	4611      	mov	r1, r2
 8001eea:	461a      	mov	r2, r3
 8001eec:	4603      	mov	r3, r0
 8001eee:	70fb      	strb	r3, [r7, #3]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70bb      	strb	r3, [r7, #2]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HCcharMps = mps;
 8001ef8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001efa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hhcd);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_HCD_HC_Init+0x2c>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e087      	b.n	800201a <HAL_HCD_HC_Init+0x13c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  hhcd->hc[ch_num].do_ping = 0U;
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	440b      	add	r3, r1
 8001f20:	333d      	adds	r3, #61	; 0x3d
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	440b      	add	r3, r1
 8001f34:	3338      	adds	r3, #56	; 0x38
 8001f36:	787a      	ldrb	r2, [r7, #1]
 8001f38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	440b      	add	r3, r1
 8001f48:	3339      	adds	r3, #57	; 0x39
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3340      	adds	r3, #64	; 0x40
 8001f5e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	78bb      	ldrb	r3, [r7, #2]
 8001f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f6c:	b2d8      	uxtb	r0, r3
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	440b      	add	r3, r1
 8001f7a:	333a      	adds	r3, #58	; 0x3a
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	4619      	mov	r1, r3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fb80 	bl	800268a <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001f8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	da0a      	bge.n	8001fa8 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	440b      	add	r3, r1
 8001fa0:	333b      	adds	r3, #59	; 0x3b
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e009      	b.n	8001fbc <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001fa8:	78fa      	ldrb	r2, [r7, #3]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	440b      	add	r3, r1
 8001fb6:	333b      	adds	r3, #59	; 0x3b
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	440b      	add	r3, r1
 8001fca:	333c      	adds	r3, #60	; 0x3c
 8001fcc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fd0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	b298      	uxth	r0, r3
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3342      	adds	r3, #66	; 0x42
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	787c      	ldrb	r4, [r7, #1]
 8001ff4:	78ba      	ldrb	r2, [r7, #2]
 8001ff6:	78f9      	ldrb	r1, [r7, #3]
 8001ff8:	9302      	str	r3, [sp, #8]
 8001ffa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	4623      	mov	r3, r4
 8002008:	f004 fafe 	bl	8006608 <USB_HC_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	72fb      	strb	r3, [r7, #11]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return status;
 8002018:	7afb      	ldrb	r3, [r7, #11]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bd90      	pop	{r4, r7, pc}

08002022 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	460b      	mov	r3, r1
 800202c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_HCD_HC_Halt+0x1e>
 800203c:	2302      	movs	r3, #2
 800203e:	e00f      	b.n	8002060 <HAL_HCD_HC_Halt+0x3e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f004 fcee 	bl	8006a32 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return status;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	4608      	mov	r0, r1
 8002072:	4611      	mov	r1, r2
 8002074:	461a      	mov	r2, r3
 8002076:	4603      	mov	r3, r0
 8002078:	70fb      	strb	r3, [r7, #3]
 800207a:	460b      	mov	r3, r1
 800207c:	70bb      	strb	r3, [r7, #2]
 800207e:	4613      	mov	r3, r2
 8002080:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	440b      	add	r3, r1
 8002090:	333b      	adds	r3, #59	; 0x3b
 8002092:	78ba      	ldrb	r2, [r7, #2]
 8002094:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	440b      	add	r3, r1
 80020a4:	3340      	adds	r3, #64	; 0x40
 80020a6:	787a      	ldrb	r2, [r7, #1]
 80020a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80020aa:	7c3b      	ldrb	r3, [r7, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d114      	bne.n	80020da <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	440b      	add	r3, r1
 80020be:	3344      	adds	r3, #68	; 0x44
 80020c0:	2203      	movs	r2, #3
 80020c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	440b      	add	r3, r1
 80020d2:	333d      	adds	r3, #61	; 0x3d
 80020d4:	7f3a      	ldrb	r2, [r7, #28]
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	e009      	b.n	80020ee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	440b      	add	r3, r1
 80020e8:	3344      	adds	r3, #68	; 0x44
 80020ea:	2202      	movs	r2, #2
 80020ec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020ee:	787b      	ldrb	r3, [r7, #1]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	f200 80d6 	bhi.w	80022a2 <HAL_HCD_HC_SubmitRequest+0x23a>
 80020f6:	a201      	add	r2, pc, #4	; (adr r2, 80020fc <HAL_HCD_HC_SubmitRequest+0x94>)
 80020f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fc:	0800210d 	.word	0x0800210d
 8002100:	0800228d 	.word	0x0800228d
 8002104:	08002179 	.word	0x08002179
 8002108:	08002203 	.word	0x08002203
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800210c:	7c3b      	ldrb	r3, [r7, #16]
 800210e:	2b01      	cmp	r3, #1
 8002110:	f040 80c9 	bne.w	80022a6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (direction == 0U)
 8002114:	78bb      	ldrb	r3, [r7, #2]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 80c5 	bne.w	80022a6 <HAL_HCD_HC_SubmitRequest+0x23e>
        {
          if (length == 0U)
 800211c:	8b3b      	ldrh	r3, [r7, #24]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_HCD_HC_SubmitRequest+0xce>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	440b      	add	r3, r1
 8002130:	3359      	adds	r3, #89	; 0x59
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	440b      	add	r3, r1
 8002144:	3359      	adds	r3, #89	; 0x59
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10a      	bne.n	8002162 <HAL_HCD_HC_SubmitRequest+0xfa>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	440b      	add	r3, r1
 800215a:	3344      	adds	r3, #68	; 0x44
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
            /* Put the PID 1 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
          }
        }
      }
      break;
 8002160:	e0a1      	b.n	80022a6 <HAL_HCD_HC_SubmitRequest+0x23e>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	440b      	add	r3, r1
 8002170:	3344      	adds	r3, #68	; 0x44
 8002172:	2202      	movs	r2, #2
 8002174:	701a      	strb	r2, [r3, #0]
      break;
 8002176:	e096      	b.n	80022a6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002178:	78bb      	ldrb	r3, [r7, #2]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d120      	bne.n	80021c0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	440b      	add	r3, r1
 800218c:	3359      	adds	r3, #89	; 0x59
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	440b      	add	r3, r1
 80021a2:	3344      	adds	r3, #68	; 0x44
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80021a8:	e07e      	b.n	80022a8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	440b      	add	r3, r1
 80021b8:	3344      	adds	r3, #68	; 0x44
 80021ba:	2202      	movs	r2, #2
 80021bc:	701a      	strb	r2, [r3, #0]
      break;
 80021be:	e073      	b.n	80022a8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	440b      	add	r3, r1
 80021ce:	3358      	adds	r3, #88	; 0x58
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10a      	bne.n	80021ec <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	440b      	add	r3, r1
 80021e4:	3344      	adds	r3, #68	; 0x44
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
      break;
 80021ea:	e05d      	b.n	80022a8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	440b      	add	r3, r1
 80021fa:	3344      	adds	r3, #68	; 0x44
 80021fc:	2202      	movs	r2, #2
 80021fe:	701a      	strb	r2, [r3, #0]
      break;
 8002200:	e052      	b.n	80022a8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002202:	78bb      	ldrb	r3, [r7, #2]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d120      	bne.n	800224a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002208:	78fa      	ldrb	r2, [r7, #3]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	440b      	add	r3, r1
 8002216:	3359      	adds	r3, #89	; 0x59
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10a      	bne.n	8002234 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	440b      	add	r3, r1
 800222c:	3344      	adds	r3, #68	; 0x44
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002232:	e039      	b.n	80022a8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	440b      	add	r3, r1
 8002242:	3344      	adds	r3, #68	; 0x44
 8002244:	2202      	movs	r2, #2
 8002246:	701a      	strb	r2, [r3, #0]
      break;
 8002248:	e02e      	b.n	80022a8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	440b      	add	r3, r1
 8002258:	3358      	adds	r3, #88	; 0x58
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	440b      	add	r3, r1
 800226e:	3344      	adds	r3, #68	; 0x44
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
      break;
 8002274:	e018      	b.n	80022a8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	440b      	add	r3, r1
 8002284:	3344      	adds	r3, #68	; 0x44
 8002286:	2202      	movs	r2, #2
 8002288:	701a      	strb	r2, [r3, #0]
      break;
 800228a:	e00d      	b.n	80022a8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	440b      	add	r3, r1
 800229a:	3344      	adds	r3, #68	; 0x44
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
      break;
 80022a0:	e002      	b.n	80022a8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80022a2:	bf00      	nop
 80022a4:	e000      	b.n	80022a8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80022a6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	440b      	add	r3, r1
 80022b6:	3348      	adds	r3, #72	; 0x48
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	8b39      	ldrh	r1, [r7, #24]
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	4403      	add	r3, r0
 80022cc:	3350      	adds	r3, #80	; 0x50
 80022ce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	440b      	add	r3, r1
 80022de:	3364      	adds	r3, #100	; 0x64
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	440b      	add	r3, r1
 80022f2:	3354      	adds	r3, #84	; 0x54
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	440b      	add	r3, r1
 8002306:	3339      	adds	r3, #57	; 0x39
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	440b      	add	r3, r1
 800231a:	3365      	adds	r3, #101	; 0x65
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	3338      	adds	r3, #56	; 0x38
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	4619      	mov	r1, r3
 8002336:	f004 fa73 	bl	8006820 <USB_HC_StartXfer>
 800233a:	4603      	mov	r3, r0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f003 ffc8 	bl	80062f0 <USB_GetMode>
 8002360:	4603      	mov	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	f040 80fa 	bne.w	800255c <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f003 ff8b 	bl	8006288 <USB_ReadInterrupts>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80f0 	beq.w	800255a <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 ff82 	bl	8006288 <USB_ReadInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800238e:	d104      	bne.n	800239a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002398:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 ff72 	bl	8006288 <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ae:	d104      	bne.n	80023ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 ff62 	bl	8006288 <USB_ReadInterrupts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023ce:	d104      	bne.n	80023da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 ff52 	bl	8006288 <USB_ReadInterrupts>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d103      	bne.n	80023f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2202      	movs	r2, #2
 80023f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 ff44 	bl	8006288 <USB_ReadInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800240a:	d120      	bne.n	800244e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002414:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d113      	bne.n	800244e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002426:	2110      	movs	r1, #16
 8002428:	6938      	ldr	r0, [r7, #16]
 800242a:	f003 fe37 	bl	800609c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800242e:	6938      	ldr	r0, [r7, #16]
 8002430:	f003 fe68 	bl	8006104 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d105      	bne.n	8002448 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2101      	movs	r1, #1
 8002442:	4618      	mov	r0, r3
 8002444:	f004 f818 	bl	8006478 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7fe fedd 	bl	8001208 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f003 ff18 	bl	8006288 <USB_ReadInterrupts>
 8002458:	4603      	mov	r3, r0
 800245a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800245e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002462:	d102      	bne.n	800246a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f001 f921 	bl	80036ac <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f003 ff0a 	bl	8006288 <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b08      	cmp	r3, #8
 800247c:	d106      	bne.n	800248c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fe82 	bl	8001188 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2208      	movs	r2, #8
 800248a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f003 fef9 	bl	8006288 <USB_ReadInterrupts>
 8002496:	4603      	mov	r3, r0
 8002498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024a0:	d138      	bne.n	8002514 <HAL_HCD_IRQHandler+0x1d0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f004 fab2 	bl	8006a10 <USB_HC_ReadInterrupt>
 80024ac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	e025      	b.n	8002500 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d018      	beq.n	80024fa <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024de:	d106      	bne.n	80024ee <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	4619      	mov	r1, r3
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8f0 	bl	80026cc <HCD_HC_IN_IRQHandler>
 80024ec:	e005      	b.n	80024fa <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	4619      	mov	r1, r3
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fd24 	bl	8002f42 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3301      	adds	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	429a      	cmp	r2, r3
 8002508:	d3d4      	bcc.n	80024b4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002512:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f003 feb5 	bl	8006288 <USB_ReadInterrupts>
 800251e:	4603      	mov	r3, r0
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b10      	cmp	r3, #16
 8002526:	d101      	bne.n	800252c <HAL_HCD_IRQHandler+0x1e8>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <HAL_HCD_IRQHandler+0x1ea>
 800252c:	2300      	movs	r3, #0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d014      	beq.n	800255c <HAL_HCD_IRQHandler+0x218>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0210 	bic.w	r2, r2, #16
 8002540:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 ffd3 	bl	80034ee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0210 	orr.w	r2, r2, #16
 8002556:	619a      	str	r2, [r3, #24]
 8002558:	e000      	b.n	800255c <HAL_HCD_IRQHandler+0x218>
      return;
 800255a:	bf00      	nop
    }
  }
}
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_HCD_Start+0x16>
 8002574:	2302      	movs	r3, #2
 8002576:	e013      	b.n	80025a0 <HAL_HCD_Start+0x3e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2101      	movs	r1, #1
 8002586:	4618      	mov	r0, r3
 8002588:	f003 ffdd 	bl	8006546 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f003 fd14 	bl	8005fbe <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_HCD_Stop+0x16>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e00d      	b.n	80025da <HAL_HCD_Stop+0x32>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  (void)USB_StopHost(hhcd->Instance);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f004 fb51 	bl	8006c72 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f003 ff7f 	bl	80064f2 <USB_ResetPort>
 80025f4:	4603      	mov	r3, r0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	460b      	mov	r3, r1
 8002608:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	440b      	add	r3, r1
 8002618:	3364      	adds	r3, #100	; 0x64
 800261a:	781b      	ldrb	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	440b      	add	r3, r1
 8002642:	3354      	adds	r3, #84	; 0x54
 8002644:	681b      	ldr	r3, [r3, #0]
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f003 ffc1 	bl	80065e6 <USB_GetCurrentFrame>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f003 ff9c 	bl	80065b8 <USB_GetHostSpeed>
 8002680:	4603      	mov	r3, r0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	440b      	add	r3, r1
 80026a4:	333f      	adds	r3, #63	; 0x3f
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80026aa:	78fa      	ldrb	r2, [r7, #3]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	440b      	add	r3, r1
 80026b8:	333e      	adds	r3, #62	; 0x3e
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 fddf 	bl	80062ae <USB_ReadChInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d11a      	bne.n	8002730 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	461a      	mov	r2, r3
 8002708:	2304      	movs	r3, #4
 800270a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	440b      	add	r3, r1
 800271a:	3365      	adds	r3, #101	; 0x65
 800271c:	2207      	movs	r2, #7
 800271e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f004 f982 	bl	8006a32 <USB_HC_Halt>
 800272e:	e09e      	b.n	800286e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f003 fdb8 	bl	80062ae <USB_ReadChInterrupts>
 800273e:	4603      	mov	r3, r0
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002748:	d11b      	bne.n	8002782 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	461a      	mov	r2, r3
 8002758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800275c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	440b      	add	r3, r1
 800276c:	3365      	adds	r3, #101	; 0x65
 800276e:	2208      	movs	r2, #8
 8002770:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f004 f959 	bl	8006a32 <USB_HC_Halt>
 8002780:	e075      	b.n	800286e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f003 fd8f 	bl	80062ae <USB_ReadChInterrupts>
 8002790:	4603      	mov	r3, r0
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b08      	cmp	r3, #8
 8002798:	d11a      	bne.n	80027d0 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	461a      	mov	r2, r3
 80027a8:	2308      	movs	r3, #8
 80027aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4413      	add	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	440b      	add	r3, r1
 80027ba:	3365      	adds	r3, #101	; 0x65
 80027bc:	2206      	movs	r2, #6
 80027be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f004 f932 	bl	8006a32 <USB_HC_Halt>
 80027ce:	e04e      	b.n	800286e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f003 fd68 	bl	80062ae <USB_ReadChInterrupts>
 80027de:	4603      	mov	r3, r0
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e8:	d11b      	bne.n	8002822 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f6:	461a      	mov	r2, r3
 80027f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	440b      	add	r3, r1
 800280c:	3365      	adds	r3, #101	; 0x65
 800280e:	2209      	movs	r2, #9
 8002810:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f004 f909 	bl	8006a32 <USB_HC_Halt>
 8002820:	e025      	b.n	800286e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f003 fd3f 	bl	80062ae <USB_ReadChInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002836:	2b80      	cmp	r3, #128	; 0x80
 8002838:	d119      	bne.n	800286e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	461a      	mov	r2, r3
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	440b      	add	r3, r1
 800285a:	3365      	adds	r3, #101	; 0x65
 800285c:	2207      	movs	r2, #7
 800285e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f004 f8e2 	bl	8006a32 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fd19 	bl	80062ae <USB_ReadChInterrupts>
 800287c:	4603      	mov	r3, r0
 800287e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002886:	d111      	bne.n	80028ac <HCD_HC_IN_IRQHandler+0x1e0>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f004 f8ce 	bl	8006a32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	461a      	mov	r2, r3
 80028a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a8:	6093      	str	r3, [r2, #8]
 80028aa:	e347      	b.n	8002f3c <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 fcfa 	bl	80062ae <USB_ReadChInterrupts>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	f040 80d8 	bne.w	8002a76 <HCD_HC_IN_IRQHandler+0x3aa>
  {
    hhcd->hc[chnum].state = HC_XFRC;
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	440b      	add	r3, r1
 80028d4:	3365      	adds	r3, #101	; 0x65
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	440b      	add	r3, r1
 80028e8:	3360      	adds	r3, #96	; 0x60
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80028ee:	78fb      	ldrb	r3, [r7, #3]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	461a      	mov	r2, r3
 80028fc:	2301      	movs	r3, #1
 80028fe:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	440b      	add	r3, r1
 800290e:	3340      	adds	r3, #64	; 0x40
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HCD_HC_IN_IRQHandler+0x260>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	440b      	add	r3, r1
 8002924:	3340      	adds	r3, #64	; 0x40
 8002926:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002928:	2b02      	cmp	r3, #2
 800292a:	d110      	bne.n	800294e <HCD_HC_IN_IRQHandler+0x282>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f004 f87c 	bl	8006a32 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	461a      	mov	r2, r3
 8002948:	2310      	movs	r3, #16
 800294a:	6093      	str	r3, [r2, #8]
 800294c:	e03d      	b.n	80029ca <HCD_HC_IN_IRQHandler+0x2fe>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	440b      	add	r3, r1
 800295c:	3340      	adds	r3, #64	; 0x40
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d00a      	beq.n	800297a <HCD_HC_IN_IRQHandler+0x2ae>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	440b      	add	r3, r1
 8002972:	3340      	adds	r3, #64	; 0x40
 8002974:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002976:	2b01      	cmp	r3, #1
 8002978:	d127      	bne.n	80029ca <HCD_HC_IN_IRQHandler+0x2fe>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	0151      	lsls	r1, r2, #5
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	440a      	add	r2, r1
 8002990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002994:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002998:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	440b      	add	r3, r1
 80029a8:	3364      	adds	r3, #100	; 0x64
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4413      	add	r3, r2
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	440b      	add	r3, r1
 80029bc:	3364      	adds	r3, #100	; 0x64
 80029be:	781a      	ldrb	r2, [r3, #0]
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	4619      	mov	r1, r3
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7fe fc49 	bl	800125c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d13a      	bne.n	8002a48 <HCD_HC_IN_IRQHandler+0x37c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	440b      	add	r3, r1
 80029e0:	3354      	adds	r3, #84	; 0x54
 80029e2:	6819      	ldr	r1, [r3, #0]
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	4403      	add	r3, r0
 80029f2:	3342      	adds	r3, #66	; 0x42
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	440b      	add	r3, r1
 80029f8:	1e59      	subs	r1, r3, #1
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	4403      	add	r3, r0
 8002a08:	3342      	adds	r3, #66	; 0x42
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8291 	beq.w	8002f3c <HCD_HC_IN_IRQHandler+0x870>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	4413      	add	r3, r2
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	440b      	add	r3, r1
 8002a28:	3358      	adds	r3, #88	; 0x58
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	f083 0301 	eor.w	r3, r3, #1
 8002a32:	b2d8      	uxtb	r0, r3
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	440b      	add	r3, r1
 8002a40:	3358      	adds	r3, #88	; 0x58
 8002a42:	4602      	mov	r2, r0
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e279      	b.n	8002f3c <HCD_HC_IN_IRQHandler+0x870>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	440b      	add	r3, r1
 8002a56:	3358      	adds	r3, #88	; 0x58
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	f083 0301 	eor.w	r3, r3, #1
 8002a60:	b2d8      	uxtb	r0, r3
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3358      	adds	r3, #88	; 0x58
 8002a70:	4602      	mov	r2, r0
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e262      	b.n	8002f3c <HCD_HC_IN_IRQHandler+0x870>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 fc15 	bl	80062ae <USB_ReadChInterrupts>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	d109      	bne.n	8002aa2 <HCD_HC_IN_IRQHandler+0x3d6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	6093      	str	r3, [r2, #8]
 8002aa0:	e24c      	b.n	8002f3c <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 fbff 	bl	80062ae <USB_ReadChInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	f040 81a0 	bne.w	8002dfc <HCD_HC_IN_IRQHandler+0x730>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2302      	movs	r3, #2
 8002acc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	440b      	add	r3, r1
 8002adc:	3365      	adds	r3, #101	; 0x65
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d114      	bne.n	8002b0e <HCD_HC_IN_IRQHandler+0x442>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4413      	add	r3, r2
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	440b      	add	r3, r1
 8002af2:	3365      	adds	r3, #101	; 0x65
 8002af4:	2202      	movs	r2, #2
 8002af6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	440b      	add	r3, r1
 8002b06:	3364      	adds	r3, #100	; 0x64
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e167      	b.n	8002dde <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3365      	adds	r3, #101	; 0x65
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b06      	cmp	r3, #6
 8002b22:	d114      	bne.n	8002b4e <HCD_HC_IN_IRQHandler+0x482>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	440b      	add	r3, r1
 8002b32:	3365      	adds	r3, #101	; 0x65
 8002b34:	2202      	movs	r2, #2
 8002b36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	440b      	add	r3, r1
 8002b46:	3364      	adds	r3, #100	; 0x64
 8002b48:	2205      	movs	r2, #5
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	e147      	b.n	8002dde <HCD_HC_IN_IRQHandler+0x712>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3365      	adds	r3, #101	; 0x65
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b07      	cmp	r3, #7
 8002b62:	d00a      	beq.n	8002b7a <HCD_HC_IN_IRQHandler+0x4ae>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	440b      	add	r3, r1
 8002b72:	3365      	adds	r3, #101	; 0x65
 8002b74:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002b76:	2b09      	cmp	r3, #9
 8002b78:	d176      	bne.n	8002c68 <HCD_HC_IN_IRQHandler+0x59c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b7a:	78fa      	ldrb	r2, [r7, #3]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	440b      	add	r3, r1
 8002b88:	3365      	adds	r3, #101	; 0x65
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3360      	adds	r3, #96	; 0x60
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	1c59      	adds	r1, r3, #1
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	4403      	add	r3, r0
 8002bae:	3360      	adds	r3, #96	; 0x60
 8002bb0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3360      	adds	r3, #96	; 0x60
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d914      	bls.n	8002bf2 <HCD_HC_IN_IRQHandler+0x526>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3360      	adds	r3, #96	; 0x60
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	440b      	add	r3, r1
 8002bea:	3364      	adds	r3, #100	; 0x64
 8002bec:	2204      	movs	r2, #4
 8002bee:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002bf0:	e0f4      	b.n	8002ddc <HCD_HC_IN_IRQHandler+0x710>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	440b      	add	r3, r1
 8002c00:	3364      	adds	r3, #100	; 0x64
 8002c02:	2202      	movs	r2, #2
 8002c04:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	440b      	add	r3, r1
 8002c14:	3340      	adds	r3, #64	; 0x40
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <HCD_HC_IN_IRQHandler+0x568>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	440b      	add	r3, r1
 8002c2a:	3340      	adds	r3, #64	; 0x40
 8002c2c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	f040 80d4 	bne.w	8002ddc <HCD_HC_IN_IRQHandler+0x710>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c4a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c52:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c60:	461a      	mov	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c66:	e0b9      	b.n	8002ddc <HCD_HC_IN_IRQHandler+0x710>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	440b      	add	r3, r1
 8002c76:	3365      	adds	r3, #101	; 0x65
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d10a      	bne.n	8002c94 <HCD_HC_IN_IRQHandler+0x5c8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3365      	adds	r3, #101	; 0x65
 8002c8e:	2202      	movs	r2, #2
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e0a4      	b.n	8002dde <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3365      	adds	r3, #101	; 0x65
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d10a      	bne.n	8002cc0 <HCD_HC_IN_IRQHandler+0x5f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3365      	adds	r3, #101	; 0x65
 8002cba:	2202      	movs	r2, #2
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e08e      	b.n	8002dde <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	440b      	add	r3, r1
 8002cce:	3365      	adds	r3, #101	; 0x65
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d143      	bne.n	8002d5e <HCD_HC_IN_IRQHandler+0x692>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3365      	adds	r3, #101	; 0x65
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3364      	adds	r3, #100	; 0x64
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4413      	add	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3340      	adds	r3, #64	; 0x40
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HCD_HC_IN_IRQHandler+0x65e>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	440b      	add	r3, r1
 8002d22:	3340      	adds	r3, #64	; 0x40
 8002d24:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d159      	bne.n	8002dde <HCD_HC_IN_IRQHandler+0x712>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d40:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d48:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d56:	461a      	mov	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	e03f      	b.n	8002dde <HCD_HC_IN_IRQHandler+0x712>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4413      	add	r3, r2
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3365      	adds	r3, #101	; 0x65
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d126      	bne.n	8002dc2 <HCD_HC_IN_IRQHandler+0x6f6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	440b      	add	r3, r1
 8002d82:	3365      	adds	r3, #101	; 0x65
 8002d84:	2202      	movs	r2, #2
 8002d86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	440b      	add	r3, r1
 8002d96:	3360      	adds	r3, #96	; 0x60
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	1c59      	adds	r1, r3, #1
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	4403      	add	r3, r0
 8002da8:	3360      	adds	r3, #96	; 0x60
 8002daa:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	440b      	add	r3, r1
 8002dba:	3364      	adds	r3, #100	; 0x64
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e00d      	b.n	8002dde <HCD_HC_IN_IRQHandler+0x712>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	440b      	add	r3, r1
 8002dd0:	3365      	adds	r3, #101	; 0x65
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	f000 80b0 	beq.w	8002f3a <HCD_HC_IN_IRQHandler+0x86e>
 8002dda:	e000      	b.n	8002dde <HCD_HC_IN_IRQHandler+0x712>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ddc:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	440b      	add	r3, r1
 8002dec:	3364      	adds	r3, #100	; 0x64
 8002dee:	781a      	ldrb	r2, [r3, #0]
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7fe fa31 	bl	800125c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002dfa:	e09f      	b.n	8002f3c <HCD_HC_IN_IRQHandler+0x870>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 fa52 	bl	80062ae <USB_ReadChInterrupts>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d124      	bne.n	8002e5e <HCD_HC_IN_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	461a      	mov	r2, r3
 8002e22:	2340      	movs	r3, #64	; 0x40
 8002e24:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	440b      	add	r3, r1
 8002e34:	3365      	adds	r3, #101	; 0x65
 8002e36:	2205      	movs	r2, #5
 8002e38:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	440b      	add	r3, r1
 8002e48:	3360      	adds	r3, #96	; 0x60
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f003 fdeb 	bl	8006a32 <USB_HC_Halt>
 8002e5c:	e06e      	b.n	8002f3c <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 fa21 	bl	80062ae <USB_ReadChInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d162      	bne.n	8002f3c <HCD_HC_IN_IRQHandler+0x870>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	440b      	add	r3, r1
 8002e84:	3340      	adds	r3, #64	; 0x40
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d11b      	bne.n	8002ec4 <HCD_HC_IN_IRQHandler+0x7f8>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	440b      	add	r3, r1
 8002e9a:	3360      	adds	r3, #96	; 0x60
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	440b      	add	r3, r1
 8002eae:	3365      	adds	r3, #101	; 0x65
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 fdb8 	bl	8006a32 <USB_HC_Halt>
 8002ec2:	e030      	b.n	8002f26 <HCD_HC_IN_IRQHandler+0x85a>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3340      	adds	r3, #64	; 0x40
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HCD_HC_IN_IRQHandler+0x824>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3340      	adds	r3, #64	; 0x40
 8002eea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d11a      	bne.n	8002f26 <HCD_HC_IN_IRQHandler+0x85a>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	440b      	add	r3, r1
 8002efe:	3360      	adds	r3, #96	; 0x60
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	440b      	add	r3, r1
 8002f12:	3365      	adds	r3, #101	; 0x65
 8002f14:	2204      	movs	r2, #4
 8002f16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f003 fd86 	bl	8006a32 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f32:	461a      	mov	r2, r3
 8002f34:	2310      	movs	r3, #16
 8002f36:	6093      	str	r3, [r2, #8]
 8002f38:	e000      	b.n	8002f3c <HCD_HC_IN_IRQHandler+0x870>
        return;
 8002f3a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 f9a4 	bl	80062ae <USB_ReadChInterrupts>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d11a      	bne.n	8002fa6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2304      	movs	r3, #4
 8002f80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4413      	add	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	440b      	add	r3, r1
 8002f90:	3365      	adds	r3, #101	; 0x65
 8002f92:	2207      	movs	r2, #7
 8002f94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f003 fd47 	bl	8006a32 <USB_HC_Halt>
 8002fa4:	e2a0      	b.n	80034e8 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 f97d 	bl	80062ae <USB_ReadChInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d109      	bne.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x90>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2320      	movs	r3, #32
 8002fce:	6093      	str	r3, [r2, #8]
 8002fd0:	e28a      	b.n	80034e8 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f003 f967 	bl	80062ae <USB_ReadChInterrupts>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fea:	d111      	bne.n	8003010 <HCD_HC_OUT_IRQHandler+0xce>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ffe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f003 fd12 	bl	8006a32 <USB_HC_Halt>
 800300e:	e26b      	b.n	80034e8 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f003 f948 	bl	80062ae <USB_ReadChInterrupts>
 800301e:	4603      	mov	r3, r0
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d124      	bne.n	8003072 <HCD_HC_OUT_IRQHandler+0x130>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	440b      	add	r3, r1
 8003036:	3360      	adds	r3, #96	; 0x60
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003048:	461a      	mov	r2, r3
 800304a:	2301      	movs	r3, #1
 800304c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	440b      	add	r3, r1
 800305c:	3365      	adds	r3, #101	; 0x65
 800305e:	2201      	movs	r2, #1
 8003060:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f003 fce1 	bl	8006a32 <USB_HC_Halt>
 8003070:	e23a      	b.n	80034e8 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f003 f917 	bl	80062ae <USB_ReadChInterrupts>
 8003080:	4603      	mov	r3, r0
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b08      	cmp	r3, #8
 8003088:	d11a      	bne.n	80030c0 <HCD_HC_OUT_IRQHandler+0x17e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4413      	add	r3, r2
 8003092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003096:	461a      	mov	r2, r3
 8003098:	2308      	movs	r3, #8
 800309a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	440b      	add	r3, r1
 80030aa:	3365      	adds	r3, #101	; 0x65
 80030ac:	2206      	movs	r2, #6
 80030ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f003 fcba 	bl	8006a32 <USB_HC_Halt>
 80030be:	e213      	b.n	80034e8 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 f8f0 	bl	80062ae <USB_ReadChInterrupts>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d124      	bne.n	8003122 <HCD_HC_OUT_IRQHandler+0x1e0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	440b      	add	r3, r1
 80030e6:	3360      	adds	r3, #96	; 0x60
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	440b      	add	r3, r1
 80030fa:	3365      	adds	r3, #101	; 0x65
 80030fc:	2204      	movs	r2, #4
 80030fe:	701a      	strb	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f003 fc92 	bl	8006a32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4413      	add	r3, r2
 8003116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311a:	461a      	mov	r2, r3
 800311c:	2310      	movs	r3, #16
 800311e:	6093      	str	r3, [r2, #8]
 8003120:	e1e2      	b.n	80034e8 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f003 f8bf 	bl	80062ae <USB_ReadChInterrupts>
 8003130:	4603      	mov	r3, r0
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b80      	cmp	r3, #128	; 0x80
 8003138:	d11a      	bne.n	8003170 <HCD_HC_OUT_IRQHandler+0x22e>
  {
    hhcd->hc[chnum].state = HC_XACTERR;
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	440b      	add	r3, r1
 8003148:	3365      	adds	r3, #101	; 0x65
 800314a:	2207      	movs	r2, #7
 800314c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f003 fc6b 	bl	8006a32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003168:	461a      	mov	r2, r3
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	6093      	str	r3, [r2, #8]
 800316e:	e1bb      	b.n	80034e8 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f003 f898 	bl	80062ae <USB_ReadChInterrupts>
 800317e:	4603      	mov	r3, r0
 8003180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003188:	d11b      	bne.n	80031c2 <HCD_HC_OUT_IRQHandler+0x280>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4413      	add	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	440b      	add	r3, r1
 8003198:	3365      	adds	r3, #101	; 0x65
 800319a:	2209      	movs	r2, #9
 800319c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f003 fc43 	bl	8006a32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b8:	461a      	mov	r2, r3
 80031ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031be:	6093      	str	r3, [r2, #8]
 80031c0:	e192      	b.n	80034e8 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f003 f86f 	bl	80062ae <USB_ReadChInterrupts>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	f040 8183 	bne.w	80034e2 <HCD_HC_OUT_IRQHandler+0x5a0>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e8:	461a      	mov	r2, r3
 80031ea:	2302      	movs	r3, #2
 80031ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	440b      	add	r3, r1
 80031fc:	3365      	adds	r3, #101	; 0x65
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b01      	cmp	r3, #1
 8003202:	f040 8093 	bne.w	800332c <HCD_HC_OUT_IRQHandler+0x3ea>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	440b      	add	r3, r1
 8003214:	3365      	adds	r3, #101	; 0x65
 8003216:	2202      	movs	r2, #2
 8003218:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	440b      	add	r3, r1
 8003228:	3364      	adds	r3, #100	; 0x64
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	4413      	add	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	440b      	add	r3, r1
 800323c:	3340      	adds	r3, #64	; 0x40
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d00b      	beq.n	800325c <HCD_HC_OUT_IRQHandler+0x31a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	440b      	add	r3, r1
 8003252:	3340      	adds	r3, #64	; 0x40
 8003254:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003256:	2b03      	cmp	r3, #3
 8003258:	f040 8134 	bne.w	80034c4 <HCD_HC_OUT_IRQHandler+0x582>
      {
        if (hhcd->Init.dma_enable == 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d115      	bne.n	8003290 <HCD_HC_OUT_IRQHandler+0x34e>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	440b      	add	r3, r1
 8003272:	3359      	adds	r3, #89	; 0x59
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	f083 0301 	eor.w	r3, r3, #1
 800327c:	b2d8      	uxtb	r0, r3
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	440b      	add	r3, r1
 800328a:	3359      	adds	r3, #89	; 0x59
 800328c:	4602      	mov	r2, r0
 800328e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b01      	cmp	r3, #1
 8003296:	f040 8115 	bne.w	80034c4 <HCD_HC_OUT_IRQHandler+0x582>
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	440b      	add	r3, r1
 80032a8:	3350      	adds	r3, #80	; 0x50
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8109 	beq.w	80034c4 <HCD_HC_OUT_IRQHandler+0x582>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	440b      	add	r3, r1
 80032c0:	3350      	adds	r3, #80	; 0x50
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	4403      	add	r3, r0
 80032d2:	3342      	adds	r3, #66	; 0x42
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	440b      	add	r3, r1
 80032d8:	1e59      	subs	r1, r3, #1
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	4403      	add	r3, r0
 80032e8:	3342      	adds	r3, #66	; 0x42
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80032f0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80e3 	beq.w	80034c4 <HCD_HC_OUT_IRQHandler+0x582>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	440b      	add	r3, r1
 800330c:	3359      	adds	r3, #89	; 0x59
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	f083 0301 	eor.w	r3, r3, #1
 8003316:	b2d8      	uxtb	r0, r3
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	440b      	add	r3, r1
 8003324:	3359      	adds	r3, #89	; 0x59
 8003326:	4602      	mov	r2, r0
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	e0cb      	b.n	80034c4 <HCD_HC_OUT_IRQHandler+0x582>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	440b      	add	r3, r1
 800333a:	3365      	adds	r3, #101	; 0x65
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b03      	cmp	r3, #3
 8003340:	d10a      	bne.n	8003358 <HCD_HC_OUT_IRQHandler+0x416>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	440b      	add	r3, r1
 8003350:	3365      	adds	r3, #101	; 0x65
 8003352:	2202      	movs	r2, #2
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e0b5      	b.n	80034c4 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	440b      	add	r3, r1
 8003366:	3365      	adds	r3, #101	; 0x65
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b04      	cmp	r3, #4
 800336c:	d114      	bne.n	8003398 <HCD_HC_OUT_IRQHandler+0x456>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	440b      	add	r3, r1
 800337c:	3365      	adds	r3, #101	; 0x65
 800337e:	2202      	movs	r2, #2
 8003380:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	440b      	add	r3, r1
 8003390:	3364      	adds	r3, #100	; 0x64
 8003392:	2202      	movs	r2, #2
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	e095      	b.n	80034c4 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	440b      	add	r3, r1
 80033a6:	3365      	adds	r3, #101	; 0x65
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d114      	bne.n	80033d8 <HCD_HC_OUT_IRQHandler+0x496>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	440b      	add	r3, r1
 80033bc:	3365      	adds	r3, #101	; 0x65
 80033be:	2202      	movs	r2, #2
 80033c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	440b      	add	r3, r1
 80033d0:	3364      	adds	r3, #100	; 0x64
 80033d2:	2205      	movs	r2, #5
 80033d4:	701a      	strb	r2, [r3, #0]
 80033d6:	e075      	b.n	80034c4 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	440b      	add	r3, r1
 80033e6:	3365      	adds	r3, #101	; 0x65
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b07      	cmp	r3, #7
 80033ec:	d00a      	beq.n	8003404 <HCD_HC_OUT_IRQHandler+0x4c2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	440b      	add	r3, r1
 80033fc:	3365      	adds	r3, #101	; 0x65
 80033fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003400:	2b09      	cmp	r3, #9
 8003402:	d170      	bne.n	80034e6 <HCD_HC_OUT_IRQHandler+0x5a4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4413      	add	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	440b      	add	r3, r1
 8003412:	3365      	adds	r3, #101	; 0x65
 8003414:	2202      	movs	r2, #2
 8003416:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	440b      	add	r3, r1
 8003426:	3360      	adds	r3, #96	; 0x60
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1c59      	adds	r1, r3, #1
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	4403      	add	r3, r0
 8003438:	3360      	adds	r3, #96	; 0x60
 800343a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4413      	add	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	440b      	add	r3, r1
 800344a:	3360      	adds	r3, #96	; 0x60
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d914      	bls.n	800347c <HCD_HC_OUT_IRQHandler+0x53a>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	440b      	add	r3, r1
 8003460:	3360      	adds	r3, #96	; 0x60
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	440b      	add	r3, r1
 8003474:	3364      	adds	r3, #100	; 0x64
 8003476:	2204      	movs	r2, #4
 8003478:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800347a:	e022      	b.n	80034c2 <HCD_HC_OUT_IRQHandler+0x580>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	440b      	add	r3, r1
 800348a:	3364      	adds	r3, #100	; 0x64
 800348c:	2202      	movs	r2, #2
 800348e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034a6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034ae:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034bc:	461a      	mov	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034c2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	440b      	add	r3, r1
 80034d2:	3364      	adds	r3, #100	; 0x64
 80034d4:	781a      	ldrb	r2, [r3, #0]
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	4619      	mov	r1, r3
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fd febe 	bl	800125c <HAL_HCD_HC_NotifyURBChange_Callback>
 80034e0:	e002      	b.n	80034e8 <HCD_HC_OUT_IRQHandler+0x5a6>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80034e2:	bf00      	nop
 80034e4:	e000      	b.n	80034e8 <HCD_HC_OUT_IRQHandler+0x5a6>
      return;
 80034e6:	bf00      	nop
  }
}
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b08a      	sub	sp, #40	; 0x28
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	0c5b      	lsrs	r3, r3, #17
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003522:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d004      	beq.n	8003534 <HCD_RXQLVL_IRQHandler+0x46>
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b05      	cmp	r3, #5
 800352e:	f000 80b6 	beq.w	800369e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003532:	e0b7      	b.n	80036a4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80b3 	beq.w	80036a2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	440b      	add	r3, r1
 800354a:	3348      	adds	r3, #72	; 0x48
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80a7 	beq.w	80036a2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	440b      	add	r3, r1
 8003562:	3354      	adds	r3, #84	; 0x54
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	18d1      	adds	r1, r2, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	4403      	add	r3, r0
 8003578:	3350      	adds	r3, #80	; 0x50
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4299      	cmp	r1, r3
 800357e:	f200 8083 	bhi.w	8003688 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	440b      	add	r3, r1
 8003594:	3348      	adds	r3, #72	; 0x48
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	b292      	uxth	r2, r2
 800359c:	4619      	mov	r1, r3
 800359e:	f002 fe1b 	bl	80061d8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4613      	mov	r3, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4413      	add	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	440b      	add	r3, r1
 80035b0:	3348      	adds	r3, #72	; 0x48
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	18d1      	adds	r1, r2, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4613      	mov	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4413      	add	r3, r2
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	4403      	add	r3, r0
 80035c6:	3348      	adds	r3, #72	; 0x48
 80035c8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4613      	mov	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4413      	add	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	440b      	add	r3, r1
 80035d8:	3354      	adds	r3, #84	; 0x54
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	18d1      	adds	r1, r2, r3
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4613      	mov	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	4403      	add	r3, r0
 80035ee:	3354      	adds	r3, #84	; 0x54
 80035f0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	0cdb      	lsrs	r3, r3, #19
 8003602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003606:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	440b      	add	r3, r1
 8003616:	3342      	adds	r3, #66	; 0x42
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4293      	cmp	r3, r2
 8003620:	d13f      	bne.n	80036a2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d03c      	beq.n	80036a2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800363e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003646:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003654:	461a      	mov	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4613      	mov	r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	440b      	add	r3, r1
 8003668:	3358      	adds	r3, #88	; 0x58
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	f083 0301 	eor.w	r3, r3, #1
 8003670:	b2d8      	uxtb	r0, r3
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4613      	mov	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	4413      	add	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	440b      	add	r3, r1
 8003680:	3358      	adds	r3, #88	; 0x58
 8003682:	4602      	mov	r2, r0
 8003684:	701a      	strb	r2, [r3, #0]
      break;
 8003686:	e00c      	b.n	80036a2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	440b      	add	r3, r1
 8003696:	3364      	adds	r3, #100	; 0x64
 8003698:	2204      	movs	r2, #4
 800369a:	701a      	strb	r2, [r3, #0]
      break;
 800369c:	e001      	b.n	80036a2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80036a2:	bf00      	nop
  }
}
 80036a4:	bf00      	nop
 80036a6:	3728      	adds	r7, #40	; 0x28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80036d8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d10b      	bne.n	80036fc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d102      	bne.n	80036f4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fd fd58 	bl	80011a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f043 0302 	orr.w	r3, r3, #2
 80036fa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b08      	cmp	r3, #8
 8003704:	d132      	bne.n	800376c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f043 0308 	orr.w	r3, r3, #8
 800370c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b04      	cmp	r3, #4
 8003716:	d126      	bne.n	8003766 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b02      	cmp	r3, #2
 800371e:	d113      	bne.n	8003748 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003726:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800372a:	d106      	bne.n	800373a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2102      	movs	r1, #2
 8003732:	4618      	mov	r0, r3
 8003734:	f002 fea0 	bl	8006478 <USB_InitFSLSPClkSel>
 8003738:	e011      	b.n	800375e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2101      	movs	r1, #1
 8003740:	4618      	mov	r0, r3
 8003742:	f002 fe99 	bl	8006478 <USB_InitFSLSPClkSel>
 8003746:	e00a      	b.n	800375e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d106      	bne.n	800375e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003756:	461a      	mov	r2, r3
 8003758:	f64e 2360 	movw	r3, #60000	; 0xea60
 800375c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fd fd60 	bl	8001224 <HAL_HCD_PortEnabled_Callback>
 8003764:	e002      	b.n	800376c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd fd6a 	bl	8001240 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b20      	cmp	r3, #32
 8003774:	d103      	bne.n	800377e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f043 0320 	orr.w	r3, r3, #32
 800377c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003784:	461a      	mov	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6013      	str	r3, [r2, #0]
}
 800378a:	bf00      	nop
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <HAL_PWREx_GetVoltageRange+0x18>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40007000 	.word	0x40007000

080037b0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80037b4:	4b05      	ldr	r3, [pc, #20]	; (80037cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4a04      	ldr	r2, [pc, #16]	; (80037cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80037ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037be:	6053      	str	r3, [r2, #4]
}
 80037c0:	bf00      	nop
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40007000 	.word	0x40007000

080037d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e3ca      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e2:	4b97      	ldr	r3, [pc, #604]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037ec:	4b94      	ldr	r3, [pc, #592]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80e4 	beq.w	80039cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_RCC_OscConfig+0x4a>
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b0c      	cmp	r3, #12
 800380e:	f040 808b 	bne.w	8003928 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b01      	cmp	r3, #1
 8003816:	f040 8087 	bne.w	8003928 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800381a:	4b89      	ldr	r3, [pc, #548]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_RCC_OscConfig+0x62>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e3a2      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1a      	ldr	r2, [r3, #32]
 8003836:	4b82      	ldr	r3, [pc, #520]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d004      	beq.n	800384c <HAL_RCC_OscConfig+0x7c>
 8003842:	4b7f      	ldr	r3, [pc, #508]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800384a:	e005      	b.n	8003858 <HAL_RCC_OscConfig+0x88>
 800384c:	4b7c      	ldr	r3, [pc, #496]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 800384e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003858:	4293      	cmp	r3, r2
 800385a:	d223      	bcs.n	80038a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fd55 	bl	8004310 <RCC_SetFlashLatencyFromMSIRange>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e383      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003870:	4b73      	ldr	r3, [pc, #460]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a72      	ldr	r2, [pc, #456]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003876:	f043 0308 	orr.w	r3, r3, #8
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b70      	ldr	r3, [pc, #448]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	496d      	ldr	r1, [pc, #436]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800388e:	4b6c      	ldr	r3, [pc, #432]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	021b      	lsls	r3, r3, #8
 800389c:	4968      	ldr	r1, [pc, #416]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
 80038a2:	e025      	b.n	80038f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038a4:	4b66      	ldr	r3, [pc, #408]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a65      	ldr	r2, [pc, #404]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80038aa:	f043 0308 	orr.w	r3, r3, #8
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b63      	ldr	r3, [pc, #396]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	4960      	ldr	r1, [pc, #384]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038c2:	4b5f      	ldr	r3, [pc, #380]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	495b      	ldr	r1, [pc, #364]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 fd15 	bl	8004310 <RCC_SetFlashLatencyFromMSIRange>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e343      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038f0:	f000 fc4a 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b52      	ldr	r3, [pc, #328]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	4950      	ldr	r1, [pc, #320]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
 800390c:	4a4e      	ldr	r2, [pc, #312]	; (8003a48 <HAL_RCC_OscConfig+0x278>)
 800390e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003910:	4b4e      	ldr	r3, [pc, #312]	; (8003a4c <HAL_RCC_OscConfig+0x27c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fd fe95 	bl	8001644 <HAL_InitTick>
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d052      	beq.n	80039ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	e327      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d032      	beq.n	8003996 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003930:	4b43      	ldr	r3, [pc, #268]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a42      	ldr	r2, [pc, #264]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800393c:	f7fd fed2 	bl	80016e4 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003944:	f7fd fece 	bl	80016e4 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e310      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003956:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003962:	4b37      	ldr	r3, [pc, #220]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a36      	ldr	r2, [pc, #216]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003968:	f043 0308 	orr.w	r3, r3, #8
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	4931      	ldr	r1, [pc, #196]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 800397c:	4313      	orrs	r3, r2
 800397e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003980:	4b2f      	ldr	r3, [pc, #188]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	492c      	ldr	r1, [pc, #176]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
 8003994:	e01a      	b.n	80039cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003996:	4b2a      	ldr	r3, [pc, #168]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a29      	ldr	r2, [pc, #164]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039a2:	f7fd fe9f 	bl	80016e4 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039aa:	f7fd fe9b 	bl	80016e4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e2dd      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039bc:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f0      	bne.n	80039aa <HAL_RCC_OscConfig+0x1da>
 80039c8:	e000      	b.n	80039cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d074      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d005      	beq.n	80039ea <HAL_RCC_OscConfig+0x21a>
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b0c      	cmp	r3, #12
 80039e2:	d10e      	bne.n	8003a02 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d10b      	bne.n	8003a02 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ea:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d064      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x2f0>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d160      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e2ba      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCC_OscConfig+0x24a>
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	e026      	b.n	8003a68 <HAL_RCC_OscConfig+0x298>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a22:	d115      	bne.n	8003a50 <HAL_RCC_OscConfig+0x280>
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003a2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a02      	ldr	r2, [pc, #8]	; (8003a40 <HAL_RCC_OscConfig+0x270>)
 8003a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	e014      	b.n	8003a68 <HAL_RCC_OscConfig+0x298>
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	0800e854 	.word	0x0800e854
 8003a48:	20000004 	.word	0x20000004
 8003a4c:	20000008 	.word	0x20000008
 8003a50:	4ba0      	ldr	r3, [pc, #640]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a9f      	ldr	r2, [pc, #636]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b9d      	ldr	r3, [pc, #628]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a9c      	ldr	r2, [pc, #624]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fd fe38 	bl	80016e4 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fd fe34 	bl	80016e4 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e276      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a8a:	4b92      	ldr	r3, [pc, #584]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x2a8>
 8003a96:	e014      	b.n	8003ac2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fd fe24 	bl	80016e4 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fd fe20 	bl	80016e4 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e262      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ab2:	4b88      	ldr	r3, [pc, #544]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x2d0>
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d060      	beq.n	8003b90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x310>
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b0c      	cmp	r3, #12
 8003ad8:	d119      	bne.n	8003b0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d116      	bne.n	8003b0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ae0:	4b7c      	ldr	r3, [pc, #496]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_OscConfig+0x328>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e23f      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af8:	4b76      	ldr	r3, [pc, #472]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	4973      	ldr	r1, [pc, #460]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b0c:	e040      	b.n	8003b90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d023      	beq.n	8003b5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b16:	4b6f      	ldr	r3, [pc, #444]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6e      	ldr	r2, [pc, #440]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b22:	f7fd fddf 	bl	80016e4 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2a:	f7fd fddb 	bl	80016e4 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e21d      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b3c:	4b65      	ldr	r3, [pc, #404]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b48:	4b62      	ldr	r3, [pc, #392]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	061b      	lsls	r3, r3, #24
 8003b56:	495f      	ldr	r1, [pc, #380]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
 8003b5c:	e018      	b.n	8003b90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b5e:	4b5d      	ldr	r3, [pc, #372]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a5c      	ldr	r2, [pc, #368]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fd fdbb 	bl	80016e4 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b72:	f7fd fdb7 	bl	80016e4 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e1f9      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b84:	4b53      	ldr	r3, [pc, #332]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d03c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01c      	beq.n	8003bde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba4:	4b4b      	ldr	r3, [pc, #300]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003baa:	4a4a      	ldr	r2, [pc, #296]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7fd fd96 	bl	80016e4 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fd fd92 	bl	80016e4 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e1d4      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bce:	4b41      	ldr	r3, [pc, #260]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0ef      	beq.n	8003bbc <HAL_RCC_OscConfig+0x3ec>
 8003bdc:	e01b      	b.n	8003c16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bde:	4b3d      	ldr	r3, [pc, #244]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be4:	4a3b      	ldr	r2, [pc, #236]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bee:	f7fd fd79 	bl	80016e4 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf6:	f7fd fd75 	bl	80016e4 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e1b7      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c08:	4b32      	ldr	r3, [pc, #200]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1ef      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80a6 	beq.w	8003d70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c24:	2300      	movs	r3, #0
 8003c26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c28:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10d      	bne.n	8003c50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c34:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c40:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c50:	4b21      	ldr	r3, [pc, #132]	; (8003cd8 <HAL_RCC_OscConfig+0x508>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d118      	bne.n	8003c8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c5c:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <HAL_RCC_OscConfig+0x508>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <HAL_RCC_OscConfig+0x508>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c68:	f7fd fd3c 	bl	80016e4 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c70:	f7fd fd38 	bl	80016e4 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e17a      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c82:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <HAL_RCC_OscConfig+0x508>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d108      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x4d8>
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9c:	4a0d      	ldr	r2, [pc, #52]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca6:	e029      	b.n	8003cfc <HAL_RCC_OscConfig+0x52c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b05      	cmp	r3, #5
 8003cae:	d115      	bne.n	8003cdc <HAL_RCC_OscConfig+0x50c>
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb6:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003cb8:	f043 0304 	orr.w	r3, r3, #4
 8003cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	4a03      	ldr	r2, [pc, #12]	; (8003cd4 <HAL_RCC_OscConfig+0x504>)
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cd0:	e014      	b.n	8003cfc <HAL_RCC_OscConfig+0x52c>
 8003cd2:	bf00      	nop
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40007000 	.word	0x40007000
 8003cdc:	4b9c      	ldr	r3, [pc, #624]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	4a9b      	ldr	r2, [pc, #620]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cec:	4b98      	ldr	r3, [pc, #608]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf2:	4a97      	ldr	r2, [pc, #604]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003cf4:	f023 0304 	bic.w	r3, r3, #4
 8003cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d016      	beq.n	8003d32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d04:	f7fd fcee 	bl	80016e4 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0c:	f7fd fcea 	bl	80016e4 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e12a      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d22:	4b8b      	ldr	r3, [pc, #556]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0ed      	beq.n	8003d0c <HAL_RCC_OscConfig+0x53c>
 8003d30:	e015      	b.n	8003d5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d32:	f7fd fcd7 	bl	80016e4 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d38:	e00a      	b.n	8003d50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f7fd fcd3 	bl	80016e4 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e113      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d50:	4b7f      	ldr	r3, [pc, #508]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1ed      	bne.n	8003d3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d5e:	7ffb      	ldrb	r3, [r7, #31]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d105      	bne.n	8003d70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d64:	4b7a      	ldr	r3, [pc, #488]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	4a79      	ldr	r2, [pc, #484]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80fe 	beq.w	8003f76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	f040 80d0 	bne.w	8003f24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d84:	4b72      	ldr	r3, [pc, #456]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f003 0203 	and.w	r2, r3, #3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d130      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	3b01      	subs	r3, #1
 8003da4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d127      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d11f      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dc4:	2a07      	cmp	r2, #7
 8003dc6:	bf14      	ite	ne
 8003dc8:	2201      	movne	r2, #1
 8003dca:	2200      	moveq	r2, #0
 8003dcc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d113      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	3b01      	subs	r3, #1
 8003de0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d109      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	3b01      	subs	r3, #1
 8003df4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d06e      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	d069      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e00:	4b53      	ldr	r3, [pc, #332]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e0c:	4b50      	ldr	r3, [pc, #320]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0ad      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e1c:	4b4c      	ldr	r3, [pc, #304]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a4b      	ldr	r2, [pc, #300]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e28:	f7fd fc5c 	bl	80016e4 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fd fc58 	bl	80016e4 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e09a      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e42:	4b43      	ldr	r3, [pc, #268]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e4e:	4b40      	ldr	r3, [pc, #256]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	4b40      	ldr	r3, [pc, #256]	; (8003f54 <HAL_RCC_OscConfig+0x784>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e5e:	3a01      	subs	r2, #1
 8003e60:	0112      	lsls	r2, r2, #4
 8003e62:	4311      	orrs	r1, r2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e68:	0212      	lsls	r2, r2, #8
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e70:	0852      	lsrs	r2, r2, #1
 8003e72:	3a01      	subs	r2, #1
 8003e74:	0552      	lsls	r2, r2, #21
 8003e76:	4311      	orrs	r1, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e7c:	0852      	lsrs	r2, r2, #1
 8003e7e:	3a01      	subs	r2, #1
 8003e80:	0652      	lsls	r2, r2, #25
 8003e82:	4311      	orrs	r1, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e88:	0912      	lsrs	r2, r2, #4
 8003e8a:	0452      	lsls	r2, r2, #17
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	4930      	ldr	r1, [pc, #192]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e94:	4b2e      	ldr	r3, [pc, #184]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a2d      	ldr	r2, [pc, #180]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ea0:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4a2a      	ldr	r2, [pc, #168]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eac:	f7fd fc1a 	bl	80016e4 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb4:	f7fd fc16 	bl	80016e4 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e058      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec6:	4b22      	ldr	r3, [pc, #136]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ed2:	e050      	b.n	8003f76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e04f      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d148      	bne.n	8003f76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ef0:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003efc:	f7fd fbf2 	bl	80016e4 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fd fbee 	bl	80016e4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e030      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f16:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x734>
 8003f22:	e028      	b.n	8003f76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b0c      	cmp	r3, #12
 8003f28:	d023      	beq.n	8003f72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a08      	ldr	r2, [pc, #32]	; (8003f50 <HAL_RCC_OscConfig+0x780>)
 8003f30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fd fbd5 	bl	80016e4 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f3c:	e00c      	b.n	8003f58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3e:	f7fd fbd1 	bl	80016e4 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d905      	bls.n	8003f58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e013      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
 8003f50:	40021000 	.word	0x40021000
 8003f54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_OscConfig+0x7b0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ec      	bne.n	8003f3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <HAL_RCC_OscConfig+0x7b0>)
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	4905      	ldr	r1, [pc, #20]	; (8003f80 <HAL_RCC_OscConfig+0x7b0>)
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_RCC_OscConfig+0x7b4>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60cb      	str	r3, [r1, #12]
 8003f70:	e001      	b.n	8003f76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3720      	adds	r7, #32
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021000 	.word	0x40021000
 8003f84:	feeefffc 	.word	0xfeeefffc

08003f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0e7      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b75      	ldr	r3, [pc, #468]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d910      	bls.n	8003fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b72      	ldr	r3, [pc, #456]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 0207 	bic.w	r2, r3, #7
 8003fb2:	4970      	ldr	r1, [pc, #448]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	4b6e      	ldr	r3, [pc, #440]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0cf      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d010      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	4b66      	ldr	r3, [pc, #408]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d908      	bls.n	8003ffa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe8:	4b63      	ldr	r3, [pc, #396]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4960      	ldr	r1, [pc, #384]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d04c      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b03      	cmp	r3, #3
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800400e:	4b5a      	ldr	r3, [pc, #360]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d121      	bne.n	800405e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e0a6      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004026:	4b54      	ldr	r3, [pc, #336]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d115      	bne.n	800405e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e09a      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d107      	bne.n	800404e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800403e:	4b4e      	ldr	r3, [pc, #312]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d109      	bne.n	800405e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e08e      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800404e:	4b4a      	ldr	r3, [pc, #296]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e086      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800405e:	4b46      	ldr	r3, [pc, #280]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f023 0203 	bic.w	r2, r3, #3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4943      	ldr	r1, [pc, #268]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 800406c:	4313      	orrs	r3, r2
 800406e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004070:	f7fd fb38 	bl	80016e4 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004076:	e00a      	b.n	800408e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004078:	f7fd fb34 	bl	80016e4 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e06e      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408e:	4b3a      	ldr	r3, [pc, #232]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 020c 	and.w	r2, r3, #12
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	429a      	cmp	r2, r3
 800409e:	d1eb      	bne.n	8004078 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d010      	beq.n	80040ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	4b31      	ldr	r3, [pc, #196]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d208      	bcs.n	80040ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040bc:	4b2e      	ldr	r3, [pc, #184]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	492b      	ldr	r1, [pc, #172]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ce:	4b29      	ldr	r3, [pc, #164]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d210      	bcs.n	80040fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040dc:	4b25      	ldr	r3, [pc, #148]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 0207 	bic.w	r2, r3, #7
 80040e4:	4923      	ldr	r1, [pc, #140]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ec:	4b21      	ldr	r3, [pc, #132]	; (8004174 <HAL_RCC_ClockConfig+0x1ec>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d001      	beq.n	80040fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e036      	b.n	800416c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800410a:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	4918      	ldr	r1, [pc, #96]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004118:	4313      	orrs	r3, r2
 800411a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d009      	beq.n	800413c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004128:	4b13      	ldr	r3, [pc, #76]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	4910      	ldr	r1, [pc, #64]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800413c:	f000 f824 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8004140:	4602      	mov	r2, r0
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <HAL_RCC_ClockConfig+0x1f0>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	490b      	ldr	r1, [pc, #44]	; (800417c <HAL_RCC_ClockConfig+0x1f4>)
 800414e:	5ccb      	ldrb	r3, [r1, r3]
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
 8004158:	4a09      	ldr	r2, [pc, #36]	; (8004180 <HAL_RCC_ClockConfig+0x1f8>)
 800415a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <HAL_RCC_ClockConfig+0x1fc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7fd fa6f 	bl	8001644 <HAL_InitTick>
 8004166:	4603      	mov	r3, r0
 8004168:	72fb      	strb	r3, [r7, #11]

  return status;
 800416a:	7afb      	ldrb	r3, [r7, #11]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40022000 	.word	0x40022000
 8004178:	40021000 	.word	0x40021000
 800417c:	0800e854 	.word	0x0800e854
 8004180:	20000004 	.word	0x20000004
 8004184:	20000008 	.word	0x20000008

08004188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004188:	b480      	push	{r7}
 800418a:	b089      	sub	sp, #36	; 0x24
 800418c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	2300      	movs	r3, #0
 8004194:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004196:	4b3e      	ldr	r3, [pc, #248]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a0:	4b3b      	ldr	r3, [pc, #236]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x34>
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b0c      	cmp	r3, #12
 80041b4:	d121      	bne.n	80041fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d11e      	bne.n	80041fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041bc:	4b34      	ldr	r3, [pc, #208]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041c8:	4b31      	ldr	r3, [pc, #196]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 80041ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ce:	0a1b      	lsrs	r3, r3, #8
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	e005      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041d8:	4b2d      	ldr	r3, [pc, #180]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041e4:	4a2b      	ldr	r2, [pc, #172]	; (8004294 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10d      	bne.n	8004210 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f8:	e00a      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d102      	bne.n	8004206 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004200:	4b25      	ldr	r3, [pc, #148]	; (8004298 <HAL_RCC_GetSysClockFreq+0x110>)
 8004202:	61bb      	str	r3, [r7, #24]
 8004204:	e004      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d101      	bne.n	8004210 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800420c:	4b23      	ldr	r3, [pc, #140]	; (800429c <HAL_RCC_GetSysClockFreq+0x114>)
 800420e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d134      	bne.n	8004280 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004216:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d003      	beq.n	800422e <HAL_RCC_GetSysClockFreq+0xa6>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d003      	beq.n	8004234 <HAL_RCC_GetSysClockFreq+0xac>
 800422c:	e005      	b.n	800423a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800422e:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <HAL_RCC_GetSysClockFreq+0x110>)
 8004230:	617b      	str	r3, [r7, #20]
      break;
 8004232:	e005      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004234:	4b19      	ldr	r3, [pc, #100]	; (800429c <HAL_RCC_GetSysClockFreq+0x114>)
 8004236:	617b      	str	r3, [r7, #20]
      break;
 8004238:	e002      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	617b      	str	r3, [r7, #20]
      break;
 800423e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004240:	4b13      	ldr	r3, [pc, #76]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	3301      	adds	r3, #1
 800424c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800424e:	4b10      	ldr	r3, [pc, #64]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	fb03 f202 	mul.w	r2, r3, r2
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	fbb2 f3f3 	udiv	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <HAL_RCC_GetSysClockFreq+0x108>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	0e5b      	lsrs	r3, r3, #25
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	3301      	adds	r3, #1
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004280:	69bb      	ldr	r3, [r7, #24]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3724      	adds	r7, #36	; 0x24
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
 8004294:	0800e86c 	.word	0x0800e86c
 8004298:	00f42400 	.word	0x00f42400
 800429c:	007a1200 	.word	0x007a1200

080042a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a4:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042a6:	681b      	ldr	r3, [r3, #0]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20000004 	.word	0x20000004

080042b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042bc:	f7ff fff0 	bl	80042a0 <HAL_RCC_GetHCLKFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	4904      	ldr	r1, [pc, #16]	; (80042e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d8:	4618      	mov	r0, r3
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40021000 	.word	0x40021000
 80042e0:	0800e864 	.word	0x0800e864

080042e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042e8:	f7ff ffda 	bl	80042a0 <HAL_RCC_GetHCLKFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	0adb      	lsrs	r3, r3, #11
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	4904      	ldr	r1, [pc, #16]	; (800430c <HAL_RCC_GetPCLK2Freq+0x28>)
 80042fa:	5ccb      	ldrb	r3, [r1, r3]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004304:	4618      	mov	r0, r3
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021000 	.word	0x40021000
 800430c:	0800e864 	.word	0x0800e864

08004310 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800431c:	4b2a      	ldr	r3, [pc, #168]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004328:	f7ff fa34 	bl	8003794 <HAL_PWREx_GetVoltageRange>
 800432c:	6178      	str	r0, [r7, #20]
 800432e:	e014      	b.n	800435a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004330:	4b25      	ldr	r3, [pc, #148]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004334:	4a24      	ldr	r2, [pc, #144]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433a:	6593      	str	r3, [r2, #88]	; 0x58
 800433c:	4b22      	ldr	r3, [pc, #136]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004348:	f7ff fa24 	bl	8003794 <HAL_PWREx_GetVoltageRange>
 800434c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800434e:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	4a1d      	ldr	r2, [pc, #116]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004358:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004360:	d10b      	bne.n	800437a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b80      	cmp	r3, #128	; 0x80
 8004366:	d919      	bls.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2ba0      	cmp	r3, #160	; 0xa0
 800436c:	d902      	bls.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800436e:	2302      	movs	r3, #2
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	e013      	b.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004374:	2301      	movs	r3, #1
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	e010      	b.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d902      	bls.n	8004386 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004380:	2303      	movs	r3, #3
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	e00a      	b.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b80      	cmp	r3, #128	; 0x80
 800438a:	d102      	bne.n	8004392 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800438c:	2302      	movs	r3, #2
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	e004      	b.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b70      	cmp	r3, #112	; 0x70
 8004396:	d101      	bne.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004398:	2301      	movs	r3, #1
 800439a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f023 0207 	bic.w	r2, r3, #7
 80043a4:	4909      	ldr	r1, [pc, #36]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043ac:	4b07      	ldr	r3, [pc, #28]	; (80043cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d001      	beq.n	80043be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000
 80043cc:	40022000 	.word	0x40022000

080043d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043d8:	2300      	movs	r3, #0
 80043da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043dc:	2300      	movs	r3, #0
 80043de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d041      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043f4:	d02a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80043f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043fa:	d824      	bhi.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004400:	d008      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004402:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004406:	d81e      	bhi.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800440c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004410:	d010      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004412:	e018      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004414:	4b86      	ldr	r3, [pc, #536]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a85      	ldr	r2, [pc, #532]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004420:	e015      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3304      	adds	r3, #4
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f000 facb 	bl	80049c4 <RCCEx_PLLSAI1_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004432:	e00c      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3320      	adds	r3, #32
 8004438:	2100      	movs	r1, #0
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fbb6 	bl	8004bac <RCCEx_PLLSAI2_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004444:	e003      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	74fb      	strb	r3, [r7, #19]
      break;
 800444a:	e000      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800444c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444e:	7cfb      	ldrb	r3, [r7, #19]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004454:	4b76      	ldr	r3, [pc, #472]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004462:	4973      	ldr	r1, [pc, #460]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800446a:	e001      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d041      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004480:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004484:	d02a      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004486:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800448a:	d824      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800448c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004490:	d008      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004496:	d81e      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800449c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a0:	d010      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044a2:	e018      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044a4:	4b62      	ldr	r3, [pc, #392]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4a61      	ldr	r2, [pc, #388]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044b0:	e015      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fa83 	bl	80049c4 <RCCEx_PLLSAI1_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044c2:	e00c      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3320      	adds	r3, #32
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fb6e 	bl	8004bac <RCCEx_PLLSAI2_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044d4:	e003      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	74fb      	strb	r3, [r7, #19]
      break;
 80044da:	e000      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80044dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044de:	7cfb      	ldrb	r3, [r7, #19]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10b      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044e4:	4b52      	ldr	r3, [pc, #328]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f2:	494f      	ldr	r1, [pc, #316]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044fa:	e001      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80a0 	beq.w	800464e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004512:	4b47      	ldr	r3, [pc, #284]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004522:	2300      	movs	r3, #0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00d      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004528:	4b41      	ldr	r3, [pc, #260]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	4a40      	ldr	r2, [pc, #256]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800452e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004532:	6593      	str	r3, [r2, #88]	; 0x58
 8004534:	4b3e      	ldr	r3, [pc, #248]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004540:	2301      	movs	r3, #1
 8004542:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004544:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a3a      	ldr	r2, [pc, #232]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800454a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004550:	f7fd f8c8 	bl	80016e4 <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004556:	e009      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004558:	f7fd f8c4 	bl	80016e4 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d902      	bls.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	74fb      	strb	r3, [r7, #19]
        break;
 800456a:	e005      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800456c:	4b31      	ldr	r3, [pc, #196]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ef      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d15c      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800457e:	4b2c      	ldr	r3, [pc, #176]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004588:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01f      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	429a      	cmp	r2, r3
 800459a:	d019      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800459c:	4b24      	ldr	r3, [pc, #144]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045a8:	4b21      	ldr	r3, [pc, #132]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	4a20      	ldr	r2, [pc, #128]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045c8:	4a19      	ldr	r2, [pc, #100]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045da:	f7fd f883 	bl	80016e4 <HAL_GetTick>
 80045de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e0:	e00b      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fd f87f 	bl	80016e4 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d902      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	74fb      	strb	r3, [r7, #19]
            break;
 80045f8:	e006      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fa:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0ec      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10c      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800460e:	4b08      	ldr	r3, [pc, #32]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461e:	4904      	ldr	r1, [pc, #16]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004626:	e009      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	74bb      	strb	r3, [r7, #18]
 800462c:	e006      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000
 8004634:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463c:	7c7b      	ldrb	r3, [r7, #17]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d105      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004642:	4b9e      	ldr	r3, [pc, #632]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004646:	4a9d      	ldr	r2, [pc, #628]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800465a:	4b98      	ldr	r3, [pc, #608]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f023 0203 	bic.w	r2, r3, #3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	4994      	ldr	r1, [pc, #592]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800467c:	4b8f      	ldr	r3, [pc, #572]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f023 020c 	bic.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	498c      	ldr	r1, [pc, #560]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800469e:	4b87      	ldr	r3, [pc, #540]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	4983      	ldr	r1, [pc, #524]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046c0:	4b7e      	ldr	r3, [pc, #504]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	497b      	ldr	r1, [pc, #492]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046e2:	4b76      	ldr	r3, [pc, #472]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f0:	4972      	ldr	r1, [pc, #456]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004704:	4b6d      	ldr	r3, [pc, #436]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	496a      	ldr	r1, [pc, #424]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004726:	4b65      	ldr	r3, [pc, #404]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004734:	4961      	ldr	r1, [pc, #388]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004748:	4b5c      	ldr	r3, [pc, #368]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004756:	4959      	ldr	r1, [pc, #356]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800476a:	4b54      	ldr	r3, [pc, #336]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004778:	4950      	ldr	r1, [pc, #320]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800478c:	4b4b      	ldr	r3, [pc, #300]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479a:	4948      	ldr	r1, [pc, #288]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ae:	4b43      	ldr	r3, [pc, #268]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047bc:	493f      	ldr	r1, [pc, #252]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d028      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047d0:	4b3a      	ldr	r3, [pc, #232]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047de:	4937      	ldr	r1, [pc, #220]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ee:	d106      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f0:	4b32      	ldr	r3, [pc, #200]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a31      	ldr	r2, [pc, #196]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047fa:	60d3      	str	r3, [r2, #12]
 80047fc:	e011      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004806:	d10c      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	2101      	movs	r1, #1
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f8d8 	bl	80049c4 <RCCEx_PLLSAI1_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004818:	7cfb      	ldrb	r3, [r7, #19]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800481e:	7cfb      	ldrb	r3, [r7, #19]
 8004820:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d028      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800482e:	4b23      	ldr	r3, [pc, #140]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483c:	491f      	ldr	r1, [pc, #124]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800484c:	d106      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800484e:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	4a1a      	ldr	r2, [pc, #104]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004858:	60d3      	str	r3, [r2, #12]
 800485a:	e011      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004864:	d10c      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	2101      	movs	r1, #1
 800486c:	4618      	mov	r0, r3
 800486e:	f000 f8a9 	bl	80049c4 <RCCEx_PLLSAI1_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004876:	7cfb      	ldrb	r3, [r7, #19]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800487c:	7cfb      	ldrb	r3, [r7, #19]
 800487e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d02b      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004892:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800489a:	4908      	ldr	r1, [pc, #32]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048aa:	d109      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ac:	4b03      	ldr	r3, [pc, #12]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4a02      	ldr	r2, [pc, #8]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048b6:	60d3      	str	r3, [r2, #12]
 80048b8:	e014      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80048ba:	bf00      	nop
 80048bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3304      	adds	r3, #4
 80048ce:	2101      	movs	r1, #1
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 f877 	bl	80049c4 <RCCEx_PLLSAI1_Config>
 80048d6:	4603      	mov	r3, r0
 80048d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048da:	7cfb      	ldrb	r3, [r7, #19]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d02f      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048f0:	4b2b      	ldr	r3, [pc, #172]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048fe:	4928      	ldr	r1, [pc, #160]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800490a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800490e:	d10d      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	2102      	movs	r1, #2
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f854 	bl	80049c4 <RCCEx_PLLSAI1_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004920:	7cfb      	ldrb	r3, [r7, #19]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d014      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	74bb      	strb	r3, [r7, #18]
 800492a:	e011      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004934:	d10c      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3320      	adds	r3, #32
 800493a:	2102      	movs	r1, #2
 800493c:	4618      	mov	r0, r3
 800493e:	f000 f935 	bl	8004bac <RCCEx_PLLSAI2_Config>
 8004942:	4603      	mov	r3, r0
 8004944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004946:	7cfb      	ldrb	r3, [r7, #19]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800494c:	7cfb      	ldrb	r3, [r7, #19]
 800494e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800495c:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800496a:	490d      	ldr	r1, [pc, #52]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800497e:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800498e:	4904      	ldr	r1, [pc, #16]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004996:	7cbb      	ldrb	r3, [r7, #18]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40021000 	.word	0x40021000

080049a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80049ae:	f043 0304 	orr.w	r3, r3, #4
 80049b2:	6013      	str	r3, [r2, #0]
}
 80049b4:	bf00      	nop
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40021000 	.word	0x40021000

080049c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049d2:	4b75      	ldr	r3, [pc, #468]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d018      	beq.n	8004a10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049de:	4b72      	ldr	r3, [pc, #456]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f003 0203 	and.w	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d10d      	bne.n	8004a0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
       ||
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049f6:	4b6c      	ldr	r3, [pc, #432]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
       ||
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d047      	beq.n	8004a9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
 8004a0e:	e044      	b.n	8004a9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d018      	beq.n	8004a4a <RCCEx_PLLSAI1_Config+0x86>
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d825      	bhi.n	8004a68 <RCCEx_PLLSAI1_Config+0xa4>
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d002      	beq.n	8004a26 <RCCEx_PLLSAI1_Config+0x62>
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d009      	beq.n	8004a38 <RCCEx_PLLSAI1_Config+0x74>
 8004a24:	e020      	b.n	8004a68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a26:	4b60      	ldr	r3, [pc, #384]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d11d      	bne.n	8004a6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a36:	e01a      	b.n	8004a6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a38:	4b5b      	ldr	r3, [pc, #364]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d116      	bne.n	8004a72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a48:	e013      	b.n	8004a72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a4a:	4b57      	ldr	r3, [pc, #348]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10f      	bne.n	8004a76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a56:	4b54      	ldr	r3, [pc, #336]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a66:	e006      	b.n	8004a76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a6c:	e004      	b.n	8004a78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a6e:	bf00      	nop
 8004a70:	e002      	b.n	8004a78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a72:	bf00      	nop
 8004a74:	e000      	b.n	8004a78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a76:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10d      	bne.n	8004a9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a7e:	4b4a      	ldr	r3, [pc, #296]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6819      	ldr	r1, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	430b      	orrs	r3, r1
 8004a94:	4944      	ldr	r1, [pc, #272]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d17d      	bne.n	8004b9c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004aa0:	4b41      	ldr	r3, [pc, #260]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a40      	ldr	r2, [pc, #256]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aac:	f7fc fe1a 	bl	80016e4 <HAL_GetTick>
 8004ab0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ab2:	e009      	b.n	8004ac8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ab4:	f7fc fe16 	bl	80016e4 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d902      	bls.n	8004ac8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ac6:	e005      	b.n	8004ad4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ac8:	4b37      	ldr	r3, [pc, #220]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ef      	bne.n	8004ab4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d160      	bne.n	8004b9c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d111      	bne.n	8004b04 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ae0:	4b31      	ldr	r3, [pc, #196]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6892      	ldr	r2, [r2, #8]
 8004af0:	0211      	lsls	r1, r2, #8
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68d2      	ldr	r2, [r2, #12]
 8004af6:	0912      	lsrs	r2, r2, #4
 8004af8:	0452      	lsls	r2, r2, #17
 8004afa:	430a      	orrs	r2, r1
 8004afc:	492a      	ldr	r1, [pc, #168]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	610b      	str	r3, [r1, #16]
 8004b02:	e027      	b.n	8004b54 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d112      	bne.n	8004b30 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b0a:	4b27      	ldr	r3, [pc, #156]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6892      	ldr	r2, [r2, #8]
 8004b1a:	0211      	lsls	r1, r2, #8
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6912      	ldr	r2, [r2, #16]
 8004b20:	0852      	lsrs	r2, r2, #1
 8004b22:	3a01      	subs	r2, #1
 8004b24:	0552      	lsls	r2, r2, #21
 8004b26:	430a      	orrs	r2, r1
 8004b28:	491f      	ldr	r1, [pc, #124]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	610b      	str	r3, [r1, #16]
 8004b2e:	e011      	b.n	8004b54 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b30:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6892      	ldr	r2, [r2, #8]
 8004b40:	0211      	lsls	r1, r2, #8
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6952      	ldr	r2, [r2, #20]
 8004b46:	0852      	lsrs	r2, r2, #1
 8004b48:	3a01      	subs	r2, #1
 8004b4a:	0652      	lsls	r2, r2, #25
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	4916      	ldr	r1, [pc, #88]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b54:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a13      	ldr	r2, [pc, #76]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7fc fdc0 	bl	80016e4 <HAL_GetTick>
 8004b64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b66:	e009      	b.n	8004b7c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b68:	f7fc fdbc 	bl	80016e4 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d902      	bls.n	8004b7c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	73fb      	strb	r3, [r7, #15]
          break;
 8004b7a:	e005      	b.n	8004b88 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ef      	beq.n	8004b68 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	4904      	ldr	r1, [pc, #16]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40021000 	.word	0x40021000

08004bac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bba:	4b6a      	ldr	r3, [pc, #424]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d018      	beq.n	8004bf8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004bc6:	4b67      	ldr	r3, [pc, #412]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f003 0203 	and.w	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d10d      	bne.n	8004bf2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
       ||
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004bde:	4b61      	ldr	r3, [pc, #388]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
       ||
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d047      	beq.n	8004c82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	73fb      	strb	r3, [r7, #15]
 8004bf6:	e044      	b.n	8004c82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b03      	cmp	r3, #3
 8004bfe:	d018      	beq.n	8004c32 <RCCEx_PLLSAI2_Config+0x86>
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d825      	bhi.n	8004c50 <RCCEx_PLLSAI2_Config+0xa4>
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d002      	beq.n	8004c0e <RCCEx_PLLSAI2_Config+0x62>
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d009      	beq.n	8004c20 <RCCEx_PLLSAI2_Config+0x74>
 8004c0c:	e020      	b.n	8004c50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c0e:	4b55      	ldr	r3, [pc, #340]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d11d      	bne.n	8004c56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c1e:	e01a      	b.n	8004c56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c20:	4b50      	ldr	r3, [pc, #320]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d116      	bne.n	8004c5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c30:	e013      	b.n	8004c5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c32:	4b4c      	ldr	r3, [pc, #304]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c3e:	4b49      	ldr	r3, [pc, #292]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c4e:	e006      	b.n	8004c5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
      break;
 8004c54:	e004      	b.n	8004c60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c56:	bf00      	nop
 8004c58:	e002      	b.n	8004c60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e000      	b.n	8004c60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10d      	bne.n	8004c82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c66:	4b3f      	ldr	r3, [pc, #252]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6819      	ldr	r1, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	4939      	ldr	r1, [pc, #228]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d167      	bne.n	8004d58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c88:	4b36      	ldr	r3, [pc, #216]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a35      	ldr	r2, [pc, #212]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c94:	f7fc fd26 	bl	80016e4 <HAL_GetTick>
 8004c98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c9a:	e009      	b.n	8004cb0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c9c:	f7fc fd22 	bl	80016e4 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d902      	bls.n	8004cb0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	73fb      	strb	r3, [r7, #15]
        break;
 8004cae:	e005      	b.n	8004cbc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cb0:	4b2c      	ldr	r3, [pc, #176]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1ef      	bne.n	8004c9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d14a      	bne.n	8004d58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d111      	bne.n	8004cec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cc8:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6892      	ldr	r2, [r2, #8]
 8004cd8:	0211      	lsls	r1, r2, #8
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68d2      	ldr	r2, [r2, #12]
 8004cde:	0912      	lsrs	r2, r2, #4
 8004ce0:	0452      	lsls	r2, r2, #17
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	491f      	ldr	r1, [pc, #124]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	614b      	str	r3, [r1, #20]
 8004cea:	e011      	b.n	8004d10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cec:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cf4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6892      	ldr	r2, [r2, #8]
 8004cfc:	0211      	lsls	r1, r2, #8
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6912      	ldr	r2, [r2, #16]
 8004d02:	0852      	lsrs	r2, r2, #1
 8004d04:	3a01      	subs	r2, #1
 8004d06:	0652      	lsls	r2, r2, #25
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	4916      	ldr	r1, [pc, #88]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d10:	4b14      	ldr	r3, [pc, #80]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a13      	ldr	r2, [pc, #76]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1c:	f7fc fce2 	bl	80016e4 <HAL_GetTick>
 8004d20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d22:	e009      	b.n	8004d38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d24:	f7fc fcde 	bl	80016e4 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d902      	bls.n	8004d38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	73fb      	strb	r3, [r7, #15]
          break;
 8004d36:	e005      	b.n	8004d44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0ef      	beq.n	8004d24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d4a:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d4c:	695a      	ldr	r2, [r3, #20]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	4904      	ldr	r1, [pc, #16]	; (8004d64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40021000 	.word	0x40021000

08004d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e040      	b.n	8004dfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fc f80c 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2224      	movs	r2, #36	; 0x24
 8004d94:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fe74 	bl	8005a9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fbb9 	bl	800552c <UART_SetConfig>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e01b      	b.n	8004dfc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fef3 	bl	8005be0 <UART_CheckIdleState>
 8004dfa:	4603      	mov	r3, r0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	; 0x28
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d178      	bne.n	8004f0e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <HAL_UART_Transmit+0x24>
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e071      	b.n	8004f10 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2221      	movs	r2, #33	; 0x21
 8004e38:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e3a:	f7fc fc53 	bl	80016e4 <HAL_GetTick>
 8004e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	88fa      	ldrh	r2, [r7, #6]
 8004e44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	88fa      	ldrh	r2, [r7, #6]
 8004e4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e58:	d108      	bne.n	8004e6c <HAL_UART_Transmit+0x68>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d104      	bne.n	8004e6c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	e003      	b.n	8004e74 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e74:	e030      	b.n	8004ed8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2180      	movs	r1, #128	; 0x80
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 ff55 	bl	8005d30 <UART_WaitOnFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e03c      	b.n	8004f10 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10b      	bne.n	8004eb4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	881a      	ldrh	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ea8:	b292      	uxth	r2, r2
 8004eaa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	3302      	adds	r3, #2
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	e008      	b.n	8004ec6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	781a      	ldrb	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	b292      	uxth	r2, r2
 8004ebe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1c8      	bne.n	8004e76 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2200      	movs	r2, #0
 8004eec:	2140      	movs	r1, #64	; 0x40
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 ff1e 	bl	8005d30 <UART_WaitOnFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e005      	b.n	8004f10 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e000      	b.n	8004f10 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004f0e:	2302      	movs	r3, #2
  }
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3720      	adds	r7, #32
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b0ba      	sub	sp, #232	; 0xe8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f42:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f46:	4013      	ands	r3, r2
 8004f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d115      	bne.n	8004f80 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00f      	beq.n	8004f80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 82ae 	beq.w	80054d2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	4798      	blx	r3
      }
      return;
 8004f7e:	e2a8      	b.n	80054d2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004f80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 8117 	beq.w	80051b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f9a:	4b85      	ldr	r3, [pc, #532]	; (80051b0 <HAL_UART_IRQHandler+0x298>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 810a 	beq.w	80051b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d011      	beq.n	8004fd4 <HAL_UART_IRQHandler+0xbc>
 8004fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00b      	beq.n	8004fd4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fca:	f043 0201 	orr.w	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d011      	beq.n	8005004 <HAL_UART_IRQHandler+0xec>
 8004fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00b      	beq.n	8005004 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ffa:	f043 0204 	orr.w	r2, r3, #4
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d011      	beq.n	8005034 <HAL_UART_IRQHandler+0x11c>
 8005010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00b      	beq.n	8005034 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2204      	movs	r2, #4
 8005022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800502a:	f043 0202 	orr.w	r2, r3, #2
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d017      	beq.n	8005070 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800504c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005050:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00b      	beq.n	8005070 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2208      	movs	r2, #8
 800505e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005066:	f043 0208 	orr.w	r2, r3, #8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005078:	2b00      	cmp	r3, #0
 800507a:	d012      	beq.n	80050a2 <HAL_UART_IRQHandler+0x18a>
 800507c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00c      	beq.n	80050a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005098:	f043 0220 	orr.w	r2, r3, #32
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8214 	beq.w	80054d6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00d      	beq.n	80050d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ea:	2b40      	cmp	r3, #64	; 0x40
 80050ec:	d005      	beq.n	80050fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d04f      	beq.n	800519a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fe85 	bl	8005e0a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510a:	2b40      	cmp	r3, #64	; 0x40
 800510c:	d141      	bne.n	8005192 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3308      	adds	r3, #8
 8005114:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005124:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3308      	adds	r3, #8
 8005136:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800513a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800513e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005146:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1d9      	bne.n	800510e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515e:	2b00      	cmp	r3, #0
 8005160:	d013      	beq.n	800518a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005166:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <HAL_UART_IRQHandler+0x29c>)
 8005168:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516e:	4618      	mov	r0, r3
 8005170:	f7fc fc37 	bl	80019e2 <HAL_DMA_Abort_IT>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d017      	beq.n	80051aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005184:	4610      	mov	r0, r2
 8005186:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005188:	e00f      	b.n	80051aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f9b8 	bl	8005500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005190:	e00b      	b.n	80051aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f9b4 	bl	8005500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005198:	e007      	b.n	80051aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f9b0 	bl	8005500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80051a8:	e195      	b.n	80054d6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051aa:	bf00      	nop
    return;
 80051ac:	e193      	b.n	80054d6 <HAL_UART_IRQHandler+0x5be>
 80051ae:	bf00      	nop
 80051b0:	04000120 	.word	0x04000120
 80051b4:	08005ed3 	.word	0x08005ed3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051bc:	2b01      	cmp	r3, #1
 80051be:	f040 814e 	bne.w	800545e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8147 	beq.w	800545e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8140 	beq.w	800545e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2210      	movs	r2, #16
 80051e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b40      	cmp	r3, #64	; 0x40
 80051f2:	f040 80b8 	bne.w	8005366 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005202:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 8167 	beq.w	80054da <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005216:	429a      	cmp	r2, r3
 8005218:	f080 815f 	bcs.w	80054da <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005222:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b00      	cmp	r3, #0
 8005234:	f040 8086 	bne.w	8005344 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800524c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005262:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005266:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800526e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800527a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1da      	bne.n	8005238 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3308      	adds	r3, #8
 8005288:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005294:	f023 0301 	bic.w	r3, r3, #1
 8005298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3308      	adds	r3, #8
 80052a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e1      	bne.n	8005282 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3308      	adds	r3, #8
 80052c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3308      	adds	r3, #8
 80052de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e3      	bne.n	80052be <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005314:	f023 0310 	bic.w	r3, r3, #16
 8005318:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005326:	65bb      	str	r3, [r7, #88]	; 0x58
 8005328:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800532c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e4      	bne.n	8005304 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533e:	4618      	mov	r0, r3
 8005340:	f7fc fb11 	bl	8001966 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005356:	b29b      	uxth	r3, r3
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	b29b      	uxth	r3, r3
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f8d8 	bl	8005514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005364:	e0b9      	b.n	80054da <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005372:	b29b      	uxth	r3, r3
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 80ab 	beq.w	80054de <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80a6 	beq.w	80054de <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053b4:	647b      	str	r3, [r7, #68]	; 0x44
 80053b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e4      	bne.n	8005392 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3308      	adds	r3, #8
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	e853 3f00 	ldrex	r3, [r3]
 80053d6:	623b      	str	r3, [r7, #32]
   return(result);
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3308      	adds	r3, #8
 80053e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053ec:	633a      	str	r2, [r7, #48]	; 0x30
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e3      	bne.n	80053c8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	60fb      	str	r3, [r7, #12]
   return(result);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f023 0310 	bic.w	r3, r3, #16
 8005428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005436:	61fb      	str	r3, [r7, #28]
 8005438:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	69b9      	ldr	r1, [r7, #24]
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	617b      	str	r3, [r7, #20]
   return(result);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e4      	bne.n	8005414 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2202      	movs	r2, #2
 800544e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f85c 	bl	8005514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800545c:	e03f      	b.n	80054de <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800545e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00e      	beq.n	8005488 <HAL_UART_IRQHandler+0x570>
 800546a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800546e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d008      	beq.n	8005488 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800547e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fd66 	bl	8005f52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005486:	e02d      	b.n	80054e4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00e      	beq.n	80054b2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01c      	beq.n	80054e2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4798      	blx	r3
    }
    return;
 80054b0:	e017      	b.n	80054e2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d012      	beq.n	80054e4 <HAL_UART_IRQHandler+0x5cc>
 80054be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00c      	beq.n	80054e4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fd17 	bl	8005efe <UART_EndTransmit_IT>
    return;
 80054d0:	e008      	b.n	80054e4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80054d2:	bf00      	nop
 80054d4:	e006      	b.n	80054e4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80054d6:	bf00      	nop
 80054d8:	e004      	b.n	80054e4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80054da:	bf00      	nop
 80054dc:	e002      	b.n	80054e4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80054de:	bf00      	nop
 80054e0:	e000      	b.n	80054e4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80054e2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80054e4:	37e8      	adds	r7, #232	; 0xe8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop

080054ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800552c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005530:	b08a      	sub	sp, #40	; 0x28
 8005532:	af00      	add	r7, sp, #0
 8005534:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	431a      	orrs	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	431a      	orrs	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	4313      	orrs	r3, r2
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4ba4      	ldr	r3, [pc, #656]	; (80057ec <UART_SetConfig+0x2c0>)
 800555c:	4013      	ands	r3, r2
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005564:	430b      	orrs	r3, r1
 8005566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a99      	ldr	r2, [pc, #612]	; (80057f0 <UART_SetConfig+0x2c4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d004      	beq.n	8005598 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005594:	4313      	orrs	r3, r2
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a8:	430a      	orrs	r2, r1
 80055aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a90      	ldr	r2, [pc, #576]	; (80057f4 <UART_SetConfig+0x2c8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d126      	bne.n	8005604 <UART_SetConfig+0xd8>
 80055b6:	4b90      	ldr	r3, [pc, #576]	; (80057f8 <UART_SetConfig+0x2cc>)
 80055b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d81b      	bhi.n	80055fc <UART_SetConfig+0xd0>
 80055c4:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <UART_SetConfig+0xa0>)
 80055c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ca:	bf00      	nop
 80055cc:	080055dd 	.word	0x080055dd
 80055d0:	080055ed 	.word	0x080055ed
 80055d4:	080055e5 	.word	0x080055e5
 80055d8:	080055f5 	.word	0x080055f5
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055e2:	e116      	b.n	8005812 <UART_SetConfig+0x2e6>
 80055e4:	2302      	movs	r3, #2
 80055e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ea:	e112      	b.n	8005812 <UART_SetConfig+0x2e6>
 80055ec:	2304      	movs	r3, #4
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f2:	e10e      	b.n	8005812 <UART_SetConfig+0x2e6>
 80055f4:	2308      	movs	r3, #8
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055fa:	e10a      	b.n	8005812 <UART_SetConfig+0x2e6>
 80055fc:	2310      	movs	r3, #16
 80055fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005602:	e106      	b.n	8005812 <UART_SetConfig+0x2e6>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a7c      	ldr	r2, [pc, #496]	; (80057fc <UART_SetConfig+0x2d0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d138      	bne.n	8005680 <UART_SetConfig+0x154>
 800560e:	4b7a      	ldr	r3, [pc, #488]	; (80057f8 <UART_SetConfig+0x2cc>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	f003 030c 	and.w	r3, r3, #12
 8005618:	2b0c      	cmp	r3, #12
 800561a:	d82d      	bhi.n	8005678 <UART_SetConfig+0x14c>
 800561c:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <UART_SetConfig+0xf8>)
 800561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005622:	bf00      	nop
 8005624:	08005659 	.word	0x08005659
 8005628:	08005679 	.word	0x08005679
 800562c:	08005679 	.word	0x08005679
 8005630:	08005679 	.word	0x08005679
 8005634:	08005669 	.word	0x08005669
 8005638:	08005679 	.word	0x08005679
 800563c:	08005679 	.word	0x08005679
 8005640:	08005679 	.word	0x08005679
 8005644:	08005661 	.word	0x08005661
 8005648:	08005679 	.word	0x08005679
 800564c:	08005679 	.word	0x08005679
 8005650:	08005679 	.word	0x08005679
 8005654:	08005671 	.word	0x08005671
 8005658:	2300      	movs	r3, #0
 800565a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565e:	e0d8      	b.n	8005812 <UART_SetConfig+0x2e6>
 8005660:	2302      	movs	r3, #2
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005666:	e0d4      	b.n	8005812 <UART_SetConfig+0x2e6>
 8005668:	2304      	movs	r3, #4
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566e:	e0d0      	b.n	8005812 <UART_SetConfig+0x2e6>
 8005670:	2308      	movs	r3, #8
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005676:	e0cc      	b.n	8005812 <UART_SetConfig+0x2e6>
 8005678:	2310      	movs	r3, #16
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567e:	e0c8      	b.n	8005812 <UART_SetConfig+0x2e6>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a5e      	ldr	r2, [pc, #376]	; (8005800 <UART_SetConfig+0x2d4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d125      	bne.n	80056d6 <UART_SetConfig+0x1aa>
 800568a:	4b5b      	ldr	r3, [pc, #364]	; (80057f8 <UART_SetConfig+0x2cc>)
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005690:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005694:	2b30      	cmp	r3, #48	; 0x30
 8005696:	d016      	beq.n	80056c6 <UART_SetConfig+0x19a>
 8005698:	2b30      	cmp	r3, #48	; 0x30
 800569a:	d818      	bhi.n	80056ce <UART_SetConfig+0x1a2>
 800569c:	2b20      	cmp	r3, #32
 800569e:	d00a      	beq.n	80056b6 <UART_SetConfig+0x18a>
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d814      	bhi.n	80056ce <UART_SetConfig+0x1a2>
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <UART_SetConfig+0x182>
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d008      	beq.n	80056be <UART_SetConfig+0x192>
 80056ac:	e00f      	b.n	80056ce <UART_SetConfig+0x1a2>
 80056ae:	2300      	movs	r3, #0
 80056b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056b4:	e0ad      	b.n	8005812 <UART_SetConfig+0x2e6>
 80056b6:	2302      	movs	r3, #2
 80056b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056bc:	e0a9      	b.n	8005812 <UART_SetConfig+0x2e6>
 80056be:	2304      	movs	r3, #4
 80056c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c4:	e0a5      	b.n	8005812 <UART_SetConfig+0x2e6>
 80056c6:	2308      	movs	r3, #8
 80056c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056cc:	e0a1      	b.n	8005812 <UART_SetConfig+0x2e6>
 80056ce:	2310      	movs	r3, #16
 80056d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d4:	e09d      	b.n	8005812 <UART_SetConfig+0x2e6>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a4a      	ldr	r2, [pc, #296]	; (8005804 <UART_SetConfig+0x2d8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d125      	bne.n	800572c <UART_SetConfig+0x200>
 80056e0:	4b45      	ldr	r3, [pc, #276]	; (80057f8 <UART_SetConfig+0x2cc>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056ea:	2bc0      	cmp	r3, #192	; 0xc0
 80056ec:	d016      	beq.n	800571c <UART_SetConfig+0x1f0>
 80056ee:	2bc0      	cmp	r3, #192	; 0xc0
 80056f0:	d818      	bhi.n	8005724 <UART_SetConfig+0x1f8>
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d00a      	beq.n	800570c <UART_SetConfig+0x1e0>
 80056f6:	2b80      	cmp	r3, #128	; 0x80
 80056f8:	d814      	bhi.n	8005724 <UART_SetConfig+0x1f8>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <UART_SetConfig+0x1d8>
 80056fe:	2b40      	cmp	r3, #64	; 0x40
 8005700:	d008      	beq.n	8005714 <UART_SetConfig+0x1e8>
 8005702:	e00f      	b.n	8005724 <UART_SetConfig+0x1f8>
 8005704:	2300      	movs	r3, #0
 8005706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800570a:	e082      	b.n	8005812 <UART_SetConfig+0x2e6>
 800570c:	2302      	movs	r3, #2
 800570e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005712:	e07e      	b.n	8005812 <UART_SetConfig+0x2e6>
 8005714:	2304      	movs	r3, #4
 8005716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800571a:	e07a      	b.n	8005812 <UART_SetConfig+0x2e6>
 800571c:	2308      	movs	r3, #8
 800571e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005722:	e076      	b.n	8005812 <UART_SetConfig+0x2e6>
 8005724:	2310      	movs	r3, #16
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572a:	e072      	b.n	8005812 <UART_SetConfig+0x2e6>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a35      	ldr	r2, [pc, #212]	; (8005808 <UART_SetConfig+0x2dc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d12a      	bne.n	800578c <UART_SetConfig+0x260>
 8005736:	4b30      	ldr	r3, [pc, #192]	; (80057f8 <UART_SetConfig+0x2cc>)
 8005738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005740:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005744:	d01a      	beq.n	800577c <UART_SetConfig+0x250>
 8005746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800574a:	d81b      	bhi.n	8005784 <UART_SetConfig+0x258>
 800574c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005750:	d00c      	beq.n	800576c <UART_SetConfig+0x240>
 8005752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005756:	d815      	bhi.n	8005784 <UART_SetConfig+0x258>
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <UART_SetConfig+0x238>
 800575c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005760:	d008      	beq.n	8005774 <UART_SetConfig+0x248>
 8005762:	e00f      	b.n	8005784 <UART_SetConfig+0x258>
 8005764:	2300      	movs	r3, #0
 8005766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800576a:	e052      	b.n	8005812 <UART_SetConfig+0x2e6>
 800576c:	2302      	movs	r3, #2
 800576e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005772:	e04e      	b.n	8005812 <UART_SetConfig+0x2e6>
 8005774:	2304      	movs	r3, #4
 8005776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800577a:	e04a      	b.n	8005812 <UART_SetConfig+0x2e6>
 800577c:	2308      	movs	r3, #8
 800577e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005782:	e046      	b.n	8005812 <UART_SetConfig+0x2e6>
 8005784:	2310      	movs	r3, #16
 8005786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800578a:	e042      	b.n	8005812 <UART_SetConfig+0x2e6>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a17      	ldr	r2, [pc, #92]	; (80057f0 <UART_SetConfig+0x2c4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d13a      	bne.n	800580c <UART_SetConfig+0x2e0>
 8005796:	4b18      	ldr	r3, [pc, #96]	; (80057f8 <UART_SetConfig+0x2cc>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057a4:	d01a      	beq.n	80057dc <UART_SetConfig+0x2b0>
 80057a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057aa:	d81b      	bhi.n	80057e4 <UART_SetConfig+0x2b8>
 80057ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b0:	d00c      	beq.n	80057cc <UART_SetConfig+0x2a0>
 80057b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b6:	d815      	bhi.n	80057e4 <UART_SetConfig+0x2b8>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <UART_SetConfig+0x298>
 80057bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c0:	d008      	beq.n	80057d4 <UART_SetConfig+0x2a8>
 80057c2:	e00f      	b.n	80057e4 <UART_SetConfig+0x2b8>
 80057c4:	2300      	movs	r3, #0
 80057c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ca:	e022      	b.n	8005812 <UART_SetConfig+0x2e6>
 80057cc:	2302      	movs	r3, #2
 80057ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057d2:	e01e      	b.n	8005812 <UART_SetConfig+0x2e6>
 80057d4:	2304      	movs	r3, #4
 80057d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057da:	e01a      	b.n	8005812 <UART_SetConfig+0x2e6>
 80057dc:	2308      	movs	r3, #8
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e2:	e016      	b.n	8005812 <UART_SetConfig+0x2e6>
 80057e4:	2310      	movs	r3, #16
 80057e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ea:	e012      	b.n	8005812 <UART_SetConfig+0x2e6>
 80057ec:	efff69f3 	.word	0xefff69f3
 80057f0:	40008000 	.word	0x40008000
 80057f4:	40013800 	.word	0x40013800
 80057f8:	40021000 	.word	0x40021000
 80057fc:	40004400 	.word	0x40004400
 8005800:	40004800 	.word	0x40004800
 8005804:	40004c00 	.word	0x40004c00
 8005808:	40005000 	.word	0x40005000
 800580c:	2310      	movs	r3, #16
 800580e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a9f      	ldr	r2, [pc, #636]	; (8005a94 <UART_SetConfig+0x568>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d17a      	bne.n	8005912 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800581c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005820:	2b08      	cmp	r3, #8
 8005822:	d824      	bhi.n	800586e <UART_SetConfig+0x342>
 8005824:	a201      	add	r2, pc, #4	; (adr r2, 800582c <UART_SetConfig+0x300>)
 8005826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582a:	bf00      	nop
 800582c:	08005851 	.word	0x08005851
 8005830:	0800586f 	.word	0x0800586f
 8005834:	08005859 	.word	0x08005859
 8005838:	0800586f 	.word	0x0800586f
 800583c:	0800585f 	.word	0x0800585f
 8005840:	0800586f 	.word	0x0800586f
 8005844:	0800586f 	.word	0x0800586f
 8005848:	0800586f 	.word	0x0800586f
 800584c:	08005867 	.word	0x08005867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005850:	f7fe fd32 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 8005854:	61f8      	str	r0, [r7, #28]
        break;
 8005856:	e010      	b.n	800587a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005858:	4b8f      	ldr	r3, [pc, #572]	; (8005a98 <UART_SetConfig+0x56c>)
 800585a:	61fb      	str	r3, [r7, #28]
        break;
 800585c:	e00d      	b.n	800587a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800585e:	f7fe fc93 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8005862:	61f8      	str	r0, [r7, #28]
        break;
 8005864:	e009      	b.n	800587a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800586a:	61fb      	str	r3, [r7, #28]
        break;
 800586c:	e005      	b.n	800587a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005878:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 80fb 	beq.w	8005a78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	4613      	mov	r3, r2
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	4413      	add	r3, r2
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	429a      	cmp	r2, r3
 8005890:	d305      	bcc.n	800589e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	429a      	cmp	r2, r3
 800589c:	d903      	bls.n	80058a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058a4:	e0e8      	b.n	8005a78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	2200      	movs	r2, #0
 80058aa:	461c      	mov	r4, r3
 80058ac:	4615      	mov	r5, r2
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	022b      	lsls	r3, r5, #8
 80058b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80058bc:	0222      	lsls	r2, r4, #8
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	6849      	ldr	r1, [r1, #4]
 80058c2:	0849      	lsrs	r1, r1, #1
 80058c4:	2000      	movs	r0, #0
 80058c6:	4688      	mov	r8, r1
 80058c8:	4681      	mov	r9, r0
 80058ca:	eb12 0a08 	adds.w	sl, r2, r8
 80058ce:	eb43 0b09 	adc.w	fp, r3, r9
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	603b      	str	r3, [r7, #0]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058e0:	4650      	mov	r0, sl
 80058e2:	4659      	mov	r1, fp
 80058e4:	f7fa fccc 	bl	8000280 <__aeabi_uldivmod>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4613      	mov	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058f6:	d308      	bcc.n	800590a <UART_SetConfig+0x3de>
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058fe:	d204      	bcs.n	800590a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	60da      	str	r2, [r3, #12]
 8005908:	e0b6      	b.n	8005a78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005910:	e0b2      	b.n	8005a78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800591a:	d15e      	bne.n	80059da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800591c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005920:	2b08      	cmp	r3, #8
 8005922:	d828      	bhi.n	8005976 <UART_SetConfig+0x44a>
 8005924:	a201      	add	r2, pc, #4	; (adr r2, 800592c <UART_SetConfig+0x400>)
 8005926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592a:	bf00      	nop
 800592c:	08005951 	.word	0x08005951
 8005930:	08005959 	.word	0x08005959
 8005934:	08005961 	.word	0x08005961
 8005938:	08005977 	.word	0x08005977
 800593c:	08005967 	.word	0x08005967
 8005940:	08005977 	.word	0x08005977
 8005944:	08005977 	.word	0x08005977
 8005948:	08005977 	.word	0x08005977
 800594c:	0800596f 	.word	0x0800596f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005950:	f7fe fcb2 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 8005954:	61f8      	str	r0, [r7, #28]
        break;
 8005956:	e014      	b.n	8005982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005958:	f7fe fcc4 	bl	80042e4 <HAL_RCC_GetPCLK2Freq>
 800595c:	61f8      	str	r0, [r7, #28]
        break;
 800595e:	e010      	b.n	8005982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005960:	4b4d      	ldr	r3, [pc, #308]	; (8005a98 <UART_SetConfig+0x56c>)
 8005962:	61fb      	str	r3, [r7, #28]
        break;
 8005964:	e00d      	b.n	8005982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005966:	f7fe fc0f 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 800596a:	61f8      	str	r0, [r7, #28]
        break;
 800596c:	e009      	b.n	8005982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800596e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005972:	61fb      	str	r3, [r7, #28]
        break;
 8005974:	e005      	b.n	8005982 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d077      	beq.n	8005a78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	005a      	lsls	r2, r3, #1
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	441a      	add	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	fbb2 f3f3 	udiv	r3, r2, r3
 800599c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	2b0f      	cmp	r3, #15
 80059a2:	d916      	bls.n	80059d2 <UART_SetConfig+0x4a6>
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059aa:	d212      	bcs.n	80059d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	f023 030f 	bic.w	r3, r3, #15
 80059b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	8afb      	ldrh	r3, [r7, #22]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	8afa      	ldrh	r2, [r7, #22]
 80059ce:	60da      	str	r2, [r3, #12]
 80059d0:	e052      	b.n	8005a78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059d8:	e04e      	b.n	8005a78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059de:	2b08      	cmp	r3, #8
 80059e0:	d827      	bhi.n	8005a32 <UART_SetConfig+0x506>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <UART_SetConfig+0x4bc>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a0d 	.word	0x08005a0d
 80059ec:	08005a15 	.word	0x08005a15
 80059f0:	08005a1d 	.word	0x08005a1d
 80059f4:	08005a33 	.word	0x08005a33
 80059f8:	08005a23 	.word	0x08005a23
 80059fc:	08005a33 	.word	0x08005a33
 8005a00:	08005a33 	.word	0x08005a33
 8005a04:	08005a33 	.word	0x08005a33
 8005a08:	08005a2b 	.word	0x08005a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a0c:	f7fe fc54 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 8005a10:	61f8      	str	r0, [r7, #28]
        break;
 8005a12:	e014      	b.n	8005a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a14:	f7fe fc66 	bl	80042e4 <HAL_RCC_GetPCLK2Freq>
 8005a18:	61f8      	str	r0, [r7, #28]
        break;
 8005a1a:	e010      	b.n	8005a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a1c:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <UART_SetConfig+0x56c>)
 8005a1e:	61fb      	str	r3, [r7, #28]
        break;
 8005a20:	e00d      	b.n	8005a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a22:	f7fe fbb1 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8005a26:	61f8      	str	r0, [r7, #28]
        break;
 8005a28:	e009      	b.n	8005a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2e:	61fb      	str	r3, [r7, #28]
        break;
 8005a30:	e005      	b.n	8005a3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a3c:	bf00      	nop
    }

    if (pclk != 0U)
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d019      	beq.n	8005a78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	085a      	lsrs	r2, r3, #1
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	441a      	add	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	2b0f      	cmp	r3, #15
 8005a5c:	d909      	bls.n	8005a72 <UART_SetConfig+0x546>
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a64:	d205      	bcs.n	8005a72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60da      	str	r2, [r3, #12]
 8005a70:	e002      	b.n	8005a78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005a84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3728      	adds	r7, #40	; 0x28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a92:	bf00      	nop
 8005a94:	40008000 	.word	0x40008000
 8005a98:	00f42400 	.word	0x00f42400

08005a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00a      	beq.n	8005b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	f003 0310 	and.w	r3, r3, #16
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00a      	beq.n	8005b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d01a      	beq.n	8005bb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b9a:	d10a      	bne.n	8005bb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	605a      	str	r2, [r3, #4]
  }
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b098      	sub	sp, #96	; 0x60
 8005be4:	af02      	add	r7, sp, #8
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bf0:	f7fb fd78 	bl	80016e4 <HAL_GetTick>
 8005bf4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d12e      	bne.n	8005c62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f88c 	bl	8005d30 <UART_WaitOnFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d021      	beq.n	8005c62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c32:	653b      	str	r3, [r7, #80]	; 0x50
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e6      	bne.n	8005c1e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e062      	b.n	8005d28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d149      	bne.n	8005d04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f856 	bl	8005d30 <UART_WaitOnFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d03c      	beq.n	8005d04 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	e853 3f00 	ldrex	r3, [r3]
 8005c96:	623b      	str	r3, [r7, #32]
   return(result);
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8005caa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e6      	bne.n	8005c8a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0301 	bic.w	r3, r3, #1
 8005cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3308      	adds	r3, #8
 8005cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cdc:	61fa      	str	r2, [r7, #28]
 8005cde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	69b9      	ldr	r1, [r7, #24]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e5      	bne.n	8005cbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e011      	b.n	8005d28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2220      	movs	r2, #32
 8005d08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3758      	adds	r7, #88	; 0x58
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d40:	e04f      	b.n	8005de2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d48:	d04b      	beq.n	8005de2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4a:	f7fb fccb 	bl	80016e4 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d302      	bcc.n	8005d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e04e      	b.n	8005e02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d037      	beq.n	8005de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b80      	cmp	r3, #128	; 0x80
 8005d76:	d034      	beq.n	8005de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b40      	cmp	r3, #64	; 0x40
 8005d7c:	d031      	beq.n	8005de2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d110      	bne.n	8005dae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2208      	movs	r2, #8
 8005d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 f838 	bl	8005e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e029      	b.n	8005e02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dbc:	d111      	bne.n	8005de2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 f81e 	bl	8005e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e00f      	b.n	8005e02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69da      	ldr	r2, [r3, #28]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4013      	ands	r3, r2
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	bf0c      	ite	eq
 8005df2:	2301      	moveq	r3, #1
 8005df4:	2300      	movne	r3, #0
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	461a      	mov	r2, r3
 8005dfa:	79fb      	ldrb	r3, [r7, #7]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d0a0      	beq.n	8005d42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b095      	sub	sp, #84	; 0x54
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1a:	e853 3f00 	ldrex	r3, [r3]
 8005e1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e30:	643b      	str	r3, [r7, #64]	; 0x40
 8005e32:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e6      	bne.n	8005e12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3308      	adds	r3, #8
 8005e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	e853 3f00 	ldrex	r3, [r3]
 8005e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3308      	adds	r3, #8
 8005e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e6c:	e841 2300 	strex	r3, r2, [r1]
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e5      	bne.n	8005e44 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d118      	bne.n	8005eb2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f023 0310 	bic.w	r3, r3, #16
 8005e94:	647b      	str	r3, [r7, #68]	; 0x44
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9e:	61bb      	str	r3, [r7, #24]
 8005ea0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6979      	ldr	r1, [r7, #20]
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e6      	bne.n	8005e80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ec6:	bf00      	nop
 8005ec8:	3754      	adds	r7, #84	; 0x54
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f7ff fb05 	bl	8005500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b088      	sub	sp, #32
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1a:	61fb      	str	r3, [r7, #28]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6979      	ldr	r1, [r7, #20]
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	613b      	str	r3, [r7, #16]
   return(result);
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e6      	bne.n	8005f06 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff fad1 	bl	80054ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f4a:	bf00      	nop
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f66:	b084      	sub	sp, #16
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	f107 001c 	add.w	r0, r7, #28
 8005f74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f9c1 	bl	800630c <USB_CoreReset>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d106      	bne.n	8005fa2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38
 8005fa0:	e005      	b.n	8005fae <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fba:	b004      	add	sp, #16
 8005fbc:	4770      	bx	lr

08005fbe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f043 0201 	orr.w	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f023 0201 	bic.w	r2, r3, #1
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	460b      	mov	r3, r1
 800600c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800601e:	78fb      	ldrb	r3, [r7, #3]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d115      	bne.n	8006050 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006030:	200a      	movs	r0, #10
 8006032:	f7fb fb63 	bl	80016fc <HAL_Delay>
      ms += 10U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	330a      	adds	r3, #10
 800603a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f957 	bl	80062f0 <USB_GetMode>
 8006042:	4603      	mov	r3, r0
 8006044:	2b01      	cmp	r3, #1
 8006046:	d01e      	beq.n	8006086 <USB_SetCurrentMode+0x84>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2bc7      	cmp	r3, #199	; 0xc7
 800604c:	d9f0      	bls.n	8006030 <USB_SetCurrentMode+0x2e>
 800604e:	e01a      	b.n	8006086 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d115      	bne.n	8006082 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006062:	200a      	movs	r0, #10
 8006064:	f7fb fb4a 	bl	80016fc <HAL_Delay>
      ms += 10U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	330a      	adds	r3, #10
 800606c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f93e 	bl	80062f0 <USB_GetMode>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d005      	beq.n	8006086 <USB_SetCurrentMode+0x84>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2bc7      	cmp	r3, #199	; 0xc7
 800607e:	d9f0      	bls.n	8006062 <USB_SetCurrentMode+0x60>
 8006080:	e001      	b.n	8006086 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e005      	b.n	8006092 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2bc8      	cmp	r3, #200	; 0xc8
 800608a:	d101      	bne.n	8006090 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e000      	b.n	8006092 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3301      	adds	r3, #1
 80060ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a13      	ldr	r2, [pc, #76]	; (8006100 <USB_FlushTxFifo+0x64>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e01b      	b.n	80060f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	daf2      	bge.n	80060aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	019b      	lsls	r3, r3, #6
 80060cc:	f043 0220 	orr.w	r2, r3, #32
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a08      	ldr	r2, [pc, #32]	; (8006100 <USB_FlushTxFifo+0x64>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d901      	bls.n	80060e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e006      	b.n	80060f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d0f0      	beq.n	80060d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	00030d40 	.word	0x00030d40

08006104 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3301      	adds	r3, #1
 8006114:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4a11      	ldr	r2, [pc, #68]	; (8006160 <USB_FlushRxFifo+0x5c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d901      	bls.n	8006122 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e018      	b.n	8006154 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	daf2      	bge.n	8006110 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2210      	movs	r2, #16
 8006132:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3301      	adds	r3, #1
 8006138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4a08      	ldr	r2, [pc, #32]	; (8006160 <USB_FlushRxFifo+0x5c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d901      	bls.n	8006146 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e006      	b.n	8006154 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f003 0310 	and.w	r3, r3, #16
 800614e:	2b10      	cmp	r3, #16
 8006150:	d0f0      	beq.n	8006134 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	00030d40 	.word	0x00030d40

08006164 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006164:	b480      	push	{r7}
 8006166:	b089      	sub	sp, #36	; 0x24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	4611      	mov	r1, r2
 8006170:	461a      	mov	r2, r3
 8006172:	460b      	mov	r3, r1
 8006174:	71fb      	strb	r3, [r7, #7]
 8006176:	4613      	mov	r3, r2
 8006178:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006182:	88bb      	ldrh	r3, [r7, #4]
 8006184:	3303      	adds	r3, #3
 8006186:	089b      	lsrs	r3, r3, #2
 8006188:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800618a:	2300      	movs	r3, #0
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	e018      	b.n	80061c2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	031a      	lsls	r2, r3, #12
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	4413      	add	r3, r2
 8006198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800619c:	461a      	mov	r2, r3
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	3301      	adds	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	3301      	adds	r3, #1
 80061ae:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	3301      	adds	r3, #1
 80061b4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	3301      	adds	r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	3301      	adds	r3, #1
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d3e2      	bcc.n	8006190 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3724      	adds	r7, #36	; 0x24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061d8:	b480      	push	{r7}
 80061da:	b08b      	sub	sp, #44	; 0x2c
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	4613      	mov	r3, r2
 80061e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061ee:	88fb      	ldrh	r3, [r7, #6]
 80061f0:	089b      	lsrs	r3, r3, #2
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80061f6:	88fb      	ldrh	r3, [r7, #6]
 80061f8:	f003 0303 	and.w	r3, r3, #3
 80061fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80061fe:	2300      	movs	r3, #0
 8006200:	623b      	str	r3, [r7, #32]
 8006202:	e014      	b.n	800622e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	3301      	adds	r3, #1
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	3301      	adds	r3, #1
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	3301      	adds	r3, #1
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	3301      	adds	r3, #1
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	3301      	adds	r3, #1
 800622c:	623b      	str	r3, [r7, #32]
 800622e:	6a3a      	ldr	r2, [r7, #32]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	429a      	cmp	r2, r3
 8006234:	d3e6      	bcc.n	8006204 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006236:	8bfb      	ldrh	r3, [r7, #30]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01e      	beq.n	800627a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006246:	461a      	mov	r2, r3
 8006248:	f107 0310 	add.w	r3, r7, #16
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	fa22 f303 	lsr.w	r3, r2, r3
 800625c:	b2da      	uxtb	r2, r3
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	701a      	strb	r2, [r3, #0]
      i++;
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	3301      	adds	r3, #1
 8006266:	623b      	str	r3, [r7, #32]
      pDest++;
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	3301      	adds	r3, #1
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800626e:	8bfb      	ldrh	r3, [r7, #30]
 8006270:	3b01      	subs	r3, #1
 8006272:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006274:	8bfb      	ldrh	r3, [r7, #30]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1ea      	bne.n	8006250 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800627c:	4618      	mov	r0, r3
 800627e:	372c      	adds	r7, #44	; 0x2c
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4013      	ands	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062a0:	68fb      	ldr	r3, [r7, #12]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b085      	sub	sp, #20
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	4013      	ands	r3, r2
 80062e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062e2:	68bb      	ldr	r3, [r7, #8]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	f003 0301 	and.w	r3, r3, #1
}
 8006300:	4618      	mov	r0, r3
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	3301      	adds	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4a13      	ldr	r2, [pc, #76]	; (8006370 <USB_CoreReset+0x64>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d901      	bls.n	800632a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e01b      	b.n	8006362 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	daf2      	bge.n	8006318 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f043 0201 	orr.w	r2, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3301      	adds	r3, #1
 8006346:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4a09      	ldr	r2, [pc, #36]	; (8006370 <USB_CoreReset+0x64>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d901      	bls.n	8006354 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e006      	b.n	8006362 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b01      	cmp	r3, #1
 800635e:	d0f0      	beq.n	8006342 <USB_CoreReset+0x36>

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	00030d40 	.word	0x00030d40

08006374 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006374:	b084      	sub	sp, #16
 8006376:	b580      	push	{r7, lr}
 8006378:	b086      	sub	sp, #24
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006394:	461a      	mov	r2, r3
 8006396:	2300      	movs	r3, #0
 8006398:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063c0:	f023 0304 	bic.w	r3, r3, #4
 80063c4:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063c6:	2110      	movs	r1, #16
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff fe67 	bl	800609c <USB_FlushTxFifo>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff fe93 	bl	8006104 <USB_FlushRxFifo>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80063e8:	2300      	movs	r3, #0
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	e015      	b.n	800641a <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fa:	461a      	mov	r2, r3
 80063fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006400:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640e:	461a      	mov	r2, r3
 8006410:	2300      	movs	r3, #0
 8006412:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	3301      	adds	r3, #1
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	429a      	cmp	r2, r3
 8006420:	d3e5      	bcc.n	80063ee <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800642e:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2280      	movs	r2, #128	; 0x80
 8006434:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a0c      	ldr	r2, [pc, #48]	; (800646c <USB_HostInit+0xf8>)
 800643a:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a0c      	ldr	r2, [pc, #48]	; (8006470 <USB_HostInit+0xfc>)
 8006440:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f043 0210 	orr.w	r2, r3, #16
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	4b07      	ldr	r3, [pc, #28]	; (8006474 <USB_HostInit+0x100>)
 8006456:	4313      	orrs	r3, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800645c:	7dfb      	ldrb	r3, [r7, #23]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006468:	b004      	add	sp, #16
 800646a:	4770      	bx	lr
 800646c:	00600080 	.word	0x00600080
 8006470:	004000e0 	.word	0x004000e0
 8006474:	a3200008 	.word	0xa3200008

08006478 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006496:	f023 0303 	bic.w	r3, r3, #3
 800649a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	78fb      	ldrb	r3, [r7, #3]
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	68f9      	ldr	r1, [r7, #12]
 80064ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80064b0:	4313      	orrs	r3, r2
 80064b2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d107      	bne.n	80064ca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064c0:	461a      	mov	r2, r3
 80064c2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80064c6:	6053      	str	r3, [r2, #4]
 80064c8:	e00c      	b.n	80064e4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80064ca:	78fb      	ldrb	r3, [r7, #3]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d107      	bne.n	80064e0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d6:	461a      	mov	r2, r3
 80064d8:	f241 7370 	movw	r3, #6000	; 0x1770
 80064dc:	6053      	str	r3, [r2, #4]
 80064de:	e001      	b.n	80064e4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e000      	b.n	80064e6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006512:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800651c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006520:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006522:	2064      	movs	r0, #100	; 0x64
 8006524:	f7fb f8ea 	bl	80016fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006534:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006536:	200a      	movs	r0, #10
 8006538:	f7fb f8e0 	bl	80016fc <HAL_Delay>

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006546:	b480      	push	{r7}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800656a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <USB_DriveVbus+0x44>
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d106      	bne.n	800658a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006588:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006594:	d109      	bne.n	80065aa <USB_DriveVbus+0x64>
 8006596:	78fb      	ldrb	r3, [r7, #3]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d106      	bne.n	80065aa <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	0c5b      	lsrs	r3, r3, #17
 80065d6:	f003 0303 	and.w	r3, r3, #3
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	b29b      	uxth	r3, r3
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	4608      	mov	r0, r1
 8006612:	4611      	mov	r1, r2
 8006614:	461a      	mov	r2, r3
 8006616:	4603      	mov	r3, r0
 8006618:	70fb      	strb	r3, [r7, #3]
 800661a:	460b      	mov	r3, r1
 800661c:	70bb      	strb	r3, [r7, #2]
 800661e:	4613      	mov	r3, r2
 8006620:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800662a:	78fb      	ldrb	r3, [r7, #3]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4413      	add	r3, r2
 8006632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006636:	461a      	mov	r2, r3
 8006638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800663c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800663e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006642:	2b03      	cmp	r3, #3
 8006644:	d867      	bhi.n	8006716 <USB_HC_Init+0x10e>
 8006646:	a201      	add	r2, pc, #4	; (adr r2, 800664c <USB_HC_Init+0x44>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	0800665d 	.word	0x0800665d
 8006650:	080066d9 	.word	0x080066d9
 8006654:	0800665d 	.word	0x0800665d
 8006658:	0800669b 	.word	0x0800669b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4413      	add	r3, r2
 8006664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006668:	461a      	mov	r2, r3
 800666a:	f240 439d 	movw	r3, #1181	; 0x49d
 800666e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006670:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006674:	2b00      	cmp	r3, #0
 8006676:	da51      	bge.n	800671c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006678:	78fb      	ldrb	r3, [r7, #3]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	4413      	add	r3, r2
 8006680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	78fa      	ldrb	r2, [r7, #3]
 8006688:	0151      	lsls	r1, r2, #5
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	440a      	add	r2, r1
 800668e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006696:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006698:	e040      	b.n	800671c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a6:	461a      	mov	r2, r3
 80066a8:	f240 639d 	movw	r3, #1693	; 0x69d
 80066ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80066ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	da34      	bge.n	8006720 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	78fa      	ldrb	r2, [r7, #3]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d4:	60d3      	str	r3, [r2, #12]
      }

      break;
 80066d6:	e023      	b.n	8006720 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e4:	461a      	mov	r2, r3
 80066e6:	f240 2325 	movw	r3, #549	; 0x225
 80066ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80066ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	da17      	bge.n	8006724 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	78fa      	ldrb	r2, [r7, #3]
 8006704:	0151      	lsls	r1, r2, #5
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	440a      	add	r2, r1
 800670a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800670e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006712:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006714:	e006      	b.n	8006724 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	77fb      	strb	r3, [r7, #31]
      break;
 800671a:	e004      	b.n	8006726 <USB_HC_Init+0x11e>
      break;
 800671c:	bf00      	nop
 800671e:	e002      	b.n	8006726 <USB_HC_Init+0x11e>
      break;
 8006720:	bf00      	nop
 8006722:	e000      	b.n	8006726 <USB_HC_Init+0x11e>
      break;
 8006724:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006726:	78fb      	ldrb	r3, [r7, #3]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4413      	add	r3, r2
 800672e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	78fa      	ldrb	r2, [r7, #3]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	440a      	add	r2, r1
 800673c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006740:	f043 0302 	orr.w	r3, r3, #2
 8006744:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	78fb      	ldrb	r3, [r7, #3]
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	2101      	movs	r1, #1
 8006756:	fa01 f303 	lsl.w	r3, r1, r3
 800675a:	6939      	ldr	r1, [r7, #16]
 800675c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006760:	4313      	orrs	r3, r2
 8006762:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006770:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006774:	2b00      	cmp	r3, #0
 8006776:	da03      	bge.n	8006780 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	e001      	b.n	8006784 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff ff17 	bl	80065b8 <USB_GetHostSpeed>
 800678a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800678c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006790:	2b02      	cmp	r3, #2
 8006792:	d106      	bne.n	80067a2 <USB_HC_Init+0x19a>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d003      	beq.n	80067a2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800679a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	e001      	b.n	80067a6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067a6:	787b      	ldrb	r3, [r7, #1]
 80067a8:	059b      	lsls	r3, r3, #22
 80067aa:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067ae:	78bb      	ldrb	r3, [r7, #2]
 80067b0:	02db      	lsls	r3, r3, #11
 80067b2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067b6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80067b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067bc:	049b      	lsls	r3, r3, #18
 80067be:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067c2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80067c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80067c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80067ca:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	431a      	orrs	r2, r3
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067d4:	78fa      	ldrb	r2, [r7, #3]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80067e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067e4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80067e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d003      	beq.n	80067f6 <USB_HC_Init+0x1ee>
 80067ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d10f      	bne.n	8006816 <USB_HC_Init+0x20e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	78fa      	ldrb	r2, [r7, #3]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	440a      	add	r2, r1
 800680c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006810:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006814:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006816:	7ffb      	ldrb	r3, [r7, #31]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	785b      	ldrb	r3, [r3, #1]
 8006832:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006838:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d018      	beq.n	8006874 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	8952      	ldrh	r2, [r2, #10]
 800684a:	4413      	add	r3, r2
 800684c:	3b01      	subs	r3, #1
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	8952      	ldrh	r2, [r2, #10]
 8006852:	fbb3 f3f2 	udiv	r3, r3, r2
 8006856:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006858:	8bfa      	ldrh	r2, [r7, #30]
 800685a:	8a7b      	ldrh	r3, [r7, #18]
 800685c:	429a      	cmp	r2, r3
 800685e:	d90b      	bls.n	8006878 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006860:	8a7b      	ldrh	r3, [r7, #18]
 8006862:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006864:	8bfb      	ldrh	r3, [r7, #30]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	8952      	ldrh	r2, [r2, #10]
 800686a:	fb03 f202 	mul.w	r2, r3, r2
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	615a      	str	r2, [r3, #20]
 8006872:	e001      	b.n	8006878 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006874:	2301      	movs	r3, #1
 8006876:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	78db      	ldrb	r3, [r3, #3]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d007      	beq.n	8006890 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006880:	8bfb      	ldrh	r3, [r7, #30]
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	8952      	ldrh	r2, [r2, #10]
 8006886:	fb03 f202 	mul.w	r2, r3, r2
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	615a      	str	r2, [r3, #20]
 800688e:	e003      	b.n	8006898 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	699a      	ldr	r2, [r3, #24]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	615a      	str	r2, [r3, #20]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068a0:	8bfb      	ldrh	r3, [r7, #30]
 80068a2:	04d9      	lsls	r1, r3, #19
 80068a4:	4b59      	ldr	r3, [pc, #356]	; (8006a0c <USB_HC_StartXfer+0x1ec>)
 80068a6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068a8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	7b1b      	ldrb	r3, [r3, #12]
 80068ae:	075b      	lsls	r3, r3, #29
 80068b0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068b4:	6979      	ldr	r1, [r7, #20]
 80068b6:	0148      	lsls	r0, r1, #5
 80068b8:	69b9      	ldr	r1, [r7, #24]
 80068ba:	4401      	add	r1, r0
 80068bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068c0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068c2:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	bf0c      	ite	eq
 80068d4:	2301      	moveq	r3, #1
 80068d6:	2300      	movne	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80068fa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	4413      	add	r3, r2
 8006904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	7c7b      	ldrb	r3, [r7, #17]
 800690c:	075b      	lsls	r3, r3, #29
 800690e:	6979      	ldr	r1, [r7, #20]
 8006910:	0148      	lsls	r0, r1, #5
 8006912:	69b9      	ldr	r1, [r7, #24]
 8006914:	4401      	add	r1, r0
 8006916:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800691a:	4313      	orrs	r3, r2
 800691c:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	4413      	add	r3, r2
 8006926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006934:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	78db      	ldrb	r3, [r3, #3]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d004      	beq.n	8006948 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006944:	60bb      	str	r3, [r7, #8]
 8006946:	e003      	b.n	8006950 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800694e:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006956:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	4413      	add	r3, r2
 8006960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006964:	461a      	mov	r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	78db      	ldrb	r3, [r3, #3]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d147      	bne.n	8006a02 <USB_HC_StartXfer+0x1e2>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d043      	beq.n	8006a02 <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	7a1b      	ldrb	r3, [r3, #8]
 800697e:	2b03      	cmp	r3, #3
 8006980:	d830      	bhi.n	80069e4 <USB_HC_StartXfer+0x1c4>
 8006982:	a201      	add	r2, pc, #4	; (adr r2, 8006988 <USB_HC_StartXfer+0x168>)
 8006984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006988:	08006999 	.word	0x08006999
 800698c:	080069bd 	.word	0x080069bd
 8006990:	08006999 	.word	0x08006999
 8006994:	080069bd 	.word	0x080069bd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	3303      	adds	r3, #3
 800699e:	089b      	lsrs	r3, r3, #2
 80069a0:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80069a2:	89fa      	ldrh	r2, [r7, #14]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d91c      	bls.n	80069e8 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f043 0220 	orr.w	r2, r3, #32
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80069ba:	e015      	b.n	80069e8 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	3303      	adds	r3, #3
 80069c2:	089b      	lsrs	r3, r3, #2
 80069c4:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80069c6:	89fa      	ldrh	r2, [r7, #14]
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d90a      	bls.n	80069ec <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80069e2:	e003      	b.n	80069ec <USB_HC_StartXfer+0x1cc>

      default:
        break;
 80069e4:	bf00      	nop
 80069e6:	e002      	b.n	80069ee <USB_HC_StartXfer+0x1ce>
        break;
 80069e8:	bf00      	nop
 80069ea:	e000      	b.n	80069ee <USB_HC_StartXfer+0x1ce>
        break;
 80069ec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	6919      	ldr	r1, [r3, #16]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	785a      	ldrb	r2, [r3, #1]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff fbb1 	bl	8006164 <USB_WritePacket>
  }

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3720      	adds	r7, #32
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	1ff80000 	.word	0x1ff80000

08006a10 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	b29b      	uxth	r3, r3
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b089      	sub	sp, #36	; 0x24
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	0c9b      	lsrs	r3, r3, #18
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	0fdb      	lsrs	r3, r3, #31
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	0fdb      	lsrs	r3, r3, #31
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d10d      	bne.n	8006ab4 <USB_HC_Halt+0x82>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <USB_HC_Halt+0x82>
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d002      	beq.n	8006ab0 <USB_HC_Halt+0x7e>
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d101      	bne.n	8006ab4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	e0d8      	b.n	8006c66 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <USB_HC_Halt+0x8e>
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d173      	bne.n	8006ba8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	0151      	lsls	r1, r2, #5
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ade:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f003 0320 	and.w	r3, r3, #32
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d14a      	bne.n	8006b82 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d133      	bne.n	8006b60 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	0151      	lsls	r1, r2, #5
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	440a      	add	r2, r1
 8006b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b16:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	0151      	lsls	r1, r2, #5
 8006b2a:	69fa      	ldr	r2, [r7, #28]
 8006b2c:	440a      	add	r2, r1
 8006b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b36:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b44:	d82e      	bhi.n	8006ba4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b5c:	d0ec      	beq.n	8006b38 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b5e:	e081      	b.n	8006c64 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	0151      	lsls	r1, r2, #5
 8006b72:	69fa      	ldr	r2, [r7, #28]
 8006b74:	440a      	add	r2, r1
 8006b76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b7e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b80:	e070      	b.n	8006c64 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	0151      	lsls	r1, r2, #5
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	440a      	add	r2, r1
 8006b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ba0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ba2:	e05f      	b.n	8006c64 <USB_HC_Halt+0x232>
            break;
 8006ba4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ba6:	e05d      	b.n	8006c64 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bc6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d133      	bne.n	8006c40 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bf6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	0151      	lsls	r1, r2, #5
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	440a      	add	r2, r1
 8006c0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c16:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c24:	d81d      	bhi.n	8006c62 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c3c:	d0ec      	beq.n	8006c18 <USB_HC_Halt+0x1e6>
 8006c3e:	e011      	b.n	8006c64 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	0151      	lsls	r1, r2, #5
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	440a      	add	r2, r1
 8006c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	e000      	b.n	8006c64 <USB_HC_Halt+0x232>
          break;
 8006c62:	bf00      	nop
    }
  }

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3724      	adds	r7, #36	; 0x24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b088      	sub	sp, #32
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff f9aa 	bl	8005fe0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c8c:	2110      	movs	r1, #16
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff fa04 	bl	800609c <USB_FlushTxFifo>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff fa30 	bl	8006104 <USB_FlushRxFifo>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61bb      	str	r3, [r7, #24]
 8006cb2:	e01f      	b.n	8006cf4 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cca:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cd2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cda:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce8:	461a      	mov	r2, r3
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	61bb      	str	r3, [r7, #24]
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b0f      	cmp	r3, #15
 8006cf8:	d9dc      	bls.n	8006cb4 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	e034      	b.n	8006d6a <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d16:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d1e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d26:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d34:	461a      	mov	r2, r3
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d46:	d80c      	bhi.n	8006d62 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d5e:	d0ec      	beq.n	8006d3a <USB_StopHost+0xc8>
 8006d60:	e000      	b.n	8006d64 <USB_StopHost+0xf2>
        break;
 8006d62:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	3301      	adds	r3, #1
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	2b0f      	cmp	r3, #15
 8006d6e:	d9c7      	bls.n	8006d00 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d76:	461a      	mov	r2, r3
 8006d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d7c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d84:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff f919 	bl	8005fbe <USB_EnableGlobalInt>

  return ret;
 8006d8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3720      	adds	r7, #32
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006da2:	79fb      	ldrb	r3, [r7, #7]
 8006da4:	4a08      	ldr	r2, [pc, #32]	; (8006dc8 <disk_status+0x30>)
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	79fa      	ldrb	r2, [r7, #7]
 8006db0:	4905      	ldr	r1, [pc, #20]	; (8006dc8 <disk_status+0x30>)
 8006db2:	440a      	add	r2, r1
 8006db4:	7b12      	ldrb	r2, [r2, #12]
 8006db6:	4610      	mov	r0, r2
 8006db8:	4798      	blx	r3
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	200014e8 	.word	0x200014e8

08006dcc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	4a0d      	ldr	r2, [pc, #52]	; (8006e14 <disk_initialize+0x48>)
 8006dde:	5cd3      	ldrb	r3, [r2, r3]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d111      	bne.n	8006e08 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	4a0b      	ldr	r2, [pc, #44]	; (8006e14 <disk_initialize+0x48>)
 8006de8:	2101      	movs	r1, #1
 8006dea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <disk_initialize+0x48>)
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	79fa      	ldrb	r2, [r7, #7]
 8006dfa:	4906      	ldr	r1, [pc, #24]	; (8006e14 <disk_initialize+0x48>)
 8006dfc:	440a      	add	r2, r1
 8006dfe:	7b12      	ldrb	r2, [r2, #12]
 8006e00:	4610      	mov	r0, r2
 8006e02:	4798      	blx	r3
 8006e04:	4603      	mov	r3, r0
 8006e06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	200014e8 	.word	0x200014e8

08006e18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006e18:	b590      	push	{r4, r7, lr}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	607a      	str	r2, [r7, #4]
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	4603      	mov	r3, r0
 8006e26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	4a0a      	ldr	r2, [pc, #40]	; (8006e54 <disk_read+0x3c>)
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	689c      	ldr	r4, [r3, #8]
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	4a07      	ldr	r2, [pc, #28]	; (8006e54 <disk_read+0x3c>)
 8006e38:	4413      	add	r3, r2
 8006e3a:	7b18      	ldrb	r0, [r3, #12]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	68b9      	ldr	r1, [r7, #8]
 8006e42:	47a0      	blx	r4
 8006e44:	4603      	mov	r3, r0
 8006e46:	75fb      	strb	r3, [r7, #23]
  return res;
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd90      	pop	{r4, r7, pc}
 8006e52:	bf00      	nop
 8006e54:	200014e8 	.word	0x200014e8

08006e58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006e58:	b590      	push	{r4, r7, lr}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	607a      	str	r2, [r7, #4]
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	4603      	mov	r3, r0
 8006e66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	4a0a      	ldr	r2, [pc, #40]	; (8006e94 <disk_write+0x3c>)
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	68dc      	ldr	r4, [r3, #12]
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	4a07      	ldr	r2, [pc, #28]	; (8006e94 <disk_write+0x3c>)
 8006e78:	4413      	add	r3, r2
 8006e7a:	7b18      	ldrb	r0, [r3, #12]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	68b9      	ldr	r1, [r7, #8]
 8006e82:	47a0      	blx	r4
 8006e84:	4603      	mov	r3, r0
 8006e86:	75fb      	strb	r3, [r7, #23]
  return res;
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd90      	pop	{r4, r7, pc}
 8006e92:	bf00      	nop
 8006e94:	200014e8 	.word	0x200014e8

08006e98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	603a      	str	r2, [r7, #0]
 8006ea2:	71fb      	strb	r3, [r7, #7]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <disk_ioctl+0x38>)
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	79fa      	ldrb	r2, [r7, #7]
 8006eb6:	4906      	ldr	r1, [pc, #24]	; (8006ed0 <disk_ioctl+0x38>)
 8006eb8:	440a      	add	r2, r1
 8006eba:	7b10      	ldrb	r0, [r2, #12]
 8006ebc:	79b9      	ldrb	r1, [r7, #6]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	4798      	blx	r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73fb      	strb	r3, [r7, #15]
  return res;
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	200014e8 	.word	0x200014e8

08006ed4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	af00      	add	r7, sp, #0
  return 0;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006ef4:	89fb      	ldrh	r3, [r7, #14]
 8006ef6:	021b      	lsls	r3, r3, #8
 8006ef8:	b21a      	sxth	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	b21b      	sxth	r3, r3
 8006f00:	4313      	orrs	r3, r2
 8006f02:	b21b      	sxth	r3, r3
 8006f04:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006f06:	89fb      	ldrh	r3, [r7, #14]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3303      	adds	r3, #3
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	021b      	lsls	r3, r3, #8
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	3202      	adds	r2, #2
 8006f2c:	7812      	ldrb	r2, [r2, #0]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	021b      	lsls	r3, r3, #8
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	3201      	adds	r2, #1
 8006f3a:	7812      	ldrb	r2, [r2, #0]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	021b      	lsls	r3, r3, #8
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	7812      	ldrb	r2, [r2, #0]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]
	return rv;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b083      	sub	sp, #12
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	460b      	mov	r3, r1
 8006f64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	887a      	ldrh	r2, [r7, #2]
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	887b      	ldrh	r3, [r7, #2]
 8006f74:	0a1b      	lsrs	r3, r3, #8
 8006f76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	887a      	ldrh	r2, [r7, #2]
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	0a1b      	lsrs	r3, r3, #8
 8006faa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	607a      	str	r2, [r7, #4]
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	701a      	strb	r2, [r3, #0]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	0a1b      	lsrs	r3, r3, #8
 8006fbc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	0a1b      	lsrs	r3, r3, #8
 8006fce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	607a      	str	r2, [r7, #4]
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	b2d2      	uxtb	r2, r2
 8006fda:	701a      	strb	r2, [r3, #0]
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00d      	beq.n	800701e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	1c53      	adds	r3, r2, #1
 8007006:	613b      	str	r3, [r7, #16]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	1c59      	adds	r1, r3, #1
 800700c:	6179      	str	r1, [r7, #20]
 800700e:	7812      	ldrb	r2, [r2, #0]
 8007010:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3b01      	subs	r3, #1
 8007016:	607b      	str	r3, [r7, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1f1      	bne.n	8007002 <mem_cpy+0x1a>
	}
}
 800701e:	bf00      	nop
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800702a:	b480      	push	{r7}
 800702c:	b087      	sub	sp, #28
 800702e:	af00      	add	r7, sp, #0
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	617a      	str	r2, [r7, #20]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	b2d2      	uxtb	r2, r2
 8007044:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	3b01      	subs	r3, #1
 800704a:	607b      	str	r3, [r7, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1f3      	bne.n	800703a <mem_set+0x10>
}
 8007052:	bf00      	nop
 8007054:	bf00      	nop
 8007056:	371c      	adds	r7, #28
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007060:	b480      	push	{r7}
 8007062:	b089      	sub	sp, #36	; 0x24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	61fb      	str	r3, [r7, #28]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	61fa      	str	r2, [r7, #28]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	4619      	mov	r1, r3
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	61ba      	str	r2, [r7, #24]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	1acb      	subs	r3, r1, r3
 800708c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3b01      	subs	r3, #1
 8007092:	607b      	str	r3, [r7, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <mem_cmp+0x40>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0eb      	beq.n	8007078 <mem_cmp+0x18>

	return r;
 80070a0:	697b      	ldr	r3, [r7, #20]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3724      	adds	r7, #36	; 0x24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80070b8:	e002      	b.n	80070c0 <chk_chr+0x12>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3301      	adds	r3, #1
 80070be:	607b      	str	r3, [r7, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <chk_chr+0x26>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d1f2      	bne.n	80070ba <chk_chr+0xc>
	return *str;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	781b      	ldrb	r3, [r3, #0]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80070ee:	2300      	movs	r3, #0
 80070f0:	60bb      	str	r3, [r7, #8]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	e029      	b.n	800714c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80070f8:	4a27      	ldr	r2, [pc, #156]	; (8007198 <chk_lock+0xb4>)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	4413      	add	r3, r2
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d01d      	beq.n	8007142 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007106:	4a24      	ldr	r2, [pc, #144]	; (8007198 <chk_lock+0xb4>)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	4413      	add	r3, r2
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d116      	bne.n	8007146 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007118:	4a1f      	ldr	r2, [pc, #124]	; (8007198 <chk_lock+0xb4>)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	011b      	lsls	r3, r3, #4
 800711e:	4413      	add	r3, r2
 8007120:	3304      	adds	r3, #4
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007128:	429a      	cmp	r2, r3
 800712a:	d10c      	bne.n	8007146 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800712c:	4a1a      	ldr	r2, [pc, #104]	; (8007198 <chk_lock+0xb4>)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	011b      	lsls	r3, r3, #4
 8007132:	4413      	add	r3, r2
 8007134:	3308      	adds	r3, #8
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800713c:	429a      	cmp	r2, r3
 800713e:	d102      	bne.n	8007146 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007140:	e007      	b.n	8007152 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007142:	2301      	movs	r3, #1
 8007144:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	3301      	adds	r3, #1
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d9d2      	bls.n	80070f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d109      	bne.n	800716c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d102      	bne.n	8007164 <chk_lock+0x80>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d101      	bne.n	8007168 <chk_lock+0x84>
 8007164:	2300      	movs	r3, #0
 8007166:	e010      	b.n	800718a <chk_lock+0xa6>
 8007168:	2312      	movs	r3, #18
 800716a:	e00e      	b.n	800718a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d108      	bne.n	8007184 <chk_lock+0xa0>
 8007172:	4a09      	ldr	r2, [pc, #36]	; (8007198 <chk_lock+0xb4>)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	4413      	add	r3, r2
 800717a:	330c      	adds	r3, #12
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007182:	d101      	bne.n	8007188 <chk_lock+0xa4>
 8007184:	2310      	movs	r3, #16
 8007186:	e000      	b.n	800718a <chk_lock+0xa6>
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	200014c8 	.word	0x200014c8

0800719c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80071a2:	2300      	movs	r3, #0
 80071a4:	607b      	str	r3, [r7, #4]
 80071a6:	e002      	b.n	80071ae <enq_lock+0x12>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3301      	adds	r3, #1
 80071ac:	607b      	str	r3, [r7, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d806      	bhi.n	80071c2 <enq_lock+0x26>
 80071b4:	4a09      	ldr	r2, [pc, #36]	; (80071dc <enq_lock+0x40>)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	011b      	lsls	r3, r3, #4
 80071ba:	4413      	add	r3, r2
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1f2      	bne.n	80071a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	bf14      	ite	ne
 80071c8:	2301      	movne	r3, #1
 80071ca:	2300      	moveq	r3, #0
 80071cc:	b2db      	uxtb	r3, r3
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	200014c8 	.word	0x200014c8

080071e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80071ea:	2300      	movs	r3, #0
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	e01f      	b.n	8007230 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80071f0:	4a41      	ldr	r2, [pc, #260]	; (80072f8 <inc_lock+0x118>)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	4413      	add	r3, r2
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d113      	bne.n	800722a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007202:	4a3d      	ldr	r2, [pc, #244]	; (80072f8 <inc_lock+0x118>)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	4413      	add	r3, r2
 800720a:	3304      	adds	r3, #4
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007212:	429a      	cmp	r2, r3
 8007214:	d109      	bne.n	800722a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007216:	4a38      	ldr	r2, [pc, #224]	; (80072f8 <inc_lock+0x118>)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	4413      	add	r3, r2
 800721e:	3308      	adds	r3, #8
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007226:	429a      	cmp	r2, r3
 8007228:	d006      	beq.n	8007238 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3301      	adds	r3, #1
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d9dc      	bls.n	80071f0 <inc_lock+0x10>
 8007236:	e000      	b.n	800723a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007238:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b02      	cmp	r3, #2
 800723e:	d132      	bne.n	80072a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007240:	2300      	movs	r3, #0
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	e002      	b.n	800724c <inc_lock+0x6c>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3301      	adds	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d806      	bhi.n	8007260 <inc_lock+0x80>
 8007252:	4a29      	ldr	r2, [pc, #164]	; (80072f8 <inc_lock+0x118>)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	4413      	add	r3, r2
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1f2      	bne.n	8007246 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d101      	bne.n	800726a <inc_lock+0x8a>
 8007266:	2300      	movs	r3, #0
 8007268:	e040      	b.n	80072ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	4922      	ldr	r1, [pc, #136]	; (80072f8 <inc_lock+0x118>)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	440b      	add	r3, r1
 8007276:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	491e      	ldr	r1, [pc, #120]	; (80072f8 <inc_lock+0x118>)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	440b      	add	r3, r1
 8007284:	3304      	adds	r3, #4
 8007286:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	695a      	ldr	r2, [r3, #20]
 800728c:	491a      	ldr	r1, [pc, #104]	; (80072f8 <inc_lock+0x118>)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	440b      	add	r3, r1
 8007294:	3308      	adds	r3, #8
 8007296:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007298:	4a17      	ldr	r2, [pc, #92]	; (80072f8 <inc_lock+0x118>)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	4413      	add	r3, r2
 80072a0:	330c      	adds	r3, #12
 80072a2:	2200      	movs	r2, #0
 80072a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <inc_lock+0xe0>
 80072ac:	4a12      	ldr	r2, [pc, #72]	; (80072f8 <inc_lock+0x118>)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	4413      	add	r3, r2
 80072b4:	330c      	adds	r3, #12
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <inc_lock+0xe0>
 80072bc:	2300      	movs	r3, #0
 80072be:	e015      	b.n	80072ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d108      	bne.n	80072d8 <inc_lock+0xf8>
 80072c6:	4a0c      	ldr	r2, [pc, #48]	; (80072f8 <inc_lock+0x118>)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	011b      	lsls	r3, r3, #4
 80072cc:	4413      	add	r3, r2
 80072ce:	330c      	adds	r3, #12
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	3301      	adds	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	e001      	b.n	80072dc <inc_lock+0xfc>
 80072d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072dc:	4906      	ldr	r1, [pc, #24]	; (80072f8 <inc_lock+0x118>)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	011b      	lsls	r3, r3, #4
 80072e2:	440b      	add	r3, r1
 80072e4:	330c      	adds	r3, #12
 80072e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3301      	adds	r3, #1
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	200014c8 	.word	0x200014c8

080072fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3b01      	subs	r3, #1
 8007308:	607b      	str	r3, [r7, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d825      	bhi.n	800735c <dec_lock+0x60>
		n = Files[i].ctr;
 8007310:	4a17      	ldr	r2, [pc, #92]	; (8007370 <dec_lock+0x74>)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	4413      	add	r3, r2
 8007318:	330c      	adds	r3, #12
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800731e:	89fb      	ldrh	r3, [r7, #14]
 8007320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007324:	d101      	bne.n	800732a <dec_lock+0x2e>
 8007326:	2300      	movs	r3, #0
 8007328:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800732a:	89fb      	ldrh	r3, [r7, #14]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <dec_lock+0x3a>
 8007330:	89fb      	ldrh	r3, [r7, #14]
 8007332:	3b01      	subs	r3, #1
 8007334:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007336:	4a0e      	ldr	r2, [pc, #56]	; (8007370 <dec_lock+0x74>)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	4413      	add	r3, r2
 800733e:	330c      	adds	r3, #12
 8007340:	89fa      	ldrh	r2, [r7, #14]
 8007342:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007344:	89fb      	ldrh	r3, [r7, #14]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d105      	bne.n	8007356 <dec_lock+0x5a>
 800734a:	4a09      	ldr	r2, [pc, #36]	; (8007370 <dec_lock+0x74>)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	011b      	lsls	r3, r3, #4
 8007350:	4413      	add	r3, r2
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	737b      	strb	r3, [r7, #13]
 800735a:	e001      	b.n	8007360 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800735c:	2302      	movs	r3, #2
 800735e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007360:	7b7b      	ldrb	r3, [r7, #13]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	200014c8 	.word	0x200014c8

08007374 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800737c:	2300      	movs	r3, #0
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	e010      	b.n	80073a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007382:	4a0d      	ldr	r2, [pc, #52]	; (80073b8 <clear_lock+0x44>)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	4413      	add	r3, r2
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	429a      	cmp	r2, r3
 8007390:	d105      	bne.n	800739e <clear_lock+0x2a>
 8007392:	4a09      	ldr	r2, [pc, #36]	; (80073b8 <clear_lock+0x44>)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	4413      	add	r3, r2
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3301      	adds	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d9eb      	bls.n	8007382 <clear_lock+0xe>
	}
}
 80073aa:	bf00      	nop
 80073ac:	bf00      	nop
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	200014c8 	.word	0x200014c8

080073bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	78db      	ldrb	r3, [r3, #3]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d034      	beq.n	800743a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	7858      	ldrb	r0, [r3, #1]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073e0:	2301      	movs	r3, #1
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	f7ff fd38 	bl	8006e58 <disk_write>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	73fb      	strb	r3, [r7, #15]
 80073f2:	e022      	b.n	800743a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	1ad2      	subs	r2, r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	429a      	cmp	r2, r3
 8007408:	d217      	bcs.n	800743a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	789b      	ldrb	r3, [r3, #2]
 800740e:	613b      	str	r3, [r7, #16]
 8007410:	e010      	b.n	8007434 <sync_window+0x78>
					wsect += fs->fsize;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	4413      	add	r3, r2
 800741a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	7858      	ldrb	r0, [r3, #1]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007426:	2301      	movs	r3, #1
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	f7ff fd15 	bl	8006e58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	3b01      	subs	r3, #1
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d8eb      	bhi.n	8007412 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d01b      	beq.n	8007494 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff ffad 	bl	80073bc <sync_window>
 8007462:	4603      	mov	r3, r0
 8007464:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d113      	bne.n	8007494 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	7858      	ldrb	r0, [r3, #1]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007476:	2301      	movs	r3, #1
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	f7ff fccd 	bl	8006e18 <disk_read>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d004      	beq.n	800748e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007488:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800748a:	2301      	movs	r3, #1
 800748c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007494:	7bfb      	ldrb	r3, [r7, #15]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff ff87 	bl	80073bc <sync_window>
 80074ae:	4603      	mov	r3, r0
 80074b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d158      	bne.n	800756a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d148      	bne.n	8007552 <sync_fs+0xb2>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	791b      	ldrb	r3, [r3, #4]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d144      	bne.n	8007552 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3330      	adds	r3, #48	; 0x30
 80074cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074d0:	2100      	movs	r1, #0
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7ff fda9 	bl	800702a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3330      	adds	r3, #48	; 0x30
 80074dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80074e0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7ff fd38 	bl	8006f5a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3330      	adds	r3, #48	; 0x30
 80074ee:	4921      	ldr	r1, [pc, #132]	; (8007574 <sync_fs+0xd4>)
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff fd4d 	bl	8006f90 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3330      	adds	r3, #48	; 0x30
 80074fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80074fe:	491e      	ldr	r1, [pc, #120]	; (8007578 <sync_fs+0xd8>)
 8007500:	4618      	mov	r0, r3
 8007502:	f7ff fd45 	bl	8006f90 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3330      	adds	r3, #48	; 0x30
 800750a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	4619      	mov	r1, r3
 8007514:	4610      	mov	r0, r2
 8007516:	f7ff fd3b 	bl	8006f90 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	3330      	adds	r3, #48	; 0x30
 800751e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	4619      	mov	r1, r3
 8007528:	4610      	mov	r0, r2
 800752a:	f7ff fd31 	bl	8006f90 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	7858      	ldrb	r0, [r3, #1]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007546:	2301      	movs	r3, #1
 8007548:	f7ff fc86 	bl	8006e58 <disk_write>
			fs->fsi_flag = 0;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	785b      	ldrb	r3, [r3, #1]
 8007556:	2200      	movs	r2, #0
 8007558:	2100      	movs	r1, #0
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fc9c 	bl	8006e98 <disk_ioctl>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <sync_fs+0xca>
 8007566:	2301      	movs	r3, #1
 8007568:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800756a:	7bfb      	ldrb	r3, [r7, #15]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	41615252 	.word	0x41615252
 8007578:	61417272 	.word	0x61417272

0800757c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	3b02      	subs	r3, #2
 800758a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	3b02      	subs	r3, #2
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	d301      	bcc.n	800759c <clust2sect+0x20>
 8007598:	2300      	movs	r3, #0
 800759a:	e008      	b.n	80075ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	895b      	ldrh	r3, [r3, #10]
 80075a0:	461a      	mov	r2, r3
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	fb03 f202 	mul.w	r2, r3, r2
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	4413      	add	r3, r2
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b086      	sub	sp, #24
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d904      	bls.n	80075da <get_fat+0x20>
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d302      	bcc.n	80075e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80075da:	2301      	movs	r3, #1
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	e08f      	b.n	8007700 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80075e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d062      	beq.n	80076b4 <get_fat+0xfa>
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	dc7c      	bgt.n	80076ec <get_fat+0x132>
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d002      	beq.n	80075fc <get_fat+0x42>
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d042      	beq.n	8007680 <get_fat+0xc6>
 80075fa:	e077      	b.n	80076ec <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	085b      	lsrs	r3, r3, #1
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4413      	add	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	6a1a      	ldr	r2, [r3, #32]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	0a5b      	lsrs	r3, r3, #9
 8007612:	4413      	add	r3, r2
 8007614:	4619      	mov	r1, r3
 8007616:	6938      	ldr	r0, [r7, #16]
 8007618:	f7ff ff14 	bl	8007444 <move_window>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d167      	bne.n	80076f2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	60fa      	str	r2, [r7, #12]
 8007628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	4413      	add	r3, r2
 8007630:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007634:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	6a1a      	ldr	r2, [r3, #32]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	0a5b      	lsrs	r3, r3, #9
 800763e:	4413      	add	r3, r2
 8007640:	4619      	mov	r1, r3
 8007642:	6938      	ldr	r0, [r7, #16]
 8007644:	f7ff fefe 	bl	8007444 <move_window>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d153      	bne.n	80076f6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4413      	add	r3, r2
 8007658:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	461a      	mov	r2, r3
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	4313      	orrs	r3, r2
 8007664:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <get_fat+0xbc>
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	091b      	lsrs	r3, r3, #4
 8007674:	e002      	b.n	800767c <get_fat+0xc2>
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800767c:	617b      	str	r3, [r7, #20]
			break;
 800767e:	e03f      	b.n	8007700 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	6a1a      	ldr	r2, [r3, #32]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	0a1b      	lsrs	r3, r3, #8
 8007688:	4413      	add	r3, r2
 800768a:	4619      	mov	r1, r3
 800768c:	6938      	ldr	r0, [r7, #16]
 800768e:	f7ff fed9 	bl	8007444 <move_window>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d130      	bne.n	80076fa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	005b      	lsls	r3, r3, #1
 80076a2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80076a6:	4413      	add	r3, r2
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff fc1b 	bl	8006ee4 <ld_word>
 80076ae:	4603      	mov	r3, r0
 80076b0:	617b      	str	r3, [r7, #20]
			break;
 80076b2:	e025      	b.n	8007700 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	6a1a      	ldr	r2, [r3, #32]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	09db      	lsrs	r3, r3, #7
 80076bc:	4413      	add	r3, r2
 80076be:	4619      	mov	r1, r3
 80076c0:	6938      	ldr	r0, [r7, #16]
 80076c2:	f7ff febf 	bl	8007444 <move_window>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d118      	bne.n	80076fe <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80076da:	4413      	add	r3, r2
 80076dc:	4618      	mov	r0, r3
 80076de:	f7ff fc19 	bl	8006f14 <ld_dword>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076e8:	617b      	str	r3, [r7, #20]
			break;
 80076ea:	e009      	b.n	8007700 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80076ec:	2301      	movs	r3, #1
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	e006      	b.n	8007700 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076f2:	bf00      	nop
 80076f4:	e004      	b.n	8007700 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076f6:	bf00      	nop
 80076f8:	e002      	b.n	8007700 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80076fa:	bf00      	nop
 80076fc:	e000      	b.n	8007700 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80076fe:	bf00      	nop
		}
	}

	return val;
 8007700:	697b      	ldr	r3, [r7, #20]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800770a:	b590      	push	{r4, r7, lr}
 800770c:	b089      	sub	sp, #36	; 0x24
 800770e:	af00      	add	r7, sp, #0
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007716:	2302      	movs	r3, #2
 8007718:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b01      	cmp	r3, #1
 800771e:	f240 80d9 	bls.w	80078d4 <put_fat+0x1ca>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	429a      	cmp	r2, r3
 800772a:	f080 80d3 	bcs.w	80078d4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b03      	cmp	r3, #3
 8007734:	f000 8096 	beq.w	8007864 <put_fat+0x15a>
 8007738:	2b03      	cmp	r3, #3
 800773a:	f300 80cb 	bgt.w	80078d4 <put_fat+0x1ca>
 800773e:	2b01      	cmp	r3, #1
 8007740:	d002      	beq.n	8007748 <put_fat+0x3e>
 8007742:	2b02      	cmp	r3, #2
 8007744:	d06e      	beq.n	8007824 <put_fat+0x11a>
 8007746:	e0c5      	b.n	80078d4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	61bb      	str	r3, [r7, #24]
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	085b      	lsrs	r3, r3, #1
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	4413      	add	r3, r2
 8007754:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a1a      	ldr	r2, [r3, #32]
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	0a5b      	lsrs	r3, r3, #9
 800775e:	4413      	add	r3, r2
 8007760:	4619      	mov	r1, r3
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f7ff fe6e 	bl	8007444 <move_window>
 8007768:	4603      	mov	r3, r0
 800776a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800776c:	7ffb      	ldrb	r3, [r7, #31]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f040 80a9 	bne.w	80078c6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	1c59      	adds	r1, r3, #1
 800777e:	61b9      	str	r1, [r7, #24]
 8007780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007784:	4413      	add	r3, r2
 8007786:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00d      	beq.n	80077ae <put_fat+0xa4>
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	b25b      	sxtb	r3, r3
 8007798:	f003 030f 	and.w	r3, r3, #15
 800779c:	b25a      	sxtb	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	b25b      	sxtb	r3, r3
 80077a6:	4313      	orrs	r3, r2
 80077a8:	b25b      	sxtb	r3, r3
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	e001      	b.n	80077b2 <put_fat+0xa8>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6a1a      	ldr	r2, [r3, #32]
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	0a5b      	lsrs	r3, r3, #9
 80077c4:	4413      	add	r3, r2
 80077c6:	4619      	mov	r1, r3
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f7ff fe3b 	bl	8007444 <move_window>
 80077ce:	4603      	mov	r3, r0
 80077d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077d2:	7ffb      	ldrb	r3, [r7, #31]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d178      	bne.n	80078ca <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e4:	4413      	add	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <put_fat+0xf0>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	091b      	lsrs	r3, r3, #4
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	e00e      	b.n	8007818 <put_fat+0x10e>
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	b25b      	sxtb	r3, r3
 8007800:	f023 030f 	bic.w	r3, r3, #15
 8007804:	b25a      	sxtb	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	0a1b      	lsrs	r3, r3, #8
 800780a:	b25b      	sxtb	r3, r3
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	b25b      	sxtb	r3, r3
 8007812:	4313      	orrs	r3, r2
 8007814:	b25b      	sxtb	r3, r3
 8007816:	b2db      	uxtb	r3, r3
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	70da      	strb	r2, [r3, #3]
			break;
 8007822:	e057      	b.n	80078d4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a1a      	ldr	r2, [r3, #32]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	0a1b      	lsrs	r3, r3, #8
 800782c:	4413      	add	r3, r2
 800782e:	4619      	mov	r1, r3
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7ff fe07 	bl	8007444 <move_window>
 8007836:	4603      	mov	r3, r0
 8007838:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800783a:	7ffb      	ldrb	r3, [r7, #31]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d146      	bne.n	80078ce <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800784e:	4413      	add	r3, r2
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	b292      	uxth	r2, r2
 8007854:	4611      	mov	r1, r2
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff fb7f 	bl	8006f5a <st_word>
			fs->wflag = 1;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2201      	movs	r2, #1
 8007860:	70da      	strb	r2, [r3, #3]
			break;
 8007862:	e037      	b.n	80078d4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6a1a      	ldr	r2, [r3, #32]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	09db      	lsrs	r3, r3, #7
 800786c:	4413      	add	r3, r2
 800786e:	4619      	mov	r1, r3
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f7ff fde7 	bl	8007444 <move_window>
 8007876:	4603      	mov	r3, r0
 8007878:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800787a:	7ffb      	ldrb	r3, [r7, #31]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d128      	bne.n	80078d2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007894:	4413      	add	r3, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff fb3c 	bl	8006f14 <ld_dword>
 800789c:	4603      	mov	r3, r0
 800789e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80078a2:	4323      	orrs	r3, r4
 80078a4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80078b4:	4413      	add	r3, r2
 80078b6:	6879      	ldr	r1, [r7, #4]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff fb69 	bl	8006f90 <st_dword>
			fs->wflag = 1;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	70da      	strb	r2, [r3, #3]
			break;
 80078c4:	e006      	b.n	80078d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80078c6:	bf00      	nop
 80078c8:	e004      	b.n	80078d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80078ca:	bf00      	nop
 80078cc:	e002      	b.n	80078d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80078ce:	bf00      	nop
 80078d0:	e000      	b.n	80078d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80078d2:	bf00      	nop
		}
	}
	return res;
 80078d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3724      	adds	r7, #36	; 0x24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd90      	pop	{r4, r7, pc}

080078de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b088      	sub	sp, #32
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d904      	bls.n	8007904 <remove_chain+0x26>
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	429a      	cmp	r2, r3
 8007902:	d301      	bcc.n	8007908 <remove_chain+0x2a>
 8007904:	2302      	movs	r3, #2
 8007906:	e04b      	b.n	80079a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00c      	beq.n	8007928 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800790e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	69b8      	ldr	r0, [r7, #24]
 8007916:	f7ff fef8 	bl	800770a <put_fat>
 800791a:	4603      	mov	r3, r0
 800791c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800791e:	7ffb      	ldrb	r3, [r7, #31]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <remove_chain+0x4a>
 8007924:	7ffb      	ldrb	r3, [r7, #31]
 8007926:	e03b      	b.n	80079a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007928:	68b9      	ldr	r1, [r7, #8]
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f7ff fe45 	bl	80075ba <get_fat>
 8007930:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d031      	beq.n	800799c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d101      	bne.n	8007942 <remove_chain+0x64>
 800793e:	2302      	movs	r3, #2
 8007940:	e02e      	b.n	80079a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007948:	d101      	bne.n	800794e <remove_chain+0x70>
 800794a:	2301      	movs	r3, #1
 800794c:	e028      	b.n	80079a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800794e:	2200      	movs	r2, #0
 8007950:	68b9      	ldr	r1, [r7, #8]
 8007952:	69b8      	ldr	r0, [r7, #24]
 8007954:	f7ff fed9 	bl	800770a <put_fat>
 8007958:	4603      	mov	r3, r0
 800795a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800795c:	7ffb      	ldrb	r3, [r7, #31]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <remove_chain+0x88>
 8007962:	7ffb      	ldrb	r3, [r7, #31]
 8007964:	e01c      	b.n	80079a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	691a      	ldr	r2, [r3, #16]
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	3b02      	subs	r3, #2
 8007970:	429a      	cmp	r2, r3
 8007972:	d20b      	bcs.n	800798c <remove_chain+0xae>
			fs->free_clst++;
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	791b      	ldrb	r3, [r3, #4]
 8007982:	f043 0301 	orr.w	r3, r3, #1
 8007986:	b2da      	uxtb	r2, r3
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	429a      	cmp	r2, r3
 8007998:	d3c6      	bcc.n	8007928 <remove_chain+0x4a>
 800799a:	e000      	b.n	800799e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800799c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3720      	adds	r7, #32
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b088      	sub	sp, #32
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10d      	bne.n	80079da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d004      	beq.n	80079d4 <create_chain+0x2c>
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d31b      	bcc.n	8007a0c <create_chain+0x64>
 80079d4:	2301      	movs	r3, #1
 80079d6:	61bb      	str	r3, [r7, #24]
 80079d8:	e018      	b.n	8007a0c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff fdec 	bl	80075ba <get_fat>
 80079e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d801      	bhi.n	80079ee <create_chain+0x46>
 80079ea:	2301      	movs	r3, #1
 80079ec:	e070      	b.n	8007ad0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079f4:	d101      	bne.n	80079fa <create_chain+0x52>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	e06a      	b.n	8007ad0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d201      	bcs.n	8007a08 <create_chain+0x60>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	e063      	b.n	8007ad0 <create_chain+0x128>
		scl = clst;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	3301      	adds	r3, #1
 8007a14:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	69fa      	ldr	r2, [r7, #28]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d307      	bcc.n	8007a30 <create_chain+0x88>
				ncl = 2;
 8007a20:	2302      	movs	r3, #2
 8007a22:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d901      	bls.n	8007a30 <create_chain+0x88>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	e04f      	b.n	8007ad0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007a30:	69f9      	ldr	r1, [r7, #28]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7ff fdc1 	bl	80075ba <get_fat>
 8007a38:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00e      	beq.n	8007a5e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d003      	beq.n	8007a4e <create_chain+0xa6>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a4c:	d101      	bne.n	8007a52 <create_chain+0xaa>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	e03e      	b.n	8007ad0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d1da      	bne.n	8007a10 <create_chain+0x68>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e038      	b.n	8007ad0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007a5e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a64:	69f9      	ldr	r1, [r7, #28]
 8007a66:	6938      	ldr	r0, [r7, #16]
 8007a68:	f7ff fe4f 	bl	800770a <put_fat>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d109      	bne.n	8007a8a <create_chain+0xe2>
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d006      	beq.n	8007a8a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6938      	ldr	r0, [r7, #16]
 8007a82:	f7ff fe42 	bl	800770a <put_fat>
 8007a86:	4603      	mov	r3, r0
 8007a88:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d116      	bne.n	8007abe <create_chain+0x116>
		fs->last_clst = ncl;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	69fa      	ldr	r2, [r7, #28]
 8007a94:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	3b02      	subs	r3, #2
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d804      	bhi.n	8007aae <create_chain+0x106>
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	1e5a      	subs	r2, r3, #1
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	791b      	ldrb	r3, [r3, #4]
 8007ab2:	f043 0301 	orr.w	r3, r3, #1
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	711a      	strb	r2, [r3, #4]
 8007abc:	e007      	b.n	8007ace <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d102      	bne.n	8007aca <create_chain+0x122>
 8007ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ac8:	e000      	b.n	8007acc <create_chain+0x124>
 8007aca:	2301      	movs	r3, #1
 8007acc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007ace:	69fb      	ldr	r3, [r7, #28]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3720      	adds	r7, #32
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	3304      	adds	r3, #4
 8007aee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	0a5b      	lsrs	r3, r3, #9
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	8952      	ldrh	r2, [r2, #10]
 8007af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007afc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	1d1a      	adds	r2, r3, #4
 8007b02:	613a      	str	r2, [r7, #16]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <clmt_clust+0x3a>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	e010      	b.n	8007b34 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d307      	bcc.n	8007b2a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	617b      	str	r3, [r7, #20]
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	3304      	adds	r3, #4
 8007b26:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b28:	e7e9      	b.n	8007afe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007b2a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	4413      	add	r3, r2
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	371c      	adds	r7, #28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b56:	d204      	bcs.n	8007b62 <dir_sdi+0x22>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	f003 031f 	and.w	r3, r3, #31
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007b62:	2302      	movs	r3, #2
 8007b64:	e063      	b.n	8007c2e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d106      	bne.n	8007b86 <dir_sdi+0x46>
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d902      	bls.n	8007b86 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10c      	bne.n	8007ba6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	095b      	lsrs	r3, r3, #5
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	8912      	ldrh	r2, [r2, #8]
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d301      	bcc.n	8007b9c <dir_sdi+0x5c>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e048      	b.n	8007c2e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	61da      	str	r2, [r3, #28]
 8007ba4:	e029      	b.n	8007bfa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	895b      	ldrh	r3, [r3, #10]
 8007baa:	025b      	lsls	r3, r3, #9
 8007bac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007bae:	e019      	b.n	8007be4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6979      	ldr	r1, [r7, #20]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff fd00 	bl	80075ba <get_fat>
 8007bba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bc2:	d101      	bne.n	8007bc8 <dir_sdi+0x88>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e032      	b.n	8007c2e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d904      	bls.n	8007bd8 <dir_sdi+0x98>
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d301      	bcc.n	8007bdc <dir_sdi+0x9c>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e028      	b.n	8007c2e <dir_sdi+0xee>
			ofs -= csz;
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d2e1      	bcs.n	8007bb0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007bec:	6979      	ldr	r1, [r7, #20]
 8007bee:	6938      	ldr	r0, [r7, #16]
 8007bf0:	f7ff fcc4 	bl	800757c <clust2sect>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <dir_sdi+0xcc>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e010      	b.n	8007c2e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69da      	ldr	r2, [r3, #28]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	0a5b      	lsrs	r3, r3, #9
 8007c14:	441a      	add	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c26:	441a      	add	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3718      	adds	r7, #24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b086      	sub	sp, #24
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	3320      	adds	r3, #32
 8007c4c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <dir_next+0x28>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c5c:	d301      	bcc.n	8007c62 <dir_next+0x2c>
 8007c5e:	2304      	movs	r3, #4
 8007c60:	e0aa      	b.n	8007db8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f040 8098 	bne.w	8007d9e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10b      	bne.n	8007c98 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	8912      	ldrh	r2, [r2, #8]
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	f0c0 8088 	bcc.w	8007d9e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	61da      	str	r2, [r3, #28]
 8007c94:	2304      	movs	r3, #4
 8007c96:	e08f      	b.n	8007db8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	0a5b      	lsrs	r3, r3, #9
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	8952      	ldrh	r2, [r2, #10]
 8007ca0:	3a01      	subs	r2, #1
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d17a      	bne.n	8007d9e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	f7ff fc82 	bl	80075ba <get_fat>
 8007cb6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d801      	bhi.n	8007cc2 <dir_next+0x8c>
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	e07a      	b.n	8007db8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cc8:	d101      	bne.n	8007cce <dir_next+0x98>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e074      	b.n	8007db8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d358      	bcc.n	8007d8a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d104      	bne.n	8007ce8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	61da      	str	r2, [r3, #28]
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	e067      	b.n	8007db8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	f7ff fe59 	bl	80079a8 <create_chain>
 8007cf6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <dir_next+0xcc>
 8007cfe:	2307      	movs	r3, #7
 8007d00:	e05a      	b.n	8007db8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <dir_next+0xd6>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e055      	b.n	8007db8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d12:	d101      	bne.n	8007d18 <dir_next+0xe2>
 8007d14:	2301      	movs	r3, #1
 8007d16:	e04f      	b.n	8007db8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff fb4f 	bl	80073bc <sync_window>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <dir_next+0xf2>
 8007d24:	2301      	movs	r3, #1
 8007d26:	e047      	b.n	8007db8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3330      	adds	r3, #48	; 0x30
 8007d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d30:	2100      	movs	r1, #0
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff f979 	bl	800702a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d38:	2300      	movs	r3, #0
 8007d3a:	613b      	str	r3, [r7, #16]
 8007d3c:	6979      	ldr	r1, [r7, #20]
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f7ff fc1c 	bl	800757c <clust2sect>
 8007d44:	4602      	mov	r2, r0
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d4a:	e012      	b.n	8007d72 <dir_next+0x13c>
						fs->wflag = 1;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7ff fb32 	bl	80073bc <sync_window>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <dir_next+0x12c>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e02a      	b.n	8007db8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	3301      	adds	r3, #1
 8007d66:	613b      	str	r3, [r7, #16]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	895b      	ldrh	r3, [r3, #10]
 8007d76:	461a      	mov	r2, r3
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d3e6      	bcc.n	8007d4c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	1ad2      	subs	r2, r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007d90:	6979      	ldr	r1, [r7, #20]
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff fbf2 	bl	800757c <clust2sect>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db0:	441a      	add	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7ff feb4 	bl	8007b40 <dir_sdi>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d12b      	bne.n	8007e3a <dir_alloc+0x7a>
		n = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	4619      	mov	r1, r3
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7ff fb29 	bl	8007444 <move_window>
 8007df2:	4603      	mov	r3, r0
 8007df4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d11d      	bne.n	8007e38 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2be5      	cmp	r3, #229	; 0xe5
 8007e04:	d004      	beq.n	8007e10 <dir_alloc+0x50>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d107      	bne.n	8007e20 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	3301      	adds	r3, #1
 8007e14:	613b      	str	r3, [r7, #16]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d102      	bne.n	8007e24 <dir_alloc+0x64>
 8007e1e:	e00c      	b.n	8007e3a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007e20:	2300      	movs	r3, #0
 8007e22:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007e24:	2101      	movs	r1, #1
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7ff ff05 	bl	8007c36 <dir_next>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0d7      	beq.n	8007de6 <dir_alloc+0x26>
 8007e36:	e000      	b.n	8007e3a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007e38:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d101      	bne.n	8007e44 <dir_alloc+0x84>
 8007e40:	2307      	movs	r3, #7
 8007e42:	75fb      	strb	r3, [r7, #23]
	return res;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	331a      	adds	r3, #26
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7ff f841 	bl	8006ee4 <ld_word>
 8007e62:	4603      	mov	r3, r0
 8007e64:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d109      	bne.n	8007e82 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	3314      	adds	r3, #20
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff f836 	bl	8006ee4 <ld_word>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	041b      	lsls	r3, r3, #16
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007e82:	68fb      	ldr	r3, [r7, #12]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	331a      	adds	r3, #26
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	b292      	uxth	r2, r2
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff f859 	bl	8006f5a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d109      	bne.n	8007ec4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f103 0214 	add.w	r2, r3, #20
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	0c1b      	lsrs	r3, r3, #16
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	f7ff f84b 	bl	8006f5a <st_word>
	}
}
 8007ec4:	bf00      	nop
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007eda:	2100      	movs	r1, #0
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff fe2f 	bl	8007b40 <dir_sdi>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <dir_find+0x24>
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	e03e      	b.n	8007f6e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6938      	ldr	r0, [r7, #16]
 8007ef8:	f7ff faa4 	bl	8007444 <move_window>
 8007efc:	4603      	mov	r3, r0
 8007efe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007f00:	7dfb      	ldrb	r3, [r7, #23]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d12f      	bne.n	8007f66 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d102      	bne.n	8007f1a <dir_find+0x4e>
 8007f14:	2304      	movs	r3, #4
 8007f16:	75fb      	strb	r3, [r7, #23]
 8007f18:	e028      	b.n	8007f6c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	330b      	adds	r3, #11
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	330b      	adds	r3, #11
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	f003 0308 	and.w	r3, r3, #8
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10a      	bne.n	8007f52 <dir_find+0x86>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a18      	ldr	r0, [r3, #32]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3324      	adds	r3, #36	; 0x24
 8007f44:	220b      	movs	r2, #11
 8007f46:	4619      	mov	r1, r3
 8007f48:	f7ff f88a 	bl	8007060 <mem_cmp>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00b      	beq.n	8007f6a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007f52:	2100      	movs	r1, #0
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7ff fe6e 	bl	8007c36 <dir_next>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d0c5      	beq.n	8007ef0 <dir_find+0x24>
 8007f64:	e002      	b.n	8007f6c <dir_find+0xa0>
		if (res != FR_OK) break;
 8007f66:	bf00      	nop
 8007f68:	e000      	b.n	8007f6c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007f6a:	bf00      	nop

	return res;
 8007f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007f84:	2101      	movs	r1, #1
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff ff1a 	bl	8007dc0 <dir_alloc>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d11c      	bne.n	8007fd0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	68b8      	ldr	r0, [r7, #8]
 8007f9e:	f7ff fa51 	bl	8007444 <move_window>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d111      	bne.n	8007fd0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff f838 	bl	800702a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a18      	ldr	r0, [r3, #32]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3324      	adds	r3, #36	; 0x24
 8007fc2:	220b      	movs	r2, #11
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	f7ff f80f 	bl	8006fe8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
	...

08007fdc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	3324      	adds	r3, #36	; 0x24
 8007ff0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007ff2:	220b      	movs	r2, #11
 8007ff4:	2120      	movs	r1, #32
 8007ff6:	68b8      	ldr	r0, [r7, #8]
 8007ff8:	f7ff f817 	bl	800702a <mem_set>
	si = i = 0; ni = 8;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	613b      	str	r3, [r7, #16]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	61fb      	str	r3, [r7, #28]
 8008004:	2308      	movs	r3, #8
 8008006:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	61fa      	str	r2, [r7, #28]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	4413      	add	r3, r2
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008016:	7efb      	ldrb	r3, [r7, #27]
 8008018:	2b20      	cmp	r3, #32
 800801a:	d94e      	bls.n	80080ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800801c:	7efb      	ldrb	r3, [r7, #27]
 800801e:	2b2f      	cmp	r3, #47	; 0x2f
 8008020:	d006      	beq.n	8008030 <create_name+0x54>
 8008022:	7efb      	ldrb	r3, [r7, #27]
 8008024:	2b5c      	cmp	r3, #92	; 0x5c
 8008026:	d110      	bne.n	800804a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008028:	e002      	b.n	8008030 <create_name+0x54>
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	3301      	adds	r3, #1
 800802e:	61fb      	str	r3, [r7, #28]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	4413      	add	r3, r2
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b2f      	cmp	r3, #47	; 0x2f
 800803a:	d0f6      	beq.n	800802a <create_name+0x4e>
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	4413      	add	r3, r2
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	2b5c      	cmp	r3, #92	; 0x5c
 8008046:	d0f0      	beq.n	800802a <create_name+0x4e>
			break;
 8008048:	e038      	b.n	80080bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800804a:	7efb      	ldrb	r3, [r7, #27]
 800804c:	2b2e      	cmp	r3, #46	; 0x2e
 800804e:	d003      	beq.n	8008058 <create_name+0x7c>
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	429a      	cmp	r2, r3
 8008056:	d30c      	bcc.n	8008072 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2b0b      	cmp	r3, #11
 800805c:	d002      	beq.n	8008064 <create_name+0x88>
 800805e:	7efb      	ldrb	r3, [r7, #27]
 8008060:	2b2e      	cmp	r3, #46	; 0x2e
 8008062:	d001      	beq.n	8008068 <create_name+0x8c>
 8008064:	2306      	movs	r3, #6
 8008066:	e044      	b.n	80080f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008068:	2308      	movs	r3, #8
 800806a:	613b      	str	r3, [r7, #16]
 800806c:	230b      	movs	r3, #11
 800806e:	617b      	str	r3, [r7, #20]
			continue;
 8008070:	e022      	b.n	80080b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008072:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008076:	2b00      	cmp	r3, #0
 8008078:	da04      	bge.n	8008084 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800807a:	7efb      	ldrb	r3, [r7, #27]
 800807c:	3b80      	subs	r3, #128	; 0x80
 800807e:	4a1f      	ldr	r2, [pc, #124]	; (80080fc <create_name+0x120>)
 8008080:	5cd3      	ldrb	r3, [r2, r3]
 8008082:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008084:	7efb      	ldrb	r3, [r7, #27]
 8008086:	4619      	mov	r1, r3
 8008088:	481d      	ldr	r0, [pc, #116]	; (8008100 <create_name+0x124>)
 800808a:	f7ff f810 	bl	80070ae <chk_chr>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <create_name+0xbc>
 8008094:	2306      	movs	r3, #6
 8008096:	e02c      	b.n	80080f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008098:	7efb      	ldrb	r3, [r7, #27]
 800809a:	2b60      	cmp	r3, #96	; 0x60
 800809c:	d905      	bls.n	80080aa <create_name+0xce>
 800809e:	7efb      	ldrb	r3, [r7, #27]
 80080a0:	2b7a      	cmp	r3, #122	; 0x7a
 80080a2:	d802      	bhi.n	80080aa <create_name+0xce>
 80080a4:	7efb      	ldrb	r3, [r7, #27]
 80080a6:	3b20      	subs	r3, #32
 80080a8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	1c5a      	adds	r2, r3, #1
 80080ae:	613a      	str	r2, [r7, #16]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	4413      	add	r3, r2
 80080b4:	7efa      	ldrb	r2, [r7, #27]
 80080b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80080b8:	e7a6      	b.n	8008008 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80080ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	441a      	add	r2, r3
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <create_name+0xf4>
 80080cc:	2306      	movs	r3, #6
 80080ce:	e010      	b.n	80080f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2be5      	cmp	r3, #229	; 0xe5
 80080d6:	d102      	bne.n	80080de <create_name+0x102>
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2205      	movs	r2, #5
 80080dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80080de:	7efb      	ldrb	r3, [r7, #27]
 80080e0:	2b20      	cmp	r3, #32
 80080e2:	d801      	bhi.n	80080e8 <create_name+0x10c>
 80080e4:	2204      	movs	r2, #4
 80080e6:	e000      	b.n	80080ea <create_name+0x10e>
 80080e8:	2200      	movs	r2, #0
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	330b      	adds	r3, #11
 80080ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80080f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3720      	adds	r7, #32
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	0800e89c 	.word	0x0800e89c
 8008100:	0800e25c 	.word	0x0800e25c

08008104 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008118:	e002      	b.n	8008120 <follow_path+0x1c>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	3301      	adds	r3, #1
 800811e:	603b      	str	r3, [r7, #0]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b2f      	cmp	r3, #47	; 0x2f
 8008126:	d0f8      	beq.n	800811a <follow_path+0x16>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b5c      	cmp	r3, #92	; 0x5c
 800812e:	d0f4      	beq.n	800811a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	2200      	movs	r2, #0
 8008134:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	2b1f      	cmp	r3, #31
 800813c:	d80a      	bhi.n	8008154 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2280      	movs	r2, #128	; 0x80
 8008142:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008146:	2100      	movs	r1, #0
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7ff fcf9 	bl	8007b40 <dir_sdi>
 800814e:	4603      	mov	r3, r0
 8008150:	75fb      	strb	r3, [r7, #23]
 8008152:	e043      	b.n	80081dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008154:	463b      	mov	r3, r7
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7ff ff3f 	bl	8007fdc <create_name>
 800815e:	4603      	mov	r3, r0
 8008160:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d134      	bne.n	80081d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7ff feaf 	bl	8007ecc <dir_find>
 800816e:	4603      	mov	r3, r0
 8008170:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008178:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800817a:	7dfb      	ldrb	r3, [r7, #23]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00a      	beq.n	8008196 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008180:	7dfb      	ldrb	r3, [r7, #23]
 8008182:	2b04      	cmp	r3, #4
 8008184:	d127      	bne.n	80081d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008186:	7afb      	ldrb	r3, [r7, #11]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b00      	cmp	r3, #0
 800818e:	d122      	bne.n	80081d6 <follow_path+0xd2>
 8008190:	2305      	movs	r3, #5
 8008192:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008194:	e01f      	b.n	80081d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008196:	7afb      	ldrb	r3, [r7, #11]
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	2b00      	cmp	r3, #0
 800819e:	d11c      	bne.n	80081da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	799b      	ldrb	r3, [r3, #6]
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d102      	bne.n	80081b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80081ac:	2305      	movs	r3, #5
 80081ae:	75fb      	strb	r3, [r7, #23]
 80081b0:	e014      	b.n	80081dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c0:	4413      	add	r3, r2
 80081c2:	4619      	mov	r1, r3
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7ff fe42 	bl	8007e4e <ld_clust>
 80081ca:	4602      	mov	r2, r0
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80081d0:	e7c0      	b.n	8008154 <follow_path+0x50>
			if (res != FR_OK) break;
 80081d2:	bf00      	nop
 80081d4:	e002      	b.n	80081dc <follow_path+0xd8>
				break;
 80081d6:	bf00      	nop
 80081d8:	e000      	b.n	80081dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80081da:	bf00      	nop
			}
		}
	}

	return res;
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b087      	sub	sp, #28
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80081ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d031      	beq.n	8008260 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	617b      	str	r3, [r7, #20]
 8008202:	e002      	b.n	800820a <get_ldnumber+0x24>
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	3301      	adds	r3, #1
 8008208:	617b      	str	r3, [r7, #20]
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	2b20      	cmp	r3, #32
 8008210:	d903      	bls.n	800821a <get_ldnumber+0x34>
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	2b3a      	cmp	r3, #58	; 0x3a
 8008218:	d1f4      	bne.n	8008204 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b3a      	cmp	r3, #58	; 0x3a
 8008220:	d11c      	bne.n	800825c <get_ldnumber+0x76>
			tp = *path;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	60fa      	str	r2, [r7, #12]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	3b30      	subs	r3, #48	; 0x30
 8008232:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2b09      	cmp	r3, #9
 8008238:	d80e      	bhi.n	8008258 <get_ldnumber+0x72>
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	429a      	cmp	r2, r3
 8008240:	d10a      	bne.n	8008258 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d807      	bhi.n	8008258 <get_ldnumber+0x72>
					vol = (int)i;
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	3301      	adds	r3, #1
 8008250:	617b      	str	r3, [r7, #20]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	e002      	b.n	8008262 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800825c:	2300      	movs	r3, #0
 800825e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008260:	693b      	ldr	r3, [r7, #16]
}
 8008262:	4618      	mov	r0, r3
 8008264:	371c      	adds	r7, #28
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
	...

08008270 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	70da      	strb	r2, [r3, #3]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008286:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7ff f8da 	bl	8007444 <move_window>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <check_fs+0x2a>
 8008296:	2304      	movs	r3, #4
 8008298:	e038      	b.n	800830c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3330      	adds	r3, #48	; 0x30
 800829e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fe fe1e 	bl	8006ee4 <ld_word>
 80082a8:	4603      	mov	r3, r0
 80082aa:	461a      	mov	r2, r3
 80082ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d001      	beq.n	80082b8 <check_fs+0x48>
 80082b4:	2303      	movs	r3, #3
 80082b6:	e029      	b.n	800830c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082be:	2be9      	cmp	r3, #233	; 0xe9
 80082c0:	d009      	beq.n	80082d6 <check_fs+0x66>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082c8:	2beb      	cmp	r3, #235	; 0xeb
 80082ca:	d11e      	bne.n	800830a <check_fs+0x9a>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80082d2:	2b90      	cmp	r3, #144	; 0x90
 80082d4:	d119      	bne.n	800830a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3330      	adds	r3, #48	; 0x30
 80082da:	3336      	adds	r3, #54	; 0x36
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe fe19 	bl	8006f14 <ld_dword>
 80082e2:	4603      	mov	r3, r0
 80082e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80082e8:	4a0a      	ldr	r2, [pc, #40]	; (8008314 <check_fs+0xa4>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d101      	bne.n	80082f2 <check_fs+0x82>
 80082ee:	2300      	movs	r3, #0
 80082f0:	e00c      	b.n	800830c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3330      	adds	r3, #48	; 0x30
 80082f6:	3352      	adds	r3, #82	; 0x52
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe fe0b 	bl	8006f14 <ld_dword>
 80082fe:	4603      	mov	r3, r0
 8008300:	4a05      	ldr	r2, [pc, #20]	; (8008318 <check_fs+0xa8>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d101      	bne.n	800830a <check_fs+0x9a>
 8008306:	2300      	movs	r3, #0
 8008308:	e000      	b.n	800830c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800830a:	2302      	movs	r3, #2
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	00544146 	.word	0x00544146
 8008318:	33544146 	.word	0x33544146

0800831c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b096      	sub	sp, #88	; 0x58
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	4613      	mov	r3, r2
 8008328:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2200      	movs	r2, #0
 800832e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f7ff ff58 	bl	80081e6 <get_ldnumber>
 8008336:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833a:	2b00      	cmp	r3, #0
 800833c:	da01      	bge.n	8008342 <find_volume+0x26>
 800833e:	230b      	movs	r3, #11
 8008340:	e22d      	b.n	800879e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008342:	4aa1      	ldr	r2, [pc, #644]	; (80085c8 <find_volume+0x2ac>)
 8008344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800834a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <find_volume+0x3a>
 8008352:	230c      	movs	r3, #12
 8008354:	e223      	b.n	800879e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800835a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800835c:	79fb      	ldrb	r3, [r7, #7]
 800835e:	f023 0301 	bic.w	r3, r3, #1
 8008362:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d01a      	beq.n	80083a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	785b      	ldrb	r3, [r3, #1]
 8008370:	4618      	mov	r0, r3
 8008372:	f7fe fd11 	bl	8006d98 <disk_status>
 8008376:	4603      	mov	r3, r0
 8008378:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800837c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10c      	bne.n	80083a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d007      	beq.n	800839e <find_volume+0x82>
 800838e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008392:	f003 0304 	and.w	r3, r3, #4
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800839a:	230a      	movs	r3, #10
 800839c:	e1ff      	b.n	800879e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800839e:	2300      	movs	r3, #0
 80083a0:	e1fd      	b.n	800879e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	2200      	movs	r2, #0
 80083a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80083a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	785b      	ldrb	r3, [r3, #1]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fe fd09 	bl	8006dcc <disk_initialize>
 80083ba:	4603      	mov	r3, r0
 80083bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80083c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083c4:	f003 0301 	and.w	r3, r3, #1
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80083cc:	2303      	movs	r3, #3
 80083ce:	e1e6      	b.n	800879e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d007      	beq.n	80083e6 <find_volume+0xca>
 80083d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083da:	f003 0304 	and.w	r3, r3, #4
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80083e2:	230a      	movs	r3, #10
 80083e4:	e1db      	b.n	800879e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80083ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80083ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083ee:	f7ff ff3f 	bl	8008270 <check_fs>
 80083f2:	4603      	mov	r3, r0
 80083f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80083f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d149      	bne.n	8008494 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008400:	2300      	movs	r3, #0
 8008402:	643b      	str	r3, [r7, #64]	; 0x40
 8008404:	e01e      	b.n	8008444 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800840c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008414:	4413      	add	r3, r2
 8008416:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	3304      	adds	r3, #4
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d006      	beq.n	8008430 <find_volume+0x114>
 8008422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008424:	3308      	adds	r3, #8
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe fd74 	bl	8006f14 <ld_dword>
 800842c:	4602      	mov	r2, r0
 800842e:	e000      	b.n	8008432 <find_volume+0x116>
 8008430:	2200      	movs	r2, #0
 8008432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	3358      	adds	r3, #88	; 0x58
 8008438:	443b      	add	r3, r7
 800843a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800843e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008440:	3301      	adds	r3, #1
 8008442:	643b      	str	r3, [r7, #64]	; 0x40
 8008444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008446:	2b03      	cmp	r3, #3
 8008448:	d9dd      	bls.n	8008406 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800844a:	2300      	movs	r3, #0
 800844c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800844e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <find_volume+0x13e>
 8008454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008456:	3b01      	subs	r3, #1
 8008458:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800845a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	3358      	adds	r3, #88	; 0x58
 8008460:	443b      	add	r3, r7
 8008462:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008466:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800846a:	2b00      	cmp	r3, #0
 800846c:	d005      	beq.n	800847a <find_volume+0x15e>
 800846e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008470:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008472:	f7ff fefd 	bl	8008270 <check_fs>
 8008476:	4603      	mov	r3, r0
 8008478:	e000      	b.n	800847c <find_volume+0x160>
 800847a:	2303      	movs	r3, #3
 800847c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008480:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008484:	2b01      	cmp	r3, #1
 8008486:	d905      	bls.n	8008494 <find_volume+0x178>
 8008488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800848a:	3301      	adds	r3, #1
 800848c:	643b      	str	r3, [r7, #64]	; 0x40
 800848e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008490:	2b03      	cmp	r3, #3
 8008492:	d9e2      	bls.n	800845a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008494:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008498:	2b04      	cmp	r3, #4
 800849a:	d101      	bne.n	80084a0 <find_volume+0x184>
 800849c:	2301      	movs	r3, #1
 800849e:	e17e      	b.n	800879e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80084a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d901      	bls.n	80084ac <find_volume+0x190>
 80084a8:	230d      	movs	r3, #13
 80084aa:	e178      	b.n	800879e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	3330      	adds	r3, #48	; 0x30
 80084b0:	330b      	adds	r3, #11
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe fd16 	bl	8006ee4 <ld_word>
 80084b8:	4603      	mov	r3, r0
 80084ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084be:	d001      	beq.n	80084c4 <find_volume+0x1a8>
 80084c0:	230d      	movs	r3, #13
 80084c2:	e16c      	b.n	800879e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	3330      	adds	r3, #48	; 0x30
 80084c8:	3316      	adds	r3, #22
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe fd0a 	bl	8006ee4 <ld_word>
 80084d0:	4603      	mov	r3, r0
 80084d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80084d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d106      	bne.n	80084e8 <find_volume+0x1cc>
 80084da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084dc:	3330      	adds	r3, #48	; 0x30
 80084de:	3324      	adds	r3, #36	; 0x24
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7fe fd17 	bl	8006f14 <ld_dword>
 80084e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80084e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80084ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	789b      	ldrb	r3, [r3, #2]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d005      	beq.n	800850c <find_volume+0x1f0>
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	789b      	ldrb	r3, [r3, #2]
 8008504:	2b02      	cmp	r3, #2
 8008506:	d001      	beq.n	800850c <find_volume+0x1f0>
 8008508:	230d      	movs	r3, #13
 800850a:	e148      	b.n	800879e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	789b      	ldrb	r3, [r3, #2]
 8008510:	461a      	mov	r2, r3
 8008512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008514:	fb02 f303 	mul.w	r3, r2, r3
 8008518:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800851a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008520:	b29a      	uxth	r2, r3
 8008522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008524:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	895b      	ldrh	r3, [r3, #10]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d008      	beq.n	8008540 <find_volume+0x224>
 800852e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008530:	895b      	ldrh	r3, [r3, #10]
 8008532:	461a      	mov	r2, r3
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	895b      	ldrh	r3, [r3, #10]
 8008538:	3b01      	subs	r3, #1
 800853a:	4013      	ands	r3, r2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <find_volume+0x228>
 8008540:	230d      	movs	r3, #13
 8008542:	e12c      	b.n	800879e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008546:	3330      	adds	r3, #48	; 0x30
 8008548:	3311      	adds	r3, #17
 800854a:	4618      	mov	r0, r3
 800854c:	f7fe fcca 	bl	8006ee4 <ld_word>
 8008550:	4603      	mov	r3, r0
 8008552:	461a      	mov	r2, r3
 8008554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008556:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	891b      	ldrh	r3, [r3, #8]
 800855c:	f003 030f 	and.w	r3, r3, #15
 8008560:	b29b      	uxth	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <find_volume+0x24e>
 8008566:	230d      	movs	r3, #13
 8008568:	e119      	b.n	800879e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800856a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856c:	3330      	adds	r3, #48	; 0x30
 800856e:	3313      	adds	r3, #19
 8008570:	4618      	mov	r0, r3
 8008572:	f7fe fcb7 	bl	8006ee4 <ld_word>
 8008576:	4603      	mov	r3, r0
 8008578:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800857a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800857c:	2b00      	cmp	r3, #0
 800857e:	d106      	bne.n	800858e <find_volume+0x272>
 8008580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008582:	3330      	adds	r3, #48	; 0x30
 8008584:	3320      	adds	r3, #32
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe fcc4 	bl	8006f14 <ld_dword>
 800858c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800858e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008590:	3330      	adds	r3, #48	; 0x30
 8008592:	330e      	adds	r3, #14
 8008594:	4618      	mov	r0, r3
 8008596:	f7fe fca5 	bl	8006ee4 <ld_word>
 800859a:	4603      	mov	r3, r0
 800859c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800859e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <find_volume+0x28c>
 80085a4:	230d      	movs	r3, #13
 80085a6:	e0fa      	b.n	800879e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80085a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ac:	4413      	add	r3, r2
 80085ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085b0:	8912      	ldrh	r2, [r2, #8]
 80085b2:	0912      	lsrs	r2, r2, #4
 80085b4:	b292      	uxth	r2, r2
 80085b6:	4413      	add	r3, r2
 80085b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80085ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	429a      	cmp	r2, r3
 80085c0:	d204      	bcs.n	80085cc <find_volume+0x2b0>
 80085c2:	230d      	movs	r3, #13
 80085c4:	e0eb      	b.n	800879e <find_volume+0x482>
 80085c6:	bf00      	nop
 80085c8:	200014bc 	.word	0x200014bc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80085cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085d4:	8952      	ldrh	r2, [r2, #10]
 80085d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80085da:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <find_volume+0x2ca>
 80085e2:	230d      	movs	r3, #13
 80085e4:	e0db      	b.n	800879e <find_volume+0x482>
		fmt = FS_FAT32;
 80085e6:	2303      	movs	r3, #3
 80085e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d802      	bhi.n	80085fc <find_volume+0x2e0>
 80085f6:	2302      	movs	r3, #2
 80085f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008602:	4293      	cmp	r3, r2
 8008604:	d802      	bhi.n	800860c <find_volume+0x2f0>
 8008606:	2301      	movs	r3, #1
 8008608:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	1c9a      	adds	r2, r3, #2
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008618:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800861a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800861c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800861e:	441a      	add	r2, r3
 8008620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008622:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008624:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	441a      	add	r2, r3
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800862e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008632:	2b03      	cmp	r3, #3
 8008634:	d11e      	bne.n	8008674 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	3330      	adds	r3, #48	; 0x30
 800863a:	332a      	adds	r3, #42	; 0x2a
 800863c:	4618      	mov	r0, r3
 800863e:	f7fe fc51 	bl	8006ee4 <ld_word>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <find_volume+0x330>
 8008648:	230d      	movs	r3, #13
 800864a:	e0a8      	b.n	800879e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800864c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864e:	891b      	ldrh	r3, [r3, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <find_volume+0x33c>
 8008654:	230d      	movs	r3, #13
 8008656:	e0a2      	b.n	800879e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865a:	3330      	adds	r3, #48	; 0x30
 800865c:	332c      	adds	r3, #44	; 0x2c
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe fc58 	bl	8006f14 <ld_dword>
 8008664:	4602      	mov	r2, r0
 8008666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008668:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	647b      	str	r3, [r7, #68]	; 0x44
 8008672:	e01f      	b.n	80086b4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008676:	891b      	ldrh	r3, [r3, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <find_volume+0x364>
 800867c:	230d      	movs	r3, #13
 800867e:	e08e      	b.n	800879e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008682:	6a1a      	ldr	r2, [r3, #32]
 8008684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008686:	441a      	add	r2, r3
 8008688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800868c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008690:	2b02      	cmp	r3, #2
 8008692:	d103      	bne.n	800869c <find_volume+0x380>
 8008694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	e00a      	b.n	80086b2 <find_volume+0x396>
 800869c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869e:	695a      	ldr	r2, [r3, #20]
 80086a0:	4613      	mov	r3, r2
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	4413      	add	r3, r2
 80086a6:	085a      	lsrs	r2, r3, #1
 80086a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80086b2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80086b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b6:	699a      	ldr	r2, [r3, #24]
 80086b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80086be:	0a5b      	lsrs	r3, r3, #9
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d201      	bcs.n	80086c8 <find_volume+0x3ac>
 80086c4:	230d      	movs	r3, #13
 80086c6:	e06a      	b.n	800879e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086ce:	611a      	str	r2, [r3, #16]
 80086d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d2:	691a      	ldr	r2, [r3, #16]
 80086d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	2280      	movs	r2, #128	; 0x80
 80086dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80086de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d149      	bne.n	800877a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	3330      	adds	r3, #48	; 0x30
 80086ea:	3330      	adds	r3, #48	; 0x30
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fe fbf9 	bl	8006ee4 <ld_word>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d140      	bne.n	800877a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80086f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086fa:	3301      	adds	r3, #1
 80086fc:	4619      	mov	r1, r3
 80086fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008700:	f7fe fea0 	bl	8007444 <move_window>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d137      	bne.n	800877a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	2200      	movs	r2, #0
 800870e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	3330      	adds	r3, #48	; 0x30
 8008714:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008718:	4618      	mov	r0, r3
 800871a:	f7fe fbe3 	bl	8006ee4 <ld_word>
 800871e:	4603      	mov	r3, r0
 8008720:	461a      	mov	r2, r3
 8008722:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008726:	429a      	cmp	r2, r3
 8008728:	d127      	bne.n	800877a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	3330      	adds	r3, #48	; 0x30
 800872e:	4618      	mov	r0, r3
 8008730:	f7fe fbf0 	bl	8006f14 <ld_dword>
 8008734:	4603      	mov	r3, r0
 8008736:	4a1c      	ldr	r2, [pc, #112]	; (80087a8 <find_volume+0x48c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d11e      	bne.n	800877a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800873c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873e:	3330      	adds	r3, #48	; 0x30
 8008740:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008744:	4618      	mov	r0, r3
 8008746:	f7fe fbe5 	bl	8006f14 <ld_dword>
 800874a:	4603      	mov	r3, r0
 800874c:	4a17      	ldr	r2, [pc, #92]	; (80087ac <find_volume+0x490>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d113      	bne.n	800877a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	3330      	adds	r3, #48	; 0x30
 8008756:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe fbda 	bl	8006f14 <ld_dword>
 8008760:	4602      	mov	r2, r0
 8008762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008764:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008768:	3330      	adds	r3, #48	; 0x30
 800876a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fbd0 	bl	8006f14 <ld_dword>
 8008774:	4602      	mov	r2, r0
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800877a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008780:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008782:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <find_volume+0x494>)
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	3301      	adds	r3, #1
 8008788:	b29a      	uxth	r2, r3
 800878a:	4b09      	ldr	r3, [pc, #36]	; (80087b0 <find_volume+0x494>)
 800878c:	801a      	strh	r2, [r3, #0]
 800878e:	4b08      	ldr	r3, [pc, #32]	; (80087b0 <find_volume+0x494>)
 8008790:	881a      	ldrh	r2, [r3, #0]
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008796:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008798:	f7fe fdec 	bl	8007374 <clear_lock>
#endif
	return FR_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3758      	adds	r7, #88	; 0x58
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	41615252 	.word	0x41615252
 80087ac:	61417272 	.word	0x61417272
 80087b0:	200014c4 	.word	0x200014c4

080087b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80087be:	2309      	movs	r3, #9
 80087c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01c      	beq.n	8008802 <validate+0x4e>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d018      	beq.n	8008802 <validate+0x4e>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d013      	beq.n	8008802 <validate+0x4e>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	889a      	ldrh	r2, [r3, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	88db      	ldrh	r3, [r3, #6]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d10c      	bne.n	8008802 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fe fad2 	bl	8006d98 <disk_status>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <validate+0x4e>
			res = FR_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d102      	bne.n	800880e <validate+0x5a>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	e000      	b.n	8008810 <validate+0x5c>
 800880e:	2300      	movs	r3, #0
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	6013      	str	r3, [r2, #0]
	return res;
 8008814:	7bfb      	ldrb	r3, [r7, #15]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
	...

08008820 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b088      	sub	sp, #32
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	4613      	mov	r3, r2
 800882c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008832:	f107 0310 	add.w	r3, r7, #16
 8008836:	4618      	mov	r0, r3
 8008838:	f7ff fcd5 	bl	80081e6 <get_ldnumber>
 800883c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	2b00      	cmp	r3, #0
 8008842:	da01      	bge.n	8008848 <f_mount+0x28>
 8008844:	230b      	movs	r3, #11
 8008846:	e02b      	b.n	80088a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008848:	4a17      	ldr	r2, [pc, #92]	; (80088a8 <f_mount+0x88>)
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008850:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d005      	beq.n	8008864 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008858:	69b8      	ldr	r0, [r7, #24]
 800885a:	f7fe fd8b 	bl	8007374 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d002      	beq.n	8008870 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	490d      	ldr	r1, [pc, #52]	; (80088a8 <f_mount+0x88>)
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <f_mount+0x66>
 8008880:	79fb      	ldrb	r3, [r7, #7]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d001      	beq.n	800888a <f_mount+0x6a>
 8008886:	2300      	movs	r3, #0
 8008888:	e00a      	b.n	80088a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800888a:	f107 010c 	add.w	r1, r7, #12
 800888e:	f107 0308 	add.w	r3, r7, #8
 8008892:	2200      	movs	r2, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f7ff fd41 	bl	800831c <find_volume>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800889e:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3720      	adds	r7, #32
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	200014bc 	.word	0x200014bc

080088ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b098      	sub	sp, #96	; 0x60
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	4613      	mov	r3, r2
 80088b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <f_open+0x18>
 80088c0:	2309      	movs	r3, #9
 80088c2:	e1ad      	b.n	8008c20 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80088cc:	79fa      	ldrb	r2, [r7, #7]
 80088ce:	f107 0110 	add.w	r1, r7, #16
 80088d2:	f107 0308 	add.w	r3, r7, #8
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff fd20 	bl	800831c <find_volume>
 80088dc:	4603      	mov	r3, r0
 80088de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80088e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f040 8191 	bne.w	8008c0e <f_open+0x362>
		dj.obj.fs = fs;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	f107 0314 	add.w	r3, r7, #20
 80088f6:	4611      	mov	r1, r2
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7ff fc03 	bl	8008104 <follow_path>
 80088fe:	4603      	mov	r3, r0
 8008900:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008904:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008908:	2b00      	cmp	r3, #0
 800890a:	d11a      	bne.n	8008942 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800890c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008910:	b25b      	sxtb	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	da03      	bge.n	800891e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008916:	2306      	movs	r3, #6
 8008918:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800891c:	e011      	b.n	8008942 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	f023 0301 	bic.w	r3, r3, #1
 8008924:	2b00      	cmp	r3, #0
 8008926:	bf14      	ite	ne
 8008928:	2301      	movne	r3, #1
 800892a:	2300      	moveq	r3, #0
 800892c:	b2db      	uxtb	r3, r3
 800892e:	461a      	mov	r2, r3
 8008930:	f107 0314 	add.w	r3, r7, #20
 8008934:	4611      	mov	r1, r2
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe fbd4 	bl	80070e4 <chk_lock>
 800893c:	4603      	mov	r3, r0
 800893e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	f003 031c 	and.w	r3, r3, #28
 8008948:	2b00      	cmp	r3, #0
 800894a:	d07f      	beq.n	8008a4c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800894c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008950:	2b00      	cmp	r3, #0
 8008952:	d017      	beq.n	8008984 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008958:	2b04      	cmp	r3, #4
 800895a:	d10e      	bne.n	800897a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800895c:	f7fe fc1e 	bl	800719c <enq_lock>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d006      	beq.n	8008974 <f_open+0xc8>
 8008966:	f107 0314 	add.w	r3, r7, #20
 800896a:	4618      	mov	r0, r3
 800896c:	f7ff fb03 	bl	8007f76 <dir_register>
 8008970:	4603      	mov	r3, r0
 8008972:	e000      	b.n	8008976 <f_open+0xca>
 8008974:	2312      	movs	r3, #18
 8008976:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800897a:	79fb      	ldrb	r3, [r7, #7]
 800897c:	f043 0308 	orr.w	r3, r3, #8
 8008980:	71fb      	strb	r3, [r7, #7]
 8008982:	e010      	b.n	80089a6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008984:	7ebb      	ldrb	r3, [r7, #26]
 8008986:	f003 0311 	and.w	r3, r3, #17
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <f_open+0xea>
					res = FR_DENIED;
 800898e:	2307      	movs	r3, #7
 8008990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008994:	e007      	b.n	80089a6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	f003 0304 	and.w	r3, r3, #4
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <f_open+0xfa>
 80089a0:	2308      	movs	r3, #8
 80089a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80089a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d168      	bne.n	8008a80 <f_open+0x1d4>
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	f003 0308 	and.w	r3, r3, #8
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d063      	beq.n	8008a80 <f_open+0x1d4>
				dw = GET_FATTIME();
 80089b8:	f7fe fa8c 	bl	8006ed4 <get_fattime>
 80089bc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c0:	330e      	adds	r3, #14
 80089c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7fe fae3 	bl	8006f90 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089cc:	3316      	adds	r3, #22
 80089ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fe fadd 	bl	8006f90 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80089d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d8:	330b      	adds	r3, #11
 80089da:	2220      	movs	r2, #32
 80089dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089e2:	4611      	mov	r1, r2
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7ff fa32 	bl	8007e4e <ld_clust>
 80089ea:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80089f0:	2200      	movs	r2, #0
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff fa4a 	bl	8007e8c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80089f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fa:	331c      	adds	r3, #28
 80089fc:	2100      	movs	r1, #0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe fac6 	bl	8006f90 <st_dword>
					fs->wflag = 1;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	2201      	movs	r2, #1
 8008a08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d037      	beq.n	8008a80 <f_open+0x1d4>
						dw = fs->winsect;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008a16:	f107 0314 	add.w	r3, r7, #20
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe ff5d 	bl	80078de <remove_chain>
 8008a24:	4603      	mov	r3, r0
 8008a26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008a2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d126      	bne.n	8008a80 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fe fd04 	bl	8007444 <move_window>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a46:	3a01      	subs	r2, #1
 8008a48:	60da      	str	r2, [r3, #12]
 8008a4a:	e019      	b.n	8008a80 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008a4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d115      	bne.n	8008a80 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008a54:	7ebb      	ldrb	r3, [r7, #26]
 8008a56:	f003 0310 	and.w	r3, r3, #16
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d003      	beq.n	8008a66 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008a5e:	2304      	movs	r3, #4
 8008a60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008a64:	e00c      	b.n	8008a80 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008a66:	79fb      	ldrb	r3, [r7, #7]
 8008a68:	f003 0302 	and.w	r3, r3, #2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d007      	beq.n	8008a80 <f_open+0x1d4>
 8008a70:	7ebb      	ldrb	r3, [r7, #26]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <f_open+0x1d4>
						res = FR_DENIED;
 8008a7a:	2307      	movs	r3, #7
 8008a7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008a80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d128      	bne.n	8008ada <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008a88:	79fb      	ldrb	r3, [r7, #7]
 8008a8a:	f003 0308 	and.w	r3, r3, #8
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008aa8:	79fb      	ldrb	r3, [r7, #7]
 8008aaa:	f023 0301 	bic.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	bf14      	ite	ne
 8008ab2:	2301      	movne	r3, #1
 8008ab4:	2300      	moveq	r3, #0
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	461a      	mov	r2, r3
 8008aba:	f107 0314 	add.w	r3, r7, #20
 8008abe:	4611      	mov	r1, r2
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fe fb8d 	bl	80071e0 <inc_lock>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d102      	bne.n	8008ada <f_open+0x22e>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008ada:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f040 8095 	bne.w	8008c0e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ae8:	4611      	mov	r1, r2
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff f9af 	bl	8007e4e <ld_clust>
 8008af0:	4602      	mov	r2, r0
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af8:	331c      	adds	r3, #28
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fe fa0a 	bl	8006f14 <ld_dword>
 8008b00:	4602      	mov	r2, r0
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	88da      	ldrh	r2, [r3, #6]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	79fa      	ldrb	r2, [r7, #7]
 8008b1e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3330      	adds	r3, #48	; 0x30
 8008b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fe fa74 	bl	800702a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	f003 0320 	and.w	r3, r3, #32
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d060      	beq.n	8008c0e <f_open+0x362>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d05c      	beq.n	8008c0e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	68da      	ldr	r2, [r3, #12]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	895b      	ldrh	r3, [r3, #10]
 8008b60:	025b      	lsls	r3, r3, #9
 8008b62:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8008b70:	e016      	b.n	8008ba0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fe fd1f 	bl	80075ba <get_fat>
 8008b7c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d802      	bhi.n	8008b8a <f_open+0x2de>
 8008b84:	2302      	movs	r3, #2
 8008b86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b90:	d102      	bne.n	8008b98 <f_open+0x2ec>
 8008b92:	2301      	movs	r3, #1
 8008b94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008b98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	657b      	str	r3, [r7, #84]	; 0x54
 8008ba0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d103      	bne.n	8008bb0 <f_open+0x304>
 8008ba8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d8e0      	bhi.n	8008b72 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bb4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008bb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d127      	bne.n	8008c0e <f_open+0x362>
 8008bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d022      	beq.n	8008c0e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fe fcd5 	bl	800757c <clust2sect>
 8008bd2:	6478      	str	r0, [r7, #68]	; 0x44
 8008bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d103      	bne.n	8008be2 <f_open+0x336>
						res = FR_INT_ERR;
 8008bda:	2302      	movs	r3, #2
 8008bdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008be0:	e015      	b.n	8008c0e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008be4:	0a5a      	lsrs	r2, r3, #9
 8008be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be8:	441a      	add	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	7858      	ldrb	r0, [r3, #1]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6a1a      	ldr	r2, [r3, #32]
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	f7fe f90b 	bl	8006e18 <disk_read>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <f_open+0x362>
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008c0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <f_open+0x370>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008c1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3760      	adds	r7, #96	; 0x60
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08e      	sub	sp, #56	; 0x38
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f107 0214 	add.w	r2, r7, #20
 8008c46:	4611      	mov	r1, r2
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff fdb3 	bl	80087b4 <validate>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008c54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d107      	bne.n	8008c6c <f_read+0x44>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	7d5b      	ldrb	r3, [r3, #21]
 8008c60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008c64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <f_read+0x4a>
 8008c6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c70:	e115      	b.n	8008e9e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	7d1b      	ldrb	r3, [r3, #20]
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <f_read+0x5a>
 8008c7e:	2307      	movs	r3, #7
 8008c80:	e10d      	b.n	8008e9e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	68da      	ldr	r2, [r3, #12]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	6a3b      	ldr	r3, [r7, #32]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	f240 80fe 	bls.w	8008e94 <f_read+0x26c>
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008c9c:	e0fa      	b.n	8008e94 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f040 80c6 	bne.w	8008e38 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	0a5b      	lsrs	r3, r3, #9
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	8952      	ldrh	r2, [r2, #10]
 8008cb6:	3a01      	subs	r2, #1
 8008cb8:	4013      	ands	r3, r2
 8008cba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d12f      	bne.n	8008d22 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d103      	bne.n	8008cd2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	633b      	str	r3, [r7, #48]	; 0x30
 8008cd0:	e013      	b.n	8008cfa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d007      	beq.n	8008cea <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f7fe fef9 	bl	8007ad8 <clmt_clust>
 8008ce6:	6338      	str	r0, [r7, #48]	; 0x30
 8008ce8:	e007      	b.n	8008cfa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	f7fe fc61 	bl	80075ba <get_fat>
 8008cf8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d804      	bhi.n	8008d0a <f_read+0xe2>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2202      	movs	r2, #2
 8008d04:	755a      	strb	r2, [r3, #21]
 8008d06:	2302      	movs	r3, #2
 8008d08:	e0c9      	b.n	8008e9e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d10:	d104      	bne.n	8008d1c <f_read+0xf4>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2201      	movs	r2, #1
 8008d16:	755a      	strb	r2, [r3, #21]
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e0c0      	b.n	8008e9e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d20:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	f7fe fc26 	bl	800757c <clust2sect>
 8008d30:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d104      	bne.n	8008d42 <f_read+0x11a>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	755a      	strb	r2, [r3, #21]
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e0ad      	b.n	8008e9e <f_read+0x276>
			sect += csect;
 8008d42:	69ba      	ldr	r2, [r7, #24]
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	4413      	add	r3, r2
 8008d48:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	0a5b      	lsrs	r3, r3, #9
 8008d4e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d039      	beq.n	8008dca <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008d56:	69fa      	ldr	r2, [r7, #28]
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	4413      	add	r3, r2
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	8952      	ldrh	r2, [r2, #10]
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d905      	bls.n	8008d70 <f_read+0x148>
					cc = fs->csize - csect;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	895b      	ldrh	r3, [r3, #10]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	7858      	ldrb	r0, [r3, #1]
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	69ba      	ldr	r2, [r7, #24]
 8008d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d7a:	f7fe f84d 	bl	8006e18 <disk_read>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d004      	beq.n	8008d8e <f_read+0x166>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2201      	movs	r2, #1
 8008d88:	755a      	strb	r2, [r3, #21]
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e087      	b.n	8008e9e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	7d1b      	ldrb	r3, [r3, #20]
 8008d92:	b25b      	sxtb	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	da14      	bge.n	8008dc2 <f_read+0x19a>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6a1a      	ldr	r2, [r3, #32]
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d90d      	bls.n	8008dc2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6a1a      	ldr	r2, [r3, #32]
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	025b      	lsls	r3, r3, #9
 8008db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db2:	18d0      	adds	r0, r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3330      	adds	r3, #48	; 0x30
 8008db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	f7fe f913 	bl	8006fe8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc4:	025b      	lsls	r3, r3, #9
 8008dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008dc8:	e050      	b.n	8008e6c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	69ba      	ldr	r2, [r7, #24]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d02e      	beq.n	8008e32 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	7d1b      	ldrb	r3, [r3, #20]
 8008dd8:	b25b      	sxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	da18      	bge.n	8008e10 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	7858      	ldrb	r0, [r3, #1]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6a1a      	ldr	r2, [r3, #32]
 8008dec:	2301      	movs	r3, #1
 8008dee:	f7fe f833 	bl	8006e58 <disk_write>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d004      	beq.n	8008e02 <f_read+0x1da>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	755a      	strb	r2, [r3, #21]
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e04d      	b.n	8008e9e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	7d1b      	ldrb	r3, [r3, #20]
 8008e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	7858      	ldrb	r0, [r3, #1]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	f7fd fffb 	bl	8006e18 <disk_read>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d004      	beq.n	8008e32 <f_read+0x20a>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	755a      	strb	r2, [r3, #21]
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e035      	b.n	8008e9e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e40:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008e44:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d901      	bls.n	8008e52 <f_read+0x22a>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e60:	4413      	add	r3, r2
 8008e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e64:	4619      	mov	r1, r3
 8008e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e68:	f7fe f8be 	bl	8006fe8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	4413      	add	r3, r2
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	699a      	ldr	r2, [r3, #24]
 8008e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7a:	441a      	add	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	619a      	str	r2, [r3, #24]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e86:	441a      	add	r2, r3
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f47f af01 	bne.w	8008c9e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3738      	adds	r7, #56	; 0x38
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b08c      	sub	sp, #48	; 0x30
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	607a      	str	r2, [r7, #4]
 8008eb2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f107 0210 	add.w	r2, r7, #16
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7ff fc74 	bl	80087b4 <validate>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d107      	bne.n	8008eea <f_write+0x44>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	7d5b      	ldrb	r3, [r3, #21]
 8008ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d002      	beq.n	8008ef0 <f_write+0x4a>
 8008eea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008eee:	e14b      	b.n	8009188 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	7d1b      	ldrb	r3, [r3, #20]
 8008ef4:	f003 0302 	and.w	r3, r3, #2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <f_write+0x5a>
 8008efc:	2307      	movs	r3, #7
 8008efe:	e143      	b.n	8009188 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	699a      	ldr	r2, [r3, #24]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	441a      	add	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	f080 812d 	bcs.w	800916c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	43db      	mvns	r3, r3
 8008f18:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008f1a:	e127      	b.n	800916c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f040 80e3 	bne.w	80090f0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	0a5b      	lsrs	r3, r3, #9
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	8952      	ldrh	r2, [r2, #10]
 8008f34:	3a01      	subs	r2, #1
 8008f36:	4013      	ands	r3, r2
 8008f38:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d143      	bne.n	8008fc8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10c      	bne.n	8008f62 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d11a      	bne.n	8008f8a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2100      	movs	r1, #0
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fe fd25 	bl	80079a8 <create_chain>
 8008f5e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008f60:	e013      	b.n	8008f8a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d007      	beq.n	8008f7a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f7fe fdb1 	bl	8007ad8 <clmt_clust>
 8008f76:	62b8      	str	r0, [r7, #40]	; 0x28
 8008f78:	e007      	b.n	8008f8a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	4619      	mov	r1, r3
 8008f82:	4610      	mov	r0, r2
 8008f84:	f7fe fd10 	bl	80079a8 <create_chain>
 8008f88:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 80f2 	beq.w	8009176 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d104      	bne.n	8008fa2 <f_write+0xfc>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	755a      	strb	r2, [r3, #21]
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	e0f2      	b.n	8009188 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fa8:	d104      	bne.n	8008fb4 <f_write+0x10e>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2201      	movs	r2, #1
 8008fae:	755a      	strb	r2, [r3, #21]
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e0e9      	b.n	8009188 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fb8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d102      	bne.n	8008fc8 <f_write+0x122>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fc6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	7d1b      	ldrb	r3, [r3, #20]
 8008fcc:	b25b      	sxtb	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	da18      	bge.n	8009004 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	7858      	ldrb	r0, [r3, #1]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6a1a      	ldr	r2, [r3, #32]
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	f7fd ff39 	bl	8006e58 <disk_write>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d004      	beq.n	8008ff6 <f_write+0x150>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	755a      	strb	r2, [r3, #21]
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e0c8      	b.n	8009188 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	7d1b      	ldrb	r3, [r3, #20]
 8008ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ffe:	b2da      	uxtb	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	4619      	mov	r1, r3
 800900c:	4610      	mov	r0, r2
 800900e:	f7fe fab5 	bl	800757c <clust2sect>
 8009012:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d104      	bne.n	8009024 <f_write+0x17e>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2202      	movs	r2, #2
 800901e:	755a      	strb	r2, [r3, #21]
 8009020:	2302      	movs	r3, #2
 8009022:	e0b1      	b.n	8009188 <f_write+0x2e2>
			sect += csect;
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	4413      	add	r3, r2
 800902a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	0a5b      	lsrs	r3, r3, #9
 8009030:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d03c      	beq.n	80090b2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	4413      	add	r3, r2
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	8952      	ldrh	r2, [r2, #10]
 8009042:	4293      	cmp	r3, r2
 8009044:	d905      	bls.n	8009052 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	895b      	ldrh	r3, [r3, #10]
 800904a:	461a      	mov	r2, r3
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	7858      	ldrb	r0, [r3, #1]
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	69f9      	ldr	r1, [r7, #28]
 800905c:	f7fd fefc 	bl	8006e58 <disk_write>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d004      	beq.n	8009070 <f_write+0x1ca>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2201      	movs	r2, #1
 800906a:	755a      	strb	r2, [r3, #21]
 800906c:	2301      	movs	r3, #1
 800906e:	e08b      	b.n	8009188 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6a1a      	ldr	r2, [r3, #32]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	6a3a      	ldr	r2, [r7, #32]
 800907a:	429a      	cmp	r2, r3
 800907c:	d915      	bls.n	80090aa <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6a1a      	ldr	r2, [r3, #32]
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	025b      	lsls	r3, r3, #9
 800908e:	69fa      	ldr	r2, [r7, #28]
 8009090:	4413      	add	r3, r2
 8009092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009096:	4619      	mov	r1, r3
 8009098:	f7fd ffa6 	bl	8006fe8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	7d1b      	ldrb	r3, [r3, #20]
 80090a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	025b      	lsls	r3, r3, #9
 80090ae:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80090b0:	e03f      	b.n	8009132 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d016      	beq.n	80090ea <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	699a      	ldr	r2, [r3, #24]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d210      	bcs.n	80090ea <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	7858      	ldrb	r0, [r3, #1]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090d2:	2301      	movs	r3, #1
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	f7fd fe9f 	bl	8006e18 <disk_read>
 80090da:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d004      	beq.n	80090ea <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2201      	movs	r2, #1
 80090e4:	755a      	strb	r2, [r3, #21]
 80090e6:	2301      	movs	r3, #1
 80090e8:	e04e      	b.n	8009188 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80090fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80090fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	429a      	cmp	r2, r3
 8009104:	d901      	bls.n	800910a <f_write+0x264>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009118:	4413      	add	r3, r2
 800911a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800911c:	69f9      	ldr	r1, [r7, #28]
 800911e:	4618      	mov	r0, r3
 8009120:	f7fd ff62 	bl	8006fe8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	7d1b      	ldrb	r3, [r3, #20]
 8009128:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800912c:	b2da      	uxtb	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009132:	69fa      	ldr	r2, [r7, #28]
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	4413      	add	r3, r2
 8009138:	61fb      	str	r3, [r7, #28]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	699a      	ldr	r2, [r3, #24]
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	441a      	add	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	619a      	str	r2, [r3, #24]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	68da      	ldr	r2, [r3, #12]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	429a      	cmp	r2, r3
 8009150:	bf38      	it	cc
 8009152:	461a      	movcc	r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	60da      	str	r2, [r3, #12]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	441a      	add	r2, r3
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	f47f aed4 	bne.w	8008f1c <f_write+0x76>
 8009174:	e000      	b.n	8009178 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009176:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	7d1b      	ldrb	r3, [r3, #20]
 800917c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009180:	b2da      	uxtb	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3730      	adds	r7, #48	; 0x30
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f107 0208 	add.w	r2, r7, #8
 800919e:	4611      	mov	r1, r2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7ff fb07 	bl	80087b4 <validate>
 80091a6:	4603      	mov	r3, r0
 80091a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d168      	bne.n	8009282 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	7d1b      	ldrb	r3, [r3, #20]
 80091b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d062      	beq.n	8009282 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	7d1b      	ldrb	r3, [r3, #20]
 80091c0:	b25b      	sxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	da15      	bge.n	80091f2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	7858      	ldrb	r0, [r3, #1]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a1a      	ldr	r2, [r3, #32]
 80091d4:	2301      	movs	r3, #1
 80091d6:	f7fd fe3f 	bl	8006e58 <disk_write>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <f_sync+0x54>
 80091e0:	2301      	movs	r3, #1
 80091e2:	e04f      	b.n	8009284 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	7d1b      	ldrb	r3, [r3, #20]
 80091e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80091f2:	f7fd fe6f 	bl	8006ed4 <get_fattime>
 80091f6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	4619      	mov	r1, r3
 8009200:	4610      	mov	r0, r2
 8009202:	f7fe f91f 	bl	8007444 <move_window>
 8009206:	4603      	mov	r3, r0
 8009208:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d138      	bne.n	8009282 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009214:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	330b      	adds	r3, #11
 800921a:	781a      	ldrb	r2, [r3, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	330b      	adds	r3, #11
 8009220:	f042 0220 	orr.w	r2, r2, #32
 8009224:	b2d2      	uxtb	r2, r2
 8009226:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6818      	ldr	r0, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	461a      	mov	r2, r3
 8009232:	68f9      	ldr	r1, [r7, #12]
 8009234:	f7fe fe2a 	bl	8007e8c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f103 021c 	add.w	r2, r3, #28
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	4619      	mov	r1, r3
 8009244:	4610      	mov	r0, r2
 8009246:	f7fd fea3 	bl	8006f90 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3316      	adds	r3, #22
 800924e:	6939      	ldr	r1, [r7, #16]
 8009250:	4618      	mov	r0, r3
 8009252:	f7fd fe9d 	bl	8006f90 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	3312      	adds	r3, #18
 800925a:	2100      	movs	r1, #0
 800925c:	4618      	mov	r0, r3
 800925e:	f7fd fe7c 	bl	8006f5a <st_word>
					fs->wflag = 1;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2201      	movs	r2, #1
 8009266:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	4618      	mov	r0, r3
 800926c:	f7fe f918 	bl	80074a0 <sync_fs>
 8009270:	4603      	mov	r3, r0
 8009272:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	7d1b      	ldrb	r3, [r3, #20]
 8009278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800927c:	b2da      	uxtb	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009282:	7dfb      	ldrb	r3, [r7, #23]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7ff ff7b 	bl	8009190 <f_sync>
 800929a:	4603      	mov	r3, r0
 800929c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d118      	bne.n	80092d6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f107 0208 	add.w	r2, r7, #8
 80092aa:	4611      	mov	r1, r2
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7ff fa81 	bl	80087b4 <validate>
 80092b2:	4603      	mov	r3, r0
 80092b4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10c      	bne.n	80092d6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fe f81b 	bl	80072fc <dec_lock>
 80092c6:	4603      	mov	r3, r0
 80092c8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	4613      	mov	r3, r2
 80092ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80092ee:	2301      	movs	r3, #1
 80092f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80092f6:	4b1f      	ldr	r3, [pc, #124]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 80092f8:	7b9b      	ldrb	r3, [r3, #14]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d831      	bhi.n	8009364 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009300:	4b1c      	ldr	r3, [pc, #112]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 8009302:	7b9b      	ldrb	r3, [r3, #14]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	461a      	mov	r2, r3
 8009308:	4b1a      	ldr	r3, [pc, #104]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 800930a:	2100      	movs	r1, #0
 800930c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800930e:	4b19      	ldr	r3, [pc, #100]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 8009310:	7b9b      	ldrb	r3, [r3, #14]
 8009312:	b2db      	uxtb	r3, r3
 8009314:	4a17      	ldr	r2, [pc, #92]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800931e:	4b15      	ldr	r3, [pc, #84]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 8009320:	7b9b      	ldrb	r3, [r3, #14]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	461a      	mov	r2, r3
 8009326:	4b13      	ldr	r3, [pc, #76]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 8009328:	4413      	add	r3, r2
 800932a:	79fa      	ldrb	r2, [r7, #7]
 800932c:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800932e:	4b11      	ldr	r3, [pc, #68]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 8009330:	7b9b      	ldrb	r3, [r3, #14]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	b2d1      	uxtb	r1, r2
 8009338:	4a0e      	ldr	r2, [pc, #56]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 800933a:	7391      	strb	r1, [r2, #14]
 800933c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800933e:	7dbb      	ldrb	r3, [r7, #22]
 8009340:	3330      	adds	r3, #48	; 0x30
 8009342:	b2da      	uxtb	r2, r3
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	3301      	adds	r3, #1
 800934c:	223a      	movs	r2, #58	; 0x3a
 800934e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	3302      	adds	r3, #2
 8009354:	222f      	movs	r2, #47	; 0x2f
 8009356:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	3303      	adds	r3, #3
 800935c:	2200      	movs	r2, #0
 800935e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009364:	7dfb      	ldrb	r3, [r7, #23]
}
 8009366:	4618      	mov	r0, r3
 8009368:	371c      	adds	r7, #28
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	200014e8 	.word	0x200014e8

08009378 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009382:	2200      	movs	r2, #0
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7ff ffaa 	bl	80092e0 <FATFS_LinkDriverEx>
 800938c:	4603      	mov	r3, r0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80093a8:	2301      	movs	r3, #1
 80093aa:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80093ac:	4b15      	ldr	r3, [pc, #84]	; (8009404 <FATFS_UnLinkDriverEx+0x6c>)
 80093ae:	7b9b      	ldrb	r3, [r3, #14]
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d01e      	beq.n	80093f4 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	3b30      	subs	r3, #48	; 0x30
 80093bc:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 80093be:	7bbb      	ldrb	r3, [r7, #14]
 80093c0:	4a10      	ldr	r2, [pc, #64]	; (8009404 <FATFS_UnLinkDriverEx+0x6c>)
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d013      	beq.n	80093f4 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
 80093ce:	4a0d      	ldr	r2, [pc, #52]	; (8009404 <FATFS_UnLinkDriverEx+0x6c>)
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	2200      	movs	r2, #0
 80093d6:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	4a0a      	ldr	r2, [pc, #40]	; (8009404 <FATFS_UnLinkDriverEx+0x6c>)
 80093dc:	4413      	add	r3, r2
 80093de:	2200      	movs	r2, #0
 80093e0:	731a      	strb	r2, [r3, #12]
      disk.nbr--;
 80093e2:	4b08      	ldr	r3, [pc, #32]	; (8009404 <FATFS_UnLinkDriverEx+0x6c>)
 80093e4:	7b9b      	ldrb	r3, [r3, #14]
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <FATFS_UnLinkDriverEx+0x6c>)
 80093ee:	739a      	strb	r2, [r3, #14]
      ret = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	200014e8 	.word	0x200014e8

08009408 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8009410:	2100      	movs	r1, #0
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7ff ffc0 	bl	8009398 <FATFS_UnLinkDriverEx>
 8009418:	4603      	mov	r3, r0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009422:	b480      	push	{r7}
 8009424:	b083      	sub	sp, #12
 8009426:	af00      	add	r7, sp, #0
 8009428:	4603      	mov	r3, r0
 800942a:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
	...

0800943c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
 800944a:	79fb      	ldrb	r3, [r7, #7]
 800944c:	4619      	mov	r1, r3
 800944e:	4808      	ldr	r0, [pc, #32]	; (8009470 <USBH_status+0x34>)
 8009450:	f001 f806 	bl	800a460 <USBH_MSC_UnitIsReady>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d002      	beq.n	8009460 <USBH_status+0x24>
  {
    res = RES_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]
 800945e:	e001      	b.n	8009464 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009464:	7bfb      	ldrb	r3, [r7, #15]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	2000050c 	.word	0x2000050c

08009474 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b094      	sub	sp, #80	; 0x50
 8009478:	af02      	add	r7, sp, #8
 800947a:	60b9      	str	r1, [r7, #8]
 800947c:	607a      	str	r2, [r7, #4]
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	4603      	mov	r3, r0
 8009482:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f003 0303 	and.w	r3, r3, #3
 8009496:	2b00      	cmp	r3, #0
 8009498:	d02d      	beq.n	80094f6 <USBH_read+0x82>
 800949a:	4b35      	ldr	r3, [pc, #212]	; (8009570 <USBH_read+0xfc>)
 800949c:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d027      	beq.n	80094f6 <USBH_read+0x82>
  {
    while ((count--)&&(status == USBH_OK))
 80094a6:	e01a      	b.n	80094de <USBH_read+0x6a>
    {
      status = USBH_MSC_Read(&hUSBHost, lun, sector + count, (uint8_t *)scratch, 1);
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	441a      	add	r2, r3
 80094ae:	7bf9      	ldrb	r1, [r7, #15]
 80094b0:	2301      	movs	r3, #1
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	4b2f      	ldr	r3, [pc, #188]	; (8009574 <USBH_read+0x100>)
 80094b6:	482e      	ldr	r0, [pc, #184]	; (8009570 <USBH_read+0xfc>)
 80094b8:	f001 f81c 	bl	800a4f4 <USBH_MSC_Read>
 80094bc:	4603      	mov	r3, r0
 80094be:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

      if(status == USBH_OK)
 80094c2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d113      	bne.n	80094f2 <USBH_read+0x7e>
      {
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	025b      	lsls	r3, r3, #9
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	4413      	add	r3, r2
 80094d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094d6:	4927      	ldr	r1, [pc, #156]	; (8009574 <USBH_read+0x100>)
 80094d8:	4618      	mov	r0, r3
 80094da:	f004 f8b0 	bl	800d63e <memcpy>
    while ((count--)&&(status == USBH_OK))
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	1e5a      	subs	r2, r3, #1
 80094e2:	603a      	str	r2, [r7, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d012      	beq.n	800950e <USBH_read+0x9a>
 80094e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d0db      	beq.n	80094a8 <USBH_read+0x34>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 80094f0:	e00d      	b.n	800950e <USBH_read+0x9a>
      }
      else
      {
        break;
 80094f2:	bf00      	nop
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 80094f4:	e00b      	b.n	800950e <USBH_read+0x9a>
      }
    }
  }
  else
  {
    status = USBH_MSC_Read(&hUSBHost, lun, sector, buff, count);
 80094f6:	7bf9      	ldrb	r1, [r7, #15]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	481b      	ldr	r0, [pc, #108]	; (8009570 <USBH_read+0xfc>)
 8009502:	f000 fff7 	bl	800a4f4 <USBH_MSC_Read>
 8009506:	4603      	mov	r3, r0
 8009508:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800950c:	e000      	b.n	8009510 <USBH_read+0x9c>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 800950e:	bf00      	nop
  }

  if(status == USBH_OK)
 8009510:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009514:	2b00      	cmp	r3, #0
 8009516:	d103      	bne.n	8009520 <USBH_read+0xac>
  {
    res = RES_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800951e:	e020      	b.n	8009562 <USBH_read+0xee>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
 8009520:	f107 0210 	add.w	r2, r7, #16
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	4619      	mov	r1, r3
 8009528:	4811      	ldr	r0, [pc, #68]	; (8009570 <USBH_read+0xfc>)
 800952a:	f000 ffbf 	bl	800a4ac <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800952e:	7f7b      	ldrb	r3, [r7, #29]
 8009530:	2b3a      	cmp	r3, #58	; 0x3a
 8009532:	d005      	beq.n	8009540 <USBH_read+0xcc>
 8009534:	2b3a      	cmp	r3, #58	; 0x3a
 8009536:	dc10      	bgt.n	800955a <USBH_read+0xe6>
 8009538:	2b04      	cmp	r3, #4
 800953a:	d001      	beq.n	8009540 <USBH_read+0xcc>
 800953c:	2b28      	cmp	r3, #40	; 0x28
 800953e:	d10c      	bne.n	800955a <USBH_read+0xe6>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 8009540:	480d      	ldr	r0, [pc, #52]	; (8009578 <USBH_read+0x104>)
 8009542:	f003 fe55 	bl	800d1f0 <iprintf>
 8009546:	480d      	ldr	r0, [pc, #52]	; (800957c <USBH_read+0x108>)
 8009548:	f003 fe52 	bl	800d1f0 <iprintf>
 800954c:	200a      	movs	r0, #10
 800954e:	f003 fe61 	bl	800d214 <putchar>
      res = RES_NOTRDY;
 8009552:	2303      	movs	r3, #3
 8009554:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009558:	e003      	b.n	8009562 <USBH_read+0xee>

    default:
      res = RES_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009560:	bf00      	nop
    }
  }

  return res;
 8009562:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009566:	4618      	mov	r0, r3
 8009568:	3748      	adds	r7, #72	; 0x48
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	2000050c 	.word	0x2000050c
 8009574:	200014f8 	.word	0x200014f8
 8009578:	0800e2a0 	.word	0x0800e2a0
 800957c:	0800e2a8 	.word	0x0800e2a8

08009580 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b094      	sub	sp, #80	; 0x50
 8009584:	af02      	add	r7, sp, #8
 8009586:	60b9      	str	r1, [r7, #8]
 8009588:	607a      	str	r2, [r7, #4]
 800958a:	603b      	str	r3, [r7, #0]
 800958c:	4603      	mov	r3, r0
 800958e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f003 0303 	and.w	r3, r3, #3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d029      	beq.n	80095fa <USBH_write+0x7a>
 80095a6:	4b3a      	ldr	r3, [pc, #232]	; (8009690 <USBH_write+0x110>)
 80095a8:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d023      	beq.n	80095fa <USBH_write+0x7a>
  {

    while (count--)
 80095b2:	e01a      	b.n	80095ea <USBH_write+0x6a>
    {
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	025b      	lsls	r3, r3, #9
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	4413      	add	r3, r2
 80095bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095c0:	4619      	mov	r1, r3
 80095c2:	4834      	ldr	r0, [pc, #208]	; (8009694 <USBH_write+0x114>)
 80095c4:	f004 f83b 	bl	800d63e <memcpy>

      status = USBH_MSC_Write(&hUSBHost, lun, sector + count, (BYTE *)scratch, 1) ;
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	441a      	add	r2, r3
 80095ce:	7bf9      	ldrb	r1, [r7, #15]
 80095d0:	2301      	movs	r3, #1
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	4b2f      	ldr	r3, [pc, #188]	; (8009694 <USBH_write+0x114>)
 80095d6:	482e      	ldr	r0, [pc, #184]	; (8009690 <USBH_write+0x110>)
 80095d8:	f000 fff5 	bl	800a5c6 <USBH_MSC_Write>
 80095dc:	4603      	mov	r3, r0
 80095de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      if(status == USBH_FAIL)
 80095e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d005      	beq.n	80095f6 <USBH_write+0x76>
    while (count--)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	1e5a      	subs	r2, r3, #1
 80095ee:	603a      	str	r2, [r7, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1df      	bne.n	80095b4 <USBH_write+0x34>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 80095f4:	e00c      	b.n	8009610 <USBH_write+0x90>
      {
        break;
 80095f6:	bf00      	nop
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 80095f8:	e00a      	b.n	8009610 <USBH_write+0x90>
      }
    }
  }
  else
  {
    status = USBH_MSC_Write(&hUSBHost, lun, sector, (BYTE *)buff, count);
 80095fa:	7bf9      	ldrb	r1, [r7, #15]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	4822      	ldr	r0, [pc, #136]	; (8009690 <USBH_write+0x110>)
 8009606:	f000 ffde 	bl	800a5c6 <USBH_MSC_Write>
 800960a:	4603      	mov	r3, r0
 800960c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }

  if(status == USBH_OK)
 8009610:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009614:	2b00      	cmp	r3, #0
 8009616:	d103      	bne.n	8009620 <USBH_write+0xa0>
  {
    res = RES_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800961e:	e031      	b.n	8009684 <USBH_write+0x104>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
 8009620:	f107 0210 	add.w	r2, r7, #16
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	4619      	mov	r1, r3
 8009628:	4819      	ldr	r0, [pc, #100]	; (8009690 <USBH_write+0x110>)
 800962a:	f000 ff3f 	bl	800a4ac <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800962e:	7f7b      	ldrb	r3, [r7, #29]
 8009630:	2b3a      	cmp	r3, #58	; 0x3a
 8009632:	d016      	beq.n	8009662 <USBH_write+0xe2>
 8009634:	2b3a      	cmp	r3, #58	; 0x3a
 8009636:	dc21      	bgt.n	800967c <USBH_write+0xfc>
 8009638:	2b28      	cmp	r3, #40	; 0x28
 800963a:	d012      	beq.n	8009662 <USBH_write+0xe2>
 800963c:	2b28      	cmp	r3, #40	; 0x28
 800963e:	dc1d      	bgt.n	800967c <USBH_write+0xfc>
 8009640:	2b04      	cmp	r3, #4
 8009642:	d00e      	beq.n	8009662 <USBH_write+0xe2>
 8009644:	2b27      	cmp	r3, #39	; 0x27
 8009646:	d119      	bne.n	800967c <USBH_write+0xfc>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 8009648:	4813      	ldr	r0, [pc, #76]	; (8009698 <USBH_write+0x118>)
 800964a:	f003 fdd1 	bl	800d1f0 <iprintf>
 800964e:	4813      	ldr	r0, [pc, #76]	; (800969c <USBH_write+0x11c>)
 8009650:	f003 fdce 	bl	800d1f0 <iprintf>
 8009654:	200a      	movs	r0, #10
 8009656:	f003 fddd 	bl	800d214 <putchar>
      res = RES_WRPRT;
 800965a:	2302      	movs	r3, #2
 800965c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009660:	e010      	b.n	8009684 <USBH_write+0x104>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 8009662:	480d      	ldr	r0, [pc, #52]	; (8009698 <USBH_write+0x118>)
 8009664:	f003 fdc4 	bl	800d1f0 <iprintf>
 8009668:	480d      	ldr	r0, [pc, #52]	; (80096a0 <USBH_write+0x120>)
 800966a:	f003 fdc1 	bl	800d1f0 <iprintf>
 800966e:	200a      	movs	r0, #10
 8009670:	f003 fdd0 	bl	800d214 <putchar>
      res = RES_NOTRDY;
 8009674:	2303      	movs	r3, #3
 8009676:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800967a:	e003      	b.n	8009684 <USBH_write+0x104>

    default:
      res = RES_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009682:	bf00      	nop
    }
  }

  return res;
 8009684:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009688:	4618      	mov	r0, r3
 800968a:	3748      	adds	r7, #72	; 0x48
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	2000050c 	.word	0x2000050c
 8009694:	200014f8 	.word	0x200014f8
 8009698:	0800e2a0 	.word	0x0800e2a0
 800969c:	0800e2c0 	.word	0x0800e2c0
 80096a0:	0800e2a8 	.word	0x0800e2a8

080096a4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b090      	sub	sp, #64	; 0x40
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	4603      	mov	r3, r0
 80096ac:	603a      	str	r2, [r7, #0]
 80096ae:	71fb      	strb	r3, [r7, #7]
 80096b0:	460b      	mov	r3, r1
 80096b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80096ba:	79bb      	ldrb	r3, [r7, #6]
 80096bc:	2b03      	cmp	r3, #3
 80096be:	d850      	bhi.n	8009762 <USBH_ioctl+0xbe>
 80096c0:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <USBH_ioctl+0x24>)
 80096c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c6:	bf00      	nop
 80096c8:	080096d9 	.word	0x080096d9
 80096cc:	080096e1 	.word	0x080096e1
 80096d0:	0800970b 	.word	0x0800970b
 80096d4:	08009737 	.word	0x08009737
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80096de:	e043      	b.n	8009768 <USBH_ioctl+0xc4>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 80096e0:	f107 0208 	add.w	r2, r7, #8
 80096e4:	79fb      	ldrb	r3, [r7, #7]
 80096e6:	4619      	mov	r1, r3
 80096e8:	4822      	ldr	r0, [pc, #136]	; (8009774 <USBH_ioctl+0xd0>)
 80096ea:	f000 fedf 	bl	800a4ac <USBH_MSC_GetLUNInfo>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d106      	bne.n	8009702 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009700:	e032      	b.n	8009768 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009708:	e02e      	b.n	8009768 <USBH_ioctl+0xc4>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 800970a:	f107 0208 	add.w	r2, r7, #8
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	4619      	mov	r1, r3
 8009712:	4818      	ldr	r0, [pc, #96]	; (8009774 <USBH_ioctl+0xd0>)
 8009714:	f000 feca 	bl	800a4ac <USBH_MSC_GetLUNInfo>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d107      	bne.n	800972e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800971e:	8a3b      	ldrh	r3, [r7, #16]
 8009720:	461a      	mov	r2, r3
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800972c:	e01c      	b.n	8009768 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009734:	e018      	b.n	8009768 <USBH_ioctl+0xc4>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 8009736:	f107 0208 	add.w	r2, r7, #8
 800973a:	79fb      	ldrb	r3, [r7, #7]
 800973c:	4619      	mov	r1, r3
 800973e:	480d      	ldr	r0, [pc, #52]	; (8009774 <USBH_ioctl+0xd0>)
 8009740:	f000 feb4 	bl	800a4ac <USBH_MSC_GetLUNInfo>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d107      	bne.n	800975a <USBH_ioctl+0xb6>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800974a:	8a3b      	ldrh	r3, [r7, #16]
 800974c:	461a      	mov	r2, r3
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009758:	e006      	b.n	8009768 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009760:	e002      	b.n	8009768 <USBH_ioctl+0xc4>

  default:
    res = RES_PARERR;
 8009762:	2304      	movs	r3, #4
 8009764:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009768:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800976c:	4618      	mov	r0, r3
 800976e:	3740      	adds	r7, #64	; 0x40
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	2000050c 	.word	0x2000050c

08009778 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009778:	b590      	push	{r4, r7, lr}
 800977a:	b089      	sub	sp, #36	; 0x24
 800977c:	af04      	add	r7, sp, #16
 800977e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8009786:	7919      	ldrb	r1, [r3, #4]
 8009788:	2350      	movs	r3, #80	; 0x50
 800978a:	2206      	movs	r2, #6
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f001 fe37 	bl	800b400 <USBH_FindInterface>
 8009792:	4603      	mov	r3, r0
 8009794:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	2bff      	cmp	r3, #255	; 0xff
 800979a:	d002      	beq.n	80097a2 <USBH_MSC_InterfaceInit+0x2a>
 800979c:	7bfb      	ldrb	r3, [r7, #15]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d901      	bls.n	80097a6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80097a2:	2302      	movs	r3, #2
 80097a4:	e106      	b.n	80099b4 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f001 fdc0 	bl	800b330 <USBH_SelectInterface>
 80097b0:	4603      	mov	r3, r0
 80097b2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80097ba:	2302      	movs	r3, #2
 80097bc:	e0fa      	b.n	80099b4 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 447c 	ldr.w	r4, [r3, #1148]	; 0x47c
 80097c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80097c8:	f003 fb5c 	bl	800ce84 <malloc>
 80097cc:	4603      	mov	r3, r0
 80097ce:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 80097d6:	69db      	ldr	r3, [r3, #28]
 80097d8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80097e0:	2302      	movs	r3, #2
 80097e2:	e0e7      	b.n	80099b4 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80097e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097e8:	2100      	movs	r1, #0
 80097ea:	68b8      	ldr	r0, [r7, #8]
 80097ec:	f003 fe4e 	bl	800d48c <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	211a      	movs	r1, #26
 80097f6:	fb01 f303 	mul.w	r3, r1, r3
 80097fa:	4413      	add	r3, r2
 80097fc:	f203 434e 	addw	r3, r3, #1102	; 0x44e
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	b25b      	sxtb	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	da16      	bge.n	8009836 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009808:	7bfb      	ldrb	r3, [r7, #15]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	211a      	movs	r1, #26
 800980e:	fb01 f303 	mul.w	r3, r1, r3
 8009812:	4413      	add	r3, r2
 8009814:	f203 434e 	addw	r3, r3, #1102	; 0x44e
 8009818:	781a      	ldrb	r2, [r3, #0]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	211a      	movs	r1, #26
 8009824:	fb01 f303 	mul.w	r3, r1, r3
 8009828:	4413      	add	r3, r2
 800982a:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800982e:	881a      	ldrh	r2, [r3, #0]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	815a      	strh	r2, [r3, #10]
 8009834:	e015      	b.n	8009862 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	211a      	movs	r1, #26
 800983c:	fb01 f303 	mul.w	r3, r1, r3
 8009840:	4413      	add	r3, r2
 8009842:	f203 434e 	addw	r3, r3, #1102	; 0x44e
 8009846:	781a      	ldrb	r2, [r3, #0]
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	211a      	movs	r1, #26
 8009852:	fb01 f303 	mul.w	r3, r1, r3
 8009856:	4413      	add	r3, r2
 8009858:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800985c:	881a      	ldrh	r2, [r3, #0]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	211a      	movs	r1, #26
 8009868:	fb01 f303 	mul.w	r3, r1, r3
 800986c:	4413      	add	r3, r2
 800986e:	f203 4356 	addw	r3, r3, #1110	; 0x456
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	b25b      	sxtb	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	da16      	bge.n	80098a8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800987a:	7bfb      	ldrb	r3, [r7, #15]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	211a      	movs	r1, #26
 8009880:	fb01 f303 	mul.w	r3, r1, r3
 8009884:	4413      	add	r3, r2
 8009886:	f203 4356 	addw	r3, r3, #1110	; 0x456
 800988a:	781a      	ldrb	r2, [r3, #0]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	211a      	movs	r1, #26
 8009896:	fb01 f303 	mul.w	r3, r1, r3
 800989a:	4413      	add	r3, r2
 800989c:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80098a0:	881a      	ldrh	r2, [r3, #0]
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	815a      	strh	r2, [r3, #10]
 80098a6:	e015      	b.n	80098d4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	211a      	movs	r1, #26
 80098ae:	fb01 f303 	mul.w	r3, r1, r3
 80098b2:	4413      	add	r3, r2
 80098b4:	f203 4356 	addw	r3, r3, #1110	; 0x456
 80098b8:	781a      	ldrb	r2, [r3, #0]
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	211a      	movs	r1, #26
 80098c4:	fb01 f303 	mul.w	r3, r1, r3
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80098ce:	881a      	ldrh	r2, [r3, #0]
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2200      	movs	r2, #0
 80098d8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2200      	movs	r2, #0
 80098de:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2200      	movs	r2, #0
 80098e4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	799b      	ldrb	r3, [r3, #6]
 80098ea:	4619      	mov	r1, r3
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f003 fa62 	bl	800cdb6 <USBH_AllocPipe>
 80098f2:	4603      	mov	r3, r0
 80098f4:	461a      	mov	r2, r3
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	79db      	ldrb	r3, [r3, #7]
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f003 fa58 	bl	800cdb6 <USBH_AllocPipe>
 8009906:	4603      	mov	r3, r0
 8009908:	461a      	mov	r2, r3
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fefe 	bl	800a710 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	799b      	ldrb	r3, [r3, #6]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d01e      	beq.n	800995a <USBH_MSC_InterfaceInit+0x1e2>
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	891b      	ldrh	r3, [r3, #8]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d01a      	beq.n	800995a <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	7959      	ldrb	r1, [r3, #5]
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	7998      	ldrb	r0, [r3, #6]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 441c 	ldrb.w	r4, [r3, #1052]	; 0x41c
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	8912      	ldrh	r2, [r2, #8]
 800993c:	9202      	str	r2, [sp, #8]
 800993e:	2202      	movs	r2, #2
 8009940:	9201      	str	r2, [sp, #4]
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	4623      	mov	r3, r4
 8009946:	4602      	mov	r2, r0
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f003 fa05 	bl	800cd58 <USBH_OpenPipe>
 800994e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	79db      	ldrb	r3, [r3, #7]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d02c      	beq.n	80099b2 <USBH_MSC_InterfaceInit+0x23a>
 8009958:	e001      	b.n	800995e <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800995a:	2303      	movs	r3, #3
 800995c:	e02a      	b.n	80099b4 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	895b      	ldrh	r3, [r3, #10]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d025      	beq.n	80099b2 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	7919      	ldrb	r1, [r3, #4]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	79d8      	ldrb	r0, [r3, #7]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 441c 	ldrb.w	r4, [r3, #1052]	; 0x41c
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	8952      	ldrh	r2, [r2, #10]
 800997e:	9202      	str	r2, [sp, #8]
 8009980:	2202      	movs	r2, #2
 8009982:	9201      	str	r2, [sp, #4]
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	4623      	mov	r3, r4
 8009988:	4602      	mov	r2, r0
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f003 f9e4 	bl	800cd58 <USBH_OpenPipe>
 8009990:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	791b      	ldrb	r3, [r3, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7f7 fd8c 	bl	80014b8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	795b      	ldrb	r3, [r3, #5]
 80099a4:	2200      	movs	r2, #0
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7f7 fd85 	bl	80014b8 <USBH_LL_SetToggle>

  return USBH_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	e000      	b.n	80099b4 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 80099b2:	2303      	movs	r3, #3
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd90      	pop	{r4, r7, pc}

080099bc <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	795b      	ldrb	r3, [r3, #5]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00e      	beq.n	80099f4 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	795b      	ldrb	r3, [r3, #5]
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f003 f9da 	bl	800cd96 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	795b      	ldrb	r3, [r3, #5]
 80099e6:	4619      	mov	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f003 fa06 	bl	800cdfa <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	791b      	ldrb	r3, [r3, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00e      	beq.n	8009a1a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	791b      	ldrb	r3, [r3, #4]
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f003 f9c7 	bl	800cd96 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	791b      	ldrb	r3, [r3, #4]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f003 f9f3 	bl	800cdfa <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8009a20:	69db      	ldr	r3, [r3, #28]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00b      	beq.n	8009a3e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f003 fa30 	bl	800ce94 <free>
    phost->pActiveClass->pData = 0U;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8009a56:	69db      	ldr	r3, [r3, #28]
 8009a58:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	7b9b      	ldrb	r3, [r3, #14]
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	d04a      	beq.n	8009afc <USBH_MSC_ClassRequest+0xb4>
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	dc54      	bgt.n	8009b14 <USBH_MSC_ClassRequest+0xcc>
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <USBH_MSC_ClassRequest+0x2a>
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d150      	bne.n	8009b14 <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	4619      	mov	r1, r3
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fe2b 	bl	800a6d2 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d104      	bne.n	8009a90 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d140      	bne.n	8009b18 <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d804      	bhi.n	8009aa8 <USBH_MSC_ClassRequest+0x60>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	b2da      	uxtb	r2, r3
 8009aa6:	e000      	b.n	8009aaa <USBH_MSC_ClassRequest+0x62>
 8009aa8:	2202      	movs	r2, #2
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	481c      	ldr	r0, [pc, #112]	; (8009b28 <USBH_MSC_ClassRequest+0xe0>)
 8009ab6:	f003 fb9b 	bl	800d1f0 <iprintf>
 8009aba:	200a      	movs	r0, #10
 8009abc:	f003 fbaa 	bl	800d214 <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	73bb      	strb	r3, [r7, #14]
 8009ac4:	e014      	b.n	8009af0 <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	2134      	movs	r1, #52	; 0x34
 8009acc:	fb01 f303 	mul.w	r3, r1, r3
 8009ad0:	4413      	add	r3, r2
 8009ad2:	3392      	adds	r3, #146	; 0x92
 8009ad4:	2202      	movs	r2, #2
 8009ad6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	2134      	movs	r1, #52	; 0x34
 8009ade:	fb01 f303 	mul.w	r3, r1, r3
 8009ae2:	4413      	add	r3, r2
 8009ae4:	33c1      	adds	r3, #193	; 0xc1
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009aea:	7bbb      	ldrb	r3, [r7, #14]
 8009aec:	3301      	adds	r3, #1
 8009aee:	73bb      	strb	r3, [r7, #14]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	7bba      	ldrb	r2, [r7, #14]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d3e5      	bcc.n	8009ac6 <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 8009afa:	e00d      	b.n	8009b18 <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009afc:	2100      	movs	r1, #0
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f002 fb8e 	bl	800c220 <USBH_ClrFeature>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d108      	bne.n	8009b1c <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	7bda      	ldrb	r2, [r3, #15]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009b12:	e003      	b.n	8009b1c <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 8009b14:	bf00      	nop
 8009b16:	e002      	b.n	8009b1e <USBH_MSC_ClassRequest+0xd6>
      break;
 8009b18:	bf00      	nop
 8009b1a:	e000      	b.n	8009b1e <USBH_MSC_ClassRequest+0xd6>
      break;
 8009b1c:	bf00      	nop
  }

  return status;
 8009b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	0800e2e4 	.word	0x0800e2e4

08009b2c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009b42:	2301      	movs	r3, #1
 8009b44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009b46:	2301      	movs	r3, #1
 8009b48:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	7b1b      	ldrb	r3, [r3, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d003      	beq.n	8009b5a <USBH_MSC_Process+0x2e>
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	f000 8355 	beq.w	800a202 <USBH_MSC_Process+0x6d6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009b58:	e356      	b.n	800a208 <USBH_MSC_Process+0x6dc>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	429a      	cmp	r2, r3
 8009b68:	f080 8333 	bcs.w	800a1d2 <USBH_MSC_Process+0x6a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b72:	4619      	mov	r1, r3
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	2334      	movs	r3, #52	; 0x34
 8009b78:	fb01 f303 	mul.w	r3, r1, r3
 8009b7c:	4413      	add	r3, r2
 8009b7e:	3391      	adds	r3, #145	; 0x91
 8009b80:	2201      	movs	r2, #1
 8009b82:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	2334      	movs	r3, #52	; 0x34
 8009b90:	fb01 f303 	mul.w	r3, r1, r3
 8009b94:	4413      	add	r3, r2
 8009b96:	3390      	adds	r3, #144	; 0x90
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b08      	cmp	r3, #8
 8009b9c:	f200 8327 	bhi.w	800a1ee <USBH_MSC_Process+0x6c2>
 8009ba0:	a201      	add	r2, pc, #4	; (adr r2, 8009ba8 <USBH_MSC_Process+0x7c>)
 8009ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba6:	bf00      	nop
 8009ba8:	08009bcd 	.word	0x08009bcd
 8009bac:	0800a1ef 	.word	0x0800a1ef
 8009bb0:	08009d15 	.word	0x08009d15
 8009bb4:	08009ec9 	.word	0x08009ec9
 8009bb8:	08009c07 	.word	0x08009c07
 8009bbc:	0800a035 	.word	0x0800a035
 8009bc0:	0800a1ef 	.word	0x0800a1ef
 8009bc4:	0800a1ef 	.word	0x0800a1ef
 8009bc8:	0800a1c1 	.word	0x0800a1c1
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	48b6      	ldr	r0, [pc, #728]	; (8009eb0 <USBH_MSC_Process+0x384>)
 8009bd6:	f003 fb0b 	bl	800d1f0 <iprintf>
 8009bda:	200a      	movs	r0, #10
 8009bdc:	f003 fb1a 	bl	800d214 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009be6:	4619      	mov	r1, r3
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	2334      	movs	r3, #52	; 0x34
 8009bec:	fb01 f303 	mul.w	r3, r1, r3
 8009bf0:	4413      	add	r3, r2
 8009bf2:	3390      	adds	r3, #144	; 0x90
 8009bf4:	2204      	movs	r2, #4
 8009bf6:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	; 0x4c4
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009c04:	e2fc      	b.n	800a200 <USBH_MSC_Process+0x6d4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c0c:	b2d9      	uxtb	r1, r3
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c14:	461a      	mov	r2, r3
 8009c16:	2334      	movs	r3, #52	; 0x34
 8009c18:	fb02 f303 	mul.w	r3, r2, r3
 8009c1c:	3398      	adds	r3, #152	; 0x98
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	4413      	add	r3, r2
 8009c22:	3307      	adds	r3, #7
 8009c24:	461a      	mov	r2, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f001 f890 	bl	800ad4c <USBH_MSC_SCSI_Inquiry>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d141      	bne.n	8009cba <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	2334      	movs	r3, #52	; 0x34
 8009c40:	fb02 f303 	mul.w	r3, r2, r3
 8009c44:	3398      	adds	r3, #152	; 0x98
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	4413      	add	r3, r2
 8009c4a:	330a      	adds	r3, #10
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4899      	ldr	r0, [pc, #612]	; (8009eb4 <USBH_MSC_Process+0x388>)
 8009c50:	f003 face 	bl	800d1f0 <iprintf>
 8009c54:	200a      	movs	r0, #10
 8009c56:	f003 fadd 	bl	800d214 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c60:	461a      	mov	r2, r3
 8009c62:	2334      	movs	r3, #52	; 0x34
 8009c64:	fb02 f303 	mul.w	r3, r2, r3
 8009c68:	33a0      	adds	r3, #160	; 0xa0
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	330b      	adds	r3, #11
 8009c70:	4619      	mov	r1, r3
 8009c72:	4891      	ldr	r0, [pc, #580]	; (8009eb8 <USBH_MSC_Process+0x38c>)
 8009c74:	f003 fabc 	bl	800d1f0 <iprintf>
 8009c78:	200a      	movs	r0, #10
 8009c7a:	f003 facb 	bl	800d214 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c84:	461a      	mov	r2, r3
 8009c86:	2334      	movs	r3, #52	; 0x34
 8009c88:	fb02 f303 	mul.w	r3, r2, r3
 8009c8c:	33b0      	adds	r3, #176	; 0xb0
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	4413      	add	r3, r2
 8009c92:	330c      	adds	r3, #12
 8009c94:	4619      	mov	r1, r3
 8009c96:	4889      	ldr	r0, [pc, #548]	; (8009ebc <USBH_MSC_Process+0x390>)
 8009c98:	f003 faaa 	bl	800d1f0 <iprintf>
 8009c9c:	200a      	movs	r0, #10
 8009c9e:	f003 fab9 	bl	800d214 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ca8:	4619      	mov	r1, r3
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	2334      	movs	r3, #52	; 0x34
 8009cae:	fb01 f303 	mul.w	r3, r1, r3
 8009cb2:	4413      	add	r3, r2
 8009cb4:	3390      	adds	r3, #144	; 0x90
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d10c      	bne.n	8009cda <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	2334      	movs	r3, #52	; 0x34
 8009ccc:	fb01 f303 	mul.w	r3, r1, r3
 8009cd0:	4413      	add	r3, r2
 8009cd2:	3390      	adds	r3, #144	; 0x90
 8009cd4:	2205      	movs	r2, #5
 8009cd6:	701a      	strb	r2, [r3, #0]
            break;
 8009cd8:	e28b      	b.n	800a1f2 <USBH_MSC_Process+0x6c6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	2b04      	cmp	r3, #4
 8009cde:	f040 8288 	bne.w	800a1f2 <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ce8:	4619      	mov	r1, r3
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	2334      	movs	r3, #52	; 0x34
 8009cee:	fb01 f303 	mul.w	r3, r1, r3
 8009cf2:	4413      	add	r3, r2
 8009cf4:	3390      	adds	r3, #144	; 0x90
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d00:	4619      	mov	r1, r3
 8009d02:	693a      	ldr	r2, [r7, #16]
 8009d04:	2334      	movs	r3, #52	; 0x34
 8009d06:	fb01 f303 	mul.w	r3, r1, r3
 8009d0a:	4413      	add	r3, r2
 8009d0c:	3391      	adds	r3, #145	; 0x91
 8009d0e:	2202      	movs	r2, #2
 8009d10:	701a      	strb	r2, [r3, #0]
            break;
 8009d12:	e26e      	b.n	800a1f2 <USBH_MSC_Process+0x6c6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 ff56 	bl	800abd0 <USBH_MSC_SCSI_TestUnitReady>
 8009d24:	4603      	mov	r3, r0
 8009d26:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009d28:	7bbb      	ldrb	r3, [r7, #14]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d14f      	bne.n	8009dce <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d34:	4619      	mov	r1, r3
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	2334      	movs	r3, #52	; 0x34
 8009d3a:	fb01 f303 	mul.w	r3, r1, r3
 8009d3e:	4413      	add	r3, r2
 8009d40:	3392      	adds	r3, #146	; 0x92
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d012      	beq.n	8009d6e <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d4e:	4619      	mov	r1, r3
 8009d50:	693a      	ldr	r2, [r7, #16]
 8009d52:	2334      	movs	r3, #52	; 0x34
 8009d54:	fb01 f303 	mul.w	r3, r1, r3
 8009d58:	4413      	add	r3, r2
 8009d5a:	33c1      	adds	r3, #193	; 0xc1
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 8009d60:	4857      	ldr	r0, [pc, #348]	; (8009ec0 <USBH_MSC_Process+0x394>)
 8009d62:	f003 fa45 	bl	800d1f0 <iprintf>
 8009d66:	200a      	movs	r0, #10
 8009d68:	f003 fa54 	bl	800d214 <putchar>
 8009d6c:	e00b      	b.n	8009d86 <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d74:	4619      	mov	r1, r3
 8009d76:	693a      	ldr	r2, [r7, #16]
 8009d78:	2334      	movs	r3, #52	; 0x34
 8009d7a:	fb01 f303 	mul.w	r3, r1, r3
 8009d7e:	4413      	add	r3, r2
 8009d80:	33c1      	adds	r3, #193	; 0xc1
 8009d82:	2200      	movs	r2, #0
 8009d84:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	2334      	movs	r3, #52	; 0x34
 8009d92:	fb01 f303 	mul.w	r3, r1, r3
 8009d96:	4413      	add	r3, r2
 8009d98:	3390      	adds	r3, #144	; 0x90
 8009d9a:	2203      	movs	r2, #3
 8009d9c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009da4:	4619      	mov	r1, r3
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	2334      	movs	r3, #52	; 0x34
 8009daa:	fb01 f303 	mul.w	r3, r1, r3
 8009dae:	4413      	add	r3, r2
 8009db0:	3391      	adds	r3, #145	; 0x91
 8009db2:	2200      	movs	r2, #0
 8009db4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	2334      	movs	r3, #52	; 0x34
 8009dc2:	fb01 f303 	mul.w	r3, r1, r3
 8009dc6:	4413      	add	r3, r2
 8009dc8:	3392      	adds	r3, #146	; 0x92
 8009dca:	2200      	movs	r2, #0
 8009dcc:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d150      	bne.n	8009e76 <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dda:	4619      	mov	r1, r3
 8009ddc:	693a      	ldr	r2, [r7, #16]
 8009dde:	2334      	movs	r3, #52	; 0x34
 8009de0:	fb01 f303 	mul.w	r3, r1, r3
 8009de4:	4413      	add	r3, r2
 8009de6:	3392      	adds	r3, #146	; 0x92
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d012      	beq.n	8009e14 <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009df4:	4619      	mov	r1, r3
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	2334      	movs	r3, #52	; 0x34
 8009dfa:	fb01 f303 	mul.w	r3, r1, r3
 8009dfe:	4413      	add	r3, r2
 8009e00:	33c1      	adds	r3, #193	; 0xc1
 8009e02:	2201      	movs	r2, #1
 8009e04:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 8009e06:	482f      	ldr	r0, [pc, #188]	; (8009ec4 <USBH_MSC_Process+0x398>)
 8009e08:	f003 f9f2 	bl	800d1f0 <iprintf>
 8009e0c:	200a      	movs	r0, #10
 8009e0e:	f003 fa01 	bl	800d214 <putchar>
 8009e12:	e00b      	b.n	8009e2c <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	2334      	movs	r3, #52	; 0x34
 8009e20:	fb01 f303 	mul.w	r3, r1, r3
 8009e24:	4413      	add	r3, r2
 8009e26:	33c1      	adds	r3, #193	; 0xc1
 8009e28:	2200      	movs	r2, #0
 8009e2a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e32:	4619      	mov	r1, r3
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	2334      	movs	r3, #52	; 0x34
 8009e38:	fb01 f303 	mul.w	r3, r1, r3
 8009e3c:	4413      	add	r3, r2
 8009e3e:	3390      	adds	r3, #144	; 0x90
 8009e40:	2205      	movs	r2, #5
 8009e42:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	2334      	movs	r3, #52	; 0x34
 8009e50:	fb01 f303 	mul.w	r3, r1, r3
 8009e54:	4413      	add	r3, r2
 8009e56:	3391      	adds	r3, #145	; 0x91
 8009e58:	2201      	movs	r2, #1
 8009e5a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e62:	4619      	mov	r1, r3
 8009e64:	693a      	ldr	r2, [r7, #16]
 8009e66:	2334      	movs	r3, #52	; 0x34
 8009e68:	fb01 f303 	mul.w	r3, r1, r3
 8009e6c:	4413      	add	r3, r2
 8009e6e:	3392      	adds	r3, #146	; 0x92
 8009e70:	2202      	movs	r2, #2
 8009e72:	701a      	strb	r2, [r3, #0]
            break;
 8009e74:	e1bf      	b.n	800a1f6 <USBH_MSC_Process+0x6ca>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	f040 81bc 	bne.w	800a1f6 <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e84:	4619      	mov	r1, r3
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	2334      	movs	r3, #52	; 0x34
 8009e8a:	fb01 f303 	mul.w	r3, r1, r3
 8009e8e:	4413      	add	r3, r2
 8009e90:	3390      	adds	r3, #144	; 0x90
 8009e92:	2201      	movs	r2, #1
 8009e94:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	2334      	movs	r3, #52	; 0x34
 8009ea2:	fb01 f303 	mul.w	r3, r1, r3
 8009ea6:	4413      	add	r3, r2
 8009ea8:	3391      	adds	r3, #145	; 0x91
 8009eaa:	2202      	movs	r2, #2
 8009eac:	701a      	strb	r2, [r3, #0]
            break;
 8009eae:	e1a2      	b.n	800a1f6 <USBH_MSC_Process+0x6ca>
 8009eb0:	0800e300 	.word	0x0800e300
 8009eb4:	0800e30c 	.word	0x0800e30c
 8009eb8:	0800e324 	.word	0x0800e324
 8009ebc:	0800e33c 	.word	0x0800e33c
 8009ec0:	0800e354 	.word	0x0800e354
 8009ec4:	0800e368 	.word	0x0800e368
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ece:	b2d9      	uxtb	r1, r3
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	2334      	movs	r3, #52	; 0x34
 8009eda:	fb02 f303 	mul.w	r3, r2, r3
 8009ede:	3390      	adds	r3, #144	; 0x90
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 feb4 	bl	800ac56 <USBH_MSC_SCSI_ReadCapacity>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d170      	bne.n	8009fda <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009efe:	4619      	mov	r1, r3
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	2334      	movs	r3, #52	; 0x34
 8009f04:	fb01 f303 	mul.w	r3, r1, r3
 8009f08:	4413      	add	r3, r2
 8009f0a:	33c1      	adds	r3, #193	; 0xc1
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d142      	bne.n	8009f98 <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %u Bytes", \
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f18:	4619      	mov	r1, r3
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	2334      	movs	r3, #52	; 0x34
 8009f1e:	fb01 f303 	mul.w	r3, r1, r3
 8009f22:	4413      	add	r3, r2
 8009f24:	3394      	adds	r3, #148	; 0x94
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 8009f2e:	4610      	mov	r0, r2
 8009f30:	6939      	ldr	r1, [r7, #16]
 8009f32:	2234      	movs	r2, #52	; 0x34
 8009f34:	fb00 f202 	mul.w	r2, r0, r2
 8009f38:	440a      	add	r2, r1
 8009f3a:	3298      	adds	r2, #152	; 0x98
 8009f3c:	8812      	ldrh	r2, [r2, #0]
 8009f3e:	fb02 f303 	mul.w	r3, r2, r3
 8009f42:	4619      	mov	r1, r3
 8009f44:	48b3      	ldr	r0, [pc, #716]	; (800a214 <USBH_MSC_Process+0x6e8>)
 8009f46:	f003 f953 	bl	800d1f0 <iprintf>
 8009f4a:	200a      	movs	r0, #10
 8009f4c:	f003 f962 	bl	800d214 <putchar>
                USBH_UsrLog("Block number : %u", (unsigned int)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f56:	4619      	mov	r1, r3
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	2334      	movs	r3, #52	; 0x34
 8009f5c:	fb01 f303 	mul.w	r3, r1, r3
 8009f60:	4413      	add	r3, r2
 8009f62:	3394      	adds	r3, #148	; 0x94
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4619      	mov	r1, r3
 8009f68:	48ab      	ldr	r0, [pc, #684]	; (800a218 <USBH_MSC_Process+0x6ec>)
 8009f6a:	f003 f941 	bl	800d1f0 <iprintf>
 8009f6e:	200a      	movs	r0, #10
 8009f70:	f003 f950 	bl	800d214 <putchar>
                USBH_UsrLog("Block Size   : %u", (unsigned int)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	2334      	movs	r3, #52	; 0x34
 8009f80:	fb01 f303 	mul.w	r3, r1, r3
 8009f84:	4413      	add	r3, r2
 8009f86:	3398      	adds	r3, #152	; 0x98
 8009f88:	881b      	ldrh	r3, [r3, #0]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	48a3      	ldr	r0, [pc, #652]	; (800a21c <USBH_MSC_Process+0x6f0>)
 8009f8e:	f003 f92f 	bl	800d1f0 <iprintf>
 8009f92:	200a      	movs	r0, #10
 8009f94:	f003 f93e 	bl	800d214 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	693a      	ldr	r2, [r7, #16]
 8009fa2:	2334      	movs	r3, #52	; 0x34
 8009fa4:	fb01 f303 	mul.w	r3, r1, r3
 8009fa8:	4413      	add	r3, r2
 8009faa:	3390      	adds	r3, #144	; 0x90
 8009fac:	2201      	movs	r2, #1
 8009fae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	2334      	movs	r3, #52	; 0x34
 8009fbc:	fb01 f303 	mul.w	r3, r1, r3
 8009fc0:	4413      	add	r3, r2
 8009fc2:	3391      	adds	r3, #145	; 0x91
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fce:	3301      	adds	r3, #1
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009fd8:	e10f      	b.n	800a1fa <USBH_MSC_Process+0x6ce>
            else if (scsi_status == USBH_FAIL)
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d10c      	bne.n	8009ffa <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	2334      	movs	r3, #52	; 0x34
 8009fec:	fb01 f303 	mul.w	r3, r1, r3
 8009ff0:	4413      	add	r3, r2
 8009ff2:	3390      	adds	r3, #144	; 0x90
 8009ff4:	2205      	movs	r2, #5
 8009ff6:	701a      	strb	r2, [r3, #0]
            break;
 8009ff8:	e0ff      	b.n	800a1fa <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
 8009ffc:	2b04      	cmp	r3, #4
 8009ffe:	f040 80fc 	bne.w	800a1fa <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a008:	4619      	mov	r1, r3
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	2334      	movs	r3, #52	; 0x34
 800a00e:	fb01 f303 	mul.w	r3, r1, r3
 800a012:	4413      	add	r3, r2
 800a014:	3390      	adds	r3, #144	; 0x90
 800a016:	2201      	movs	r2, #1
 800a018:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a020:	4619      	mov	r1, r3
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	2334      	movs	r3, #52	; 0x34
 800a026:	fb01 f303 	mul.w	r3, r1, r3
 800a02a:	4413      	add	r3, r2
 800a02c:	3391      	adds	r3, #145	; 0x91
 800a02e:	2202      	movs	r2, #2
 800a030:	701a      	strb	r2, [r3, #0]
            break;
 800a032:	e0e2      	b.n	800a1fa <USBH_MSC_Process+0x6ce>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a03a:	b2d9      	uxtb	r1, r3
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a042:	461a      	mov	r2, r3
 800a044:	2334      	movs	r3, #52	; 0x34
 800a046:	fb02 f303 	mul.w	r3, r2, r3
 800a04a:	3398      	adds	r3, #152	; 0x98
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	4413      	add	r3, r2
 800a050:	3304      	adds	r3, #4
 800a052:	461a      	mov	r2, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 ff1e 	bl	800ae96 <USBH_MSC_SCSI_RequestSense>
 800a05a:	4603      	mov	r3, r0
 800a05c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d17b      	bne.n	800a15c <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a06a:	4619      	mov	r1, r3
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	2334      	movs	r3, #52	; 0x34
 800a070:	fb01 f303 	mul.w	r3, r1, r3
 800a074:	4413      	add	r3, r2
 800a076:	339c      	adds	r3, #156	; 0x9c
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b06      	cmp	r3, #6
 800a07c:	d00c      	beq.n	800a098 <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a084:	4619      	mov	r1, r3
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	2334      	movs	r3, #52	; 0x34
 800a08a:	fb01 f303 	mul.w	r3, r1, r3
 800a08e:	4413      	add	r3, r2
 800a090:	339c      	adds	r3, #156	; 0x9c
 800a092:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a094:	2b02      	cmp	r3, #2
 800a096:	d117      	bne.n	800a0c8 <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	; 0x4c4
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	f242 720f 	movw	r2, #9999	; 0x270f
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d80c      	bhi.n	800a0c8 <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	2334      	movs	r3, #52	; 0x34
 800a0ba:	fb01 f303 	mul.w	r3, r1, r3
 800a0be:	4413      	add	r3, r2
 800a0c0:	3390      	adds	r3, #144	; 0x90
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	701a      	strb	r2, [r3, #0]
                  break;
 800a0c6:	e09b      	b.n	800a200 <USBH_MSC_Process+0x6d4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	2334      	movs	r3, #52	; 0x34
 800a0d4:	fb01 f303 	mul.w	r3, r1, r3
 800a0d8:	4413      	add	r3, r2
 800a0da:	339c      	adds	r3, #156	; 0x9c
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	4619      	mov	r1, r3
 800a0e0:	484f      	ldr	r0, [pc, #316]	; (800a220 <USBH_MSC_Process+0x6f4>)
 800a0e2:	f003 f885 	bl	800d1f0 <iprintf>
 800a0e6:	200a      	movs	r0, #10
 800a0e8:	f003 f894 	bl	800d214 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	2334      	movs	r3, #52	; 0x34
 800a0f8:	fb01 f303 	mul.w	r3, r1, r3
 800a0fc:	4413      	add	r3, r2
 800a0fe:	339d      	adds	r3, #157	; 0x9d
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	4619      	mov	r1, r3
 800a104:	4847      	ldr	r0, [pc, #284]	; (800a224 <USBH_MSC_Process+0x6f8>)
 800a106:	f003 f873 	bl	800d1f0 <iprintf>
 800a10a:	200a      	movs	r0, #10
 800a10c:	f003 f882 	bl	800d214 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a116:	4619      	mov	r1, r3
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	2334      	movs	r3, #52	; 0x34
 800a11c:	fb01 f303 	mul.w	r3, r1, r3
 800a120:	4413      	add	r3, r2
 800a122:	339e      	adds	r3, #158	; 0x9e
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	4619      	mov	r1, r3
 800a128:	483f      	ldr	r0, [pc, #252]	; (800a228 <USBH_MSC_Process+0x6fc>)
 800a12a:	f003 f861 	bl	800d1f0 <iprintf>
 800a12e:	200a      	movs	r0, #10
 800a130:	f003 f870 	bl	800d214 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a13a:	4619      	mov	r1, r3
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	2334      	movs	r3, #52	; 0x34
 800a140:	fb01 f303 	mul.w	r3, r1, r3
 800a144:	4413      	add	r3, r2
 800a146:	3390      	adds	r3, #144	; 0x90
 800a148:	2201      	movs	r2, #1
 800a14a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a152:	3301      	adds	r3, #1
 800a154:	b29a      	uxth	r2, r3
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d112      	bne.n	800a188 <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 800a162:	4832      	ldr	r0, [pc, #200]	; (800a22c <USBH_MSC_Process+0x700>)
 800a164:	f003 f844 	bl	800d1f0 <iprintf>
 800a168:	200a      	movs	r0, #10
 800a16a:	f003 f853 	bl	800d214 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a174:	4619      	mov	r1, r3
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	2334      	movs	r3, #52	; 0x34
 800a17a:	fb01 f303 	mul.w	r3, r1, r3
 800a17e:	4413      	add	r3, r2
 800a180:	3390      	adds	r3, #144	; 0x90
 800a182:	2208      	movs	r2, #8
 800a184:	701a      	strb	r2, [r3, #0]
            break;
 800a186:	e03a      	b.n	800a1fe <USBH_MSC_Process+0x6d2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a188:	7bfb      	ldrb	r3, [r7, #15]
 800a18a:	2b04      	cmp	r3, #4
 800a18c:	d137      	bne.n	800a1fe <USBH_MSC_Process+0x6d2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a194:	4619      	mov	r1, r3
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	2334      	movs	r3, #52	; 0x34
 800a19a:	fb01 f303 	mul.w	r3, r1, r3
 800a19e:	4413      	add	r3, r2
 800a1a0:	3390      	adds	r3, #144	; 0x90
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	2334      	movs	r3, #52	; 0x34
 800a1b2:	fb01 f303 	mul.w	r3, r1, r3
 800a1b6:	4413      	add	r3, r2
 800a1b8:	3391      	adds	r3, #145	; 0x91
 800a1ba:	2202      	movs	r2, #2
 800a1bc:	701a      	strb	r2, [r3, #0]
            break;
 800a1be:	e01e      	b.n	800a1fe <USBH_MSC_Process+0x6d2>
            MSC_Handle->current_lun++;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a1d0:	e016      	b.n	800a200 <USBH_MSC_Process+0x6d4>
        MSC_Handle->current_lun = 0U;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800a1e6:	2102      	movs	r1, #2
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	4798      	blx	r3
      break;
 800a1ec:	e00c      	b.n	800a208 <USBH_MSC_Process+0x6dc>
            break;
 800a1ee:	bf00      	nop
 800a1f0:	e00a      	b.n	800a208 <USBH_MSC_Process+0x6dc>
            break;
 800a1f2:	bf00      	nop
 800a1f4:	e008      	b.n	800a208 <USBH_MSC_Process+0x6dc>
            break;
 800a1f6:	bf00      	nop
 800a1f8:	e006      	b.n	800a208 <USBH_MSC_Process+0x6dc>
            break;
 800a1fa:	bf00      	nop
 800a1fc:	e004      	b.n	800a208 <USBH_MSC_Process+0x6dc>
            break;
 800a1fe:	bf00      	nop
      break;
 800a200:	e002      	b.n	800a208 <USBH_MSC_Process+0x6dc>
      error = USBH_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	75fb      	strb	r3, [r7, #23]
      break;
 800a206:	bf00      	nop
  }
  return error;
 800a208:	7dfb      	ldrb	r3, [r7, #23]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	0800e380 	.word	0x0800e380
 800a218:	0800e3a0 	.word	0x0800e3a0
 800a21c:	0800e3b4 	.word	0x0800e3b4
 800a220:	0800e3c8 	.word	0x0800e3c8
 800a224:	0800e3d8 	.word	0x0800e3d8
 800a228:	0800e3f4 	.word	0x0800e3f4
 800a22c:	0800e368 	.word	0x0800e368

0800a230 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
	...

0800a248 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af02      	add	r7, sp, #8
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	460b      	mov	r3, r1
 800a252:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a25a:	69db      	ldr	r3, [r3, #28]
 800a25c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a25e:	2301      	movs	r3, #1
 800a260:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a262:	2301      	movs	r3, #1
 800a264:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a266:	78fb      	ldrb	r3, [r7, #3]
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	2134      	movs	r1, #52	; 0x34
 800a26c:	fb01 f303 	mul.w	r3, r1, r3
 800a270:	4413      	add	r3, r2
 800a272:	3390      	adds	r3, #144	; 0x90
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	2b07      	cmp	r3, #7
 800a278:	d03d      	beq.n	800a2f6 <USBH_MSC_RdWrProcess+0xae>
 800a27a:	2b07      	cmp	r3, #7
 800a27c:	f300 80dc 	bgt.w	800a438 <USBH_MSC_RdWrProcess+0x1f0>
 800a280:	2b05      	cmp	r3, #5
 800a282:	d06d      	beq.n	800a360 <USBH_MSC_RdWrProcess+0x118>
 800a284:	2b06      	cmp	r3, #6
 800a286:	f040 80d7 	bne.w	800a438 <USBH_MSC_RdWrProcess+0x1f0>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a28a:	78f9      	ldrb	r1, [r7, #3]
 800a28c:	2300      	movs	r3, #0
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	2300      	movs	r3, #0
 800a292:	2200      	movs	r2, #0
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fee2 	bl	800b05e <USBH_MSC_SCSI_Read>
 800a29a:	4603      	mov	r3, r0
 800a29c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a29e:	7bfb      	ldrb	r3, [r7, #15]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10b      	bne.n	800a2bc <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a2a4:	78fb      	ldrb	r3, [r7, #3]
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	2134      	movs	r1, #52	; 0x34
 800a2aa:	fb01 f303 	mul.w	r3, r1, r3
 800a2ae:	4413      	add	r3, r2
 800a2b0:	3390      	adds	r3, #144	; 0x90
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a2ba:	e0bf      	b.n	800a43c <USBH_MSC_RdWrProcess+0x1f4>
      else if (scsi_status == USBH_FAIL)
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d109      	bne.n	800a2d6 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a2c2:	78fb      	ldrb	r3, [r7, #3]
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	2134      	movs	r1, #52	; 0x34
 800a2c8:	fb01 f303 	mul.w	r3, r1, r3
 800a2cc:	4413      	add	r3, r2
 800a2ce:	3390      	adds	r3, #144	; 0x90
 800a2d0:	2205      	movs	r2, #5
 800a2d2:	701a      	strb	r2, [r3, #0]
      break;
 800a2d4:	e0b2      	b.n	800a43c <USBH_MSC_RdWrProcess+0x1f4>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
 800a2d8:	2b04      	cmp	r3, #4
 800a2da:	f040 80af 	bne.w	800a43c <USBH_MSC_RdWrProcess+0x1f4>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a2de:	78fb      	ldrb	r3, [r7, #3]
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	2134      	movs	r1, #52	; 0x34
 800a2e4:	fb01 f303 	mul.w	r3, r1, r3
 800a2e8:	4413      	add	r3, r2
 800a2ea:	3390      	adds	r3, #144	; 0x90
 800a2ec:	2208      	movs	r2, #8
 800a2ee:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2f4:	e0a2      	b.n	800a43c <USBH_MSC_RdWrProcess+0x1f4>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a2f6:	78f9      	ldrb	r1, [r7, #3]
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	2200      	movs	r2, #0
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 fe41 	bl	800af88 <USBH_MSC_SCSI_Write>
 800a306:	4603      	mov	r3, r0
 800a308:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d10b      	bne.n	800a328 <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a310:	78fb      	ldrb	r3, [r7, #3]
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	2134      	movs	r1, #52	; 0x34
 800a316:	fb01 f303 	mul.w	r3, r1, r3
 800a31a:	4413      	add	r3, r2
 800a31c:	3390      	adds	r3, #144	; 0x90
 800a31e:	2201      	movs	r2, #1
 800a320:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a326:	e08b      	b.n	800a440 <USBH_MSC_RdWrProcess+0x1f8>
      else if (scsi_status == USBH_FAIL)
 800a328:	7bfb      	ldrb	r3, [r7, #15]
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d109      	bne.n	800a342 <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a32e:	78fb      	ldrb	r3, [r7, #3]
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	2134      	movs	r1, #52	; 0x34
 800a334:	fb01 f303 	mul.w	r3, r1, r3
 800a338:	4413      	add	r3, r2
 800a33a:	3390      	adds	r3, #144	; 0x90
 800a33c:	2205      	movs	r2, #5
 800a33e:	701a      	strb	r2, [r3, #0]
      break;
 800a340:	e07e      	b.n	800a440 <USBH_MSC_RdWrProcess+0x1f8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a342:	7bfb      	ldrb	r3, [r7, #15]
 800a344:	2b04      	cmp	r3, #4
 800a346:	d17b      	bne.n	800a440 <USBH_MSC_RdWrProcess+0x1f8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a348:	78fb      	ldrb	r3, [r7, #3]
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	2134      	movs	r1, #52	; 0x34
 800a34e:	fb01 f303 	mul.w	r3, r1, r3
 800a352:	4413      	add	r3, r2
 800a354:	3390      	adds	r3, #144	; 0x90
 800a356:	2208      	movs	r2, #8
 800a358:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a35a:	2302      	movs	r3, #2
 800a35c:	75fb      	strb	r3, [r7, #23]
      break;
 800a35e:	e06f      	b.n	800a440 <USBH_MSC_RdWrProcess+0x1f8>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	2234      	movs	r2, #52	; 0x34
 800a364:	fb02 f303 	mul.w	r3, r2, r3
 800a368:	3398      	adds	r3, #152	; 0x98
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	4413      	add	r3, r2
 800a36e:	1d1a      	adds	r2, r3, #4
 800a370:	78fb      	ldrb	r3, [r7, #3]
 800a372:	4619      	mov	r1, r3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fd8e 	bl	800ae96 <USBH_MSC_SCSI_RequestSense>
 800a37a:	4603      	mov	r3, r0
 800a37c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d140      	bne.n	800a406 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	2134      	movs	r1, #52	; 0x34
 800a38a:	fb01 f303 	mul.w	r3, r1, r3
 800a38e:	4413      	add	r3, r2
 800a390:	339c      	adds	r3, #156	; 0x9c
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	4619      	mov	r1, r3
 800a396:	482e      	ldr	r0, [pc, #184]	; (800a450 <USBH_MSC_RdWrProcess+0x208>)
 800a398:	f002 ff2a 	bl	800d1f0 <iprintf>
 800a39c:	200a      	movs	r0, #10
 800a39e:	f002 ff39 	bl	800d214 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 800a3a2:	78fb      	ldrb	r3, [r7, #3]
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	2134      	movs	r1, #52	; 0x34
 800a3a8:	fb01 f303 	mul.w	r3, r1, r3
 800a3ac:	4413      	add	r3, r2
 800a3ae:	339d      	adds	r3, #157	; 0x9d
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	4827      	ldr	r0, [pc, #156]	; (800a454 <USBH_MSC_RdWrProcess+0x20c>)
 800a3b6:	f002 ff1b 	bl	800d1f0 <iprintf>
 800a3ba:	200a      	movs	r0, #10
 800a3bc:	f002 ff2a 	bl	800d214 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 800a3c0:	78fb      	ldrb	r3, [r7, #3]
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	2134      	movs	r1, #52	; 0x34
 800a3c6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ca:	4413      	add	r3, r2
 800a3cc:	339e      	adds	r3, #158	; 0x9e
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4821      	ldr	r0, [pc, #132]	; (800a458 <USBH_MSC_RdWrProcess+0x210>)
 800a3d4:	f002 ff0c 	bl	800d1f0 <iprintf>
 800a3d8:	200a      	movs	r0, #10
 800a3da:	f002 ff1b 	bl	800d214 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a3de:	78fb      	ldrb	r3, [r7, #3]
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	2134      	movs	r1, #52	; 0x34
 800a3e4:	fb01 f303 	mul.w	r3, r1, r3
 800a3e8:	4413      	add	r3, r2
 800a3ea:	3390      	adds	r3, #144	; 0x90
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a3f0:	78fb      	ldrb	r3, [r7, #3]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	2134      	movs	r1, #52	; 0x34
 800a3f6:	fb01 f303 	mul.w	r3, r1, r3
 800a3fa:	4413      	add	r3, r2
 800a3fc:	3391      	adds	r3, #145	; 0x91
 800a3fe:	2202      	movs	r2, #2
 800a400:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a402:	2302      	movs	r3, #2
 800a404:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a406:	7bfb      	ldrb	r3, [r7, #15]
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d106      	bne.n	800a41a <USBH_MSC_RdWrProcess+0x1d2>
      {
        USBH_UsrLog("MSC Device NOT ready");
 800a40c:	4813      	ldr	r0, [pc, #76]	; (800a45c <USBH_MSC_RdWrProcess+0x214>)
 800a40e:	f002 feef 	bl	800d1f0 <iprintf>
 800a412:	200a      	movs	r0, #10
 800a414:	f002 fefe 	bl	800d214 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a418:	e014      	b.n	800a444 <USBH_MSC_RdWrProcess+0x1fc>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
 800a41c:	2b04      	cmp	r3, #4
 800a41e:	d111      	bne.n	800a444 <USBH_MSC_RdWrProcess+0x1fc>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a420:	78fb      	ldrb	r3, [r7, #3]
 800a422:	693a      	ldr	r2, [r7, #16]
 800a424:	2134      	movs	r1, #52	; 0x34
 800a426:	fb01 f303 	mul.w	r3, r1, r3
 800a42a:	4413      	add	r3, r2
 800a42c:	3390      	adds	r3, #144	; 0x90
 800a42e:	2208      	movs	r2, #8
 800a430:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a432:	2302      	movs	r3, #2
 800a434:	75fb      	strb	r3, [r7, #23]
      break;
 800a436:	e005      	b.n	800a444 <USBH_MSC_RdWrProcess+0x1fc>

    default:
      break;
 800a438:	bf00      	nop
 800a43a:	e004      	b.n	800a446 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800a43c:	bf00      	nop
 800a43e:	e002      	b.n	800a446 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800a440:	bf00      	nop
 800a442:	e000      	b.n	800a446 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800a444:	bf00      	nop

  }
  return error;
 800a446:	7dfb      	ldrb	r3, [r7, #23]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	0800e3c8 	.word	0x0800e3c8
 800a454:	0800e3d8 	.word	0x0800e3d8
 800a458:	0800e3f4 	.word	0x0800e3f4
 800a45c:	0800e368 	.word	0x0800e368

0800a460 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a472:	69db      	ldr	r3, [r3, #28]
 800a474:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b0b      	cmp	r3, #11
 800a47e:	d10c      	bne.n	800a49a <USBH_MSC_UnitIsReady+0x3a>
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	2134      	movs	r1, #52	; 0x34
 800a486:	fb01 f303 	mul.w	r3, r1, r3
 800a48a:	4413      	add	r3, r2
 800a48c:	3391      	adds	r3, #145	; 0x91
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d102      	bne.n	800a49a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a494:	2301      	movs	r3, #1
 800a496:	73fb      	strb	r3, [r7, #15]
 800a498:	e001      	b.n	800a49e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	607a      	str	r2, [r7, #4]
 800a4b8:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	2b0b      	cmp	r3, #11
 800a4cc:	d10d      	bne.n	800a4ea <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a4ce:	7afb      	ldrb	r3, [r7, #11]
 800a4d0:	2234      	movs	r2, #52	; 0x34
 800a4d2:	fb02 f303 	mul.w	r3, r2, r3
 800a4d6:	3390      	adds	r3, #144	; 0x90
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	4413      	add	r3, r2
 800a4dc:	2234      	movs	r2, #52	; 0x34
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f003 f8ac 	bl	800d63e <memcpy>
    return USBH_OK;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	e000      	b.n	800a4ec <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a4ea:	2302      	movs	r3, #2
  }
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3718      	adds	r7, #24
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	607a      	str	r2, [r7, #4]
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	460b      	mov	r3, r1
 800a502:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a50a:	69db      	ldr	r3, [r3, #28]
 800a50c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00e      	beq.n	800a538 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a520:	2b0b      	cmp	r3, #11
 800a522:	d109      	bne.n	800a538 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a524:	7afb      	ldrb	r3, [r7, #11]
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	2134      	movs	r1, #52	; 0x34
 800a52a:	fb01 f303 	mul.w	r3, r1, r3
 800a52e:	4413      	add	r3, r2
 800a530:	3390      	adds	r3, #144	; 0x90
 800a532:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a534:	2b01      	cmp	r3, #1
 800a536:	d001      	beq.n	800a53c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a538:	2302      	movs	r3, #2
 800a53a:	e040      	b.n	800a5be <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2206      	movs	r2, #6
 800a540:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a542:	7afb      	ldrb	r3, [r7, #11]
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	2134      	movs	r1, #52	; 0x34
 800a548:	fb01 f303 	mul.w	r3, r1, r3
 800a54c:	4413      	add	r3, r2
 800a54e:	3390      	adds	r3, #144	; 0x90
 800a550:	2206      	movs	r2, #6
 800a552:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a554:	7afb      	ldrb	r3, [r7, #11]
 800a556:	b29a      	uxth	r2, r3
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a55e:	7af9      	ldrb	r1, [r7, #11]
 800a560:	6a3b      	ldr	r3, [r7, #32]
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f000 fd78 	bl	800b05e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800a574:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a576:	e016      	b.n	800a5a6 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	; 0x4c4
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	1ad2      	subs	r2, r2, r3
 800a582:	6a3b      	ldr	r3, [r7, #32]
 800a584:	f242 7110 	movw	r1, #10000	; 0x2710
 800a588:	fb01 f303 	mul.w	r3, r1, r3
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d805      	bhi.n	800a59c <USBH_MSC_Read+0xa8>
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d104      	bne.n	800a5a6 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	e00b      	b.n	800a5be <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a5a6:	7afb      	ldrb	r3, [r7, #11]
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f7ff fe4c 	bl	800a248 <USBH_MSC_RdWrProcess>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d0e0      	beq.n	800a578 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3718      	adds	r7, #24
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b088      	sub	sp, #32
 800a5ca:	af02      	add	r7, sp, #8
 800a5cc:	60f8      	str	r0, [r7, #12]
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	603b      	str	r3, [r7, #0]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00e      	beq.n	800a60a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a5f2:	2b0b      	cmp	r3, #11
 800a5f4:	d109      	bne.n	800a60a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a5f6:	7afb      	ldrb	r3, [r7, #11]
 800a5f8:	697a      	ldr	r2, [r7, #20]
 800a5fa:	2134      	movs	r1, #52	; 0x34
 800a5fc:	fb01 f303 	mul.w	r3, r1, r3
 800a600:	4413      	add	r3, r2
 800a602:	3390      	adds	r3, #144	; 0x90
 800a604:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a606:	2b01      	cmp	r3, #1
 800a608:	d001      	beq.n	800a60e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a60a:	2302      	movs	r3, #2
 800a60c:	e040      	b.n	800a690 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	2207      	movs	r2, #7
 800a612:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a614:	7afb      	ldrb	r3, [r7, #11]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	2134      	movs	r1, #52	; 0x34
 800a61a:	fb01 f303 	mul.w	r3, r1, r3
 800a61e:	4413      	add	r3, r2
 800a620:	3390      	adds	r3, #144	; 0x90
 800a622:	2207      	movs	r2, #7
 800a624:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a626:	7afb      	ldrb	r3, [r7, #11]
 800a628:	b29a      	uxth	r2, r3
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a630:	7af9      	ldrb	r1, [r7, #11]
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 fca4 	bl	800af88 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800a646:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a648:	e016      	b.n	800a678 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	; 0x4c4
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	1ad2      	subs	r2, r2, r3
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	f242 7110 	movw	r1, #10000	; 0x2710
 800a65a:	fb01 f303 	mul.w	r3, r1, r3
 800a65e:	429a      	cmp	r2, r3
 800a660:	d805      	bhi.n	800a66e <USBH_MSC_Write+0xa8>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d104      	bne.n	800a678 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2201      	movs	r2, #1
 800a672:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a674:	2302      	movs	r3, #2
 800a676:	e00b      	b.n	800a690 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a678:	7afb      	ldrb	r3, [r7, #11]
 800a67a:	4619      	mov	r1, r3
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f7ff fde3 	bl	800a248 <USBH_MSC_RdWrProcess>
 800a682:	4603      	mov	r3, r0
 800a684:	2b01      	cmp	r3, #1
 800a686:	d0e0      	beq.n	800a64a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	2201      	movs	r2, #1
 800a68c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3718      	adds	r7, #24
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2221      	movs	r2, #33	; 0x21
 800a6a4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	22ff      	movs	r2, #255	; 0xff
 800a6aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a6be:	2200      	movs	r2, #0
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f002 f8e8 	bl	800c898 <USBH_CtlReq>
 800a6c8:	4603      	mov	r3, r0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	22a1      	movs	r2, #161	; 0xa1
 800a6e0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	22fe      	movs	r2, #254	; 0xfe
 800a6e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	6839      	ldr	r1, [r7, #0]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f002 f8ca 	bl	800c898 <USBH_CtlReq>
 800a704:	4603      	mov	r3, r0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
	...

0800a710 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a71e:	69db      	ldr	r3, [r3, #28]
 800a720:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	4a09      	ldr	r2, [pc, #36]	; (800a74c <USBH_MSC_BOT_Init+0x3c>)
 800a726:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	4a09      	ldr	r2, [pc, #36]	; (800a750 <USBH_MSC_BOT_Init+0x40>)
 800a72c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2201      	movs	r2, #1
 800a732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2201      	movs	r2, #1
 800a73a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	43425355 	.word	0x43425355
 800a750:	20304050 	.word	0x20304050

0800a754 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b088      	sub	sp, #32
 800a758:	af02      	add	r7, sp, #8
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	460b      	mov	r3, r1
 800a75e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a760:	2301      	movs	r3, #1
 800a762:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a764:	2301      	movs	r3, #1
 800a766:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a768:	2301      	movs	r3, #1
 800a76a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a76c:	2300      	movs	r3, #0
 800a76e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a77a:	2300      	movs	r3, #0
 800a77c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a784:	3b01      	subs	r3, #1
 800a786:	2b0a      	cmp	r3, #10
 800a788:	f200 819e 	bhi.w	800aac8 <USBH_MSC_BOT_Process+0x374>
 800a78c:	a201      	add	r2, pc, #4	; (adr r2, 800a794 <USBH_MSC_BOT_Process+0x40>)
 800a78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a792:	bf00      	nop
 800a794:	0800a7c1 	.word	0x0800a7c1
 800a798:	0800a7e9 	.word	0x0800a7e9
 800a79c:	0800a853 	.word	0x0800a853
 800a7a0:	0800a871 	.word	0x0800a871
 800a7a4:	0800a8f5 	.word	0x0800a8f5
 800a7a8:	0800a917 	.word	0x0800a917
 800a7ac:	0800a9af 	.word	0x0800a9af
 800a7b0:	0800a9cb 	.word	0x0800a9cb
 800a7b4:	0800aa1d 	.word	0x0800aa1d
 800a7b8:	0800aa4d 	.word	0x0800aa4d
 800a7bc:	0800aaaf 	.word	0x0800aaaf
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	78fa      	ldrb	r2, [r7, #3]
 800a7c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	2202      	movs	r2, #2
 800a7cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	795b      	ldrb	r3, [r3, #5]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	9200      	str	r2, [sp, #0]
 800a7de:	221f      	movs	r2, #31
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f002 fa76 	bl	800ccd2 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a7e6:	e17e      	b.n	800aae6 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	795b      	ldrb	r3, [r3, #5]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7f6 fe2e 	bl	8001450 <USBH_LL_GetURBState>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a7f8:	7d3b      	ldrb	r3, [r7, #20]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d118      	bne.n	800a830 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00f      	beq.n	800a826 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a80c:	b25b      	sxtb	r3, r3
 800a80e:	2b00      	cmp	r3, #0
 800a810:	da04      	bge.n	800a81c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	2203      	movs	r2, #3
 800a816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a81a:	e157      	b.n	800aacc <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	2205      	movs	r2, #5
 800a820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a824:	e152      	b.n	800aacc <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	2207      	movs	r2, #7
 800a82a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a82e:	e14d      	b.n	800aacc <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a830:	7d3b      	ldrb	r3, [r7, #20]
 800a832:	2b02      	cmp	r3, #2
 800a834:	d104      	bne.n	800a840 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a83e:	e145      	b.n	800aacc <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a840:	7d3b      	ldrb	r3, [r7, #20]
 800a842:	2b05      	cmp	r3, #5
 800a844:	f040 8142 	bne.w	800aacc <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	220a      	movs	r2, #10
 800a84c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a850:	e13c      	b.n	800aacc <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	895a      	ldrh	r2, [r3, #10]
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	791b      	ldrb	r3, [r3, #4]
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f002 fa5b 	bl	800cd1c <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	2204      	movs	r2, #4
 800a86a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a86e:	e13a      	b.n	800aae6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	791b      	ldrb	r3, [r3, #4]
 800a874:	4619      	mov	r1, r3
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7f6 fdea 	bl	8001450 <USBH_LL_GetURBState>
 800a87c:	4603      	mov	r3, r0
 800a87e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a880:	7d3b      	ldrb	r3, [r7, #20]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d12d      	bne.n	800a8e2 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	8952      	ldrh	r2, [r2, #10]
 800a88e:	4293      	cmp	r3, r2
 800a890:	d910      	bls.n	800a8b4 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a898:	693a      	ldr	r2, [r7, #16]
 800a89a:	8952      	ldrh	r2, [r2, #10]
 800a89c:	441a      	add	r2, r3
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8a8:	693a      	ldr	r2, [r7, #16]
 800a8aa:	8952      	ldrh	r2, [r2, #10]
 800a8ac:	1a9a      	subs	r2, r3, r2
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	65da      	str	r2, [r3, #92]	; 0x5c
 800a8b2:	e002      	b.n	800a8ba <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00a      	beq.n	800a8d8 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	895a      	ldrh	r2, [r3, #10]
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	791b      	ldrb	r3, [r3, #4]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f002 fa23 	bl	800cd1c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a8d6:	e0fb      	b.n	800aad0 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	2207      	movs	r2, #7
 800a8dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8e0:	e0f6      	b.n	800aad0 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a8e2:	7d3b      	ldrb	r3, [r7, #20]
 800a8e4:	2b05      	cmp	r3, #5
 800a8e6:	f040 80f3 	bne.w	800aad0 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	2209      	movs	r2, #9
 800a8ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8f2:	e0ed      	b.n	800aad0 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	891a      	ldrh	r2, [r3, #8]
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	795b      	ldrb	r3, [r3, #5]
 800a902:	2001      	movs	r0, #1
 800a904:	9000      	str	r0, [sp, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f002 f9e3 	bl	800ccd2 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	2206      	movs	r2, #6
 800a910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a914:	e0e7      	b.n	800aae6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	795b      	ldrb	r3, [r3, #5]
 800a91a:	4619      	mov	r1, r3
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7f6 fd97 	bl	8001450 <USBH_LL_GetURBState>
 800a922:	4603      	mov	r3, r0
 800a924:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a926:	7d3b      	ldrb	r3, [r7, #20]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d12f      	bne.n	800a98c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a930:	693a      	ldr	r2, [r7, #16]
 800a932:	8912      	ldrh	r2, [r2, #8]
 800a934:	4293      	cmp	r3, r2
 800a936:	d910      	bls.n	800a95a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	8912      	ldrh	r2, [r2, #8]
 800a942:	441a      	add	r2, r3
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	8912      	ldrh	r2, [r2, #8]
 800a952:	1a9a      	subs	r2, r3, r2
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	65da      	str	r2, [r3, #92]	; 0x5c
 800a958:	e002      	b.n	800a960 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	2200      	movs	r2, #0
 800a95e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00c      	beq.n	800a982 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	891a      	ldrh	r2, [r3, #8]
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	795b      	ldrb	r3, [r3, #5]
 800a976:	2001      	movs	r0, #1
 800a978:	9000      	str	r0, [sp, #0]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f002 f9a9 	bl	800ccd2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a980:	e0a8      	b.n	800aad4 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	2207      	movs	r2, #7
 800a986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a98a:	e0a3      	b.n	800aad4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a98c:	7d3b      	ldrb	r3, [r7, #20]
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d104      	bne.n	800a99c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	2205      	movs	r2, #5
 800a996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a99a:	e09b      	b.n	800aad4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a99c:	7d3b      	ldrb	r3, [r7, #20]
 800a99e:	2b05      	cmp	r3, #5
 800a9a0:	f040 8098 	bne.w	800aad4 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	220a      	movs	r2, #10
 800a9a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9ac:	e092      	b.n	800aad4 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	791b      	ldrb	r3, [r3, #4]
 800a9b8:	220d      	movs	r2, #13
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f002 f9ae 	bl	800cd1c <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	2208      	movs	r2, #8
 800a9c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9c8:	e08d      	b.n	800aae6 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	791b      	ldrb	r3, [r3, #4]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7f6 fd3d 	bl	8001450 <USBH_LL_GetURBState>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a9da:	7d3b      	ldrb	r3, [r7, #20]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d115      	bne.n	800aa0c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 f8a9 	bl	800ab48 <USBH_MSC_DecodeCSW>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a9fa:	7d7b      	ldrb	r3, [r7, #21]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d102      	bne.n	800aa06 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800aa04:	e068      	b.n	800aad8 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800aa06:	2302      	movs	r3, #2
 800aa08:	75fb      	strb	r3, [r7, #23]
      break;
 800aa0a:	e065      	b.n	800aad8 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800aa0c:	7d3b      	ldrb	r3, [r7, #20]
 800aa0e:	2b05      	cmp	r3, #5
 800aa10:	d162      	bne.n	800aad8 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	2209      	movs	r2, #9
 800aa16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa1a:	e05d      	b.n	800aad8 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800aa1c:	78fb      	ldrb	r3, [r7, #3]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	4619      	mov	r1, r3
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f864 	bl	800aaf0 <USBH_MSC_BOT_Abort>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800aa2c:	7dbb      	ldrb	r3, [r7, #22]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d104      	bne.n	800aa3c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	2207      	movs	r2, #7
 800aa36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800aa3a:	e04f      	b.n	800aadc <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800aa3c:	7dbb      	ldrb	r3, [r7, #22]
 800aa3e:	2b04      	cmp	r3, #4
 800aa40:	d14c      	bne.n	800aadc <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	220b      	movs	r2, #11
 800aa46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa4a:	e047      	b.n	800aadc <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800aa4c:	78fb      	ldrb	r3, [r7, #3]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	4619      	mov	r1, r3
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f84c 	bl	800aaf0 <USBH_MSC_BOT_Abort>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800aa5c:	7dbb      	ldrb	r3, [r7, #22]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d11d      	bne.n	800aa9e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	795b      	ldrb	r3, [r3, #5]
 800aa66:	4619      	mov	r1, r3
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f7f6 fd57 	bl	800151c <USBH_LL_GetToggle>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	7959      	ldrb	r1, [r3, #5]
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
 800aa78:	f1c3 0301 	rsb	r3, r3, #1
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	461a      	mov	r2, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7f6 fd19 	bl	80014b8 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	791b      	ldrb	r3, [r3, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7f6 fd12 	bl	80014b8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	2209      	movs	r2, #9
 800aa98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800aa9c:	e020      	b.n	800aae0 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800aa9e:	7dbb      	ldrb	r3, [r7, #22]
 800aaa0:	2b04      	cmp	r3, #4
 800aaa2:	d11d      	bne.n	800aae0 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	220b      	movs	r2, #11
 800aaa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aaac:	e018      	b.n	800aae0 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7ff fdf2 	bl	800a698 <USBH_MSC_BOT_REQ_Reset>
 800aab4:	4603      	mov	r3, r0
 800aab6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800aab8:	7dfb      	ldrb	r3, [r7, #23]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d112      	bne.n	800aae4 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	2201      	movs	r2, #1
 800aac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800aac6:	e00d      	b.n	800aae4 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800aac8:	bf00      	nop
 800aaca:	e00c      	b.n	800aae6 <USBH_MSC_BOT_Process+0x392>
      break;
 800aacc:	bf00      	nop
 800aace:	e00a      	b.n	800aae6 <USBH_MSC_BOT_Process+0x392>
      break;
 800aad0:	bf00      	nop
 800aad2:	e008      	b.n	800aae6 <USBH_MSC_BOT_Process+0x392>
      break;
 800aad4:	bf00      	nop
 800aad6:	e006      	b.n	800aae6 <USBH_MSC_BOT_Process+0x392>
      break;
 800aad8:	bf00      	nop
 800aada:	e004      	b.n	800aae6 <USBH_MSC_BOT_Process+0x392>
      break;
 800aadc:	bf00      	nop
 800aade:	e002      	b.n	800aae6 <USBH_MSC_BOT_Process+0x392>
      break;
 800aae0:	bf00      	nop
 800aae2:	e000      	b.n	800aae6 <USBH_MSC_BOT_Process+0x392>
      break;
 800aae4:	bf00      	nop
  }
  return status;
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3718      	adds	r7, #24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]
 800aafc:	4613      	mov	r3, r2
 800aafe:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800ab00:	2302      	movs	r3, #2
 800ab02:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800ab0a:	69db      	ldr	r3, [r3, #28]
 800ab0c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800ab0e:	78bb      	ldrb	r3, [r7, #2]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <USBH_MSC_BOT_Abort+0x2a>
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d009      	beq.n	800ab2c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800ab18:	e011      	b.n	800ab3e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	79db      	ldrb	r3, [r3, #7]
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f001 fb7d 	bl	800c220 <USBH_ClrFeature>
 800ab26:	4603      	mov	r3, r0
 800ab28:	73fb      	strb	r3, [r7, #15]
      break;
 800ab2a:	e008      	b.n	800ab3e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	799b      	ldrb	r3, [r3, #6]
 800ab30:	4619      	mov	r1, r3
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f001 fb74 	bl	800c220 <USBH_ClrFeature>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab3c:	bf00      	nop
  }
  return status;
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800ab56:	69db      	ldr	r3, [r3, #28]
 800ab58:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	791b      	ldrb	r3, [r3, #4]
 800ab62:	4619      	mov	r1, r3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7f6 fc08 	bl	800137a <USBH_LL_GetLastXferSize>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b0d      	cmp	r3, #13
 800ab6e:	d002      	beq.n	800ab76 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800ab70:	2302      	movs	r3, #2
 800ab72:	73fb      	strb	r3, [r7, #15]
 800ab74:	e024      	b.n	800abc0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab7a:	4a14      	ldr	r2, [pc, #80]	; (800abcc <USBH_MSC_DecodeCSW+0x84>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d11d      	bne.n	800abbc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d119      	bne.n	800abc0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d102      	bne.n	800ab9c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800ab96:	2300      	movs	r3, #0
 800ab98:	73fb      	strb	r3, [r7, #15]
 800ab9a:	e011      	b.n	800abc0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d102      	bne.n	800abac <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800aba6:	2301      	movs	r3, #1
 800aba8:	73fb      	strb	r3, [r7, #15]
 800abaa:	e009      	b.n	800abc0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d104      	bne.n	800abc0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800abb6:	2302      	movs	r3, #2
 800abb8:	73fb      	strb	r3, [r7, #15]
 800abba:	e001      	b.n	800abc0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800abbc:	2302      	movs	r3, #2
 800abbe:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	53425355 	.word	0x53425355

0800abd0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800abdc:	2302      	movs	r3, #2
 800abde:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800abe6:	69db      	ldr	r3, [r3, #28]
 800abe8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d002      	beq.n	800abfa <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	d021      	beq.n	800ac3c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800abf8:	e028      	b.n	800ac4c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2200      	movs	r2, #0
 800abfe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	220a      	movs	r2, #10
 800ac0c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	3363      	adds	r3, #99	; 0x63
 800ac14:	2210      	movs	r2, #16
 800ac16:	2100      	movs	r1, #0
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f002 fc37 	bl	800d48c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	2202      	movs	r2, #2
 800ac32:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800ac36:	2301      	movs	r3, #1
 800ac38:	73fb      	strb	r3, [r7, #15]
      break;
 800ac3a:	e007      	b.n	800ac4c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ac3c:	78fb      	ldrb	r3, [r7, #3]
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f7ff fd87 	bl	800a754 <USBH_MSC_BOT_Process>
 800ac46:	4603      	mov	r3, r0
 800ac48:	73fb      	strb	r3, [r7, #15]
      break;
 800ac4a:	bf00      	nop
  }

  return error;
 800ac4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b086      	sub	sp, #24
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	60f8      	str	r0, [r7, #12]
 800ac5e:	460b      	mov	r3, r1
 800ac60:	607a      	str	r2, [r7, #4]
 800ac62:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 800ac64:	2301      	movs	r3, #1
 800ac66:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800ac6e:	69db      	ldr	r3, [r3, #28]
 800ac70:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d002      	beq.n	800ac82 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d027      	beq.n	800acd0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800ac80:	e05f      	b.n	800ad42 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	2208      	movs	r2, #8
 800ac86:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	2280      	movs	r2, #128	; 0x80
 800ac8c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	220a      	movs	r2, #10
 800ac94:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	3363      	adds	r3, #99	; 0x63
 800ac9c:	2210      	movs	r2, #16
 800ac9e:	2100      	movs	r1, #0
 800aca0:	4618      	mov	r0, r3
 800aca2:	f002 fbf3 	bl	800d48c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	2225      	movs	r2, #37	; 0x25
 800acaa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	2202      	movs	r2, #2
 800acba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	f103 0210 	add.w	r2, r3, #16
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800acca:	2301      	movs	r3, #1
 800accc:	75fb      	strb	r3, [r7, #23]
      break;
 800acce:	e038      	b.n	800ad42 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800acd0:	7afb      	ldrb	r3, [r7, #11]
 800acd2:	4619      	mov	r1, r3
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f7ff fd3d 	bl	800a754 <USBH_MSC_BOT_Process>
 800acda:	4603      	mov	r3, r0
 800acdc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800acde:	7dfb      	ldrb	r3, [r7, #23]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d12d      	bne.n	800ad40 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acea:	3303      	adds	r3, #3
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acf6:	3302      	adds	r3, #2
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	021b      	lsls	r3, r3, #8
 800acfc:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad04:	3301      	adds	r3, #1
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ad0a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	061b      	lsls	r3, r3, #24
 800ad16:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad22:	3307      	adds	r3, #7
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	b29a      	uxth	r2, r3
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad2e:	3306      	adds	r3, #6
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	021b      	lsls	r3, r3, #8
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	809a      	strh	r2, [r3, #4]
      break;
 800ad40:	bf00      	nop
  }

  return error;
 800ad42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3718      	adds	r7, #24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	460b      	mov	r3, r1
 800ad56:	607a      	str	r2, [r7, #4]
 800ad58:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800ad64:	69db      	ldr	r3, [r3, #28]
 800ad66:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d002      	beq.n	800ad78 <USBH_MSC_SCSI_Inquiry+0x2c>
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d03d      	beq.n	800adf2 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800ad76:	e089      	b.n	800ae8c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	2224      	movs	r2, #36	; 0x24
 800ad7c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	2280      	movs	r2, #128	; 0x80
 800ad82:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	220a      	movs	r2, #10
 800ad8a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	3363      	adds	r3, #99	; 0x63
 800ad92:	220a      	movs	r2, #10
 800ad94:	2100      	movs	r1, #0
 800ad96:	4618      	mov	r0, r3
 800ad98:	f002 fb78 	bl	800d48c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	2212      	movs	r2, #18
 800ada0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ada4:	7afb      	ldrb	r3, [r7, #11]
 800ada6:	015b      	lsls	r3, r3, #5
 800ada8:	b2da      	uxtb	r2, r3
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	2224      	movs	r2, #36	; 0x24
 800adc4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	2201      	movs	r2, #1
 800add4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	2202      	movs	r2, #2
 800addc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	f103 0210 	add.w	r2, r3, #16
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800adec:	2301      	movs	r3, #1
 800adee:	75fb      	strb	r3, [r7, #23]
      break;
 800adf0:	e04c      	b.n	800ae8c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800adf2:	7afb      	ldrb	r3, [r7, #11]
 800adf4:	4619      	mov	r1, r3
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f7ff fcac 	bl	800a754 <USBH_MSC_BOT_Process>
 800adfc:	4603      	mov	r3, r0
 800adfe:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ae00:	7dfb      	ldrb	r3, [r7, #23]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d141      	bne.n	800ae8a <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800ae06:	2222      	movs	r2, #34	; 0x22
 800ae08:	2100      	movs	r1, #0
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f002 fb3e 	bl	800d48c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	f003 031f 	and.w	r3, r3, #31
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	095b      	lsrs	r3, r3, #5
 800ae2c:	b2da      	uxtb	r2, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae38:	3301      	adds	r3, #1
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	b25b      	sxtb	r3, r3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	da03      	bge.n	800ae4a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2201      	movs	r2, #1
 800ae46:	709a      	strb	r2, [r3, #2]
 800ae48:	e002      	b.n	800ae50 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	1cd8      	adds	r0, r3, #3
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae5a:	3308      	adds	r3, #8
 800ae5c:	2208      	movs	r2, #8
 800ae5e:	4619      	mov	r1, r3
 800ae60:	f002 fbed 	bl	800d63e <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f103 000c 	add.w	r0, r3, #12
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae70:	3310      	adds	r3, #16
 800ae72:	2210      	movs	r2, #16
 800ae74:	4619      	mov	r1, r3
 800ae76:	f002 fbe2 	bl	800d63e <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	331d      	adds	r3, #29
 800ae7e:	693a      	ldr	r2, [r7, #16]
 800ae80:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800ae84:	3220      	adds	r2, #32
 800ae86:	6812      	ldr	r2, [r2, #0]
 800ae88:	601a      	str	r2, [r3, #0]
      break;
 800ae8a:	bf00      	nop
  }

  return error;
 800ae8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3718      	adds	r7, #24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b086      	sub	sp, #24
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	60f8      	str	r0, [r7, #12]
 800ae9e:	460b      	mov	r3, r1
 800aea0:	607a      	str	r2, [r7, #4]
 800aea2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800aea4:	2302      	movs	r3, #2
 800aea6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800aeae:	69db      	ldr	r3, [r3, #28]
 800aeb0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d002      	beq.n	800aec2 <USBH_MSC_SCSI_RequestSense+0x2c>
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d03d      	beq.n	800af3c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800aec0:	e05d      	b.n	800af7e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	220e      	movs	r2, #14
 800aec6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	2280      	movs	r2, #128	; 0x80
 800aecc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	220a      	movs	r2, #10
 800aed4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	3363      	adds	r3, #99	; 0x63
 800aedc:	2210      	movs	r2, #16
 800aede:	2100      	movs	r1, #0
 800aee0:	4618      	mov	r0, r3
 800aee2:	f002 fad3 	bl	800d48c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	2203      	movs	r2, #3
 800aeea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800aeee:	7afb      	ldrb	r3, [r7, #11]
 800aef0:	015b      	lsls	r3, r3, #5
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	220e      	movs	r2, #14
 800af0e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	2202      	movs	r2, #2
 800af26:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	f103 0210 	add.w	r2, r3, #16
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800af36:	2301      	movs	r3, #1
 800af38:	75fb      	strb	r3, [r7, #23]
      break;
 800af3a:	e020      	b.n	800af7e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800af3c:	7afb      	ldrb	r3, [r7, #11]
 800af3e:	4619      	mov	r1, r3
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f7ff fc07 	bl	800a754 <USBH_MSC_BOT_Process>
 800af46:	4603      	mov	r3, r0
 800af48:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800af4a:	7dfb      	ldrb	r3, [r7, #23]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d115      	bne.n	800af7c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af56:	3302      	adds	r3, #2
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	f003 030f 	and.w	r3, r3, #15
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af6a:	7b1a      	ldrb	r2, [r3, #12]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af76:	7b5a      	ldrb	r2, [r3, #13]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	709a      	strb	r2, [r3, #2]
      break;
 800af7c:	bf00      	nop
  }

  return error;
 800af7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3718      	adds	r7, #24
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	607a      	str	r2, [r7, #4]
 800af92:	603b      	str	r3, [r7, #0]
 800af94:	460b      	mov	r3, r1
 800af96:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800af98:	2302      	movs	r3, #2
 800af9a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800afa2:	69db      	ldr	r3, [r3, #28]
 800afa4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800afac:	2b01      	cmp	r3, #1
 800afae:	d002      	beq.n	800afb6 <USBH_MSC_SCSI_Write+0x2e>
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d047      	beq.n	800b044 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800afb4:	e04e      	b.n	800b054 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800afbc:	461a      	mov	r2, r3
 800afbe:	6a3b      	ldr	r3, [r7, #32]
 800afc0:	fb03 f202 	mul.w	r2, r3, r2
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	220a      	movs	r2, #10
 800afd4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	3363      	adds	r3, #99	; 0x63
 800afdc:	2210      	movs	r2, #16
 800afde:	2100      	movs	r1, #0
 800afe0:	4618      	mov	r0, r3
 800afe2:	f002 fa53 	bl	800d48c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	222a      	movs	r2, #42	; 0x2a
 800afea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800afee:	79fa      	ldrb	r2, [r7, #7]
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800aff6:	79ba      	ldrb	r2, [r7, #6]
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800affe:	797a      	ldrb	r2, [r7, #5]
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b006:	1d3b      	adds	r3, r7, #4
 800b008:	781a      	ldrb	r2, [r3, #0]
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800b010:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800b01a:	f107 0320 	add.w	r3, r7, #32
 800b01e:	781a      	ldrb	r2, [r3, #0]
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	2201      	movs	r2, #1
 800b02a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	2202      	movs	r2, #2
 800b032:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	683a      	ldr	r2, [r7, #0]
 800b03a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b03e:	2301      	movs	r3, #1
 800b040:	75fb      	strb	r3, [r7, #23]
      break;
 800b042:	e007      	b.n	800b054 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b044:	7afb      	ldrb	r3, [r7, #11]
 800b046:	4619      	mov	r1, r3
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f7ff fb83 	bl	800a754 <USBH_MSC_BOT_Process>
 800b04e:	4603      	mov	r3, r0
 800b050:	75fb      	strb	r3, [r7, #23]
      break;
 800b052:	bf00      	nop
  }

  return error;
 800b054:	7dfb      	ldrb	r3, [r7, #23]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b086      	sub	sp, #24
 800b062:	af00      	add	r7, sp, #0
 800b064:	60f8      	str	r0, [r7, #12]
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	603b      	str	r3, [r7, #0]
 800b06a:	460b      	mov	r3, r1
 800b06c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800b06e:	2302      	movs	r3, #2
 800b070:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b082:	2b01      	cmp	r3, #1
 800b084:	d002      	beq.n	800b08c <USBH_MSC_SCSI_Read+0x2e>
 800b086:	2b02      	cmp	r3, #2
 800b088:	d047      	beq.n	800b11a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b08a:	e04e      	b.n	800b12a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b092:	461a      	mov	r2, r3
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	fb03 f202 	mul.w	r2, r3, r2
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	2280      	movs	r2, #128	; 0x80
 800b0a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	220a      	movs	r2, #10
 800b0aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	3363      	adds	r3, #99	; 0x63
 800b0b2:	2210      	movs	r2, #16
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f002 f9e8 	bl	800d48c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	2228      	movs	r2, #40	; 0x28
 800b0c0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b0c4:	79fa      	ldrb	r2, [r7, #7]
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b0cc:	79ba      	ldrb	r2, [r7, #6]
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b0d4:	797a      	ldrb	r2, [r7, #5]
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b0dc:	1d3b      	adds	r3, r7, #4
 800b0de:	781a      	ldrb	r2, [r3, #0]
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800b0e6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800b0f0:	f107 0320 	add.w	r3, r7, #32
 800b0f4:	781a      	ldrb	r2, [r3, #0]
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	2202      	movs	r2, #2
 800b108:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b114:	2301      	movs	r3, #1
 800b116:	75fb      	strb	r3, [r7, #23]
      break;
 800b118:	e007      	b.n	800b12a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b11a:	7afb      	ldrb	r3, [r7, #11]
 800b11c:	4619      	mov	r1, r3
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f7ff fb18 	bl	800a754 <USBH_MSC_BOT_Process>
 800b124:	4603      	mov	r3, r0
 800b126:	75fb      	strb	r3, [r7, #23]
      break;
 800b128:	bf00      	nop
  }

  return error;
 800b12a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	4613      	mov	r3, r2
 800b140:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10a      	bne.n	800b15e <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800b148:	481c      	ldr	r0, [pc, #112]	; (800b1bc <USBH_Init+0x88>)
 800b14a:	f002 f851 	bl	800d1f0 <iprintf>
 800b14e:	481c      	ldr	r0, [pc, #112]	; (800b1c0 <USBH_Init+0x8c>)
 800b150:	f002 f84e 	bl	800d1f0 <iprintf>
 800b154:	200a      	movs	r0, #10
 800b156:	f002 f85d 	bl	800d214 <putchar>
    return USBH_FAIL;
 800b15a:	2302      	movs	r3, #2
 800b15c:	e029      	b.n	800b1b2 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	79fa      	ldrb	r2, [r7, #7]
 800b162:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
  phost->ClassNumber = 0U;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f000 f824 	bl	800b1c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
  phost->device.is_connected = 0U;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d003      	beq.n	800b1aa <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	68ba      	ldr	r2, [r7, #8]
 800b1a6:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f7f6 f864 	bl	8001278 <USBH_LL_Init>

  return USBH_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	0800e418 	.word	0x0800e418
 800b1c0:	0800e420 	.word	0x0800e420

0800b1c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	60fb      	str	r3, [r7, #12]
 800b1d4:	e00a      	b.n	800b1ec <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	60fb      	str	r3, [r7, #12]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2b0f      	cmp	r3, #15
 800b1f0:	d9f1      	bls.n	800b1d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	e009      	b.n	800b20c <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800b202:	2200      	movs	r2, #0
 800b204:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	3301      	adds	r3, #1
 800b20a:	60fb      	str	r3, [r7, #12]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b212:	d3f1      	bcc.n	800b1f8 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4

  phost->Control.state = CTRL_SETUP;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2240      	movs	r2, #64	; 0x40
 800b238:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
  phost->device.RstCnt = 0U;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
  phost->device.EnumCnt = 0U;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	331c      	adds	r3, #28
 800b264:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b268:	2100      	movs	r1, #0
 800b26a:	4618      	mov	r0, r3
 800b26c:	f002 f90e 	bl	800d48c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800b276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b27a:	2100      	movs	r1, #0
 800b27c:	4618      	mov	r0, r3
 800b27e:	f002 f905 	bl	800d48c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f203 4326 	addw	r3, r3, #1062	; 0x426
 800b288:	2212      	movs	r2, #18
 800b28a:	2100      	movs	r1, #0
 800b28c:	4618      	mov	r0, r3
 800b28e:	f002 f8fd 	bl	800d48c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800b298:	223e      	movs	r2, #62	; 0x3e
 800b29a:	2100      	movs	r1, #0
 800b29c:	4618      	mov	r0, r3
 800b29e:	f002 f8f5 	bl	800d48c <memset>

  return USBH_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d020      	beq.n	800b302 <USBH_RegisterClass+0x56>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10f      	bne.n	800b2ea <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 800b2d0:	1c59      	adds	r1, r3, #1
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	f8c2 1480 	str.w	r1, [r2, #1152]	; 0x480
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800b2de:	6839      	ldr	r1, [r7, #0]
 800b2e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	73fb      	strb	r3, [r7, #15]
 800b2e8:	e016      	b.n	800b318 <USBH_RegisterClass+0x6c>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800b2ea:	480e      	ldr	r0, [pc, #56]	; (800b324 <USBH_RegisterClass+0x78>)
 800b2ec:	f001 ff80 	bl	800d1f0 <iprintf>
 800b2f0:	480d      	ldr	r0, [pc, #52]	; (800b328 <USBH_RegisterClass+0x7c>)
 800b2f2:	f001 ff7d 	bl	800d1f0 <iprintf>
 800b2f6:	200a      	movs	r0, #10
 800b2f8:	f001 ff8c 	bl	800d214 <putchar>
      status = USBH_FAIL;
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	73fb      	strb	r3, [r7, #15]
 800b300:	e00a      	b.n	800b318 <USBH_RegisterClass+0x6c>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800b302:	4808      	ldr	r0, [pc, #32]	; (800b324 <USBH_RegisterClass+0x78>)
 800b304:	f001 ff74 	bl	800d1f0 <iprintf>
 800b308:	4808      	ldr	r0, [pc, #32]	; (800b32c <USBH_RegisterClass+0x80>)
 800b30a:	f001 ff71 	bl	800d1f0 <iprintf>
 800b30e:	200a      	movs	r0, #10
 800b310:	f001 ff80 	bl	800d214 <putchar>
    status = USBH_FAIL;
 800b314:	2302      	movs	r3, #2
 800b316:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b318:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	0800e418 	.word	0x0800e418
 800b328:	0800e434 	.word	0x0800e434
 800b32c:	0800e450 	.word	0x0800e450

0800b330 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	460b      	mov	r3, r1
 800b33a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b33c:	2300      	movs	r3, #0
 800b33e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800b346:	78fa      	ldrb	r2, [r7, #3]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d23c      	bcs.n	800b3c6 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	78fa      	ldrb	r2, [r7, #3]
 800b350:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800b354:	78fb      	ldrb	r3, [r7, #3]
 800b356:	4619      	mov	r1, r3
 800b358:	4823      	ldr	r0, [pc, #140]	; (800b3e8 <USBH_SelectInterface+0xb8>)
 800b35a:	f001 ff49 	bl	800d1f0 <iprintf>
 800b35e:	200a      	movs	r0, #10
 800b360:	f001 ff58 	bl	800d214 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800b364:	78fb      	ldrb	r3, [r7, #3]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	211a      	movs	r1, #26
 800b36a:	fb01 f303 	mul.w	r3, r1, r3
 800b36e:	4413      	add	r3, r2
 800b370:	f203 4347 	addw	r3, r3, #1095	; 0x447
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	4619      	mov	r1, r3
 800b378:	481c      	ldr	r0, [pc, #112]	; (800b3ec <USBH_SelectInterface+0xbc>)
 800b37a:	f001 ff39 	bl	800d1f0 <iprintf>
 800b37e:	200a      	movs	r0, #10
 800b380:	f001 ff48 	bl	800d214 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800b384:	78fb      	ldrb	r3, [r7, #3]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	211a      	movs	r1, #26
 800b38a:	fb01 f303 	mul.w	r3, r1, r3
 800b38e:	4413      	add	r3, r2
 800b390:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	4619      	mov	r1, r3
 800b398:	4815      	ldr	r0, [pc, #84]	; (800b3f0 <USBH_SelectInterface+0xc0>)
 800b39a:	f001 ff29 	bl	800d1f0 <iprintf>
 800b39e:	200a      	movs	r0, #10
 800b3a0:	f001 ff38 	bl	800d214 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800b3a4:	78fb      	ldrb	r3, [r7, #3]
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	211a      	movs	r1, #26
 800b3aa:	fb01 f303 	mul.w	r3, r1, r3
 800b3ae:	4413      	add	r3, r2
 800b3b0:	f203 4349 	addw	r3, r3, #1097	; 0x449
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	480e      	ldr	r0, [pc, #56]	; (800b3f4 <USBH_SelectInterface+0xc4>)
 800b3ba:	f001 ff19 	bl	800d1f0 <iprintf>
 800b3be:	200a      	movs	r0, #10
 800b3c0:	f001 ff28 	bl	800d214 <putchar>
 800b3c4:	e00a      	b.n	800b3dc <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800b3c6:	480c      	ldr	r0, [pc, #48]	; (800b3f8 <USBH_SelectInterface+0xc8>)
 800b3c8:	f001 ff12 	bl	800d1f0 <iprintf>
 800b3cc:	480b      	ldr	r0, [pc, #44]	; (800b3fc <USBH_SelectInterface+0xcc>)
 800b3ce:	f001 ff0f 	bl	800d1f0 <iprintf>
 800b3d2:	200a      	movs	r0, #10
 800b3d4:	f001 ff1e 	bl	800d214 <putchar>
    status = USBH_FAIL;
 800b3d8:	2302      	movs	r3, #2
 800b3da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	0800e468 	.word	0x0800e468
 800b3ec:	0800e488 	.word	0x0800e488
 800b3f0:	0800e498 	.word	0x0800e498
 800b3f4:	0800e4a8 	.word	0x0800e4a8
 800b3f8:	0800e418 	.word	0x0800e418
 800b3fc:	0800e4b8 	.word	0x0800e4b8

0800b400 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b400:	b480      	push	{r7}
 800b402:	b087      	sub	sp, #28
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	4608      	mov	r0, r1
 800b40a:	4611      	mov	r1, r2
 800b40c:	461a      	mov	r2, r3
 800b40e:	4603      	mov	r3, r0
 800b410:	70fb      	strb	r3, [r7, #3]
 800b412:	460b      	mov	r3, r1
 800b414:	70bb      	strb	r3, [r7, #2]
 800b416:	4613      	mov	r3, r2
 800b418:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b41a:	2300      	movs	r3, #0
 800b41c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b41e:	2300      	movs	r3, #0
 800b420:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800b428:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b42a:	e025      	b.n	800b478 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b42c:	7dfb      	ldrb	r3, [r7, #23]
 800b42e:	221a      	movs	r2, #26
 800b430:	fb02 f303 	mul.w	r3, r2, r3
 800b434:	3308      	adds	r3, #8
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4413      	add	r3, r2
 800b43a:	3302      	adds	r3, #2
 800b43c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	795b      	ldrb	r3, [r3, #5]
 800b442:	78fa      	ldrb	r2, [r7, #3]
 800b444:	429a      	cmp	r2, r3
 800b446:	d002      	beq.n	800b44e <USBH_FindInterface+0x4e>
 800b448:	78fb      	ldrb	r3, [r7, #3]
 800b44a:	2bff      	cmp	r3, #255	; 0xff
 800b44c:	d111      	bne.n	800b472 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b452:	78ba      	ldrb	r2, [r7, #2]
 800b454:	429a      	cmp	r2, r3
 800b456:	d002      	beq.n	800b45e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b458:	78bb      	ldrb	r3, [r7, #2]
 800b45a:	2bff      	cmp	r3, #255	; 0xff
 800b45c:	d109      	bne.n	800b472 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b462:	787a      	ldrb	r2, [r7, #1]
 800b464:	429a      	cmp	r2, r3
 800b466:	d002      	beq.n	800b46e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b468:	787b      	ldrb	r3, [r7, #1]
 800b46a:	2bff      	cmp	r3, #255	; 0xff
 800b46c:	d101      	bne.n	800b472 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b46e:	7dfb      	ldrb	r3, [r7, #23]
 800b470:	e006      	b.n	800b480 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b472:	7dfb      	ldrb	r3, [r7, #23]
 800b474:	3301      	adds	r3, #1
 800b476:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b478:	7dfb      	ldrb	r3, [r7, #23]
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d9d6      	bls.n	800b42c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b47e:	23ff      	movs	r3, #255	; 0xff
}
 800b480:	4618      	mov	r0, r3
 800b482:	371c      	adds	r7, #28
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7f5 ff23 	bl	80012e0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b49a:	2101      	movs	r1, #1
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f7f5 ffeb 	bl	8001478 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b088      	sub	sp, #32
 800b4b0:	af04      	add	r7, sp, #16
 800b4b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 3421 	ldrb.w	r3, [r3, #1057]	; 0x421
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d102      	bne.n	800b4ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2203      	movs	r2, #3
 800b4cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	2b0b      	cmp	r3, #11
 800b4d6:	f200 822b 	bhi.w	800b930 <USBH_Process+0x484>
 800b4da:	a201      	add	r2, pc, #4	; (adr r2, 800b4e0 <USBH_Process+0x34>)
 800b4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e0:	0800b511 	.word	0x0800b511
 800b4e4:	0800b54f 	.word	0x0800b54f
 800b4e8:	0800b5cf 	.word	0x0800b5cf
 800b4ec:	0800b8bf 	.word	0x0800b8bf
 800b4f0:	0800b931 	.word	0x0800b931
 800b4f4:	0800b673 	.word	0x0800b673
 800b4f8:	0800b865 	.word	0x0800b865
 800b4fc:	0800b6c1 	.word	0x0800b6c1
 800b500:	0800b6e1 	.word	0x0800b6e1
 800b504:	0800b70d 	.word	0x0800b70d
 800b508:	0800b769 	.word	0x0800b769
 800b50c:	0800b8a7 	.word	0x0800b8a7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800b516:	b2db      	uxtb	r3, r3
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f000 820b 	beq.w	800b934 <USBH_Process+0x488>
      {
       USBH_UsrLog("USB Device Connected");
 800b51e:	48a7      	ldr	r0, [pc, #668]	; (800b7bc <USBH_Process+0x310>)
 800b520:	f001 fe66 	bl	800d1f0 <iprintf>
 800b524:	200a      	movs	r0, #10
 800b526:	f001 fe75 	bl	800d214 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2201      	movs	r2, #1
 800b52e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b530:	20c8      	movs	r0, #200	; 0xc8
 800b532:	f7f6 f825 	bl	8001580 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7f5 ff10 	bl	800135c <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        phost->Timeout = 0U;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b54c:	e1f2      	b.n	800b934 <USBH_Process+0x488>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 3423 	ldrb.w	r3, [r3, #1059]	; 0x423
 800b554:	2b01      	cmp	r3, #1
 800b556:	d10d      	bne.n	800b574 <USBH_Process+0xc8>
      {
       USBH_UsrLog("USB Device Reset Completed");
 800b558:	4899      	ldr	r0, [pc, #612]	; (800b7c0 <USBH_Process+0x314>)
 800b55a:	f001 fe49 	bl	800d1f0 <iprintf>
 800b55e:	200a      	movs	r0, #10
 800b560:	f001 fe58 	bl	800d214 <putchar>
        phost->device.RstCnt = 0U;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
        phost->gState = HOST_DEV_ATTACHED;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2202      	movs	r2, #2
 800b570:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b572:	e1ec      	b.n	800b94e <USBH_Process+0x4a2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800b57a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b57e:	d91a      	bls.n	800b5b6 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800b586:	3301      	adds	r3, #1
 800b588:	b2da      	uxtb	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
          if (phost->device.RstCnt > 3U)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800b596:	2b03      	cmp	r3, #3
 800b598:	d909      	bls.n	800b5ae <USBH_Process+0x102>
           USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800b59a:	488a      	ldr	r0, [pc, #552]	; (800b7c4 <USBH_Process+0x318>)
 800b59c:	f001 fe28 	bl	800d1f0 <iprintf>
 800b5a0:	200a      	movs	r0, #10
 800b5a2:	f001 fe37 	bl	800d214 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	220d      	movs	r2, #13
 800b5aa:	701a      	strb	r2, [r3, #0]
      break;
 800b5ac:	e1cf      	b.n	800b94e <USBH_Process+0x4a2>
            phost->gState = HOST_IDLE;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	701a      	strb	r2, [r3, #0]
      break;
 800b5b4:	e1cb      	b.n	800b94e <USBH_Process+0x4a2>
          phost->Timeout += 10U;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800b5bc:	f103 020a 	add.w	r2, r3, #10
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
          USBH_Delay(10U);
 800b5c6:	200a      	movs	r0, #10
 800b5c8:	f7f5 ffda 	bl	8001580 <USBH_Delay>
      break;
 800b5cc:	e1bf      	b.n	800b94e <USBH_Process+0x4a2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d005      	beq.n	800b5e4 <USBH_Process+0x138>
      {
    	  //HAL_UART_Transmit(&huart1, "welcome", 7, 100);
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b5de:	2104      	movs	r1, #4
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b5e4:	2064      	movs	r0, #100	; 0x64
 800b5e6:	f7f5 ffcb 	bl	8001580 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7f5 fe96 	bl	800131c <USBH_LL_GetSpeed>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d

      phost->gState = HOST_ENUMERATION;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2205      	movs	r2, #5
 800b5fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b600:	2100      	movs	r1, #0
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f001 fbd7 	bl	800cdb6 <USBH_AllocPipe>
 800b608:	4603      	mov	r3, r0
 800b60a:	461a      	mov	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b610:	2180      	movs	r1, #128	; 0x80
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f001 fbcf 	bl	800cdb6 <USBH_AllocPipe>
 800b618:	4603      	mov	r3, r0
 800b61a:	461a      	mov	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	7919      	ldrb	r1, [r3, #4]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b634:	b292      	uxth	r2, r2
 800b636:	9202      	str	r2, [sp, #8]
 800b638:	2200      	movs	r2, #0
 800b63a:	9201      	str	r2, [sp, #4]
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	4603      	mov	r3, r0
 800b640:	2280      	movs	r2, #128	; 0x80
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f001 fb88 	bl	800cd58 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	7959      	ldrb	r1, [r3, #5]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b65c:	b292      	uxth	r2, r2
 800b65e:	9202      	str	r2, [sp, #8]
 800b660:	2200      	movs	r2, #0
 800b662:	9201      	str	r2, [sp, #4]
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	4603      	mov	r3, r0
 800b668:	2200      	movs	r2, #0
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f001 fb74 	bl	800cd58 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b670:	e16d      	b.n	800b94e <USBH_Process+0x4a2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f978 	bl	800b968 <USBH_HandleEnum>
 800b678:	4603      	mov	r3, r0
 800b67a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b67c:	7bbb      	ldrb	r3, [r7, #14]
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	2b00      	cmp	r3, #0
 800b682:	f040 8159 	bne.w	800b938 <USBH_Process+0x48c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800b686:	4850      	ldr	r0, [pc, #320]	; (800b7c8 <USBH_Process+0x31c>)
 800b688:	f001 fdb2 	bl	800d1f0 <iprintf>
 800b68c:	200a      	movs	r0, #10
 800b68e:	f001 fdc1 	bl	800d214 <putchar>

        phost->device.current_interface = 0U;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f893 3437 	ldrb.w	r3, [r3, #1079]	; 0x437
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d109      	bne.n	800b6b8 <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800b6a4:	4849      	ldr	r0, [pc, #292]	; (800b7cc <USBH_Process+0x320>)
 800b6a6:	f001 fda3 	bl	800d1f0 <iprintf>
 800b6aa:	200a      	movs	r0, #10
 800b6ac:	f001 fdb2 	bl	800d214 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2208      	movs	r2, #8
 800b6b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b6b6:	e13f      	b.n	800b938 <USBH_Process+0x48c>
          phost->gState = HOST_INPUT;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2207      	movs	r2, #7
 800b6bc:	701a      	strb	r2, [r3, #0]
      break;
 800b6be:	e13b      	b.n	800b938 <USBH_Process+0x48c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f000 8138 	beq.w	800b93c <USBH_Process+0x490>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b6d2:	2101      	movs	r1, #1
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2208      	movs	r2, #8
 800b6dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b6de:	e12d      	b.n	800b93c <USBH_Process+0x490>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fd51 	bl	800c192 <USBH_SetCfg>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f040 8124 	bne.w	800b940 <USBH_Process+0x494>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2209      	movs	r2, #9
 800b6fc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800b6fe:	4834      	ldr	r0, [pc, #208]	; (800b7d0 <USBH_Process+0x324>)
 800b700:	f001 fd76 	bl	800d1f0 <iprintf>
 800b704:	200a      	movs	r0, #10
 800b706:	f001 fd85 	bl	800d214 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b70a:	e119      	b.n	800b940 <USBH_Process+0x494>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 800b712:	f003 0320 	and.w	r3, r3, #32
 800b716:	2b00      	cmp	r3, #0
 800b718:	d022      	beq.n	800b760 <USBH_Process+0x2b4>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b71a:	2101      	movs	r1, #1
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fd5b 	bl	800c1d8 <USBH_SetFeature>
 800b722:	4603      	mov	r3, r0
 800b724:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b726:	7bbb      	ldrb	r3, [r7, #14]
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d109      	bne.n	800b742 <USBH_Process+0x296>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800b72e:	4829      	ldr	r0, [pc, #164]	; (800b7d4 <USBH_Process+0x328>)
 800b730:	f001 fd5e 	bl	800d1f0 <iprintf>
 800b734:	200a      	movs	r0, #10
 800b736:	f001 fd6d 	bl	800d214 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	220a      	movs	r2, #10
 800b73e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b740:	e100      	b.n	800b944 <USBH_Process+0x498>
        else if (status == USBH_NOT_SUPPORTED)
 800b742:	7bbb      	ldrb	r3, [r7, #14]
 800b744:	b2db      	uxtb	r3, r3
 800b746:	2b03      	cmp	r3, #3
 800b748:	f040 80fc 	bne.w	800b944 <USBH_Process+0x498>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800b74c:	4822      	ldr	r0, [pc, #136]	; (800b7d8 <USBH_Process+0x32c>)
 800b74e:	f001 fd4f 	bl	800d1f0 <iprintf>
 800b752:	200a      	movs	r0, #10
 800b754:	f001 fd5e 	bl	800d214 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	220a      	movs	r2, #10
 800b75c:	701a      	strb	r2, [r3, #0]
      break;
 800b75e:	e0f1      	b.n	800b944 <USBH_Process+0x498>
        phost->gState = HOST_CHECK_CLASS;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	220a      	movs	r2, #10
 800b764:	701a      	strb	r2, [r3, #0]
      break;
 800b766:	e0ed      	b.n	800b944 <USBH_Process+0x498>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d106      	bne.n	800b780 <USBH_Process+0x2d4>
      {
        USBH_UsrLog("No Class has been registered.");
 800b772:	481a      	ldr	r0, [pc, #104]	; (800b7dc <USBH_Process+0x330>)
 800b774:	f001 fd3c 	bl	800d1f0 <iprintf>
 800b778:	200a      	movs	r0, #10
 800b77a:	f001 fd4b 	bl	800d214 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b77e:	e0e6      	b.n	800b94e <USBH_Process+0x4a2>
        phost->pActiveClass = NULL;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b788:	2300      	movs	r3, #0
 800b78a:	73fb      	strb	r3, [r7, #15]
 800b78c:	e02b      	b.n	800b7e6 <USBH_Process+0x33a>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b78e:	7bfa      	ldrb	r2, [r7, #15]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f502 728f 	add.w	r2, r2, #286	; 0x11e
 800b796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79a:	791a      	ldrb	r2, [r3, #4]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f893 3447 	ldrb.w	r3, [r3, #1095]	; 0x447
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d11c      	bne.n	800b7e0 <USBH_Process+0x334>
            phost->pActiveClass = phost->pClass[idx];
 800b7a6:	7bfa      	ldrb	r2, [r7, #15]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f502 728f 	add.w	r2, r2, #286	; 0x11e
 800b7ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
            break;
 800b7b8:	e018      	b.n	800b7ec <USBH_Process+0x340>
 800b7ba:	bf00      	nop
 800b7bc:	0800e4d8 	.word	0x0800e4d8
 800b7c0:	0800e4f0 	.word	0x0800e4f0
 800b7c4:	0800e50c 	.word	0x0800e50c
 800b7c8:	0800e538 	.word	0x0800e538
 800b7cc:	0800e54c 	.word	0x0800e54c
 800b7d0:	0800e574 	.word	0x0800e574
 800b7d4:	0800e590 	.word	0x0800e590
 800b7d8:	0800e5b0 	.word	0x0800e5b0
 800b7dc:	0800e5dc 	.word	0x0800e5dc
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	73fb      	strb	r3, [r7, #15]
 800b7e6:	7bfb      	ldrb	r3, [r7, #15]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d0d0      	beq.n	800b78e <USBH_Process+0x2e2>
        if (phost->pActiveClass != NULL)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d02c      	beq.n	800b850 <USBH_Process+0x3a4>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	4798      	blx	r3
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d114      	bne.n	800b832 <USBH_Process+0x386>
            phost->gState = HOST_CLASS_REQUEST;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2206      	movs	r2, #6
 800b80c:	701a      	strb	r2, [r3, #0]
           USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4619      	mov	r1, r3
 800b818:	484f      	ldr	r0, [pc, #316]	; (800b958 <USBH_Process+0x4ac>)
 800b81a:	f001 fce9 	bl	800d1f0 <iprintf>
 800b81e:	200a      	movs	r0, #10
 800b820:	f001 fcf8 	bl	800d214 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b82a:	2103      	movs	r1, #3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	4798      	blx	r3
      break;
 800b830:	e08d      	b.n	800b94e <USBH_Process+0x4a2>
            phost->gState = HOST_ABORT_STATE;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	220d      	movs	r2, #13
 800b836:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4619      	mov	r1, r3
 800b842:	4846      	ldr	r0, [pc, #280]	; (800b95c <USBH_Process+0x4b0>)
 800b844:	f001 fcd4 	bl	800d1f0 <iprintf>
 800b848:	200a      	movs	r0, #10
 800b84a:	f001 fce3 	bl	800d214 <putchar>
      break;
 800b84e:	e07e      	b.n	800b94e <USBH_Process+0x4a2>
          phost->gState = HOST_ABORT_STATE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	220d      	movs	r2, #13
 800b854:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800b856:	4842      	ldr	r0, [pc, #264]	; (800b960 <USBH_Process+0x4b4>)
 800b858:	f001 fcca 	bl	800d1f0 <iprintf>
 800b85c:	200a      	movs	r0, #10
 800b85e:	f001 fcd9 	bl	800d214 <putchar>
      break;
 800b862:	e074      	b.n	800b94e <USBH_Process+0x4a2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d017      	beq.n	800b89e <USBH_Process+0x3f2>
      {
        status = phost->pActiveClass->Requests(phost);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	4798      	blx	r3
 800b87a:	4603      	mov	r3, r0
 800b87c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b87e:	7bbb      	ldrb	r3, [r7, #14]
 800b880:	b2db      	uxtb	r3, r3
 800b882:	2b00      	cmp	r3, #0
 800b884:	d103      	bne.n	800b88e <USBH_Process+0x3e2>
        {
          phost->gState = HOST_CLASS;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	220b      	movs	r2, #11
 800b88a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b88c:	e05c      	b.n	800b948 <USBH_Process+0x49c>
        else if (status == USBH_FAIL)
 800b88e:	7bbb      	ldrb	r3, [r7, #14]
 800b890:	b2db      	uxtb	r3, r3
 800b892:	2b02      	cmp	r3, #2
 800b894:	d158      	bne.n	800b948 <USBH_Process+0x49c>
          phost->gState = HOST_ABORT_STATE;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	220d      	movs	r2, #13
 800b89a:	701a      	strb	r2, [r3, #0]
      break;
 800b89c:	e054      	b.n	800b948 <USBH_Process+0x49c>
        phost->gState = HOST_ABORT_STATE;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	220d      	movs	r2, #13
 800b8a2:	701a      	strb	r2, [r3, #0]
      break;
 800b8a4:	e050      	b.n	800b948 <USBH_Process+0x49c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d04d      	beq.n	800b94c <USBH_Process+0x4a0>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b8b6:	695b      	ldr	r3, [r3, #20]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	4798      	blx	r3
      }
      break;
 800b8bc:	e046      	b.n	800b94c <USBH_Process+0x4a0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421

      (void)DeInitStateMachine(phost);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7ff fc7c 	bl	800b1c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d009      	beq.n	800b8ea <USBH_Process+0x43e>
      {
        phost->pActiveClass->DeInit(phost);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
      }

      if (phost->pUser != NULL)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d005      	beq.n	800b900 <USBH_Process+0x454>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800b8fa:	2105      	movs	r1, #5
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800b900:	4818      	ldr	r0, [pc, #96]	; (800b964 <USBH_Process+0x4b8>)
 800b902:	f001 fc75 	bl	800d1f0 <iprintf>
 800b906:	200a      	movs	r0, #10
 800b908:	f001 fc84 	bl	800d214 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
 800b912:	b2db      	uxtb	r3, r3
 800b914:	2b01      	cmp	r3, #1
 800b916:	d107      	bne.n	800b928 <USBH_Process+0x47c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7ff fdb3 	bl	800b48c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b926:	e012      	b.n	800b94e <USBH_Process+0x4a2>
        (void)USBH_LL_Start(phost);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7f5 fcd9 	bl	80012e0 <USBH_LL_Start>
      break;
 800b92e:	e00e      	b.n	800b94e <USBH_Process+0x4a2>

    case HOST_ABORT_STATE:
    default :
      break;
 800b930:	bf00      	nop
 800b932:	e00c      	b.n	800b94e <USBH_Process+0x4a2>
      break;
 800b934:	bf00      	nop
 800b936:	e00a      	b.n	800b94e <USBH_Process+0x4a2>
      break;
 800b938:	bf00      	nop
 800b93a:	e008      	b.n	800b94e <USBH_Process+0x4a2>
    break;
 800b93c:	bf00      	nop
 800b93e:	e006      	b.n	800b94e <USBH_Process+0x4a2>
      break;
 800b940:	bf00      	nop
 800b942:	e004      	b.n	800b94e <USBH_Process+0x4a2>
      break;
 800b944:	bf00      	nop
 800b946:	e002      	b.n	800b94e <USBH_Process+0x4a2>
      break;
 800b948:	bf00      	nop
 800b94a:	e000      	b.n	800b94e <USBH_Process+0x4a2>
      break;
 800b94c:	bf00      	nop
  }
  return USBH_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	0800e5fc 	.word	0x0800e5fc
 800b95c:	0800e610 	.word	0x0800e610
 800b960:	0800e630 	.word	0x0800e630
 800b964:	0800e658 	.word	0x0800e658

0800b968 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b088      	sub	sp, #32
 800b96c:	af04      	add	r7, sp, #16
 800b96e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b970:	2301      	movs	r3, #1
 800b972:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b974:	2301      	movs	r3, #1
 800b976:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	785b      	ldrb	r3, [r3, #1]
 800b97c:	2b07      	cmp	r3, #7
 800b97e:	f200 824a 	bhi.w	800be16 <USBH_HandleEnum+0x4ae>
 800b982:	a201      	add	r2, pc, #4	; (adr r2, 800b988 <USBH_HandleEnum+0x20>)
 800b984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b988:	0800b9a9 	.word	0x0800b9a9
 800b98c:	0800ba73 	.word	0x0800ba73
 800b990:	0800bb11 	.word	0x0800bb11
 800b994:	0800bbbf 	.word	0x0800bbbf
 800b998:	0800bc35 	.word	0x0800bc35
 800b99c:	0800bcb1 	.word	0x0800bcb1
 800b9a0:	0800bd39 	.word	0x0800bd39
 800b9a4:	0800bdab 	.word	0x0800bdab
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b9a8:	2108      	movs	r1, #8
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fae4 	bl	800bf78 <USBH_Get_DevDesc>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b9b4:	7bbb      	ldrb	r3, [r7, #14]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d130      	bne.n	800ba1c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 242d 	ldrb.w	r2, [r3, #1069]	; 0x42d
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	7919      	ldrb	r1, [r3, #4]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b9de:	b292      	uxth	r2, r2
 800b9e0:	9202      	str	r2, [sp, #8]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	9201      	str	r2, [sp, #4]
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2280      	movs	r2, #128	; 0x80
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f001 f9b3 	bl	800cd58 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	7959      	ldrb	r1, [r3, #5]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ba06:	b292      	uxth	r2, r2
 800ba08:	9202      	str	r2, [sp, #8]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	9201      	str	r2, [sp, #4]
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	4603      	mov	r3, r0
 800ba12:	2200      	movs	r2, #0
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f001 f99f 	bl	800cd58 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ba1a:	e1fe      	b.n	800be1a <USBH_HandleEnum+0x4b2>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba1c:	7bbb      	ldrb	r3, [r7, #14]
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	f040 81fb 	bne.w	800be1a <USBH_HandleEnum+0x4b2>
        phost->device.EnumCnt++;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800ba3a:	2b03      	cmp	r3, #3
 800ba3c:	d909      	bls.n	800ba52 <USBH_HandleEnum+0xea>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ba3e:	48ad      	ldr	r0, [pc, #692]	; (800bcf4 <USBH_HandleEnum+0x38c>)
 800ba40:	f001 fbd6 	bl	800d1f0 <iprintf>
 800ba44:	200a      	movs	r0, #10
 800ba46:	f001 fbe5 	bl	800d214 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	220d      	movs	r2, #13
 800ba4e:	701a      	strb	r2, [r3, #0]
      break;
 800ba50:	e1e3      	b.n	800be1a <USBH_HandleEnum+0x4b2>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	795b      	ldrb	r3, [r3, #5]
 800ba56:	4619      	mov	r1, r3
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f001 f9ce 	bl	800cdfa <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	791b      	ldrb	r3, [r3, #4]
 800ba62:	4619      	mov	r1, r3
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f001 f9c8 	bl	800cdfa <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	701a      	strb	r2, [r3, #0]
      break;
 800ba70:	e1d3      	b.n	800be1a <USBH_HandleEnum+0x4b2>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ba72:	2112      	movs	r1, #18
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 fa7f 	bl	800bf78 <USBH_Get_DevDesc>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ba7e:	7bbb      	ldrb	r3, [r7, #14]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d117      	bne.n	800bab4 <USBH_HandleEnum+0x14c>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8b3 3430 	ldrh.w	r3, [r3, #1072]	; 0x430
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	489a      	ldr	r0, [pc, #616]	; (800bcf8 <USBH_HandleEnum+0x390>)
 800ba8e:	f001 fbaf 	bl	800d1f0 <iprintf>
 800ba92:	200a      	movs	r0, #10
 800ba94:	f001 fbbe 	bl	800d214 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8b3 342e 	ldrh.w	r3, [r3, #1070]	; 0x42e
 800ba9e:	4619      	mov	r1, r3
 800baa0:	4896      	ldr	r0, [pc, #600]	; (800bcfc <USBH_HandleEnum+0x394>)
 800baa2:	f001 fba5 	bl	800d1f0 <iprintf>
 800baa6:	200a      	movs	r0, #10
 800baa8:	f001 fbb4 	bl	800d214 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2202      	movs	r2, #2
 800bab0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bab2:	e1b4      	b.n	800be1e <USBH_HandleEnum+0x4b6>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bab4:	7bbb      	ldrb	r3, [r7, #14]
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	f040 81b1 	bne.w	800be1e <USBH_HandleEnum+0x4b6>
        phost->device.EnumCnt++;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800bac2:	3301      	adds	r3, #1
 800bac4:	b2da      	uxtb	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800bad2:	2b03      	cmp	r3, #3
 800bad4:	d909      	bls.n	800baea <USBH_HandleEnum+0x182>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800bad6:	4887      	ldr	r0, [pc, #540]	; (800bcf4 <USBH_HandleEnum+0x38c>)
 800bad8:	f001 fb8a 	bl	800d1f0 <iprintf>
 800badc:	200a      	movs	r0, #10
 800bade:	f001 fb99 	bl	800d214 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	220d      	movs	r2, #13
 800bae6:	701a      	strb	r2, [r3, #0]
      break;
 800bae8:	e199      	b.n	800be1e <USBH_HandleEnum+0x4b6>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	795b      	ldrb	r3, [r3, #5]
 800baee:	4619      	mov	r1, r3
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f001 f982 	bl	800cdfa <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	791b      	ldrb	r3, [r3, #4]
 800bafa:	4619      	mov	r1, r3
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f001 f97c 	bl	800cdfa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	701a      	strb	r2, [r3, #0]
      break;
 800bb0e:	e186      	b.n	800be1e <USBH_HandleEnum+0x4b6>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bb10:	2101      	movs	r1, #1
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fb19 	bl	800c14a <USBH_SetAddress>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb1c:	7bbb      	ldrb	r3, [r7, #14]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d13c      	bne.n	800bb9c <USBH_HandleEnum+0x234>
      {
        USBH_Delay(2U);
 800bb22:	2002      	movs	r0, #2
 800bb24:	f7f5 fd2c 	bl	8001580 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800bb36:	4619      	mov	r1, r3
 800bb38:	4871      	ldr	r0, [pc, #452]	; (800bd00 <USBH_HandleEnum+0x398>)
 800bb3a:	f001 fb59 	bl	800d1f0 <iprintf>
 800bb3e:	200a      	movs	r0, #10
 800bb40:	f001 fb68 	bl	800d214 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2203      	movs	r2, #3
 800bb48:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	7919      	ldrb	r1, [r3, #4]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bb5e:	b292      	uxth	r2, r2
 800bb60:	9202      	str	r2, [sp, #8]
 800bb62:	2200      	movs	r2, #0
 800bb64:	9201      	str	r2, [sp, #4]
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2280      	movs	r2, #128	; 0x80
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f001 f8f3 	bl	800cd58 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	7959      	ldrb	r1, [r3, #5]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb86:	b292      	uxth	r2, r2
 800bb88:	9202      	str	r2, [sp, #8]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	9201      	str	r2, [sp, #4]
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	4603      	mov	r3, r0
 800bb92:	2200      	movs	r2, #0
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f001 f8df 	bl	800cd58 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bb9a:	e142      	b.n	800be22 <USBH_HandleEnum+0x4ba>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb9c:	7bbb      	ldrb	r3, [r7, #14]
 800bb9e:	2b03      	cmp	r3, #3
 800bba0:	f040 813f 	bne.w	800be22 <USBH_HandleEnum+0x4ba>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800bba4:	4853      	ldr	r0, [pc, #332]	; (800bcf4 <USBH_HandleEnum+0x38c>)
 800bba6:	f001 fb23 	bl	800d1f0 <iprintf>
 800bbaa:	200a      	movs	r0, #10
 800bbac:	f001 fb32 	bl	800d214 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	220d      	movs	r2, #13
 800bbb4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	705a      	strb	r2, [r3, #1]
      break;
 800bbbc:	e131      	b.n	800be22 <USBH_HandleEnum+0x4ba>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bbbe:	2109      	movs	r1, #9
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fa13 	bl	800bfec <USBH_Get_CfgDesc>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bbca:	7bbb      	ldrb	r3, [r7, #14]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d103      	bne.n	800bbd8 <USBH_HandleEnum+0x270>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2204      	movs	r2, #4
 800bbd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bbd6:	e126      	b.n	800be26 <USBH_HandleEnum+0x4be>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bbd8:	7bbb      	ldrb	r3, [r7, #14]
 800bbda:	2b03      	cmp	r3, #3
 800bbdc:	f040 8123 	bne.w	800be26 <USBH_HandleEnum+0x4be>
        phost->device.EnumCnt++;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800bbf6:	2b03      	cmp	r3, #3
 800bbf8:	d909      	bls.n	800bc0e <USBH_HandleEnum+0x2a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800bbfa:	483e      	ldr	r0, [pc, #248]	; (800bcf4 <USBH_HandleEnum+0x38c>)
 800bbfc:	f001 faf8 	bl	800d1f0 <iprintf>
 800bc00:	200a      	movs	r0, #10
 800bc02:	f001 fb07 	bl	800d214 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	220d      	movs	r2, #13
 800bc0a:	701a      	strb	r2, [r3, #0]
      break;
 800bc0c:	e10b      	b.n	800be26 <USBH_HandleEnum+0x4be>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	795b      	ldrb	r3, [r3, #5]
 800bc12:	4619      	mov	r1, r3
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f001 f8f0 	bl	800cdfa <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	791b      	ldrb	r3, [r3, #4]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f001 f8ea 	bl	800cdfa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	701a      	strb	r2, [r3, #0]
      break;
 800bc32:	e0f8      	b.n	800be26 <USBH_HandleEnum+0x4be>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8b3 343a 	ldrh.w	r3, [r3, #1082]	; 0x43a
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 f9d5 	bl	800bfec <USBH_Get_CfgDesc>
 800bc42:	4603      	mov	r3, r0
 800bc44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc46:	7bbb      	ldrb	r3, [r7, #14]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d103      	bne.n	800bc54 <USBH_HandleEnum+0x2ec>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2205      	movs	r2, #5
 800bc50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bc52:	e0ea      	b.n	800be2a <USBH_HandleEnum+0x4c2>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc54:	7bbb      	ldrb	r3, [r7, #14]
 800bc56:	2b03      	cmp	r3, #3
 800bc58:	f040 80e7 	bne.w	800be2a <USBH_HandleEnum+0x4c2>
        phost->device.EnumCnt++;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800bc62:	3301      	adds	r3, #1
 800bc64:	b2da      	uxtb	r2, r3
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d909      	bls.n	800bc8a <USBH_HandleEnum+0x322>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800bc76:	481f      	ldr	r0, [pc, #124]	; (800bcf4 <USBH_HandleEnum+0x38c>)
 800bc78:	f001 faba 	bl	800d1f0 <iprintf>
 800bc7c:	200a      	movs	r0, #10
 800bc7e:	f001 fac9 	bl	800d214 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	220d      	movs	r2, #13
 800bc86:	701a      	strb	r2, [r3, #0]
      break;
 800bc88:	e0cf      	b.n	800be2a <USBH_HandleEnum+0x4c2>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	795b      	ldrb	r3, [r3, #5]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f001 f8b2 	bl	800cdfa <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	791b      	ldrb	r3, [r3, #4]
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f001 f8ac 	bl	800cdfa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	701a      	strb	r2, [r3, #0]
      break;
 800bcae:	e0bc      	b.n	800be2a <USBH_HandleEnum+0x4c2>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d034      	beq.n	800bd24 <USBH_HandleEnum+0x3bc>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 1434 	ldrb.w	r1, [r3, #1076]	; 0x434
                                        phost->device.Data, 0xFFU);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f503 7207 	add.w	r2, r3, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bcc6:	23ff      	movs	r3, #255	; 0xff
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 f9c7 	bl	800c05c <USBH_Get_StringDesc>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bcd2:	7bbb      	ldrb	r3, [r7, #14]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d117      	bne.n	800bd08 <USBH_HandleEnum+0x3a0>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800bcde:	4619      	mov	r1, r3
 800bce0:	4808      	ldr	r0, [pc, #32]	; (800bd04 <USBH_HandleEnum+0x39c>)
 800bce2:	f001 fa85 	bl	800d1f0 <iprintf>
 800bce6:	200a      	movs	r0, #10
 800bce8:	f001 fa94 	bl	800d214 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2206      	movs	r2, #6
 800bcf0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bcf2:	e09c      	b.n	800be2e <USBH_HandleEnum+0x4c6>
 800bcf4:	0800e670 	.word	0x0800e670
 800bcf8:	0800e6b0 	.word	0x0800e6b0
 800bcfc:	0800e6bc 	.word	0x0800e6bc
 800bd00:	0800e6c8 	.word	0x0800e6c8
 800bd04:	0800e6e0 	.word	0x0800e6e0
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd08:	7bbb      	ldrb	r3, [r7, #14]
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	f040 808f 	bne.w	800be2e <USBH_HandleEnum+0x4c6>
          USBH_UsrLog("Manufacturer : N/A");
 800bd10:	484c      	ldr	r0, [pc, #304]	; (800be44 <USBH_HandleEnum+0x4dc>)
 800bd12:	f001 fa6d 	bl	800d1f0 <iprintf>
 800bd16:	200a      	movs	r0, #10
 800bd18:	f001 fa7c 	bl	800d214 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2206      	movs	r2, #6
 800bd20:	705a      	strb	r2, [r3, #1]
      break;
 800bd22:	e084      	b.n	800be2e <USBH_HandleEnum+0x4c6>
        USBH_UsrLog("Manufacturer : N/A");
 800bd24:	4847      	ldr	r0, [pc, #284]	; (800be44 <USBH_HandleEnum+0x4dc>)
 800bd26:	f001 fa63 	bl	800d1f0 <iprintf>
 800bd2a:	200a      	movs	r0, #10
 800bd2c:	f001 fa72 	bl	800d214 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2206      	movs	r2, #6
 800bd34:	705a      	strb	r2, [r3, #1]
      break;
 800bd36:	e07a      	b.n	800be2e <USBH_HandleEnum+0x4c6>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f893 3435 	ldrb.w	r3, [r3, #1077]	; 0x435
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d029      	beq.n	800bd96 <USBH_HandleEnum+0x42e>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f893 1435 	ldrb.w	r1, [r3, #1077]	; 0x435
                                        phost->device.Data, 0xFFU);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f503 7207 	add.w	r2, r3, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bd4e:	23ff      	movs	r3, #255	; 0xff
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f983 	bl	800c05c <USBH_Get_StringDesc>
 800bd56:	4603      	mov	r3, r0
 800bd58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bd5a:	7bbb      	ldrb	r3, [r7, #14]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10d      	bne.n	800bd7c <USBH_HandleEnum+0x414>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800bd66:	4619      	mov	r1, r3
 800bd68:	4837      	ldr	r0, [pc, #220]	; (800be48 <USBH_HandleEnum+0x4e0>)
 800bd6a:	f001 fa41 	bl	800d1f0 <iprintf>
 800bd6e:	200a      	movs	r0, #10
 800bd70:	f001 fa50 	bl	800d214 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2207      	movs	r2, #7
 800bd78:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bd7a:	e05a      	b.n	800be32 <USBH_HandleEnum+0x4ca>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd7c:	7bbb      	ldrb	r3, [r7, #14]
 800bd7e:	2b03      	cmp	r3, #3
 800bd80:	d157      	bne.n	800be32 <USBH_HandleEnum+0x4ca>
          USBH_UsrLog("Product : N/A");
 800bd82:	4832      	ldr	r0, [pc, #200]	; (800be4c <USBH_HandleEnum+0x4e4>)
 800bd84:	f001 fa34 	bl	800d1f0 <iprintf>
 800bd88:	200a      	movs	r0, #10
 800bd8a:	f001 fa43 	bl	800d214 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2207      	movs	r2, #7
 800bd92:	705a      	strb	r2, [r3, #1]
      break;
 800bd94:	e04d      	b.n	800be32 <USBH_HandleEnum+0x4ca>
        USBH_UsrLog("Product : N/A");
 800bd96:	482d      	ldr	r0, [pc, #180]	; (800be4c <USBH_HandleEnum+0x4e4>)
 800bd98:	f001 fa2a 	bl	800d1f0 <iprintf>
 800bd9c:	200a      	movs	r0, #10
 800bd9e:	f001 fa39 	bl	800d214 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2207      	movs	r2, #7
 800bda6:	705a      	strb	r2, [r3, #1]
      break;
 800bda8:	e043      	b.n	800be32 <USBH_HandleEnum+0x4ca>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 3436 	ldrb.w	r3, [r3, #1078]	; 0x436
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d027      	beq.n	800be04 <USBH_HandleEnum+0x49c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 1436 	ldrb.w	r1, [r3, #1078]	; 0x436
                                        phost->device.Data, 0xFFU);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f503 7207 	add.w	r2, r3, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bdc0:	23ff      	movs	r3, #255	; 0xff
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 f94a 	bl	800c05c <USBH_Get_StringDesc>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bdcc:	7bbb      	ldrb	r3, [r7, #14]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d10c      	bne.n	800bdec <USBH_HandleEnum+0x484>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800bdd8:	4619      	mov	r1, r3
 800bdda:	481d      	ldr	r0, [pc, #116]	; (800be50 <USBH_HandleEnum+0x4e8>)
 800bddc:	f001 fa08 	bl	800d1f0 <iprintf>
 800bde0:	200a      	movs	r0, #10
 800bde2:	f001 fa17 	bl	800d214 <putchar>
          Status = USBH_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bdea:	e024      	b.n	800be36 <USBH_HandleEnum+0x4ce>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bdec:	7bbb      	ldrb	r3, [r7, #14]
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	d121      	bne.n	800be36 <USBH_HandleEnum+0x4ce>
          USBH_UsrLog("Serial Number : N/A");
 800bdf2:	4818      	ldr	r0, [pc, #96]	; (800be54 <USBH_HandleEnum+0x4ec>)
 800bdf4:	f001 f9fc 	bl	800d1f0 <iprintf>
 800bdf8:	200a      	movs	r0, #10
 800bdfa:	f001 fa0b 	bl	800d214 <putchar>
          Status = USBH_OK;
 800bdfe:	2300      	movs	r3, #0
 800be00:	73fb      	strb	r3, [r7, #15]
      break;
 800be02:	e018      	b.n	800be36 <USBH_HandleEnum+0x4ce>
        USBH_UsrLog("Serial Number : N/A");
 800be04:	4813      	ldr	r0, [pc, #76]	; (800be54 <USBH_HandleEnum+0x4ec>)
 800be06:	f001 f9f3 	bl	800d1f0 <iprintf>
 800be0a:	200a      	movs	r0, #10
 800be0c:	f001 fa02 	bl	800d214 <putchar>
        Status = USBH_OK;
 800be10:	2300      	movs	r3, #0
 800be12:	73fb      	strb	r3, [r7, #15]
      break;
 800be14:	e00f      	b.n	800be36 <USBH_HandleEnum+0x4ce>

    default:
      break;
 800be16:	bf00      	nop
 800be18:	e00e      	b.n	800be38 <USBH_HandleEnum+0x4d0>
      break;
 800be1a:	bf00      	nop
 800be1c:	e00c      	b.n	800be38 <USBH_HandleEnum+0x4d0>
      break;
 800be1e:	bf00      	nop
 800be20:	e00a      	b.n	800be38 <USBH_HandleEnum+0x4d0>
      break;
 800be22:	bf00      	nop
 800be24:	e008      	b.n	800be38 <USBH_HandleEnum+0x4d0>
      break;
 800be26:	bf00      	nop
 800be28:	e006      	b.n	800be38 <USBH_HandleEnum+0x4d0>
      break;
 800be2a:	bf00      	nop
 800be2c:	e004      	b.n	800be38 <USBH_HandleEnum+0x4d0>
      break;
 800be2e:	bf00      	nop
 800be30:	e002      	b.n	800be38 <USBH_HandleEnum+0x4d0>
      break;
 800be32:	bf00      	nop
 800be34:	e000      	b.n	800be38 <USBH_HandleEnum+0x4d0>
      break;
 800be36:	bf00      	nop
  }
  return Status;
 800be38:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	0800e6f4 	.word	0x0800e6f4
 800be48:	0800e708 	.word	0x0800e708
 800be4c:	0800e718 	.word	0x0800e718
 800be50:	0800e728 	.word	0x0800e728
 800be54:	0800e73c 	.word	0x0800e73c

0800be58 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	683a      	ldr	r2, [r7, #0]
 800be66:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
}
 800be6a:	bf00      	nop
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b082      	sub	sp, #8
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800be84:	1c5a      	adds	r2, r3, #1
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
  USBH_HandleSof(phost);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 f804 	bl	800be9a <USBH_HandleSof>
}
 800be92:	bf00      	nop
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b082      	sub	sp, #8
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b0b      	cmp	r3, #11
 800beaa:	d10a      	bne.n	800bec2 <USBH_HandleSof+0x28>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d005      	beq.n	800bec2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800bebc:	699b      	ldr	r3, [r3, #24]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	4798      	blx	r3
  }
}
 800bec2:	bf00      	nop
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800beca:	b480      	push	{r7}
 800becc:	b083      	sub	sp, #12
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800beda:	bf00      	nop
}
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr

0800bee6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bee6:	b480      	push	{r7}
 800bee8:	b083      	sub	sp, #12
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423

  return;
 800bef6:	bf00      	nop
}
 800bef8:	370c      	adds	r7, #12
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bf02:	b480      	push	{r7}
 800bf04:	b083      	sub	sp, #12
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
  phost->device.is_connected = 0U;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  phost->device.PortEnabled = 0U;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7f5 f9d4 	bl	80012fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	791b      	ldrb	r3, [r3, #4]
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 ff4c 	bl	800cdfa <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	795b      	ldrb	r3, [r3, #5]
 800bf66:	4619      	mov	r1, r3
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 ff46 	bl	800cdfa <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b086      	sub	sp, #24
 800bf7c:	af02      	add	r7, sp, #8
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	460b      	mov	r3, r1
 800bf82:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800bf84:	887b      	ldrh	r3, [r7, #2]
 800bf86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf8a:	d90a      	bls.n	800bfa2 <USBH_Get_DevDesc+0x2a>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 800bf8c:	4815      	ldr	r0, [pc, #84]	; (800bfe4 <USBH_Get_DevDesc+0x6c>)
 800bf8e:	f001 f92f 	bl	800d1f0 <iprintf>
 800bf92:	4815      	ldr	r0, [pc, #84]	; (800bfe8 <USBH_Get_DevDesc+0x70>)
 800bf94:	f001 f92c 	bl	800d1f0 <iprintf>
 800bf98:	200a      	movs	r0, #10
 800bf9a:	f001 f93b 	bl	800d214 <putchar>
    return USBH_NOT_SUPPORTED;
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	e01b      	b.n	800bfda <USBH_Get_DevDesc+0x62>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f503 7207 	add.w	r2, r3, #540	; 0x21c
  status = USBH_GetDescriptor(phost,
 800bfa8:	887b      	ldrh	r3, [r7, #2]
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	4613      	mov	r3, r2
 800bfae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 f893 	bl	800c0e0 <USBH_GetDescriptor>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800bfbe:	7bfb      	ldrb	r3, [r7, #15]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d109      	bne.n	800bfd8 <USBH_Get_DevDesc+0x60>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800bfca:	887a      	ldrh	r2, [r7, #2]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 f94a 	bl	800c268 <USBH_ParseDevDesc>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	0800e750 	.word	0x0800e750
 800bfe8:	0800e758 	.word	0x0800e758

0800bfec <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af02      	add	r7, sp, #8
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	460b      	mov	r3, r1
 800bff6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	331c      	adds	r3, #28
 800bffc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800bffe:	887b      	ldrh	r3, [r7, #2]
 800c000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c004:	d90a      	bls.n	800c01c <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 800c006:	4813      	ldr	r0, [pc, #76]	; (800c054 <USBH_Get_CfgDesc+0x68>)
 800c008:	f001 f8f2 	bl	800d1f0 <iprintf>
 800c00c:	4812      	ldr	r0, [pc, #72]	; (800c058 <USBH_Get_CfgDesc+0x6c>)
 800c00e:	f001 f8ef 	bl	800d1f0 <iprintf>
 800c012:	200a      	movs	r0, #10
 800c014:	f001 f8fe 	bl	800d214 <putchar>
    return USBH_NOT_SUPPORTED;
 800c018:	2303      	movs	r3, #3
 800c01a:	e016      	b.n	800c04a <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c01c:	887b      	ldrh	r3, [r7, #2]
 800c01e:	9300      	str	r3, [sp, #0]
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c026:	2100      	movs	r1, #0
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 f859 	bl	800c0e0 <USBH_GetDescriptor>
 800c02e:	4603      	mov	r3, r0
 800c030:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c032:	7bfb      	ldrb	r3, [r7, #15]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d107      	bne.n	800c048 <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c038:	887b      	ldrh	r3, [r7, #2]
 800c03a:	461a      	mov	r2, r3
 800c03c:	68b9      	ldr	r1, [r7, #8]
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f9c6 	bl	800c3d0 <USBH_ParseCfgDesc>
 800c044:	4603      	mov	r3, r0
 800c046:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c048:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	0800e750 	.word	0x0800e750
 800c058:	0800e79c 	.word	0x0800e79c

0800c05c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af02      	add	r7, sp, #8
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	607a      	str	r2, [r7, #4]
 800c066:	461a      	mov	r2, r3
 800c068:	460b      	mov	r3, r1
 800c06a:	72fb      	strb	r3, [r7, #11]
 800c06c:	4613      	mov	r3, r2
 800c06e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800c070:	893b      	ldrh	r3, [r7, #8]
 800c072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c076:	d802      	bhi.n	800c07e <USBH_Get_StringDesc+0x22>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10a      	bne.n	800c094 <USBH_Get_StringDesc+0x38>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 800c07e:	4816      	ldr	r0, [pc, #88]	; (800c0d8 <USBH_Get_StringDesc+0x7c>)
 800c080:	f001 f8b6 	bl	800d1f0 <iprintf>
 800c084:	4815      	ldr	r0, [pc, #84]	; (800c0dc <USBH_Get_StringDesc+0x80>)
 800c086:	f001 f8b3 	bl	800d1f0 <iprintf>
 800c08a:	200a      	movs	r0, #10
 800c08c:	f001 f8c2 	bl	800d214 <putchar>
    return USBH_NOT_SUPPORTED;
 800c090:	2303      	movs	r3, #3
 800c092:	e01c      	b.n	800c0ce <USBH_Get_StringDesc+0x72>
  }

  status = USBH_GetDescriptor(phost,
 800c094:	7afb      	ldrb	r3, [r7, #11]
 800c096:	b29b      	uxth	r3, r3
 800c098:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c09c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f503 7107 	add.w	r1, r3, #540	; 0x21c
  status = USBH_GetDescriptor(phost,
 800c0a4:	893b      	ldrh	r3, [r7, #8]
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f000 f817 	bl	800c0e0 <USBH_GetDescriptor>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d107      	bne.n	800c0cc <USBH_Get_StringDesc+0x70>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800c0c2:	893a      	ldrh	r2, [r7, #8]
 800c0c4:	6879      	ldr	r1, [r7, #4]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 fb98 	bl	800c7fc <USBH_ParseStringDesc>
  }

  return status;
 800c0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3718      	adds	r7, #24
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	0800e750 	.word	0x0800e750
 800c0dc:	0800e7e8 	.word	0x0800e7e8

0800c0e0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	607b      	str	r3, [r7, #4]
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	72fb      	strb	r3, [r7, #11]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	789b      	ldrb	r3, [r3, #2]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d11c      	bne.n	800c134 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c0fa:	7afb      	ldrb	r3, [r7, #11]
 800c0fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c100:	b2da      	uxtb	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2206      	movs	r2, #6
 800c10a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	893a      	ldrh	r2, [r7, #8]
 800c110:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c112:	893b      	ldrh	r3, [r7, #8]
 800c114:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c11c:	d104      	bne.n	800c128 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f240 4209 	movw	r2, #1033	; 0x409
 800c124:	829a      	strh	r2, [r3, #20]
 800c126:	e002      	b.n	800c12e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2200      	movs	r2, #0
 800c12c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	8b3a      	ldrh	r2, [r7, #24]
 800c132:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c134:	8b3b      	ldrh	r3, [r7, #24]
 800c136:	461a      	mov	r2, r3
 800c138:	6879      	ldr	r1, [r7, #4]
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f000 fbac 	bl	800c898 <USBH_CtlReq>
 800c140:	4603      	mov	r3, r0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b082      	sub	sp, #8
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
 800c152:	460b      	mov	r3, r1
 800c154:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	789b      	ldrb	r3, [r3, #2]
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d10f      	bne.n	800c17e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2205      	movs	r2, #5
 800c168:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c16a:	78fb      	ldrb	r3, [r7, #3]
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c17e:	2200      	movs	r2, #0
 800c180:	2100      	movs	r1, #0
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fb88 	bl	800c898 <USBH_CtlReq>
 800c188:	4603      	mov	r3, r0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b082      	sub	sp, #8
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	460b      	mov	r3, r1
 800c19c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	789b      	ldrb	r3, [r3, #2]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d10e      	bne.n	800c1c4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2209      	movs	r2, #9
 800c1b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	887a      	ldrh	r2, [r7, #2]
 800c1b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 fb65 	bl	800c898 <USBH_CtlReq>
 800c1ce:	4603      	mov	r3, r0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	789b      	ldrb	r3, [r3, #2]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d10f      	bne.n	800c20c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2203      	movs	r2, #3
 800c1f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c1f8:	78fb      	ldrb	r3, [r7, #3]
 800c1fa:	b29a      	uxth	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c20c:	2200      	movs	r2, #0
 800c20e:	2100      	movs	r1, #0
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fb41 	bl	800c898 <USBH_CtlReq>
 800c216:	4603      	mov	r3, r0
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	460b      	mov	r3, r1
 800c22a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	789b      	ldrb	r3, [r3, #2]
 800c230:	2b01      	cmp	r3, #1
 800c232:	d10f      	bne.n	800c254 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2202      	movs	r2, #2
 800c238:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2201      	movs	r2, #1
 800c23e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c246:	78fb      	ldrb	r3, [r7, #3]
 800c248:	b29a      	uxth	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c254:	2200      	movs	r2, #0
 800c256:	2100      	movs	r1, #0
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 fb1d 	bl	800c898 <USBH_CtlReq>
 800c25e:	4603      	mov	r3, r0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c268:	b480      	push	{r7}
 800c26a:	b087      	sub	sp, #28
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	4613      	mov	r3, r2
 800c274:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f203 4326 	addw	r3, r3, #1062	; 0x426
 800c27c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800c27e:	2300      	movs	r3, #0
 800c280:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d101      	bne.n	800c28c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800c288:	2302      	movs	r3, #2
 800c28a:	e098      	b.n	800c3be <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	781a      	ldrb	r2, [r3, #0]
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	785a      	ldrb	r2, [r3, #1]
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	3302      	adds	r3, #2
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	3303      	adds	r3, #3
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	021b      	lsls	r3, r3, #8
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	791a      	ldrb	r2, [r3, #4]
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	795a      	ldrb	r2, [r3, #5]
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	799a      	ldrb	r2, [r3, #6]
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	79da      	ldrb	r2, [r3, #7]
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d004      	beq.n	800c2ec <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d11b      	bne.n	800c324 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	79db      	ldrb	r3, [r3, #7]
 800c2f0:	2b20      	cmp	r3, #32
 800c2f2:	dc0f      	bgt.n	800c314 <USBH_ParseDevDesc+0xac>
 800c2f4:	2b08      	cmp	r3, #8
 800c2f6:	db0f      	blt.n	800c318 <USBH_ParseDevDesc+0xb0>
 800c2f8:	3b08      	subs	r3, #8
 800c2fa:	4a34      	ldr	r2, [pc, #208]	; (800c3cc <USBH_ParseDevDesc+0x164>)
 800c2fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c300:	f003 0301 	and.w	r3, r3, #1
 800c304:	2b00      	cmp	r3, #0
 800c306:	bf14      	ite	ne
 800c308:	2301      	movne	r3, #1
 800c30a:	2300      	moveq	r3, #0
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d106      	bne.n	800c320 <USBH_ParseDevDesc+0xb8>
 800c312:	e001      	b.n	800c318 <USBH_ParseDevDesc+0xb0>
 800c314:	2b40      	cmp	r3, #64	; 0x40
 800c316:	d003      	beq.n	800c320 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	2208      	movs	r2, #8
 800c31c:	71da      	strb	r2, [r3, #7]
        break;
 800c31e:	e000      	b.n	800c322 <USBH_ParseDevDesc+0xba>
        break;
 800c320:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800c322:	e00e      	b.n	800c342 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d107      	bne.n	800c33e <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	79db      	ldrb	r3, [r3, #7]
 800c332:	2b08      	cmp	r3, #8
 800c334:	d005      	beq.n	800c342 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	2208      	movs	r2, #8
 800c33a:	71da      	strb	r2, [r3, #7]
 800c33c:	e001      	b.n	800c342 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c33e:	2303      	movs	r3, #3
 800c340:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800c342:	88fb      	ldrh	r3, [r7, #6]
 800c344:	2b08      	cmp	r3, #8
 800c346:	d939      	bls.n	800c3bc <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	3308      	adds	r3, #8
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	b29a      	uxth	r2, r3
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	3309      	adds	r3, #9
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	b29b      	uxth	r3, r3
 800c358:	021b      	lsls	r3, r3, #8
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	4313      	orrs	r3, r2
 800c35e:	b29a      	uxth	r2, r3
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	330a      	adds	r3, #10
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	b29a      	uxth	r2, r3
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	330b      	adds	r3, #11
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	b29b      	uxth	r3, r3
 800c374:	021b      	lsls	r3, r3, #8
 800c376:	b29b      	uxth	r3, r3
 800c378:	4313      	orrs	r3, r2
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	330c      	adds	r3, #12
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	b29a      	uxth	r2, r3
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	330d      	adds	r3, #13
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	b29b      	uxth	r3, r3
 800c390:	021b      	lsls	r3, r3, #8
 800c392:	b29b      	uxth	r3, r3
 800c394:	4313      	orrs	r3, r2
 800c396:	b29a      	uxth	r2, r3
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	7b9a      	ldrb	r2, [r3, #14]
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	7bda      	ldrb	r2, [r3, #15]
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	7c1a      	ldrb	r2, [r3, #16]
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	7c5a      	ldrb	r2, [r3, #17]
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800c3bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	371c      	adds	r7, #28
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	01000101 	.word	0x01000101

0800c3d0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b08c      	sub	sp, #48	; 0x30
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	4613      	mov	r3, r2
 800c3dc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800c3e4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800c3fe:	2302      	movs	r3, #2
 800c400:	e0db      	b.n	800c5ba <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	781a      	ldrb	r2, [r3, #0]
 800c40a:	6a3b      	ldr	r3, [r7, #32]
 800c40c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	785a      	ldrb	r2, [r3, #1]
 800c412:	6a3b      	ldr	r3, [r7, #32]
 800c414:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	3302      	adds	r3, #2
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	b29a      	uxth	r2, r3
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	3303      	adds	r3, #3
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	b29b      	uxth	r3, r3
 800c426:	021b      	lsls	r3, r3, #8
 800c428:	b29b      	uxth	r3, r3
 800c42a:	4313      	orrs	r3, r2
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c432:	bf28      	it	cs
 800c434:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800c438:	b29a      	uxth	r2, r3
 800c43a:	6a3b      	ldr	r3, [r7, #32]
 800c43c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	791a      	ldrb	r2, [r3, #4]
 800c442:	6a3b      	ldr	r3, [r7, #32]
 800c444:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	795a      	ldrb	r2, [r3, #5]
 800c44a:	6a3b      	ldr	r3, [r7, #32]
 800c44c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	799a      	ldrb	r2, [r3, #6]
 800c452:	6a3b      	ldr	r3, [r7, #32]
 800c454:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	79da      	ldrb	r2, [r3, #7]
 800c45a:	6a3b      	ldr	r3, [r7, #32]
 800c45c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	7a1a      	ldrb	r2, [r3, #8]
 800c462:	6a3b      	ldr	r3, [r7, #32]
 800c464:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800c466:	6a3b      	ldr	r3, [r7, #32]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	2b09      	cmp	r3, #9
 800c46c:	d002      	beq.n	800c474 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c46e:	6a3b      	ldr	r3, [r7, #32]
 800c470:	2209      	movs	r2, #9
 800c472:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c474:	88fb      	ldrh	r3, [r7, #6]
 800c476:	2b09      	cmp	r3, #9
 800c478:	f240 809d 	bls.w	800c5b6 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800c47c:	2309      	movs	r3, #9
 800c47e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c480:	2300      	movs	r3, #0
 800c482:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c484:	e081      	b.n	800c58a <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c486:	f107 0316 	add.w	r3, r7, #22
 800c48a:	4619      	mov	r1, r3
 800c48c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c48e:	f000 f9e8 	bl	800c862 <USBH_GetNextDesc>
 800c492:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	785b      	ldrb	r3, [r3, #1]
 800c498:	2b04      	cmp	r3, #4
 800c49a:	d176      	bne.n	800c58a <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	2b09      	cmp	r3, #9
 800c4a2:	d002      	beq.n	800c4aa <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a6:	2209      	movs	r2, #9
 800c4a8:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c4aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4ae:	221a      	movs	r2, #26
 800c4b0:	fb02 f303 	mul.w	r3, r2, r3
 800c4b4:	3308      	adds	r3, #8
 800c4b6:	6a3a      	ldr	r2, [r7, #32]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	3302      	adds	r3, #2
 800c4bc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c4be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4c0:	69f8      	ldr	r0, [r7, #28]
 800c4c2:	f000 f87e 	bl	800c5c2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c4d0:	e043      	b.n	800c55a <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c4d2:	f107 0316 	add.w	r3, r7, #22
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4da:	f000 f9c2 	bl	800c862 <USBH_GetNextDesc>
 800c4de:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e2:	785b      	ldrb	r3, [r3, #1]
 800c4e4:	2b05      	cmp	r3, #5
 800c4e6:	d138      	bne.n	800c55a <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	795b      	ldrb	r3, [r3, #5]
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d113      	bne.n	800c518 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d003      	beq.n	800c500 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	799b      	ldrb	r3, [r3, #6]
 800c4fc:	2b03      	cmp	r3, #3
 800c4fe:	d10b      	bne.n	800c518 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	79db      	ldrb	r3, [r3, #7]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10b      	bne.n	800c520 <USBH_ParseCfgDesc+0x150>
 800c508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b09      	cmp	r3, #9
 800c50e:	d007      	beq.n	800c520 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800c510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c512:	2209      	movs	r2, #9
 800c514:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c516:	e003      	b.n	800c520 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51a:	2207      	movs	r2, #7
 800c51c:	701a      	strb	r2, [r3, #0]
 800c51e:	e000      	b.n	800c522 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c520:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c526:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c52a:	3201      	adds	r2, #1
 800c52c:	00d2      	lsls	r2, r2, #3
 800c52e:	211a      	movs	r1, #26
 800c530:	fb01 f303 	mul.w	r3, r1, r3
 800c534:	4413      	add	r3, r2
 800c536:	3308      	adds	r3, #8
 800c538:	6a3a      	ldr	r2, [r7, #32]
 800c53a:	4413      	add	r3, r2
 800c53c:	3304      	adds	r3, #4
 800c53e:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c542:	69b9      	ldr	r1, [r7, #24]
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f000 f870 	bl	800c62a <USBH_ParseEPDesc>
 800c54a:	4603      	mov	r3, r0
 800c54c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c550:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c554:	3301      	adds	r3, #1
 800c556:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	791b      	ldrb	r3, [r3, #4]
 800c55e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c562:	429a      	cmp	r2, r3
 800c564:	d204      	bcs.n	800c570 <USBH_ParseCfgDesc+0x1a0>
 800c566:	6a3b      	ldr	r3, [r7, #32]
 800c568:	885a      	ldrh	r2, [r3, #2]
 800c56a:	8afb      	ldrh	r3, [r7, #22]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d8b0      	bhi.n	800c4d2 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	791b      	ldrb	r3, [r3, #4]
 800c574:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c578:	429a      	cmp	r2, r3
 800c57a:	d201      	bcs.n	800c580 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800c57c:	2303      	movs	r3, #3
 800c57e:	e01c      	b.n	800c5ba <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800c580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c584:	3301      	adds	r3, #1
 800c586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c58a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d805      	bhi.n	800c59e <USBH_ParseCfgDesc+0x1ce>
 800c592:	6a3b      	ldr	r3, [r7, #32]
 800c594:	885a      	ldrh	r2, [r3, #2]
 800c596:	8afb      	ldrh	r3, [r7, #22]
 800c598:	429a      	cmp	r2, r3
 800c59a:	f63f af74 	bhi.w	800c486 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c59e:	6a3b      	ldr	r3, [r7, #32]
 800c5a0:	791b      	ldrb	r3, [r3, #4]
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	bf28      	it	cs
 800c5a6:	2302      	movcs	r3, #2
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d201      	bcs.n	800c5b6 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e001      	b.n	800c5ba <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800c5b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3730      	adds	r7, #48	; 0x30
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c5c2:	b480      	push	{r7}
 800c5c4:	b083      	sub	sp, #12
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
 800c5ca:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	781a      	ldrb	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	785a      	ldrb	r2, [r3, #1]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	789a      	ldrb	r2, [r3, #2]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	78da      	ldrb	r2, [r3, #3]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	3304      	adds	r3, #4
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	bf28      	it	cs
 800c5f6:	2302      	movcs	r3, #2
 800c5f8:	b2da      	uxtb	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	795a      	ldrb	r2, [r3, #5]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	799a      	ldrb	r2, [r3, #6]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	79da      	ldrb	r2, [r3, #7]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	7a1a      	ldrb	r2, [r3, #8]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	721a      	strb	r2, [r3, #8]
}
 800c61e:	bf00      	nop
 800c620:	370c      	adds	r7, #12
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr

0800c62a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c62a:	b480      	push	{r7}
 800c62c:	b087      	sub	sp, #28
 800c62e:	af00      	add	r7, sp, #0
 800c630:	60f8      	str	r0, [r7, #12]
 800c632:	60b9      	str	r1, [r7, #8]
 800c634:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c636:	2300      	movs	r3, #0
 800c638:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	781a      	ldrb	r2, [r3, #0]
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	785a      	ldrb	r2, [r3, #1]
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	789a      	ldrb	r2, [r3, #2]
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	78da      	ldrb	r2, [r3, #3]
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	3304      	adds	r3, #4
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	b29a      	uxth	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	3305      	adds	r3, #5
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	b29b      	uxth	r3, r3
 800c66a:	021b      	lsls	r3, r3, #8
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	4313      	orrs	r3, r2
 800c670:	b29a      	uxth	r2, r3
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	799a      	ldrb	r2, [r3, #6]
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	889b      	ldrh	r3, [r3, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d009      	beq.n	800c69a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c68a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c68e:	d804      	bhi.n	800c69a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c698:	d901      	bls.n	800c69e <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800c69a:	2303      	movs	r3, #3
 800c69c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d136      	bne.n	800c716 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	78db      	ldrb	r3, [r3, #3]
 800c6ac:	f003 0303 	and.w	r3, r3, #3
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	d108      	bne.n	800c6c6 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	889b      	ldrh	r3, [r3, #4]
 800c6b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6bc:	f240 8097 	bls.w	800c7ee <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c6c0:	2303      	movs	r3, #3
 800c6c2:	75fb      	strb	r3, [r7, #23]
 800c6c4:	e093      	b.n	800c7ee <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	78db      	ldrb	r3, [r3, #3]
 800c6ca:	f003 0303 	and.w	r3, r3, #3
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d107      	bne.n	800c6e2 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	889b      	ldrh	r3, [r3, #4]
 800c6d6:	2b40      	cmp	r3, #64	; 0x40
 800c6d8:	f240 8089 	bls.w	800c7ee <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c6dc:	2303      	movs	r3, #3
 800c6de:	75fb      	strb	r3, [r7, #23]
 800c6e0:	e085      	b.n	800c7ee <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	78db      	ldrb	r3, [r3, #3]
 800c6e6:	f003 0303 	and.w	r3, r3, #3
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d005      	beq.n	800c6fa <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	78db      	ldrb	r3, [r3, #3]
 800c6f2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c6f6:	2b03      	cmp	r3, #3
 800c6f8:	d10a      	bne.n	800c710 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	799b      	ldrb	r3, [r3, #6]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d003      	beq.n	800c70a <USBH_ParseEPDesc+0xe0>
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	799b      	ldrb	r3, [r3, #6]
 800c706:	2b10      	cmp	r3, #16
 800c708:	d970      	bls.n	800c7ec <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c70a:	2303      	movs	r3, #3
 800c70c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c70e:	e06d      	b.n	800c7ec <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c710:	2303      	movs	r3, #3
 800c712:	75fb      	strb	r3, [r7, #23]
 800c714:	e06b      	b.n	800c7ee <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d13c      	bne.n	800c79a <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	78db      	ldrb	r3, [r3, #3]
 800c724:	f003 0303 	and.w	r3, r3, #3
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d005      	beq.n	800c738 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	78db      	ldrb	r3, [r3, #3]
 800c730:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c734:	2b00      	cmp	r3, #0
 800c736:	d106      	bne.n	800c746 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	889b      	ldrh	r3, [r3, #4]
 800c73c:	2b40      	cmp	r3, #64	; 0x40
 800c73e:	d956      	bls.n	800c7ee <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c740:	2303      	movs	r3, #3
 800c742:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c744:	e053      	b.n	800c7ee <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	78db      	ldrb	r3, [r3, #3]
 800c74a:	f003 0303 	and.w	r3, r3, #3
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d10e      	bne.n	800c770 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	799b      	ldrb	r3, [r3, #6]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d007      	beq.n	800c76a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c75e:	2b10      	cmp	r3, #16
 800c760:	d803      	bhi.n	800c76a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c766:	2b40      	cmp	r3, #64	; 0x40
 800c768:	d941      	bls.n	800c7ee <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c76a:	2303      	movs	r3, #3
 800c76c:	75fb      	strb	r3, [r7, #23]
 800c76e:	e03e      	b.n	800c7ee <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	78db      	ldrb	r3, [r3, #3]
 800c774:	f003 0303 	and.w	r3, r3, #3
 800c778:	2b03      	cmp	r3, #3
 800c77a:	d10b      	bne.n	800c794 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	799b      	ldrb	r3, [r3, #6]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d004      	beq.n	800c78e <USBH_ParseEPDesc+0x164>
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	889b      	ldrh	r3, [r3, #4]
 800c788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c78c:	d32f      	bcc.n	800c7ee <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c78e:	2303      	movs	r3, #3
 800c790:	75fb      	strb	r3, [r7, #23]
 800c792:	e02c      	b.n	800c7ee <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c794:	2303      	movs	r3, #3
 800c796:	75fb      	strb	r3, [r7, #23]
 800c798:	e029      	b.n	800c7ee <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	d120      	bne.n	800c7e6 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	78db      	ldrb	r3, [r3, #3]
 800c7a8:	f003 0303 	and.w	r3, r3, #3
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d106      	bne.n	800c7be <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	889b      	ldrh	r3, [r3, #4]
 800c7b4:	2b08      	cmp	r3, #8
 800c7b6:	d01a      	beq.n	800c7ee <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c7b8:	2303      	movs	r3, #3
 800c7ba:	75fb      	strb	r3, [r7, #23]
 800c7bc:	e017      	b.n	800c7ee <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	78db      	ldrb	r3, [r3, #3]
 800c7c2:	f003 0303 	and.w	r3, r3, #3
 800c7c6:	2b03      	cmp	r3, #3
 800c7c8:	d10a      	bne.n	800c7e0 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	799b      	ldrb	r3, [r3, #6]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d003      	beq.n	800c7da <USBH_ParseEPDesc+0x1b0>
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	889b      	ldrh	r3, [r3, #4]
 800c7d6:	2b08      	cmp	r3, #8
 800c7d8:	d909      	bls.n	800c7ee <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c7da:	2303      	movs	r3, #3
 800c7dc:	75fb      	strb	r3, [r7, #23]
 800c7de:	e006      	b.n	800c7ee <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	75fb      	strb	r3, [r7, #23]
 800c7e4:	e003      	b.n	800c7ee <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c7e6:	2303      	movs	r3, #3
 800c7e8:	75fb      	strb	r3, [r7, #23]
 800c7ea:	e000      	b.n	800c7ee <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c7ec:	bf00      	nop
  }

  return status;
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	371c      	adds	r7, #28
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b087      	sub	sp, #28
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	4613      	mov	r3, r2
 800c808:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	3301      	adds	r3, #1
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b03      	cmp	r3, #3
 800c812:	d120      	bne.n	800c856 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	1e9a      	subs	r2, r3, #2
 800c81a:	88fb      	ldrh	r3, [r7, #6]
 800c81c:	4293      	cmp	r3, r2
 800c81e:	bf28      	it	cs
 800c820:	4613      	movcs	r3, r2
 800c822:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	3302      	adds	r3, #2
 800c828:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c82a:	2300      	movs	r3, #0
 800c82c:	82fb      	strh	r3, [r7, #22]
 800c82e:	e00b      	b.n	800c848 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c830:	8afb      	ldrh	r3, [r7, #22]
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	4413      	add	r3, r2
 800c836:	781a      	ldrb	r2, [r3, #0]
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	3301      	adds	r3, #1
 800c840:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c842:	8afb      	ldrh	r3, [r7, #22]
 800c844:	3302      	adds	r3, #2
 800c846:	82fb      	strh	r3, [r7, #22]
 800c848:	8afa      	ldrh	r2, [r7, #22]
 800c84a:	8abb      	ldrh	r3, [r7, #20]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d3ef      	bcc.n	800c830 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	2200      	movs	r2, #0
 800c854:	701a      	strb	r2, [r3, #0]
  }
}
 800c856:	bf00      	nop
 800c858:	371c      	adds	r7, #28
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr

0800c862 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c862:	b480      	push	{r7}
 800c864:	b085      	sub	sp, #20
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	881a      	ldrh	r2, [r3, #0]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	b29b      	uxth	r3, r3
 800c876:	4413      	add	r3, r2
 800c878:	b29a      	uxth	r2, r3
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	4413      	add	r3, r2
 800c888:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c88a:	68fb      	ldr	r3, [r7, #12]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3714      	adds	r7, #20
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	789b      	ldrb	r3, [r3, #2]
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d002      	beq.n	800c8b8 <USBH_CtlReq+0x20>
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	d00f      	beq.n	800c8d6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c8b6:	e027      	b.n	800c908 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	88fa      	ldrh	r2, [r7, #6]
 800c8c2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2202      	movs	r2, #2
 800c8ce:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	75fb      	strb	r3, [r7, #23]
      break;
 800c8d4:	e018      	b.n	800c908 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c8d6:	68f8      	ldr	r0, [r7, #12]
 800c8d8:	f000 f81c 	bl	800c914 <USBH_HandleControl>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c8e0:	7dfb      	ldrb	r3, [r7, #23]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d002      	beq.n	800c8ec <USBH_CtlReq+0x54>
 800c8e6:	7dfb      	ldrb	r3, [r7, #23]
 800c8e8:	2b03      	cmp	r3, #3
 800c8ea:	d106      	bne.n	800c8fa <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	761a      	strb	r2, [r3, #24]
      break;
 800c8f8:	e005      	b.n	800c906 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c8fa:	7dfb      	ldrb	r3, [r7, #23]
 800c8fc:	2b02      	cmp	r3, #2
 800c8fe:	d102      	bne.n	800c906 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2201      	movs	r2, #1
 800c904:	709a      	strb	r2, [r3, #2]
      break;
 800c906:	bf00      	nop
  }
  return status;
 800c908:	7dfb      	ldrb	r3, [r7, #23]
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3718      	adds	r7, #24
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
	...

0800c914 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b086      	sub	sp, #24
 800c918:	af02      	add	r7, sp, #8
 800c91a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c91c:	2301      	movs	r3, #1
 800c91e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c920:	2300      	movs	r3, #0
 800c922:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	7e1b      	ldrb	r3, [r3, #24]
 800c928:	3b01      	subs	r3, #1
 800c92a:	2b0a      	cmp	r3, #10
 800c92c:	f200 815f 	bhi.w	800cbee <USBH_HandleControl+0x2da>
 800c930:	a201      	add	r2, pc, #4	; (adr r2, 800c938 <USBH_HandleControl+0x24>)
 800c932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c936:	bf00      	nop
 800c938:	0800c965 	.word	0x0800c965
 800c93c:	0800c97f 	.word	0x0800c97f
 800c940:	0800c9e9 	.word	0x0800c9e9
 800c944:	0800ca0f 	.word	0x0800ca0f
 800c948:	0800ca47 	.word	0x0800ca47
 800c94c:	0800ca71 	.word	0x0800ca71
 800c950:	0800cac3 	.word	0x0800cac3
 800c954:	0800cae5 	.word	0x0800cae5
 800c958:	0800cb21 	.word	0x0800cb21
 800c95c:	0800cb47 	.word	0x0800cb47
 800c960:	0800cb85 	.word	0x0800cb85
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f103 0110 	add.w	r1, r3, #16
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	795b      	ldrb	r3, [r3, #5]
 800c96e:	461a      	mov	r2, r3
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 f951 	bl	800cc18 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2202      	movs	r2, #2
 800c97a:	761a      	strb	r2, [r3, #24]
      break;
 800c97c:	e142      	b.n	800cc04 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	795b      	ldrb	r3, [r3, #5]
 800c982:	4619      	mov	r1, r3
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f7f4 fd63 	bl	8001450 <USBH_LL_GetURBState>
 800c98a:	4603      	mov	r3, r0
 800c98c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c98e:	7bbb      	ldrb	r3, [r7, #14]
 800c990:	2b01      	cmp	r3, #1
 800c992:	d11e      	bne.n	800c9d2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	7c1b      	ldrb	r3, [r3, #16]
 800c998:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c99c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	8adb      	ldrh	r3, [r3, #22]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d00a      	beq.n	800c9bc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c9a6:	7b7b      	ldrb	r3, [r7, #13]
 800c9a8:	2b80      	cmp	r3, #128	; 0x80
 800c9aa:	d103      	bne.n	800c9b4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2203      	movs	r2, #3
 800c9b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c9b2:	e11e      	b.n	800cbf2 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2205      	movs	r2, #5
 800c9b8:	761a      	strb	r2, [r3, #24]
      break;
 800c9ba:	e11a      	b.n	800cbf2 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800c9bc:	7b7b      	ldrb	r3, [r7, #13]
 800c9be:	2b80      	cmp	r3, #128	; 0x80
 800c9c0:	d103      	bne.n	800c9ca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2209      	movs	r2, #9
 800c9c6:	761a      	strb	r2, [r3, #24]
      break;
 800c9c8:	e113      	b.n	800cbf2 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2207      	movs	r2, #7
 800c9ce:	761a      	strb	r2, [r3, #24]
      break;
 800c9d0:	e10f      	b.n	800cbf2 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c9d2:	7bbb      	ldrb	r3, [r7, #14]
 800c9d4:	2b04      	cmp	r3, #4
 800c9d6:	d003      	beq.n	800c9e0 <USBH_HandleControl+0xcc>
 800c9d8:	7bbb      	ldrb	r3, [r7, #14]
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	f040 8109 	bne.w	800cbf2 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	220b      	movs	r2, #11
 800c9e4:	761a      	strb	r2, [r3, #24]
      break;
 800c9e6:	e104      	b.n	800cbf2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6899      	ldr	r1, [r3, #8]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	899a      	ldrh	r2, [r3, #12]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	791b      	ldrb	r3, [r3, #4]
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 f948 	bl	800cc96 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2204      	movs	r2, #4
 800ca0a:	761a      	strb	r2, [r3, #24]
      break;
 800ca0c:	e0fa      	b.n	800cc04 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	791b      	ldrb	r3, [r3, #4]
 800ca12:	4619      	mov	r1, r3
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f7f4 fd1b 	bl	8001450 <USBH_LL_GetURBState>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ca1e:	7bbb      	ldrb	r3, [r7, #14]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d102      	bne.n	800ca2a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2209      	movs	r2, #9
 800ca28:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ca2a:	7bbb      	ldrb	r3, [r7, #14]
 800ca2c:	2b05      	cmp	r3, #5
 800ca2e:	d102      	bne.n	800ca36 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ca30:	2303      	movs	r3, #3
 800ca32:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ca34:	e0df      	b.n	800cbf6 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800ca36:	7bbb      	ldrb	r3, [r7, #14]
 800ca38:	2b04      	cmp	r3, #4
 800ca3a:	f040 80dc 	bne.w	800cbf6 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	220b      	movs	r2, #11
 800ca42:	761a      	strb	r2, [r3, #24]
      break;
 800ca44:	e0d7      	b.n	800cbf6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6899      	ldr	r1, [r3, #8]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	899a      	ldrh	r2, [r3, #12]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	795b      	ldrb	r3, [r3, #5]
 800ca52:	2001      	movs	r0, #1
 800ca54:	9000      	str	r0, [sp, #0]
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 f8f8 	bl	800cc4c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800ca62:	b29a      	uxth	r2, r3
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2206      	movs	r2, #6
 800ca6c:	761a      	strb	r2, [r3, #24]
      break;
 800ca6e:	e0c9      	b.n	800cc04 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	795b      	ldrb	r3, [r3, #5]
 800ca74:	4619      	mov	r1, r3
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f7f4 fcea 	bl	8001450 <USBH_LL_GetURBState>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ca80:	7bbb      	ldrb	r3, [r7, #14]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d103      	bne.n	800ca8e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2207      	movs	r2, #7
 800ca8a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ca8c:	e0b5      	b.n	800cbfa <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800ca8e:	7bbb      	ldrb	r3, [r7, #14]
 800ca90:	2b05      	cmp	r3, #5
 800ca92:	d105      	bne.n	800caa0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	220c      	movs	r2, #12
 800ca98:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ca9a:	2303      	movs	r3, #3
 800ca9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ca9e:	e0ac      	b.n	800cbfa <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800caa0:	7bbb      	ldrb	r3, [r7, #14]
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d103      	bne.n	800caae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2205      	movs	r2, #5
 800caaa:	761a      	strb	r2, [r3, #24]
      break;
 800caac:	e0a5      	b.n	800cbfa <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800caae:	7bbb      	ldrb	r3, [r7, #14]
 800cab0:	2b04      	cmp	r3, #4
 800cab2:	f040 80a2 	bne.w	800cbfa <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	220b      	movs	r2, #11
 800caba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cabc:	2302      	movs	r3, #2
 800cabe:	73fb      	strb	r3, [r7, #15]
      break;
 800cac0:	e09b      	b.n	800cbfa <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	791b      	ldrb	r3, [r3, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	2100      	movs	r1, #0
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 f8e3 	bl	800cc96 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2208      	movs	r2, #8
 800cae0:	761a      	strb	r2, [r3, #24]

      break;
 800cae2:	e08f      	b.n	800cc04 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	791b      	ldrb	r3, [r3, #4]
 800cae8:	4619      	mov	r1, r3
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7f4 fcb0 	bl	8001450 <USBH_LL_GetURBState>
 800caf0:	4603      	mov	r3, r0
 800caf2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800caf4:	7bbb      	ldrb	r3, [r7, #14]
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d105      	bne.n	800cb06 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	220d      	movs	r2, #13
 800cafe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cb00:	2300      	movs	r3, #0
 800cb02:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cb04:	e07b      	b.n	800cbfe <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800cb06:	7bbb      	ldrb	r3, [r7, #14]
 800cb08:	2b04      	cmp	r3, #4
 800cb0a:	d103      	bne.n	800cb14 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	220b      	movs	r2, #11
 800cb10:	761a      	strb	r2, [r3, #24]
      break;
 800cb12:	e074      	b.n	800cbfe <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800cb14:	7bbb      	ldrb	r3, [r7, #14]
 800cb16:	2b05      	cmp	r3, #5
 800cb18:	d171      	bne.n	800cbfe <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800cb1a:	2303      	movs	r3, #3
 800cb1c:	73fb      	strb	r3, [r7, #15]
      break;
 800cb1e:	e06e      	b.n	800cbfe <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	795b      	ldrb	r3, [r3, #5]
 800cb24:	2201      	movs	r2, #1
 800cb26:	9200      	str	r2, [sp, #0]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	2100      	movs	r1, #0
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 f88d 	bl	800cc4c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	220a      	movs	r2, #10
 800cb42:	761a      	strb	r2, [r3, #24]
      break;
 800cb44:	e05e      	b.n	800cc04 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	795b      	ldrb	r3, [r3, #5]
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7f4 fc7f 	bl	8001450 <USBH_LL_GetURBState>
 800cb52:	4603      	mov	r3, r0
 800cb54:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cb56:	7bbb      	ldrb	r3, [r7, #14]
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d105      	bne.n	800cb68 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	220d      	movs	r2, #13
 800cb64:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cb66:	e04c      	b.n	800cc02 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cb68:	7bbb      	ldrb	r3, [r7, #14]
 800cb6a:	2b02      	cmp	r3, #2
 800cb6c:	d103      	bne.n	800cb76 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2209      	movs	r2, #9
 800cb72:	761a      	strb	r2, [r3, #24]
      break;
 800cb74:	e045      	b.n	800cc02 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800cb76:	7bbb      	ldrb	r3, [r7, #14]
 800cb78:	2b04      	cmp	r3, #4
 800cb7a:	d142      	bne.n	800cc02 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	220b      	movs	r2, #11
 800cb80:	761a      	strb	r2, [r3, #24]
      break;
 800cb82:	e03e      	b.n	800cc02 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	7e5b      	ldrb	r3, [r3, #25]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	765a      	strb	r2, [r3, #25]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	7e5b      	ldrb	r3, [r3, #25]
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	d806      	bhi.n	800cba6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2201      	movs	r2, #1
 800cba2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cba4:	e02e      	b.n	800cc04 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800cbac:	2106      	movs	r1, #6
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800cbb8:	4815      	ldr	r0, [pc, #84]	; (800cc10 <USBH_HandleControl+0x2fc>)
 800cbba:	f000 fb19 	bl	800d1f0 <iprintf>
 800cbbe:	4815      	ldr	r0, [pc, #84]	; (800cc14 <USBH_HandleControl+0x300>)
 800cbc0:	f000 fb16 	bl	800d1f0 <iprintf>
 800cbc4:	200a      	movs	r0, #10
 800cbc6:	f000 fb25 	bl	800d214 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	795b      	ldrb	r3, [r3, #5]
 800cbce:	4619      	mov	r1, r3
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f912 	bl	800cdfa <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	791b      	ldrb	r3, [r3, #4]
 800cbda:	4619      	mov	r1, r3
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 f90c 	bl	800cdfa <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cbe8:	2302      	movs	r3, #2
 800cbea:	73fb      	strb	r3, [r7, #15]
      break;
 800cbec:	e00a      	b.n	800cc04 <USBH_HandleControl+0x2f0>

    default:
      break;
 800cbee:	bf00      	nop
 800cbf0:	e008      	b.n	800cc04 <USBH_HandleControl+0x2f0>
      break;
 800cbf2:	bf00      	nop
 800cbf4:	e006      	b.n	800cc04 <USBH_HandleControl+0x2f0>
      break;
 800cbf6:	bf00      	nop
 800cbf8:	e004      	b.n	800cc04 <USBH_HandleControl+0x2f0>
      break;
 800cbfa:	bf00      	nop
 800cbfc:	e002      	b.n	800cc04 <USBH_HandleControl+0x2f0>
      break;
 800cbfe:	bf00      	nop
 800cc00:	e000      	b.n	800cc04 <USBH_HandleControl+0x2f0>
      break;
 800cc02:	bf00      	nop
  }

  return status;
 800cc04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	0800e750 	.word	0x0800e750
 800cc14:	0800e82c 	.word	0x0800e82c

0800cc18 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b088      	sub	sp, #32
 800cc1c:	af04      	add	r7, sp, #16
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	4613      	mov	r3, r2
 800cc24:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc26:	79f9      	ldrb	r1, [r7, #7]
 800cc28:	2300      	movs	r3, #0
 800cc2a:	9303      	str	r3, [sp, #12]
 800cc2c:	2308      	movs	r3, #8
 800cc2e:	9302      	str	r3, [sp, #8]
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	9301      	str	r3, [sp, #4]
 800cc34:	2300      	movs	r3, #0
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	2300      	movs	r3, #0
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f7f4 fbe3 	bl	8001408 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3710      	adds	r7, #16
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b088      	sub	sp, #32
 800cc50:	af04      	add	r7, sp, #16
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	60b9      	str	r1, [r7, #8]
 800cc56:	4611      	mov	r1, r2
 800cc58:	461a      	mov	r2, r3
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	80fb      	strh	r3, [r7, #6]
 800cc5e:	4613      	mov	r3, r2
 800cc60:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d001      	beq.n	800cc70 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc70:	7979      	ldrb	r1, [r7, #5]
 800cc72:	7e3b      	ldrb	r3, [r7, #24]
 800cc74:	9303      	str	r3, [sp, #12]
 800cc76:	88fb      	ldrh	r3, [r7, #6]
 800cc78:	9302      	str	r3, [sp, #8]
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	9301      	str	r3, [sp, #4]
 800cc7e:	2301      	movs	r3, #1
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	2300      	movs	r3, #0
 800cc84:	2200      	movs	r2, #0
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f7f4 fbbe 	bl	8001408 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b088      	sub	sp, #32
 800cc9a:	af04      	add	r7, sp, #16
 800cc9c:	60f8      	str	r0, [r7, #12]
 800cc9e:	60b9      	str	r1, [r7, #8]
 800cca0:	4611      	mov	r1, r2
 800cca2:	461a      	mov	r2, r3
 800cca4:	460b      	mov	r3, r1
 800cca6:	80fb      	strh	r3, [r7, #6]
 800cca8:	4613      	mov	r3, r2
 800ccaa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ccac:	7979      	ldrb	r1, [r7, #5]
 800ccae:	2300      	movs	r3, #0
 800ccb0:	9303      	str	r3, [sp, #12]
 800ccb2:	88fb      	ldrh	r3, [r7, #6]
 800ccb4:	9302      	str	r3, [sp, #8]
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	9301      	str	r3, [sp, #4]
 800ccba:	2301      	movs	r3, #1
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	68f8      	ldr	r0, [r7, #12]
 800ccc4:	f7f4 fba0 	bl	8001408 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ccc8:	2300      	movs	r3, #0

}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b088      	sub	sp, #32
 800ccd6:	af04      	add	r7, sp, #16
 800ccd8:	60f8      	str	r0, [r7, #12]
 800ccda:	60b9      	str	r1, [r7, #8]
 800ccdc:	4611      	mov	r1, r2
 800ccde:	461a      	mov	r2, r3
 800cce0:	460b      	mov	r3, r1
 800cce2:	80fb      	strh	r3, [r7, #6]
 800cce4:	4613      	mov	r3, r2
 800cce6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d001      	beq.n	800ccf6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ccf6:	7979      	ldrb	r1, [r7, #5]
 800ccf8:	7e3b      	ldrb	r3, [r7, #24]
 800ccfa:	9303      	str	r3, [sp, #12]
 800ccfc:	88fb      	ldrh	r3, [r7, #6]
 800ccfe:	9302      	str	r3, [sp, #8]
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	9301      	str	r3, [sp, #4]
 800cd04:	2301      	movs	r3, #1
 800cd06:	9300      	str	r3, [sp, #0]
 800cd08:	2302      	movs	r3, #2
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f7f4 fb7b 	bl	8001408 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cd12:	2300      	movs	r3, #0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3710      	adds	r7, #16
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b088      	sub	sp, #32
 800cd20:	af04      	add	r7, sp, #16
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	4611      	mov	r1, r2
 800cd28:	461a      	mov	r2, r3
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	80fb      	strh	r3, [r7, #6]
 800cd2e:	4613      	mov	r3, r2
 800cd30:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cd32:	7979      	ldrb	r1, [r7, #5]
 800cd34:	2300      	movs	r3, #0
 800cd36:	9303      	str	r3, [sp, #12]
 800cd38:	88fb      	ldrh	r3, [r7, #6]
 800cd3a:	9302      	str	r3, [sp, #8]
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	9301      	str	r3, [sp, #4]
 800cd40:	2301      	movs	r3, #1
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	2302      	movs	r3, #2
 800cd46:	2201      	movs	r2, #1
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f7f4 fb5d 	bl	8001408 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cd4e:	2300      	movs	r3, #0
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b086      	sub	sp, #24
 800cd5c:	af04      	add	r7, sp, #16
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	4608      	mov	r0, r1
 800cd62:	4611      	mov	r1, r2
 800cd64:	461a      	mov	r2, r3
 800cd66:	4603      	mov	r3, r0
 800cd68:	70fb      	strb	r3, [r7, #3]
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	70bb      	strb	r3, [r7, #2]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cd72:	7878      	ldrb	r0, [r7, #1]
 800cd74:	78ba      	ldrb	r2, [r7, #2]
 800cd76:	78f9      	ldrb	r1, [r7, #3]
 800cd78:	8b3b      	ldrh	r3, [r7, #24]
 800cd7a:	9302      	str	r3, [sp, #8]
 800cd7c:	7d3b      	ldrb	r3, [r7, #20]
 800cd7e:	9301      	str	r3, [sp, #4]
 800cd80:	7c3b      	ldrb	r3, [r7, #16]
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	4603      	mov	r3, r0
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7f4 fb0a 	bl	80013a0 <USBH_LL_OpenPipe>

  return USBH_OK;
 800cd8c:	2300      	movs	r3, #0
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b082      	sub	sp, #8
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	460b      	mov	r3, r1
 800cda0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800cda2:	78fb      	ldrb	r3, [r7, #3]
 800cda4:	4619      	mov	r1, r3
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7f4 fb1b 	bl	80013e2 <USBH_LL_ClosePipe>

  return USBH_OK;
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3708      	adds	r7, #8
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b084      	sub	sp, #16
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 f839 	bl	800ce3a <USBH_GetFreePipe>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cdcc:	89fb      	ldrh	r3, [r7, #14]
 800cdce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d00b      	beq.n	800cdee <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800cdd6:	78fa      	ldrb	r2, [r7, #3]
 800cdd8:	89fb      	ldrh	r3, [r7, #14]
 800cdda:	f003 030f 	and.w	r3, r3, #15
 800cdde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cde2:	6879      	ldr	r1, [r7, #4]
 800cde4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	440b      	add	r3, r1
 800cdec:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cdee:	89fb      	ldrh	r3, [r7, #14]
 800cdf0:	b2db      	uxtb	r3, r3
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}

0800cdfa <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cdfa:	b480      	push	{r7}
 800cdfc:	b083      	sub	sp, #12
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
 800ce02:	460b      	mov	r3, r1
 800ce04:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ce06:	78fb      	ldrb	r3, [r7, #3]
 800ce08:	2b0f      	cmp	r3, #15
 800ce0a:	d80f      	bhi.n	800ce2c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ce0c:	78fb      	ldrb	r3, [r7, #3]
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	4413      	add	r3, r2
 800ce18:	685a      	ldr	r2, [r3, #4]
 800ce1a:	78fb      	ldrb	r3, [r7, #3]
 800ce1c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ce20:	6879      	ldr	r1, [r7, #4]
 800ce22:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ce26:	009b      	lsls	r3, r3, #2
 800ce28:	440b      	add	r3, r1
 800ce2a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	370c      	adds	r7, #12
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ce3a:	b480      	push	{r7}
 800ce3c:	b085      	sub	sp, #20
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ce42:	2300      	movs	r3, #0
 800ce44:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ce46:	2300      	movs	r3, #0
 800ce48:	73fb      	strb	r3, [r7, #15]
 800ce4a:	e010      	b.n	800ce6e <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ce4c:	7bfb      	ldrb	r3, [r7, #15]
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	4413      	add	r3, r2
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d102      	bne.n	800ce68 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800ce62:	7bfb      	ldrb	r3, [r7, #15]
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	e007      	b.n	800ce78 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ce68:	7bfb      	ldrb	r3, [r7, #15]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	73fb      	strb	r3, [r7, #15]
 800ce6e:	7bfb      	ldrb	r3, [r7, #15]
 800ce70:	2b0f      	cmp	r3, #15
 800ce72:	d9eb      	bls.n	800ce4c <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ce74:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3714      	adds	r7, #20
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <malloc>:
 800ce84:	4b02      	ldr	r3, [pc, #8]	; (800ce90 <malloc+0xc>)
 800ce86:	4601      	mov	r1, r0
 800ce88:	6818      	ldr	r0, [r3, #0]
 800ce8a:	f000 b82b 	b.w	800cee4 <_malloc_r>
 800ce8e:	bf00      	nop
 800ce90:	20000088 	.word	0x20000088

0800ce94 <free>:
 800ce94:	4b02      	ldr	r3, [pc, #8]	; (800cea0 <free+0xc>)
 800ce96:	4601      	mov	r1, r0
 800ce98:	6818      	ldr	r0, [r3, #0]
 800ce9a:	f000 bbdf 	b.w	800d65c <_free_r>
 800ce9e:	bf00      	nop
 800cea0:	20000088 	.word	0x20000088

0800cea4 <sbrk_aligned>:
 800cea4:	b570      	push	{r4, r5, r6, lr}
 800cea6:	4e0e      	ldr	r6, [pc, #56]	; (800cee0 <sbrk_aligned+0x3c>)
 800cea8:	460c      	mov	r4, r1
 800ceaa:	6831      	ldr	r1, [r6, #0]
 800ceac:	4605      	mov	r5, r0
 800ceae:	b911      	cbnz	r1, 800ceb6 <sbrk_aligned+0x12>
 800ceb0:	f000 fb6e 	bl	800d590 <_sbrk_r>
 800ceb4:	6030      	str	r0, [r6, #0]
 800ceb6:	4621      	mov	r1, r4
 800ceb8:	4628      	mov	r0, r5
 800ceba:	f000 fb69 	bl	800d590 <_sbrk_r>
 800cebe:	1c43      	adds	r3, r0, #1
 800cec0:	d00a      	beq.n	800ced8 <sbrk_aligned+0x34>
 800cec2:	1cc4      	adds	r4, r0, #3
 800cec4:	f024 0403 	bic.w	r4, r4, #3
 800cec8:	42a0      	cmp	r0, r4
 800ceca:	d007      	beq.n	800cedc <sbrk_aligned+0x38>
 800cecc:	1a21      	subs	r1, r4, r0
 800cece:	4628      	mov	r0, r5
 800ced0:	f000 fb5e 	bl	800d590 <_sbrk_r>
 800ced4:	3001      	adds	r0, #1
 800ced6:	d101      	bne.n	800cedc <sbrk_aligned+0x38>
 800ced8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cedc:	4620      	mov	r0, r4
 800cede:	bd70      	pop	{r4, r5, r6, pc}
 800cee0:	200016fc 	.word	0x200016fc

0800cee4 <_malloc_r>:
 800cee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cee8:	1ccd      	adds	r5, r1, #3
 800ceea:	f025 0503 	bic.w	r5, r5, #3
 800ceee:	3508      	adds	r5, #8
 800cef0:	2d0c      	cmp	r5, #12
 800cef2:	bf38      	it	cc
 800cef4:	250c      	movcc	r5, #12
 800cef6:	2d00      	cmp	r5, #0
 800cef8:	4607      	mov	r7, r0
 800cefa:	db01      	blt.n	800cf00 <_malloc_r+0x1c>
 800cefc:	42a9      	cmp	r1, r5
 800cefe:	d905      	bls.n	800cf0c <_malloc_r+0x28>
 800cf00:	230c      	movs	r3, #12
 800cf02:	603b      	str	r3, [r7, #0]
 800cf04:	2600      	movs	r6, #0
 800cf06:	4630      	mov	r0, r6
 800cf08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cfe0 <_malloc_r+0xfc>
 800cf10:	f000 f868 	bl	800cfe4 <__malloc_lock>
 800cf14:	f8d8 3000 	ldr.w	r3, [r8]
 800cf18:	461c      	mov	r4, r3
 800cf1a:	bb5c      	cbnz	r4, 800cf74 <_malloc_r+0x90>
 800cf1c:	4629      	mov	r1, r5
 800cf1e:	4638      	mov	r0, r7
 800cf20:	f7ff ffc0 	bl	800cea4 <sbrk_aligned>
 800cf24:	1c43      	adds	r3, r0, #1
 800cf26:	4604      	mov	r4, r0
 800cf28:	d155      	bne.n	800cfd6 <_malloc_r+0xf2>
 800cf2a:	f8d8 4000 	ldr.w	r4, [r8]
 800cf2e:	4626      	mov	r6, r4
 800cf30:	2e00      	cmp	r6, #0
 800cf32:	d145      	bne.n	800cfc0 <_malloc_r+0xdc>
 800cf34:	2c00      	cmp	r4, #0
 800cf36:	d048      	beq.n	800cfca <_malloc_r+0xe6>
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	eb04 0903 	add.w	r9, r4, r3
 800cf42:	f000 fb25 	bl	800d590 <_sbrk_r>
 800cf46:	4581      	cmp	r9, r0
 800cf48:	d13f      	bne.n	800cfca <_malloc_r+0xe6>
 800cf4a:	6821      	ldr	r1, [r4, #0]
 800cf4c:	1a6d      	subs	r5, r5, r1
 800cf4e:	4629      	mov	r1, r5
 800cf50:	4638      	mov	r0, r7
 800cf52:	f7ff ffa7 	bl	800cea4 <sbrk_aligned>
 800cf56:	3001      	adds	r0, #1
 800cf58:	d037      	beq.n	800cfca <_malloc_r+0xe6>
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	442b      	add	r3, r5
 800cf5e:	6023      	str	r3, [r4, #0]
 800cf60:	f8d8 3000 	ldr.w	r3, [r8]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d038      	beq.n	800cfda <_malloc_r+0xf6>
 800cf68:	685a      	ldr	r2, [r3, #4]
 800cf6a:	42a2      	cmp	r2, r4
 800cf6c:	d12b      	bne.n	800cfc6 <_malloc_r+0xe2>
 800cf6e:	2200      	movs	r2, #0
 800cf70:	605a      	str	r2, [r3, #4]
 800cf72:	e00f      	b.n	800cf94 <_malloc_r+0xb0>
 800cf74:	6822      	ldr	r2, [r4, #0]
 800cf76:	1b52      	subs	r2, r2, r5
 800cf78:	d41f      	bmi.n	800cfba <_malloc_r+0xd6>
 800cf7a:	2a0b      	cmp	r2, #11
 800cf7c:	d917      	bls.n	800cfae <_malloc_r+0xca>
 800cf7e:	1961      	adds	r1, r4, r5
 800cf80:	42a3      	cmp	r3, r4
 800cf82:	6025      	str	r5, [r4, #0]
 800cf84:	bf18      	it	ne
 800cf86:	6059      	strne	r1, [r3, #4]
 800cf88:	6863      	ldr	r3, [r4, #4]
 800cf8a:	bf08      	it	eq
 800cf8c:	f8c8 1000 	streq.w	r1, [r8]
 800cf90:	5162      	str	r2, [r4, r5]
 800cf92:	604b      	str	r3, [r1, #4]
 800cf94:	4638      	mov	r0, r7
 800cf96:	f104 060b 	add.w	r6, r4, #11
 800cf9a:	f000 f829 	bl	800cff0 <__malloc_unlock>
 800cf9e:	f026 0607 	bic.w	r6, r6, #7
 800cfa2:	1d23      	adds	r3, r4, #4
 800cfa4:	1af2      	subs	r2, r6, r3
 800cfa6:	d0ae      	beq.n	800cf06 <_malloc_r+0x22>
 800cfa8:	1b9b      	subs	r3, r3, r6
 800cfaa:	50a3      	str	r3, [r4, r2]
 800cfac:	e7ab      	b.n	800cf06 <_malloc_r+0x22>
 800cfae:	42a3      	cmp	r3, r4
 800cfb0:	6862      	ldr	r2, [r4, #4]
 800cfb2:	d1dd      	bne.n	800cf70 <_malloc_r+0x8c>
 800cfb4:	f8c8 2000 	str.w	r2, [r8]
 800cfb8:	e7ec      	b.n	800cf94 <_malloc_r+0xb0>
 800cfba:	4623      	mov	r3, r4
 800cfbc:	6864      	ldr	r4, [r4, #4]
 800cfbe:	e7ac      	b.n	800cf1a <_malloc_r+0x36>
 800cfc0:	4634      	mov	r4, r6
 800cfc2:	6876      	ldr	r6, [r6, #4]
 800cfc4:	e7b4      	b.n	800cf30 <_malloc_r+0x4c>
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	e7cc      	b.n	800cf64 <_malloc_r+0x80>
 800cfca:	230c      	movs	r3, #12
 800cfcc:	603b      	str	r3, [r7, #0]
 800cfce:	4638      	mov	r0, r7
 800cfd0:	f000 f80e 	bl	800cff0 <__malloc_unlock>
 800cfd4:	e797      	b.n	800cf06 <_malloc_r+0x22>
 800cfd6:	6025      	str	r5, [r4, #0]
 800cfd8:	e7dc      	b.n	800cf94 <_malloc_r+0xb0>
 800cfda:	605b      	str	r3, [r3, #4]
 800cfdc:	deff      	udf	#255	; 0xff
 800cfde:	bf00      	nop
 800cfe0:	200016f8 	.word	0x200016f8

0800cfe4 <__malloc_lock>:
 800cfe4:	4801      	ldr	r0, [pc, #4]	; (800cfec <__malloc_lock+0x8>)
 800cfe6:	f000 bb20 	b.w	800d62a <__retarget_lock_acquire_recursive>
 800cfea:	bf00      	nop
 800cfec:	20001840 	.word	0x20001840

0800cff0 <__malloc_unlock>:
 800cff0:	4801      	ldr	r0, [pc, #4]	; (800cff8 <__malloc_unlock+0x8>)
 800cff2:	f000 bb1b 	b.w	800d62c <__retarget_lock_release_recursive>
 800cff6:	bf00      	nop
 800cff8:	20001840 	.word	0x20001840

0800cffc <realloc>:
 800cffc:	4b02      	ldr	r3, [pc, #8]	; (800d008 <realloc+0xc>)
 800cffe:	460a      	mov	r2, r1
 800d000:	4601      	mov	r1, r0
 800d002:	6818      	ldr	r0, [r3, #0]
 800d004:	f000 b802 	b.w	800d00c <_realloc_r>
 800d008:	20000088 	.word	0x20000088

0800d00c <_realloc_r>:
 800d00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d010:	4680      	mov	r8, r0
 800d012:	4614      	mov	r4, r2
 800d014:	460e      	mov	r6, r1
 800d016:	b921      	cbnz	r1, 800d022 <_realloc_r+0x16>
 800d018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d01c:	4611      	mov	r1, r2
 800d01e:	f7ff bf61 	b.w	800cee4 <_malloc_r>
 800d022:	b92a      	cbnz	r2, 800d030 <_realloc_r+0x24>
 800d024:	f000 fb1a 	bl	800d65c <_free_r>
 800d028:	4625      	mov	r5, r4
 800d02a:	4628      	mov	r0, r5
 800d02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d030:	f000 fb60 	bl	800d6f4 <_malloc_usable_size_r>
 800d034:	4284      	cmp	r4, r0
 800d036:	4607      	mov	r7, r0
 800d038:	d802      	bhi.n	800d040 <_realloc_r+0x34>
 800d03a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d03e:	d812      	bhi.n	800d066 <_realloc_r+0x5a>
 800d040:	4621      	mov	r1, r4
 800d042:	4640      	mov	r0, r8
 800d044:	f7ff ff4e 	bl	800cee4 <_malloc_r>
 800d048:	4605      	mov	r5, r0
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d0ed      	beq.n	800d02a <_realloc_r+0x1e>
 800d04e:	42bc      	cmp	r4, r7
 800d050:	4622      	mov	r2, r4
 800d052:	4631      	mov	r1, r6
 800d054:	bf28      	it	cs
 800d056:	463a      	movcs	r2, r7
 800d058:	f000 faf1 	bl	800d63e <memcpy>
 800d05c:	4631      	mov	r1, r6
 800d05e:	4640      	mov	r0, r8
 800d060:	f000 fafc 	bl	800d65c <_free_r>
 800d064:	e7e1      	b.n	800d02a <_realloc_r+0x1e>
 800d066:	4635      	mov	r5, r6
 800d068:	e7df      	b.n	800d02a <_realloc_r+0x1e>
	...

0800d06c <std>:
 800d06c:	2300      	movs	r3, #0
 800d06e:	b510      	push	{r4, lr}
 800d070:	4604      	mov	r4, r0
 800d072:	e9c0 3300 	strd	r3, r3, [r0]
 800d076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d07a:	6083      	str	r3, [r0, #8]
 800d07c:	8181      	strh	r1, [r0, #12]
 800d07e:	6643      	str	r3, [r0, #100]	; 0x64
 800d080:	81c2      	strh	r2, [r0, #14]
 800d082:	6183      	str	r3, [r0, #24]
 800d084:	4619      	mov	r1, r3
 800d086:	2208      	movs	r2, #8
 800d088:	305c      	adds	r0, #92	; 0x5c
 800d08a:	f000 f9ff 	bl	800d48c <memset>
 800d08e:	4b0d      	ldr	r3, [pc, #52]	; (800d0c4 <std+0x58>)
 800d090:	6263      	str	r3, [r4, #36]	; 0x24
 800d092:	4b0d      	ldr	r3, [pc, #52]	; (800d0c8 <std+0x5c>)
 800d094:	62a3      	str	r3, [r4, #40]	; 0x28
 800d096:	4b0d      	ldr	r3, [pc, #52]	; (800d0cc <std+0x60>)
 800d098:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d09a:	4b0d      	ldr	r3, [pc, #52]	; (800d0d0 <std+0x64>)
 800d09c:	6323      	str	r3, [r4, #48]	; 0x30
 800d09e:	4b0d      	ldr	r3, [pc, #52]	; (800d0d4 <std+0x68>)
 800d0a0:	6224      	str	r4, [r4, #32]
 800d0a2:	429c      	cmp	r4, r3
 800d0a4:	d006      	beq.n	800d0b4 <std+0x48>
 800d0a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d0aa:	4294      	cmp	r4, r2
 800d0ac:	d002      	beq.n	800d0b4 <std+0x48>
 800d0ae:	33d0      	adds	r3, #208	; 0xd0
 800d0b0:	429c      	cmp	r4, r3
 800d0b2:	d105      	bne.n	800d0c0 <std+0x54>
 800d0b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0bc:	f000 bab4 	b.w	800d628 <__retarget_lock_init_recursive>
 800d0c0:	bd10      	pop	{r4, pc}
 800d0c2:	bf00      	nop
 800d0c4:	0800d2dd 	.word	0x0800d2dd
 800d0c8:	0800d2ff 	.word	0x0800d2ff
 800d0cc:	0800d337 	.word	0x0800d337
 800d0d0:	0800d35b 	.word	0x0800d35b
 800d0d4:	20001700 	.word	0x20001700

0800d0d8 <stdio_exit_handler>:
 800d0d8:	4a02      	ldr	r2, [pc, #8]	; (800d0e4 <stdio_exit_handler+0xc>)
 800d0da:	4903      	ldr	r1, [pc, #12]	; (800d0e8 <stdio_exit_handler+0x10>)
 800d0dc:	4803      	ldr	r0, [pc, #12]	; (800d0ec <stdio_exit_handler+0x14>)
 800d0de:	f000 b869 	b.w	800d1b4 <_fwalk_sglue>
 800d0e2:	bf00      	nop
 800d0e4:	20000030 	.word	0x20000030
 800d0e8:	0800ddb9 	.word	0x0800ddb9
 800d0ec:	2000003c 	.word	0x2000003c

0800d0f0 <cleanup_stdio>:
 800d0f0:	6841      	ldr	r1, [r0, #4]
 800d0f2:	4b0c      	ldr	r3, [pc, #48]	; (800d124 <cleanup_stdio+0x34>)
 800d0f4:	4299      	cmp	r1, r3
 800d0f6:	b510      	push	{r4, lr}
 800d0f8:	4604      	mov	r4, r0
 800d0fa:	d001      	beq.n	800d100 <cleanup_stdio+0x10>
 800d0fc:	f000 fe5c 	bl	800ddb8 <_fflush_r>
 800d100:	68a1      	ldr	r1, [r4, #8]
 800d102:	4b09      	ldr	r3, [pc, #36]	; (800d128 <cleanup_stdio+0x38>)
 800d104:	4299      	cmp	r1, r3
 800d106:	d002      	beq.n	800d10e <cleanup_stdio+0x1e>
 800d108:	4620      	mov	r0, r4
 800d10a:	f000 fe55 	bl	800ddb8 <_fflush_r>
 800d10e:	68e1      	ldr	r1, [r4, #12]
 800d110:	4b06      	ldr	r3, [pc, #24]	; (800d12c <cleanup_stdio+0x3c>)
 800d112:	4299      	cmp	r1, r3
 800d114:	d004      	beq.n	800d120 <cleanup_stdio+0x30>
 800d116:	4620      	mov	r0, r4
 800d118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d11c:	f000 be4c 	b.w	800ddb8 <_fflush_r>
 800d120:	bd10      	pop	{r4, pc}
 800d122:	bf00      	nop
 800d124:	20001700 	.word	0x20001700
 800d128:	20001768 	.word	0x20001768
 800d12c:	200017d0 	.word	0x200017d0

0800d130 <global_stdio_init.part.0>:
 800d130:	b510      	push	{r4, lr}
 800d132:	4b0b      	ldr	r3, [pc, #44]	; (800d160 <global_stdio_init.part.0+0x30>)
 800d134:	4c0b      	ldr	r4, [pc, #44]	; (800d164 <global_stdio_init.part.0+0x34>)
 800d136:	4a0c      	ldr	r2, [pc, #48]	; (800d168 <global_stdio_init.part.0+0x38>)
 800d138:	601a      	str	r2, [r3, #0]
 800d13a:	4620      	mov	r0, r4
 800d13c:	2200      	movs	r2, #0
 800d13e:	2104      	movs	r1, #4
 800d140:	f7ff ff94 	bl	800d06c <std>
 800d144:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d148:	2201      	movs	r2, #1
 800d14a:	2109      	movs	r1, #9
 800d14c:	f7ff ff8e 	bl	800d06c <std>
 800d150:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d154:	2202      	movs	r2, #2
 800d156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d15a:	2112      	movs	r1, #18
 800d15c:	f7ff bf86 	b.w	800d06c <std>
 800d160:	20001838 	.word	0x20001838
 800d164:	20001700 	.word	0x20001700
 800d168:	0800d0d9 	.word	0x0800d0d9

0800d16c <__sfp_lock_acquire>:
 800d16c:	4801      	ldr	r0, [pc, #4]	; (800d174 <__sfp_lock_acquire+0x8>)
 800d16e:	f000 ba5c 	b.w	800d62a <__retarget_lock_acquire_recursive>
 800d172:	bf00      	nop
 800d174:	20001841 	.word	0x20001841

0800d178 <__sfp_lock_release>:
 800d178:	4801      	ldr	r0, [pc, #4]	; (800d180 <__sfp_lock_release+0x8>)
 800d17a:	f000 ba57 	b.w	800d62c <__retarget_lock_release_recursive>
 800d17e:	bf00      	nop
 800d180:	20001841 	.word	0x20001841

0800d184 <__sinit>:
 800d184:	b510      	push	{r4, lr}
 800d186:	4604      	mov	r4, r0
 800d188:	f7ff fff0 	bl	800d16c <__sfp_lock_acquire>
 800d18c:	6a23      	ldr	r3, [r4, #32]
 800d18e:	b11b      	cbz	r3, 800d198 <__sinit+0x14>
 800d190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d194:	f7ff bff0 	b.w	800d178 <__sfp_lock_release>
 800d198:	4b04      	ldr	r3, [pc, #16]	; (800d1ac <__sinit+0x28>)
 800d19a:	6223      	str	r3, [r4, #32]
 800d19c:	4b04      	ldr	r3, [pc, #16]	; (800d1b0 <__sinit+0x2c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1f5      	bne.n	800d190 <__sinit+0xc>
 800d1a4:	f7ff ffc4 	bl	800d130 <global_stdio_init.part.0>
 800d1a8:	e7f2      	b.n	800d190 <__sinit+0xc>
 800d1aa:	bf00      	nop
 800d1ac:	0800d0f1 	.word	0x0800d0f1
 800d1b0:	20001838 	.word	0x20001838

0800d1b4 <_fwalk_sglue>:
 800d1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1b8:	4607      	mov	r7, r0
 800d1ba:	4688      	mov	r8, r1
 800d1bc:	4614      	mov	r4, r2
 800d1be:	2600      	movs	r6, #0
 800d1c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1c4:	f1b9 0901 	subs.w	r9, r9, #1
 800d1c8:	d505      	bpl.n	800d1d6 <_fwalk_sglue+0x22>
 800d1ca:	6824      	ldr	r4, [r4, #0]
 800d1cc:	2c00      	cmp	r4, #0
 800d1ce:	d1f7      	bne.n	800d1c0 <_fwalk_sglue+0xc>
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1d6:	89ab      	ldrh	r3, [r5, #12]
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d907      	bls.n	800d1ec <_fwalk_sglue+0x38>
 800d1dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	d003      	beq.n	800d1ec <_fwalk_sglue+0x38>
 800d1e4:	4629      	mov	r1, r5
 800d1e6:	4638      	mov	r0, r7
 800d1e8:	47c0      	blx	r8
 800d1ea:	4306      	orrs	r6, r0
 800d1ec:	3568      	adds	r5, #104	; 0x68
 800d1ee:	e7e9      	b.n	800d1c4 <_fwalk_sglue+0x10>

0800d1f0 <iprintf>:
 800d1f0:	b40f      	push	{r0, r1, r2, r3}
 800d1f2:	b507      	push	{r0, r1, r2, lr}
 800d1f4:	4906      	ldr	r1, [pc, #24]	; (800d210 <iprintf+0x20>)
 800d1f6:	ab04      	add	r3, sp, #16
 800d1f8:	6808      	ldr	r0, [r1, #0]
 800d1fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1fe:	6881      	ldr	r1, [r0, #8]
 800d200:	9301      	str	r3, [sp, #4]
 800d202:	f000 faa9 	bl	800d758 <_vfiprintf_r>
 800d206:	b003      	add	sp, #12
 800d208:	f85d eb04 	ldr.w	lr, [sp], #4
 800d20c:	b004      	add	sp, #16
 800d20e:	4770      	bx	lr
 800d210:	20000088 	.word	0x20000088

0800d214 <putchar>:
 800d214:	4b02      	ldr	r3, [pc, #8]	; (800d220 <putchar+0xc>)
 800d216:	4601      	mov	r1, r0
 800d218:	6818      	ldr	r0, [r3, #0]
 800d21a:	6882      	ldr	r2, [r0, #8]
 800d21c:	f000 be56 	b.w	800decc <_putc_r>
 800d220:	20000088 	.word	0x20000088

0800d224 <_puts_r>:
 800d224:	6a03      	ldr	r3, [r0, #32]
 800d226:	b570      	push	{r4, r5, r6, lr}
 800d228:	6884      	ldr	r4, [r0, #8]
 800d22a:	4605      	mov	r5, r0
 800d22c:	460e      	mov	r6, r1
 800d22e:	b90b      	cbnz	r3, 800d234 <_puts_r+0x10>
 800d230:	f7ff ffa8 	bl	800d184 <__sinit>
 800d234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d236:	07db      	lsls	r3, r3, #31
 800d238:	d405      	bmi.n	800d246 <_puts_r+0x22>
 800d23a:	89a3      	ldrh	r3, [r4, #12]
 800d23c:	0598      	lsls	r0, r3, #22
 800d23e:	d402      	bmi.n	800d246 <_puts_r+0x22>
 800d240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d242:	f000 f9f2 	bl	800d62a <__retarget_lock_acquire_recursive>
 800d246:	89a3      	ldrh	r3, [r4, #12]
 800d248:	0719      	lsls	r1, r3, #28
 800d24a:	d513      	bpl.n	800d274 <_puts_r+0x50>
 800d24c:	6923      	ldr	r3, [r4, #16]
 800d24e:	b18b      	cbz	r3, 800d274 <_puts_r+0x50>
 800d250:	3e01      	subs	r6, #1
 800d252:	68a3      	ldr	r3, [r4, #8]
 800d254:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d258:	3b01      	subs	r3, #1
 800d25a:	60a3      	str	r3, [r4, #8]
 800d25c:	b9e9      	cbnz	r1, 800d29a <_puts_r+0x76>
 800d25e:	2b00      	cmp	r3, #0
 800d260:	da2e      	bge.n	800d2c0 <_puts_r+0x9c>
 800d262:	4622      	mov	r2, r4
 800d264:	210a      	movs	r1, #10
 800d266:	4628      	mov	r0, r5
 800d268:	f000 f87b 	bl	800d362 <__swbuf_r>
 800d26c:	3001      	adds	r0, #1
 800d26e:	d007      	beq.n	800d280 <_puts_r+0x5c>
 800d270:	250a      	movs	r5, #10
 800d272:	e007      	b.n	800d284 <_puts_r+0x60>
 800d274:	4621      	mov	r1, r4
 800d276:	4628      	mov	r0, r5
 800d278:	f000 f8b0 	bl	800d3dc <__swsetup_r>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d0e7      	beq.n	800d250 <_puts_r+0x2c>
 800d280:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d286:	07da      	lsls	r2, r3, #31
 800d288:	d405      	bmi.n	800d296 <_puts_r+0x72>
 800d28a:	89a3      	ldrh	r3, [r4, #12]
 800d28c:	059b      	lsls	r3, r3, #22
 800d28e:	d402      	bmi.n	800d296 <_puts_r+0x72>
 800d290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d292:	f000 f9cb 	bl	800d62c <__retarget_lock_release_recursive>
 800d296:	4628      	mov	r0, r5
 800d298:	bd70      	pop	{r4, r5, r6, pc}
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	da04      	bge.n	800d2a8 <_puts_r+0x84>
 800d29e:	69a2      	ldr	r2, [r4, #24]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	dc06      	bgt.n	800d2b2 <_puts_r+0x8e>
 800d2a4:	290a      	cmp	r1, #10
 800d2a6:	d004      	beq.n	800d2b2 <_puts_r+0x8e>
 800d2a8:	6823      	ldr	r3, [r4, #0]
 800d2aa:	1c5a      	adds	r2, r3, #1
 800d2ac:	6022      	str	r2, [r4, #0]
 800d2ae:	7019      	strb	r1, [r3, #0]
 800d2b0:	e7cf      	b.n	800d252 <_puts_r+0x2e>
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	f000 f854 	bl	800d362 <__swbuf_r>
 800d2ba:	3001      	adds	r0, #1
 800d2bc:	d1c9      	bne.n	800d252 <_puts_r+0x2e>
 800d2be:	e7df      	b.n	800d280 <_puts_r+0x5c>
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	250a      	movs	r5, #10
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	6022      	str	r2, [r4, #0]
 800d2c8:	701d      	strb	r5, [r3, #0]
 800d2ca:	e7db      	b.n	800d284 <_puts_r+0x60>

0800d2cc <puts>:
 800d2cc:	4b02      	ldr	r3, [pc, #8]	; (800d2d8 <puts+0xc>)
 800d2ce:	4601      	mov	r1, r0
 800d2d0:	6818      	ldr	r0, [r3, #0]
 800d2d2:	f7ff bfa7 	b.w	800d224 <_puts_r>
 800d2d6:	bf00      	nop
 800d2d8:	20000088 	.word	0x20000088

0800d2dc <__sread>:
 800d2dc:	b510      	push	{r4, lr}
 800d2de:	460c      	mov	r4, r1
 800d2e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2e4:	f000 f942 	bl	800d56c <_read_r>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	bfab      	itete	ge
 800d2ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d2ee:	89a3      	ldrhlt	r3, [r4, #12]
 800d2f0:	181b      	addge	r3, r3, r0
 800d2f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2f6:	bfac      	ite	ge
 800d2f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2fa:	81a3      	strhlt	r3, [r4, #12]
 800d2fc:	bd10      	pop	{r4, pc}

0800d2fe <__swrite>:
 800d2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d302:	461f      	mov	r7, r3
 800d304:	898b      	ldrh	r3, [r1, #12]
 800d306:	05db      	lsls	r3, r3, #23
 800d308:	4605      	mov	r5, r0
 800d30a:	460c      	mov	r4, r1
 800d30c:	4616      	mov	r6, r2
 800d30e:	d505      	bpl.n	800d31c <__swrite+0x1e>
 800d310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d314:	2302      	movs	r3, #2
 800d316:	2200      	movs	r2, #0
 800d318:	f000 f916 	bl	800d548 <_lseek_r>
 800d31c:	89a3      	ldrh	r3, [r4, #12]
 800d31e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d322:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d326:	81a3      	strh	r3, [r4, #12]
 800d328:	4632      	mov	r2, r6
 800d32a:	463b      	mov	r3, r7
 800d32c:	4628      	mov	r0, r5
 800d32e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d332:	f000 b93d 	b.w	800d5b0 <_write_r>

0800d336 <__sseek>:
 800d336:	b510      	push	{r4, lr}
 800d338:	460c      	mov	r4, r1
 800d33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d33e:	f000 f903 	bl	800d548 <_lseek_r>
 800d342:	1c43      	adds	r3, r0, #1
 800d344:	89a3      	ldrh	r3, [r4, #12]
 800d346:	bf15      	itete	ne
 800d348:	6560      	strne	r0, [r4, #84]	; 0x54
 800d34a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d34e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d352:	81a3      	strheq	r3, [r4, #12]
 800d354:	bf18      	it	ne
 800d356:	81a3      	strhne	r3, [r4, #12]
 800d358:	bd10      	pop	{r4, pc}

0800d35a <__sclose>:
 800d35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d35e:	f000 b8e3 	b.w	800d528 <_close_r>

0800d362 <__swbuf_r>:
 800d362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d364:	460e      	mov	r6, r1
 800d366:	4614      	mov	r4, r2
 800d368:	4605      	mov	r5, r0
 800d36a:	b118      	cbz	r0, 800d374 <__swbuf_r+0x12>
 800d36c:	6a03      	ldr	r3, [r0, #32]
 800d36e:	b90b      	cbnz	r3, 800d374 <__swbuf_r+0x12>
 800d370:	f7ff ff08 	bl	800d184 <__sinit>
 800d374:	69a3      	ldr	r3, [r4, #24]
 800d376:	60a3      	str	r3, [r4, #8]
 800d378:	89a3      	ldrh	r3, [r4, #12]
 800d37a:	071a      	lsls	r2, r3, #28
 800d37c:	d525      	bpl.n	800d3ca <__swbuf_r+0x68>
 800d37e:	6923      	ldr	r3, [r4, #16]
 800d380:	b31b      	cbz	r3, 800d3ca <__swbuf_r+0x68>
 800d382:	6823      	ldr	r3, [r4, #0]
 800d384:	6922      	ldr	r2, [r4, #16]
 800d386:	1a98      	subs	r0, r3, r2
 800d388:	6963      	ldr	r3, [r4, #20]
 800d38a:	b2f6      	uxtb	r6, r6
 800d38c:	4283      	cmp	r3, r0
 800d38e:	4637      	mov	r7, r6
 800d390:	dc04      	bgt.n	800d39c <__swbuf_r+0x3a>
 800d392:	4621      	mov	r1, r4
 800d394:	4628      	mov	r0, r5
 800d396:	f000 fd0f 	bl	800ddb8 <_fflush_r>
 800d39a:	b9e0      	cbnz	r0, 800d3d6 <__swbuf_r+0x74>
 800d39c:	68a3      	ldr	r3, [r4, #8]
 800d39e:	3b01      	subs	r3, #1
 800d3a0:	60a3      	str	r3, [r4, #8]
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	1c5a      	adds	r2, r3, #1
 800d3a6:	6022      	str	r2, [r4, #0]
 800d3a8:	701e      	strb	r6, [r3, #0]
 800d3aa:	6962      	ldr	r2, [r4, #20]
 800d3ac:	1c43      	adds	r3, r0, #1
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d004      	beq.n	800d3bc <__swbuf_r+0x5a>
 800d3b2:	89a3      	ldrh	r3, [r4, #12]
 800d3b4:	07db      	lsls	r3, r3, #31
 800d3b6:	d506      	bpl.n	800d3c6 <__swbuf_r+0x64>
 800d3b8:	2e0a      	cmp	r6, #10
 800d3ba:	d104      	bne.n	800d3c6 <__swbuf_r+0x64>
 800d3bc:	4621      	mov	r1, r4
 800d3be:	4628      	mov	r0, r5
 800d3c0:	f000 fcfa 	bl	800ddb8 <_fflush_r>
 800d3c4:	b938      	cbnz	r0, 800d3d6 <__swbuf_r+0x74>
 800d3c6:	4638      	mov	r0, r7
 800d3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3ca:	4621      	mov	r1, r4
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	f000 f805 	bl	800d3dc <__swsetup_r>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d0d5      	beq.n	800d382 <__swbuf_r+0x20>
 800d3d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d3da:	e7f4      	b.n	800d3c6 <__swbuf_r+0x64>

0800d3dc <__swsetup_r>:
 800d3dc:	b538      	push	{r3, r4, r5, lr}
 800d3de:	4b2a      	ldr	r3, [pc, #168]	; (800d488 <__swsetup_r+0xac>)
 800d3e0:	4605      	mov	r5, r0
 800d3e2:	6818      	ldr	r0, [r3, #0]
 800d3e4:	460c      	mov	r4, r1
 800d3e6:	b118      	cbz	r0, 800d3f0 <__swsetup_r+0x14>
 800d3e8:	6a03      	ldr	r3, [r0, #32]
 800d3ea:	b90b      	cbnz	r3, 800d3f0 <__swsetup_r+0x14>
 800d3ec:	f7ff feca 	bl	800d184 <__sinit>
 800d3f0:	89a3      	ldrh	r3, [r4, #12]
 800d3f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3f6:	0718      	lsls	r0, r3, #28
 800d3f8:	d422      	bmi.n	800d440 <__swsetup_r+0x64>
 800d3fa:	06d9      	lsls	r1, r3, #27
 800d3fc:	d407      	bmi.n	800d40e <__swsetup_r+0x32>
 800d3fe:	2309      	movs	r3, #9
 800d400:	602b      	str	r3, [r5, #0]
 800d402:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d406:	81a3      	strh	r3, [r4, #12]
 800d408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d40c:	e034      	b.n	800d478 <__swsetup_r+0x9c>
 800d40e:	0758      	lsls	r0, r3, #29
 800d410:	d512      	bpl.n	800d438 <__swsetup_r+0x5c>
 800d412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d414:	b141      	cbz	r1, 800d428 <__swsetup_r+0x4c>
 800d416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d41a:	4299      	cmp	r1, r3
 800d41c:	d002      	beq.n	800d424 <__swsetup_r+0x48>
 800d41e:	4628      	mov	r0, r5
 800d420:	f000 f91c 	bl	800d65c <_free_r>
 800d424:	2300      	movs	r3, #0
 800d426:	6363      	str	r3, [r4, #52]	; 0x34
 800d428:	89a3      	ldrh	r3, [r4, #12]
 800d42a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d42e:	81a3      	strh	r3, [r4, #12]
 800d430:	2300      	movs	r3, #0
 800d432:	6063      	str	r3, [r4, #4]
 800d434:	6923      	ldr	r3, [r4, #16]
 800d436:	6023      	str	r3, [r4, #0]
 800d438:	89a3      	ldrh	r3, [r4, #12]
 800d43a:	f043 0308 	orr.w	r3, r3, #8
 800d43e:	81a3      	strh	r3, [r4, #12]
 800d440:	6923      	ldr	r3, [r4, #16]
 800d442:	b94b      	cbnz	r3, 800d458 <__swsetup_r+0x7c>
 800d444:	89a3      	ldrh	r3, [r4, #12]
 800d446:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d44a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d44e:	d003      	beq.n	800d458 <__swsetup_r+0x7c>
 800d450:	4621      	mov	r1, r4
 800d452:	4628      	mov	r0, r5
 800d454:	f000 fcfe 	bl	800de54 <__smakebuf_r>
 800d458:	89a0      	ldrh	r0, [r4, #12]
 800d45a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d45e:	f010 0301 	ands.w	r3, r0, #1
 800d462:	d00a      	beq.n	800d47a <__swsetup_r+0x9e>
 800d464:	2300      	movs	r3, #0
 800d466:	60a3      	str	r3, [r4, #8]
 800d468:	6963      	ldr	r3, [r4, #20]
 800d46a:	425b      	negs	r3, r3
 800d46c:	61a3      	str	r3, [r4, #24]
 800d46e:	6923      	ldr	r3, [r4, #16]
 800d470:	b943      	cbnz	r3, 800d484 <__swsetup_r+0xa8>
 800d472:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d476:	d1c4      	bne.n	800d402 <__swsetup_r+0x26>
 800d478:	bd38      	pop	{r3, r4, r5, pc}
 800d47a:	0781      	lsls	r1, r0, #30
 800d47c:	bf58      	it	pl
 800d47e:	6963      	ldrpl	r3, [r4, #20]
 800d480:	60a3      	str	r3, [r4, #8]
 800d482:	e7f4      	b.n	800d46e <__swsetup_r+0x92>
 800d484:	2000      	movs	r0, #0
 800d486:	e7f7      	b.n	800d478 <__swsetup_r+0x9c>
 800d488:	20000088 	.word	0x20000088

0800d48c <memset>:
 800d48c:	4402      	add	r2, r0
 800d48e:	4603      	mov	r3, r0
 800d490:	4293      	cmp	r3, r2
 800d492:	d100      	bne.n	800d496 <memset+0xa>
 800d494:	4770      	bx	lr
 800d496:	f803 1b01 	strb.w	r1, [r3], #1
 800d49a:	e7f9      	b.n	800d490 <memset+0x4>

0800d49c <strcat>:
 800d49c:	b510      	push	{r4, lr}
 800d49e:	4602      	mov	r2, r0
 800d4a0:	7814      	ldrb	r4, [r2, #0]
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	3201      	adds	r2, #1
 800d4a6:	2c00      	cmp	r4, #0
 800d4a8:	d1fa      	bne.n	800d4a0 <strcat+0x4>
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4b4:	2a00      	cmp	r2, #0
 800d4b6:	d1f9      	bne.n	800d4ac <strcat+0x10>
 800d4b8:	bd10      	pop	{r4, pc}

0800d4ba <strchr>:
 800d4ba:	b2c9      	uxtb	r1, r1
 800d4bc:	4603      	mov	r3, r0
 800d4be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4c2:	b11a      	cbz	r2, 800d4cc <strchr+0x12>
 800d4c4:	428a      	cmp	r2, r1
 800d4c6:	d1f9      	bne.n	800d4bc <strchr+0x2>
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	4770      	bx	lr
 800d4cc:	2900      	cmp	r1, #0
 800d4ce:	bf18      	it	ne
 800d4d0:	2300      	movne	r3, #0
 800d4d2:	e7f9      	b.n	800d4c8 <strchr+0xe>

0800d4d4 <strncpy>:
 800d4d4:	b510      	push	{r4, lr}
 800d4d6:	3901      	subs	r1, #1
 800d4d8:	4603      	mov	r3, r0
 800d4da:	b132      	cbz	r2, 800d4ea <strncpy+0x16>
 800d4dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d4e0:	f803 4b01 	strb.w	r4, [r3], #1
 800d4e4:	3a01      	subs	r2, #1
 800d4e6:	2c00      	cmp	r4, #0
 800d4e8:	d1f7      	bne.n	800d4da <strncpy+0x6>
 800d4ea:	441a      	add	r2, r3
 800d4ec:	2100      	movs	r1, #0
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d100      	bne.n	800d4f4 <strncpy+0x20>
 800d4f2:	bd10      	pop	{r4, pc}
 800d4f4:	f803 1b01 	strb.w	r1, [r3], #1
 800d4f8:	e7f9      	b.n	800d4ee <strncpy+0x1a>

0800d4fa <strstr>:
 800d4fa:	780a      	ldrb	r2, [r1, #0]
 800d4fc:	b570      	push	{r4, r5, r6, lr}
 800d4fe:	b96a      	cbnz	r2, 800d51c <strstr+0x22>
 800d500:	bd70      	pop	{r4, r5, r6, pc}
 800d502:	429a      	cmp	r2, r3
 800d504:	d109      	bne.n	800d51a <strstr+0x20>
 800d506:	460c      	mov	r4, r1
 800d508:	4605      	mov	r5, r0
 800d50a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d0f6      	beq.n	800d500 <strstr+0x6>
 800d512:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d516:	429e      	cmp	r6, r3
 800d518:	d0f7      	beq.n	800d50a <strstr+0x10>
 800d51a:	3001      	adds	r0, #1
 800d51c:	7803      	ldrb	r3, [r0, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1ef      	bne.n	800d502 <strstr+0x8>
 800d522:	4618      	mov	r0, r3
 800d524:	e7ec      	b.n	800d500 <strstr+0x6>
	...

0800d528 <_close_r>:
 800d528:	b538      	push	{r3, r4, r5, lr}
 800d52a:	4d06      	ldr	r5, [pc, #24]	; (800d544 <_close_r+0x1c>)
 800d52c:	2300      	movs	r3, #0
 800d52e:	4604      	mov	r4, r0
 800d530:	4608      	mov	r0, r1
 800d532:	602b      	str	r3, [r5, #0]
 800d534:	f7f3 fd55 	bl	8000fe2 <_close>
 800d538:	1c43      	adds	r3, r0, #1
 800d53a:	d102      	bne.n	800d542 <_close_r+0x1a>
 800d53c:	682b      	ldr	r3, [r5, #0]
 800d53e:	b103      	cbz	r3, 800d542 <_close_r+0x1a>
 800d540:	6023      	str	r3, [r4, #0]
 800d542:	bd38      	pop	{r3, r4, r5, pc}
 800d544:	2000183c 	.word	0x2000183c

0800d548 <_lseek_r>:
 800d548:	b538      	push	{r3, r4, r5, lr}
 800d54a:	4d07      	ldr	r5, [pc, #28]	; (800d568 <_lseek_r+0x20>)
 800d54c:	4604      	mov	r4, r0
 800d54e:	4608      	mov	r0, r1
 800d550:	4611      	mov	r1, r2
 800d552:	2200      	movs	r2, #0
 800d554:	602a      	str	r2, [r5, #0]
 800d556:	461a      	mov	r2, r3
 800d558:	f7f3 fd6a 	bl	8001030 <_lseek>
 800d55c:	1c43      	adds	r3, r0, #1
 800d55e:	d102      	bne.n	800d566 <_lseek_r+0x1e>
 800d560:	682b      	ldr	r3, [r5, #0]
 800d562:	b103      	cbz	r3, 800d566 <_lseek_r+0x1e>
 800d564:	6023      	str	r3, [r4, #0]
 800d566:	bd38      	pop	{r3, r4, r5, pc}
 800d568:	2000183c 	.word	0x2000183c

0800d56c <_read_r>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4d07      	ldr	r5, [pc, #28]	; (800d58c <_read_r+0x20>)
 800d570:	4604      	mov	r4, r0
 800d572:	4608      	mov	r0, r1
 800d574:	4611      	mov	r1, r2
 800d576:	2200      	movs	r2, #0
 800d578:	602a      	str	r2, [r5, #0]
 800d57a:	461a      	mov	r2, r3
 800d57c:	f7f3 fcf8 	bl	8000f70 <_read>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	d102      	bne.n	800d58a <_read_r+0x1e>
 800d584:	682b      	ldr	r3, [r5, #0]
 800d586:	b103      	cbz	r3, 800d58a <_read_r+0x1e>
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	bd38      	pop	{r3, r4, r5, pc}
 800d58c:	2000183c 	.word	0x2000183c

0800d590 <_sbrk_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	4d06      	ldr	r5, [pc, #24]	; (800d5ac <_sbrk_r+0x1c>)
 800d594:	2300      	movs	r3, #0
 800d596:	4604      	mov	r4, r0
 800d598:	4608      	mov	r0, r1
 800d59a:	602b      	str	r3, [r5, #0]
 800d59c:	f7f3 fd56 	bl	800104c <_sbrk>
 800d5a0:	1c43      	adds	r3, r0, #1
 800d5a2:	d102      	bne.n	800d5aa <_sbrk_r+0x1a>
 800d5a4:	682b      	ldr	r3, [r5, #0]
 800d5a6:	b103      	cbz	r3, 800d5aa <_sbrk_r+0x1a>
 800d5a8:	6023      	str	r3, [r4, #0]
 800d5aa:	bd38      	pop	{r3, r4, r5, pc}
 800d5ac:	2000183c 	.word	0x2000183c

0800d5b0 <_write_r>:
 800d5b0:	b538      	push	{r3, r4, r5, lr}
 800d5b2:	4d07      	ldr	r5, [pc, #28]	; (800d5d0 <_write_r+0x20>)
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	4608      	mov	r0, r1
 800d5b8:	4611      	mov	r1, r2
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	602a      	str	r2, [r5, #0]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	f7f3 fcf3 	bl	8000faa <_write>
 800d5c4:	1c43      	adds	r3, r0, #1
 800d5c6:	d102      	bne.n	800d5ce <_write_r+0x1e>
 800d5c8:	682b      	ldr	r3, [r5, #0]
 800d5ca:	b103      	cbz	r3, 800d5ce <_write_r+0x1e>
 800d5cc:	6023      	str	r3, [r4, #0]
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	2000183c 	.word	0x2000183c

0800d5d4 <__errno>:
 800d5d4:	4b01      	ldr	r3, [pc, #4]	; (800d5dc <__errno+0x8>)
 800d5d6:	6818      	ldr	r0, [r3, #0]
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	20000088 	.word	0x20000088

0800d5e0 <__libc_init_array>:
 800d5e0:	b570      	push	{r4, r5, r6, lr}
 800d5e2:	4d0d      	ldr	r5, [pc, #52]	; (800d618 <__libc_init_array+0x38>)
 800d5e4:	4c0d      	ldr	r4, [pc, #52]	; (800d61c <__libc_init_array+0x3c>)
 800d5e6:	1b64      	subs	r4, r4, r5
 800d5e8:	10a4      	asrs	r4, r4, #2
 800d5ea:	2600      	movs	r6, #0
 800d5ec:	42a6      	cmp	r6, r4
 800d5ee:	d109      	bne.n	800d604 <__libc_init_array+0x24>
 800d5f0:	4d0b      	ldr	r5, [pc, #44]	; (800d620 <__libc_init_array+0x40>)
 800d5f2:	4c0c      	ldr	r4, [pc, #48]	; (800d624 <__libc_init_array+0x44>)
 800d5f4:	f000 fcc0 	bl	800df78 <_init>
 800d5f8:	1b64      	subs	r4, r4, r5
 800d5fa:	10a4      	asrs	r4, r4, #2
 800d5fc:	2600      	movs	r6, #0
 800d5fe:	42a6      	cmp	r6, r4
 800d600:	d105      	bne.n	800d60e <__libc_init_array+0x2e>
 800d602:	bd70      	pop	{r4, r5, r6, pc}
 800d604:	f855 3b04 	ldr.w	r3, [r5], #4
 800d608:	4798      	blx	r3
 800d60a:	3601      	adds	r6, #1
 800d60c:	e7ee      	b.n	800d5ec <__libc_init_array+0xc>
 800d60e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d612:	4798      	blx	r3
 800d614:	3601      	adds	r6, #1
 800d616:	e7f2      	b.n	800d5fe <__libc_init_array+0x1e>
 800d618:	0800e96c 	.word	0x0800e96c
 800d61c:	0800e96c 	.word	0x0800e96c
 800d620:	0800e96c 	.word	0x0800e96c
 800d624:	0800e970 	.word	0x0800e970

0800d628 <__retarget_lock_init_recursive>:
 800d628:	4770      	bx	lr

0800d62a <__retarget_lock_acquire_recursive>:
 800d62a:	4770      	bx	lr

0800d62c <__retarget_lock_release_recursive>:
 800d62c:	4770      	bx	lr

0800d62e <strcpy>:
 800d62e:	4603      	mov	r3, r0
 800d630:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d634:	f803 2b01 	strb.w	r2, [r3], #1
 800d638:	2a00      	cmp	r2, #0
 800d63a:	d1f9      	bne.n	800d630 <strcpy+0x2>
 800d63c:	4770      	bx	lr

0800d63e <memcpy>:
 800d63e:	440a      	add	r2, r1
 800d640:	4291      	cmp	r1, r2
 800d642:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d646:	d100      	bne.n	800d64a <memcpy+0xc>
 800d648:	4770      	bx	lr
 800d64a:	b510      	push	{r4, lr}
 800d64c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d650:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d654:	4291      	cmp	r1, r2
 800d656:	d1f9      	bne.n	800d64c <memcpy+0xe>
 800d658:	bd10      	pop	{r4, pc}
	...

0800d65c <_free_r>:
 800d65c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d65e:	2900      	cmp	r1, #0
 800d660:	d044      	beq.n	800d6ec <_free_r+0x90>
 800d662:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d666:	9001      	str	r0, [sp, #4]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f1a1 0404 	sub.w	r4, r1, #4
 800d66e:	bfb8      	it	lt
 800d670:	18e4      	addlt	r4, r4, r3
 800d672:	f7ff fcb7 	bl	800cfe4 <__malloc_lock>
 800d676:	4a1e      	ldr	r2, [pc, #120]	; (800d6f0 <_free_r+0x94>)
 800d678:	9801      	ldr	r0, [sp, #4]
 800d67a:	6813      	ldr	r3, [r2, #0]
 800d67c:	b933      	cbnz	r3, 800d68c <_free_r+0x30>
 800d67e:	6063      	str	r3, [r4, #4]
 800d680:	6014      	str	r4, [r2, #0]
 800d682:	b003      	add	sp, #12
 800d684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d688:	f7ff bcb2 	b.w	800cff0 <__malloc_unlock>
 800d68c:	42a3      	cmp	r3, r4
 800d68e:	d908      	bls.n	800d6a2 <_free_r+0x46>
 800d690:	6825      	ldr	r5, [r4, #0]
 800d692:	1961      	adds	r1, r4, r5
 800d694:	428b      	cmp	r3, r1
 800d696:	bf01      	itttt	eq
 800d698:	6819      	ldreq	r1, [r3, #0]
 800d69a:	685b      	ldreq	r3, [r3, #4]
 800d69c:	1949      	addeq	r1, r1, r5
 800d69e:	6021      	streq	r1, [r4, #0]
 800d6a0:	e7ed      	b.n	800d67e <_free_r+0x22>
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	685b      	ldr	r3, [r3, #4]
 800d6a6:	b10b      	cbz	r3, 800d6ac <_free_r+0x50>
 800d6a8:	42a3      	cmp	r3, r4
 800d6aa:	d9fa      	bls.n	800d6a2 <_free_r+0x46>
 800d6ac:	6811      	ldr	r1, [r2, #0]
 800d6ae:	1855      	adds	r5, r2, r1
 800d6b0:	42a5      	cmp	r5, r4
 800d6b2:	d10b      	bne.n	800d6cc <_free_r+0x70>
 800d6b4:	6824      	ldr	r4, [r4, #0]
 800d6b6:	4421      	add	r1, r4
 800d6b8:	1854      	adds	r4, r2, r1
 800d6ba:	42a3      	cmp	r3, r4
 800d6bc:	6011      	str	r1, [r2, #0]
 800d6be:	d1e0      	bne.n	800d682 <_free_r+0x26>
 800d6c0:	681c      	ldr	r4, [r3, #0]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	6053      	str	r3, [r2, #4]
 800d6c6:	440c      	add	r4, r1
 800d6c8:	6014      	str	r4, [r2, #0]
 800d6ca:	e7da      	b.n	800d682 <_free_r+0x26>
 800d6cc:	d902      	bls.n	800d6d4 <_free_r+0x78>
 800d6ce:	230c      	movs	r3, #12
 800d6d0:	6003      	str	r3, [r0, #0]
 800d6d2:	e7d6      	b.n	800d682 <_free_r+0x26>
 800d6d4:	6825      	ldr	r5, [r4, #0]
 800d6d6:	1961      	adds	r1, r4, r5
 800d6d8:	428b      	cmp	r3, r1
 800d6da:	bf04      	itt	eq
 800d6dc:	6819      	ldreq	r1, [r3, #0]
 800d6de:	685b      	ldreq	r3, [r3, #4]
 800d6e0:	6063      	str	r3, [r4, #4]
 800d6e2:	bf04      	itt	eq
 800d6e4:	1949      	addeq	r1, r1, r5
 800d6e6:	6021      	streq	r1, [r4, #0]
 800d6e8:	6054      	str	r4, [r2, #4]
 800d6ea:	e7ca      	b.n	800d682 <_free_r+0x26>
 800d6ec:	b003      	add	sp, #12
 800d6ee:	bd30      	pop	{r4, r5, pc}
 800d6f0:	200016f8 	.word	0x200016f8

0800d6f4 <_malloc_usable_size_r>:
 800d6f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6f8:	1f18      	subs	r0, r3, #4
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	bfbc      	itt	lt
 800d6fe:	580b      	ldrlt	r3, [r1, r0]
 800d700:	18c0      	addlt	r0, r0, r3
 800d702:	4770      	bx	lr

0800d704 <__sfputc_r>:
 800d704:	6893      	ldr	r3, [r2, #8]
 800d706:	3b01      	subs	r3, #1
 800d708:	2b00      	cmp	r3, #0
 800d70a:	b410      	push	{r4}
 800d70c:	6093      	str	r3, [r2, #8]
 800d70e:	da08      	bge.n	800d722 <__sfputc_r+0x1e>
 800d710:	6994      	ldr	r4, [r2, #24]
 800d712:	42a3      	cmp	r3, r4
 800d714:	db01      	blt.n	800d71a <__sfputc_r+0x16>
 800d716:	290a      	cmp	r1, #10
 800d718:	d103      	bne.n	800d722 <__sfputc_r+0x1e>
 800d71a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d71e:	f7ff be20 	b.w	800d362 <__swbuf_r>
 800d722:	6813      	ldr	r3, [r2, #0]
 800d724:	1c58      	adds	r0, r3, #1
 800d726:	6010      	str	r0, [r2, #0]
 800d728:	7019      	strb	r1, [r3, #0]
 800d72a:	4608      	mov	r0, r1
 800d72c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d730:	4770      	bx	lr

0800d732 <__sfputs_r>:
 800d732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d734:	4606      	mov	r6, r0
 800d736:	460f      	mov	r7, r1
 800d738:	4614      	mov	r4, r2
 800d73a:	18d5      	adds	r5, r2, r3
 800d73c:	42ac      	cmp	r4, r5
 800d73e:	d101      	bne.n	800d744 <__sfputs_r+0x12>
 800d740:	2000      	movs	r0, #0
 800d742:	e007      	b.n	800d754 <__sfputs_r+0x22>
 800d744:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d748:	463a      	mov	r2, r7
 800d74a:	4630      	mov	r0, r6
 800d74c:	f7ff ffda 	bl	800d704 <__sfputc_r>
 800d750:	1c43      	adds	r3, r0, #1
 800d752:	d1f3      	bne.n	800d73c <__sfputs_r+0xa>
 800d754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d758 <_vfiprintf_r>:
 800d758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d75c:	460d      	mov	r5, r1
 800d75e:	b09d      	sub	sp, #116	; 0x74
 800d760:	4614      	mov	r4, r2
 800d762:	4698      	mov	r8, r3
 800d764:	4606      	mov	r6, r0
 800d766:	b118      	cbz	r0, 800d770 <_vfiprintf_r+0x18>
 800d768:	6a03      	ldr	r3, [r0, #32]
 800d76a:	b90b      	cbnz	r3, 800d770 <_vfiprintf_r+0x18>
 800d76c:	f7ff fd0a 	bl	800d184 <__sinit>
 800d770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d772:	07d9      	lsls	r1, r3, #31
 800d774:	d405      	bmi.n	800d782 <_vfiprintf_r+0x2a>
 800d776:	89ab      	ldrh	r3, [r5, #12]
 800d778:	059a      	lsls	r2, r3, #22
 800d77a:	d402      	bmi.n	800d782 <_vfiprintf_r+0x2a>
 800d77c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d77e:	f7ff ff54 	bl	800d62a <__retarget_lock_acquire_recursive>
 800d782:	89ab      	ldrh	r3, [r5, #12]
 800d784:	071b      	lsls	r3, r3, #28
 800d786:	d501      	bpl.n	800d78c <_vfiprintf_r+0x34>
 800d788:	692b      	ldr	r3, [r5, #16]
 800d78a:	b99b      	cbnz	r3, 800d7b4 <_vfiprintf_r+0x5c>
 800d78c:	4629      	mov	r1, r5
 800d78e:	4630      	mov	r0, r6
 800d790:	f7ff fe24 	bl	800d3dc <__swsetup_r>
 800d794:	b170      	cbz	r0, 800d7b4 <_vfiprintf_r+0x5c>
 800d796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d798:	07dc      	lsls	r4, r3, #31
 800d79a:	d504      	bpl.n	800d7a6 <_vfiprintf_r+0x4e>
 800d79c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7a0:	b01d      	add	sp, #116	; 0x74
 800d7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a6:	89ab      	ldrh	r3, [r5, #12]
 800d7a8:	0598      	lsls	r0, r3, #22
 800d7aa:	d4f7      	bmi.n	800d79c <_vfiprintf_r+0x44>
 800d7ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7ae:	f7ff ff3d 	bl	800d62c <__retarget_lock_release_recursive>
 800d7b2:	e7f3      	b.n	800d79c <_vfiprintf_r+0x44>
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d7b8:	2320      	movs	r3, #32
 800d7ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7be:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7c2:	2330      	movs	r3, #48	; 0x30
 800d7c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d978 <_vfiprintf_r+0x220>
 800d7c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7cc:	f04f 0901 	mov.w	r9, #1
 800d7d0:	4623      	mov	r3, r4
 800d7d2:	469a      	mov	sl, r3
 800d7d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7d8:	b10a      	cbz	r2, 800d7de <_vfiprintf_r+0x86>
 800d7da:	2a25      	cmp	r2, #37	; 0x25
 800d7dc:	d1f9      	bne.n	800d7d2 <_vfiprintf_r+0x7a>
 800d7de:	ebba 0b04 	subs.w	fp, sl, r4
 800d7e2:	d00b      	beq.n	800d7fc <_vfiprintf_r+0xa4>
 800d7e4:	465b      	mov	r3, fp
 800d7e6:	4622      	mov	r2, r4
 800d7e8:	4629      	mov	r1, r5
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	f7ff ffa1 	bl	800d732 <__sfputs_r>
 800d7f0:	3001      	adds	r0, #1
 800d7f2:	f000 80a9 	beq.w	800d948 <_vfiprintf_r+0x1f0>
 800d7f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7f8:	445a      	add	r2, fp
 800d7fa:	9209      	str	r2, [sp, #36]	; 0x24
 800d7fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d800:	2b00      	cmp	r3, #0
 800d802:	f000 80a1 	beq.w	800d948 <_vfiprintf_r+0x1f0>
 800d806:	2300      	movs	r3, #0
 800d808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d80c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d810:	f10a 0a01 	add.w	sl, sl, #1
 800d814:	9304      	str	r3, [sp, #16]
 800d816:	9307      	str	r3, [sp, #28]
 800d818:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d81c:	931a      	str	r3, [sp, #104]	; 0x68
 800d81e:	4654      	mov	r4, sl
 800d820:	2205      	movs	r2, #5
 800d822:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d826:	4854      	ldr	r0, [pc, #336]	; (800d978 <_vfiprintf_r+0x220>)
 800d828:	f7f2 fcda 	bl	80001e0 <memchr>
 800d82c:	9a04      	ldr	r2, [sp, #16]
 800d82e:	b9d8      	cbnz	r0, 800d868 <_vfiprintf_r+0x110>
 800d830:	06d1      	lsls	r1, r2, #27
 800d832:	bf44      	itt	mi
 800d834:	2320      	movmi	r3, #32
 800d836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d83a:	0713      	lsls	r3, r2, #28
 800d83c:	bf44      	itt	mi
 800d83e:	232b      	movmi	r3, #43	; 0x2b
 800d840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d844:	f89a 3000 	ldrb.w	r3, [sl]
 800d848:	2b2a      	cmp	r3, #42	; 0x2a
 800d84a:	d015      	beq.n	800d878 <_vfiprintf_r+0x120>
 800d84c:	9a07      	ldr	r2, [sp, #28]
 800d84e:	4654      	mov	r4, sl
 800d850:	2000      	movs	r0, #0
 800d852:	f04f 0c0a 	mov.w	ip, #10
 800d856:	4621      	mov	r1, r4
 800d858:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d85c:	3b30      	subs	r3, #48	; 0x30
 800d85e:	2b09      	cmp	r3, #9
 800d860:	d94d      	bls.n	800d8fe <_vfiprintf_r+0x1a6>
 800d862:	b1b0      	cbz	r0, 800d892 <_vfiprintf_r+0x13a>
 800d864:	9207      	str	r2, [sp, #28]
 800d866:	e014      	b.n	800d892 <_vfiprintf_r+0x13a>
 800d868:	eba0 0308 	sub.w	r3, r0, r8
 800d86c:	fa09 f303 	lsl.w	r3, r9, r3
 800d870:	4313      	orrs	r3, r2
 800d872:	9304      	str	r3, [sp, #16]
 800d874:	46a2      	mov	sl, r4
 800d876:	e7d2      	b.n	800d81e <_vfiprintf_r+0xc6>
 800d878:	9b03      	ldr	r3, [sp, #12]
 800d87a:	1d19      	adds	r1, r3, #4
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	9103      	str	r1, [sp, #12]
 800d880:	2b00      	cmp	r3, #0
 800d882:	bfbb      	ittet	lt
 800d884:	425b      	neglt	r3, r3
 800d886:	f042 0202 	orrlt.w	r2, r2, #2
 800d88a:	9307      	strge	r3, [sp, #28]
 800d88c:	9307      	strlt	r3, [sp, #28]
 800d88e:	bfb8      	it	lt
 800d890:	9204      	strlt	r2, [sp, #16]
 800d892:	7823      	ldrb	r3, [r4, #0]
 800d894:	2b2e      	cmp	r3, #46	; 0x2e
 800d896:	d10c      	bne.n	800d8b2 <_vfiprintf_r+0x15a>
 800d898:	7863      	ldrb	r3, [r4, #1]
 800d89a:	2b2a      	cmp	r3, #42	; 0x2a
 800d89c:	d134      	bne.n	800d908 <_vfiprintf_r+0x1b0>
 800d89e:	9b03      	ldr	r3, [sp, #12]
 800d8a0:	1d1a      	adds	r2, r3, #4
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	9203      	str	r2, [sp, #12]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	bfb8      	it	lt
 800d8aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d8ae:	3402      	adds	r4, #2
 800d8b0:	9305      	str	r3, [sp, #20]
 800d8b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d988 <_vfiprintf_r+0x230>
 800d8b6:	7821      	ldrb	r1, [r4, #0]
 800d8b8:	2203      	movs	r2, #3
 800d8ba:	4650      	mov	r0, sl
 800d8bc:	f7f2 fc90 	bl	80001e0 <memchr>
 800d8c0:	b138      	cbz	r0, 800d8d2 <_vfiprintf_r+0x17a>
 800d8c2:	9b04      	ldr	r3, [sp, #16]
 800d8c4:	eba0 000a 	sub.w	r0, r0, sl
 800d8c8:	2240      	movs	r2, #64	; 0x40
 800d8ca:	4082      	lsls	r2, r0
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	3401      	adds	r4, #1
 800d8d0:	9304      	str	r3, [sp, #16]
 800d8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8d6:	4829      	ldr	r0, [pc, #164]	; (800d97c <_vfiprintf_r+0x224>)
 800d8d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8dc:	2206      	movs	r2, #6
 800d8de:	f7f2 fc7f 	bl	80001e0 <memchr>
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	d03f      	beq.n	800d966 <_vfiprintf_r+0x20e>
 800d8e6:	4b26      	ldr	r3, [pc, #152]	; (800d980 <_vfiprintf_r+0x228>)
 800d8e8:	bb1b      	cbnz	r3, 800d932 <_vfiprintf_r+0x1da>
 800d8ea:	9b03      	ldr	r3, [sp, #12]
 800d8ec:	3307      	adds	r3, #7
 800d8ee:	f023 0307 	bic.w	r3, r3, #7
 800d8f2:	3308      	adds	r3, #8
 800d8f4:	9303      	str	r3, [sp, #12]
 800d8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8f8:	443b      	add	r3, r7
 800d8fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d8fc:	e768      	b.n	800d7d0 <_vfiprintf_r+0x78>
 800d8fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800d902:	460c      	mov	r4, r1
 800d904:	2001      	movs	r0, #1
 800d906:	e7a6      	b.n	800d856 <_vfiprintf_r+0xfe>
 800d908:	2300      	movs	r3, #0
 800d90a:	3401      	adds	r4, #1
 800d90c:	9305      	str	r3, [sp, #20]
 800d90e:	4619      	mov	r1, r3
 800d910:	f04f 0c0a 	mov.w	ip, #10
 800d914:	4620      	mov	r0, r4
 800d916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d91a:	3a30      	subs	r2, #48	; 0x30
 800d91c:	2a09      	cmp	r2, #9
 800d91e:	d903      	bls.n	800d928 <_vfiprintf_r+0x1d0>
 800d920:	2b00      	cmp	r3, #0
 800d922:	d0c6      	beq.n	800d8b2 <_vfiprintf_r+0x15a>
 800d924:	9105      	str	r1, [sp, #20]
 800d926:	e7c4      	b.n	800d8b2 <_vfiprintf_r+0x15a>
 800d928:	fb0c 2101 	mla	r1, ip, r1, r2
 800d92c:	4604      	mov	r4, r0
 800d92e:	2301      	movs	r3, #1
 800d930:	e7f0      	b.n	800d914 <_vfiprintf_r+0x1bc>
 800d932:	ab03      	add	r3, sp, #12
 800d934:	9300      	str	r3, [sp, #0]
 800d936:	462a      	mov	r2, r5
 800d938:	4b12      	ldr	r3, [pc, #72]	; (800d984 <_vfiprintf_r+0x22c>)
 800d93a:	a904      	add	r1, sp, #16
 800d93c:	4630      	mov	r0, r6
 800d93e:	f3af 8000 	nop.w
 800d942:	4607      	mov	r7, r0
 800d944:	1c78      	adds	r0, r7, #1
 800d946:	d1d6      	bne.n	800d8f6 <_vfiprintf_r+0x19e>
 800d948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d94a:	07d9      	lsls	r1, r3, #31
 800d94c:	d405      	bmi.n	800d95a <_vfiprintf_r+0x202>
 800d94e:	89ab      	ldrh	r3, [r5, #12]
 800d950:	059a      	lsls	r2, r3, #22
 800d952:	d402      	bmi.n	800d95a <_vfiprintf_r+0x202>
 800d954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d956:	f7ff fe69 	bl	800d62c <__retarget_lock_release_recursive>
 800d95a:	89ab      	ldrh	r3, [r5, #12]
 800d95c:	065b      	lsls	r3, r3, #25
 800d95e:	f53f af1d 	bmi.w	800d79c <_vfiprintf_r+0x44>
 800d962:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d964:	e71c      	b.n	800d7a0 <_vfiprintf_r+0x48>
 800d966:	ab03      	add	r3, sp, #12
 800d968:	9300      	str	r3, [sp, #0]
 800d96a:	462a      	mov	r2, r5
 800d96c:	4b05      	ldr	r3, [pc, #20]	; (800d984 <_vfiprintf_r+0x22c>)
 800d96e:	a904      	add	r1, sp, #16
 800d970:	4630      	mov	r0, r6
 800d972:	f000 f879 	bl	800da68 <_printf_i>
 800d976:	e7e4      	b.n	800d942 <_vfiprintf_r+0x1ea>
 800d978:	0800e930 	.word	0x0800e930
 800d97c:	0800e93a 	.word	0x0800e93a
 800d980:	00000000 	.word	0x00000000
 800d984:	0800d733 	.word	0x0800d733
 800d988:	0800e936 	.word	0x0800e936

0800d98c <_printf_common>:
 800d98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d990:	4616      	mov	r6, r2
 800d992:	4699      	mov	r9, r3
 800d994:	688a      	ldr	r2, [r1, #8]
 800d996:	690b      	ldr	r3, [r1, #16]
 800d998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d99c:	4293      	cmp	r3, r2
 800d99e:	bfb8      	it	lt
 800d9a0:	4613      	movlt	r3, r2
 800d9a2:	6033      	str	r3, [r6, #0]
 800d9a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d9a8:	4607      	mov	r7, r0
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	b10a      	cbz	r2, 800d9b2 <_printf_common+0x26>
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	6033      	str	r3, [r6, #0]
 800d9b2:	6823      	ldr	r3, [r4, #0]
 800d9b4:	0699      	lsls	r1, r3, #26
 800d9b6:	bf42      	ittt	mi
 800d9b8:	6833      	ldrmi	r3, [r6, #0]
 800d9ba:	3302      	addmi	r3, #2
 800d9bc:	6033      	strmi	r3, [r6, #0]
 800d9be:	6825      	ldr	r5, [r4, #0]
 800d9c0:	f015 0506 	ands.w	r5, r5, #6
 800d9c4:	d106      	bne.n	800d9d4 <_printf_common+0x48>
 800d9c6:	f104 0a19 	add.w	sl, r4, #25
 800d9ca:	68e3      	ldr	r3, [r4, #12]
 800d9cc:	6832      	ldr	r2, [r6, #0]
 800d9ce:	1a9b      	subs	r3, r3, r2
 800d9d0:	42ab      	cmp	r3, r5
 800d9d2:	dc26      	bgt.n	800da22 <_printf_common+0x96>
 800d9d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d9d8:	1e13      	subs	r3, r2, #0
 800d9da:	6822      	ldr	r2, [r4, #0]
 800d9dc:	bf18      	it	ne
 800d9de:	2301      	movne	r3, #1
 800d9e0:	0692      	lsls	r2, r2, #26
 800d9e2:	d42b      	bmi.n	800da3c <_printf_common+0xb0>
 800d9e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9e8:	4649      	mov	r1, r9
 800d9ea:	4638      	mov	r0, r7
 800d9ec:	47c0      	blx	r8
 800d9ee:	3001      	adds	r0, #1
 800d9f0:	d01e      	beq.n	800da30 <_printf_common+0xa4>
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	6922      	ldr	r2, [r4, #16]
 800d9f6:	f003 0306 	and.w	r3, r3, #6
 800d9fa:	2b04      	cmp	r3, #4
 800d9fc:	bf02      	ittt	eq
 800d9fe:	68e5      	ldreq	r5, [r4, #12]
 800da00:	6833      	ldreq	r3, [r6, #0]
 800da02:	1aed      	subeq	r5, r5, r3
 800da04:	68a3      	ldr	r3, [r4, #8]
 800da06:	bf0c      	ite	eq
 800da08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da0c:	2500      	movne	r5, #0
 800da0e:	4293      	cmp	r3, r2
 800da10:	bfc4      	itt	gt
 800da12:	1a9b      	subgt	r3, r3, r2
 800da14:	18ed      	addgt	r5, r5, r3
 800da16:	2600      	movs	r6, #0
 800da18:	341a      	adds	r4, #26
 800da1a:	42b5      	cmp	r5, r6
 800da1c:	d11a      	bne.n	800da54 <_printf_common+0xc8>
 800da1e:	2000      	movs	r0, #0
 800da20:	e008      	b.n	800da34 <_printf_common+0xa8>
 800da22:	2301      	movs	r3, #1
 800da24:	4652      	mov	r2, sl
 800da26:	4649      	mov	r1, r9
 800da28:	4638      	mov	r0, r7
 800da2a:	47c0      	blx	r8
 800da2c:	3001      	adds	r0, #1
 800da2e:	d103      	bne.n	800da38 <_printf_common+0xac>
 800da30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da38:	3501      	adds	r5, #1
 800da3a:	e7c6      	b.n	800d9ca <_printf_common+0x3e>
 800da3c:	18e1      	adds	r1, r4, r3
 800da3e:	1c5a      	adds	r2, r3, #1
 800da40:	2030      	movs	r0, #48	; 0x30
 800da42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da46:	4422      	add	r2, r4
 800da48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da50:	3302      	adds	r3, #2
 800da52:	e7c7      	b.n	800d9e4 <_printf_common+0x58>
 800da54:	2301      	movs	r3, #1
 800da56:	4622      	mov	r2, r4
 800da58:	4649      	mov	r1, r9
 800da5a:	4638      	mov	r0, r7
 800da5c:	47c0      	blx	r8
 800da5e:	3001      	adds	r0, #1
 800da60:	d0e6      	beq.n	800da30 <_printf_common+0xa4>
 800da62:	3601      	adds	r6, #1
 800da64:	e7d9      	b.n	800da1a <_printf_common+0x8e>
	...

0800da68 <_printf_i>:
 800da68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da6c:	7e0f      	ldrb	r7, [r1, #24]
 800da6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da70:	2f78      	cmp	r7, #120	; 0x78
 800da72:	4691      	mov	r9, r2
 800da74:	4680      	mov	r8, r0
 800da76:	460c      	mov	r4, r1
 800da78:	469a      	mov	sl, r3
 800da7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da7e:	d807      	bhi.n	800da90 <_printf_i+0x28>
 800da80:	2f62      	cmp	r7, #98	; 0x62
 800da82:	d80a      	bhi.n	800da9a <_printf_i+0x32>
 800da84:	2f00      	cmp	r7, #0
 800da86:	f000 80d4 	beq.w	800dc32 <_printf_i+0x1ca>
 800da8a:	2f58      	cmp	r7, #88	; 0x58
 800da8c:	f000 80c0 	beq.w	800dc10 <_printf_i+0x1a8>
 800da90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da98:	e03a      	b.n	800db10 <_printf_i+0xa8>
 800da9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da9e:	2b15      	cmp	r3, #21
 800daa0:	d8f6      	bhi.n	800da90 <_printf_i+0x28>
 800daa2:	a101      	add	r1, pc, #4	; (adr r1, 800daa8 <_printf_i+0x40>)
 800daa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800daa8:	0800db01 	.word	0x0800db01
 800daac:	0800db15 	.word	0x0800db15
 800dab0:	0800da91 	.word	0x0800da91
 800dab4:	0800da91 	.word	0x0800da91
 800dab8:	0800da91 	.word	0x0800da91
 800dabc:	0800da91 	.word	0x0800da91
 800dac0:	0800db15 	.word	0x0800db15
 800dac4:	0800da91 	.word	0x0800da91
 800dac8:	0800da91 	.word	0x0800da91
 800dacc:	0800da91 	.word	0x0800da91
 800dad0:	0800da91 	.word	0x0800da91
 800dad4:	0800dc19 	.word	0x0800dc19
 800dad8:	0800db41 	.word	0x0800db41
 800dadc:	0800dbd3 	.word	0x0800dbd3
 800dae0:	0800da91 	.word	0x0800da91
 800dae4:	0800da91 	.word	0x0800da91
 800dae8:	0800dc3b 	.word	0x0800dc3b
 800daec:	0800da91 	.word	0x0800da91
 800daf0:	0800db41 	.word	0x0800db41
 800daf4:	0800da91 	.word	0x0800da91
 800daf8:	0800da91 	.word	0x0800da91
 800dafc:	0800dbdb 	.word	0x0800dbdb
 800db00:	682b      	ldr	r3, [r5, #0]
 800db02:	1d1a      	adds	r2, r3, #4
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	602a      	str	r2, [r5, #0]
 800db08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db10:	2301      	movs	r3, #1
 800db12:	e09f      	b.n	800dc54 <_printf_i+0x1ec>
 800db14:	6820      	ldr	r0, [r4, #0]
 800db16:	682b      	ldr	r3, [r5, #0]
 800db18:	0607      	lsls	r7, r0, #24
 800db1a:	f103 0104 	add.w	r1, r3, #4
 800db1e:	6029      	str	r1, [r5, #0]
 800db20:	d501      	bpl.n	800db26 <_printf_i+0xbe>
 800db22:	681e      	ldr	r6, [r3, #0]
 800db24:	e003      	b.n	800db2e <_printf_i+0xc6>
 800db26:	0646      	lsls	r6, r0, #25
 800db28:	d5fb      	bpl.n	800db22 <_printf_i+0xba>
 800db2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800db2e:	2e00      	cmp	r6, #0
 800db30:	da03      	bge.n	800db3a <_printf_i+0xd2>
 800db32:	232d      	movs	r3, #45	; 0x2d
 800db34:	4276      	negs	r6, r6
 800db36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db3a:	485a      	ldr	r0, [pc, #360]	; (800dca4 <_printf_i+0x23c>)
 800db3c:	230a      	movs	r3, #10
 800db3e:	e012      	b.n	800db66 <_printf_i+0xfe>
 800db40:	682b      	ldr	r3, [r5, #0]
 800db42:	6820      	ldr	r0, [r4, #0]
 800db44:	1d19      	adds	r1, r3, #4
 800db46:	6029      	str	r1, [r5, #0]
 800db48:	0605      	lsls	r5, r0, #24
 800db4a:	d501      	bpl.n	800db50 <_printf_i+0xe8>
 800db4c:	681e      	ldr	r6, [r3, #0]
 800db4e:	e002      	b.n	800db56 <_printf_i+0xee>
 800db50:	0641      	lsls	r1, r0, #25
 800db52:	d5fb      	bpl.n	800db4c <_printf_i+0xe4>
 800db54:	881e      	ldrh	r6, [r3, #0]
 800db56:	4853      	ldr	r0, [pc, #332]	; (800dca4 <_printf_i+0x23c>)
 800db58:	2f6f      	cmp	r7, #111	; 0x6f
 800db5a:	bf0c      	ite	eq
 800db5c:	2308      	moveq	r3, #8
 800db5e:	230a      	movne	r3, #10
 800db60:	2100      	movs	r1, #0
 800db62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db66:	6865      	ldr	r5, [r4, #4]
 800db68:	60a5      	str	r5, [r4, #8]
 800db6a:	2d00      	cmp	r5, #0
 800db6c:	bfa2      	ittt	ge
 800db6e:	6821      	ldrge	r1, [r4, #0]
 800db70:	f021 0104 	bicge.w	r1, r1, #4
 800db74:	6021      	strge	r1, [r4, #0]
 800db76:	b90e      	cbnz	r6, 800db7c <_printf_i+0x114>
 800db78:	2d00      	cmp	r5, #0
 800db7a:	d04b      	beq.n	800dc14 <_printf_i+0x1ac>
 800db7c:	4615      	mov	r5, r2
 800db7e:	fbb6 f1f3 	udiv	r1, r6, r3
 800db82:	fb03 6711 	mls	r7, r3, r1, r6
 800db86:	5dc7      	ldrb	r7, [r0, r7]
 800db88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db8c:	4637      	mov	r7, r6
 800db8e:	42bb      	cmp	r3, r7
 800db90:	460e      	mov	r6, r1
 800db92:	d9f4      	bls.n	800db7e <_printf_i+0x116>
 800db94:	2b08      	cmp	r3, #8
 800db96:	d10b      	bne.n	800dbb0 <_printf_i+0x148>
 800db98:	6823      	ldr	r3, [r4, #0]
 800db9a:	07de      	lsls	r6, r3, #31
 800db9c:	d508      	bpl.n	800dbb0 <_printf_i+0x148>
 800db9e:	6923      	ldr	r3, [r4, #16]
 800dba0:	6861      	ldr	r1, [r4, #4]
 800dba2:	4299      	cmp	r1, r3
 800dba4:	bfde      	ittt	le
 800dba6:	2330      	movle	r3, #48	; 0x30
 800dba8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dbac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dbb0:	1b52      	subs	r2, r2, r5
 800dbb2:	6122      	str	r2, [r4, #16]
 800dbb4:	f8cd a000 	str.w	sl, [sp]
 800dbb8:	464b      	mov	r3, r9
 800dbba:	aa03      	add	r2, sp, #12
 800dbbc:	4621      	mov	r1, r4
 800dbbe:	4640      	mov	r0, r8
 800dbc0:	f7ff fee4 	bl	800d98c <_printf_common>
 800dbc4:	3001      	adds	r0, #1
 800dbc6:	d14a      	bne.n	800dc5e <_printf_i+0x1f6>
 800dbc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbcc:	b004      	add	sp, #16
 800dbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd2:	6823      	ldr	r3, [r4, #0]
 800dbd4:	f043 0320 	orr.w	r3, r3, #32
 800dbd8:	6023      	str	r3, [r4, #0]
 800dbda:	4833      	ldr	r0, [pc, #204]	; (800dca8 <_printf_i+0x240>)
 800dbdc:	2778      	movs	r7, #120	; 0x78
 800dbde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	6829      	ldr	r1, [r5, #0]
 800dbe6:	061f      	lsls	r7, r3, #24
 800dbe8:	f851 6b04 	ldr.w	r6, [r1], #4
 800dbec:	d402      	bmi.n	800dbf4 <_printf_i+0x18c>
 800dbee:	065f      	lsls	r7, r3, #25
 800dbf0:	bf48      	it	mi
 800dbf2:	b2b6      	uxthmi	r6, r6
 800dbf4:	07df      	lsls	r7, r3, #31
 800dbf6:	bf48      	it	mi
 800dbf8:	f043 0320 	orrmi.w	r3, r3, #32
 800dbfc:	6029      	str	r1, [r5, #0]
 800dbfe:	bf48      	it	mi
 800dc00:	6023      	strmi	r3, [r4, #0]
 800dc02:	b91e      	cbnz	r6, 800dc0c <_printf_i+0x1a4>
 800dc04:	6823      	ldr	r3, [r4, #0]
 800dc06:	f023 0320 	bic.w	r3, r3, #32
 800dc0a:	6023      	str	r3, [r4, #0]
 800dc0c:	2310      	movs	r3, #16
 800dc0e:	e7a7      	b.n	800db60 <_printf_i+0xf8>
 800dc10:	4824      	ldr	r0, [pc, #144]	; (800dca4 <_printf_i+0x23c>)
 800dc12:	e7e4      	b.n	800dbde <_printf_i+0x176>
 800dc14:	4615      	mov	r5, r2
 800dc16:	e7bd      	b.n	800db94 <_printf_i+0x12c>
 800dc18:	682b      	ldr	r3, [r5, #0]
 800dc1a:	6826      	ldr	r6, [r4, #0]
 800dc1c:	6961      	ldr	r1, [r4, #20]
 800dc1e:	1d18      	adds	r0, r3, #4
 800dc20:	6028      	str	r0, [r5, #0]
 800dc22:	0635      	lsls	r5, r6, #24
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	d501      	bpl.n	800dc2c <_printf_i+0x1c4>
 800dc28:	6019      	str	r1, [r3, #0]
 800dc2a:	e002      	b.n	800dc32 <_printf_i+0x1ca>
 800dc2c:	0670      	lsls	r0, r6, #25
 800dc2e:	d5fb      	bpl.n	800dc28 <_printf_i+0x1c0>
 800dc30:	8019      	strh	r1, [r3, #0]
 800dc32:	2300      	movs	r3, #0
 800dc34:	6123      	str	r3, [r4, #16]
 800dc36:	4615      	mov	r5, r2
 800dc38:	e7bc      	b.n	800dbb4 <_printf_i+0x14c>
 800dc3a:	682b      	ldr	r3, [r5, #0]
 800dc3c:	1d1a      	adds	r2, r3, #4
 800dc3e:	602a      	str	r2, [r5, #0]
 800dc40:	681d      	ldr	r5, [r3, #0]
 800dc42:	6862      	ldr	r2, [r4, #4]
 800dc44:	2100      	movs	r1, #0
 800dc46:	4628      	mov	r0, r5
 800dc48:	f7f2 faca 	bl	80001e0 <memchr>
 800dc4c:	b108      	cbz	r0, 800dc52 <_printf_i+0x1ea>
 800dc4e:	1b40      	subs	r0, r0, r5
 800dc50:	6060      	str	r0, [r4, #4]
 800dc52:	6863      	ldr	r3, [r4, #4]
 800dc54:	6123      	str	r3, [r4, #16]
 800dc56:	2300      	movs	r3, #0
 800dc58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc5c:	e7aa      	b.n	800dbb4 <_printf_i+0x14c>
 800dc5e:	6923      	ldr	r3, [r4, #16]
 800dc60:	462a      	mov	r2, r5
 800dc62:	4649      	mov	r1, r9
 800dc64:	4640      	mov	r0, r8
 800dc66:	47d0      	blx	sl
 800dc68:	3001      	adds	r0, #1
 800dc6a:	d0ad      	beq.n	800dbc8 <_printf_i+0x160>
 800dc6c:	6823      	ldr	r3, [r4, #0]
 800dc6e:	079b      	lsls	r3, r3, #30
 800dc70:	d413      	bmi.n	800dc9a <_printf_i+0x232>
 800dc72:	68e0      	ldr	r0, [r4, #12]
 800dc74:	9b03      	ldr	r3, [sp, #12]
 800dc76:	4298      	cmp	r0, r3
 800dc78:	bfb8      	it	lt
 800dc7a:	4618      	movlt	r0, r3
 800dc7c:	e7a6      	b.n	800dbcc <_printf_i+0x164>
 800dc7e:	2301      	movs	r3, #1
 800dc80:	4632      	mov	r2, r6
 800dc82:	4649      	mov	r1, r9
 800dc84:	4640      	mov	r0, r8
 800dc86:	47d0      	blx	sl
 800dc88:	3001      	adds	r0, #1
 800dc8a:	d09d      	beq.n	800dbc8 <_printf_i+0x160>
 800dc8c:	3501      	adds	r5, #1
 800dc8e:	68e3      	ldr	r3, [r4, #12]
 800dc90:	9903      	ldr	r1, [sp, #12]
 800dc92:	1a5b      	subs	r3, r3, r1
 800dc94:	42ab      	cmp	r3, r5
 800dc96:	dcf2      	bgt.n	800dc7e <_printf_i+0x216>
 800dc98:	e7eb      	b.n	800dc72 <_printf_i+0x20a>
 800dc9a:	2500      	movs	r5, #0
 800dc9c:	f104 0619 	add.w	r6, r4, #25
 800dca0:	e7f5      	b.n	800dc8e <_printf_i+0x226>
 800dca2:	bf00      	nop
 800dca4:	0800e941 	.word	0x0800e941
 800dca8:	0800e952 	.word	0x0800e952

0800dcac <__sflush_r>:
 800dcac:	898a      	ldrh	r2, [r1, #12]
 800dcae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb2:	4605      	mov	r5, r0
 800dcb4:	0710      	lsls	r0, r2, #28
 800dcb6:	460c      	mov	r4, r1
 800dcb8:	d458      	bmi.n	800dd6c <__sflush_r+0xc0>
 800dcba:	684b      	ldr	r3, [r1, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	dc05      	bgt.n	800dccc <__sflush_r+0x20>
 800dcc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	dc02      	bgt.n	800dccc <__sflush_r+0x20>
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcce:	2e00      	cmp	r6, #0
 800dcd0:	d0f9      	beq.n	800dcc6 <__sflush_r+0x1a>
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dcd8:	682f      	ldr	r7, [r5, #0]
 800dcda:	6a21      	ldr	r1, [r4, #32]
 800dcdc:	602b      	str	r3, [r5, #0]
 800dcde:	d032      	beq.n	800dd46 <__sflush_r+0x9a>
 800dce0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dce2:	89a3      	ldrh	r3, [r4, #12]
 800dce4:	075a      	lsls	r2, r3, #29
 800dce6:	d505      	bpl.n	800dcf4 <__sflush_r+0x48>
 800dce8:	6863      	ldr	r3, [r4, #4]
 800dcea:	1ac0      	subs	r0, r0, r3
 800dcec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dcee:	b10b      	cbz	r3, 800dcf4 <__sflush_r+0x48>
 800dcf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dcf2:	1ac0      	subs	r0, r0, r3
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcfa:	6a21      	ldr	r1, [r4, #32]
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	47b0      	blx	r6
 800dd00:	1c43      	adds	r3, r0, #1
 800dd02:	89a3      	ldrh	r3, [r4, #12]
 800dd04:	d106      	bne.n	800dd14 <__sflush_r+0x68>
 800dd06:	6829      	ldr	r1, [r5, #0]
 800dd08:	291d      	cmp	r1, #29
 800dd0a:	d82b      	bhi.n	800dd64 <__sflush_r+0xb8>
 800dd0c:	4a29      	ldr	r2, [pc, #164]	; (800ddb4 <__sflush_r+0x108>)
 800dd0e:	410a      	asrs	r2, r1
 800dd10:	07d6      	lsls	r6, r2, #31
 800dd12:	d427      	bmi.n	800dd64 <__sflush_r+0xb8>
 800dd14:	2200      	movs	r2, #0
 800dd16:	6062      	str	r2, [r4, #4]
 800dd18:	04d9      	lsls	r1, r3, #19
 800dd1a:	6922      	ldr	r2, [r4, #16]
 800dd1c:	6022      	str	r2, [r4, #0]
 800dd1e:	d504      	bpl.n	800dd2a <__sflush_r+0x7e>
 800dd20:	1c42      	adds	r2, r0, #1
 800dd22:	d101      	bne.n	800dd28 <__sflush_r+0x7c>
 800dd24:	682b      	ldr	r3, [r5, #0]
 800dd26:	b903      	cbnz	r3, 800dd2a <__sflush_r+0x7e>
 800dd28:	6560      	str	r0, [r4, #84]	; 0x54
 800dd2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd2c:	602f      	str	r7, [r5, #0]
 800dd2e:	2900      	cmp	r1, #0
 800dd30:	d0c9      	beq.n	800dcc6 <__sflush_r+0x1a>
 800dd32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd36:	4299      	cmp	r1, r3
 800dd38:	d002      	beq.n	800dd40 <__sflush_r+0x94>
 800dd3a:	4628      	mov	r0, r5
 800dd3c:	f7ff fc8e 	bl	800d65c <_free_r>
 800dd40:	2000      	movs	r0, #0
 800dd42:	6360      	str	r0, [r4, #52]	; 0x34
 800dd44:	e7c0      	b.n	800dcc8 <__sflush_r+0x1c>
 800dd46:	2301      	movs	r3, #1
 800dd48:	4628      	mov	r0, r5
 800dd4a:	47b0      	blx	r6
 800dd4c:	1c41      	adds	r1, r0, #1
 800dd4e:	d1c8      	bne.n	800dce2 <__sflush_r+0x36>
 800dd50:	682b      	ldr	r3, [r5, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d0c5      	beq.n	800dce2 <__sflush_r+0x36>
 800dd56:	2b1d      	cmp	r3, #29
 800dd58:	d001      	beq.n	800dd5e <__sflush_r+0xb2>
 800dd5a:	2b16      	cmp	r3, #22
 800dd5c:	d101      	bne.n	800dd62 <__sflush_r+0xb6>
 800dd5e:	602f      	str	r7, [r5, #0]
 800dd60:	e7b1      	b.n	800dcc6 <__sflush_r+0x1a>
 800dd62:	89a3      	ldrh	r3, [r4, #12]
 800dd64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd68:	81a3      	strh	r3, [r4, #12]
 800dd6a:	e7ad      	b.n	800dcc8 <__sflush_r+0x1c>
 800dd6c:	690f      	ldr	r7, [r1, #16]
 800dd6e:	2f00      	cmp	r7, #0
 800dd70:	d0a9      	beq.n	800dcc6 <__sflush_r+0x1a>
 800dd72:	0793      	lsls	r3, r2, #30
 800dd74:	680e      	ldr	r6, [r1, #0]
 800dd76:	bf08      	it	eq
 800dd78:	694b      	ldreq	r3, [r1, #20]
 800dd7a:	600f      	str	r7, [r1, #0]
 800dd7c:	bf18      	it	ne
 800dd7e:	2300      	movne	r3, #0
 800dd80:	eba6 0807 	sub.w	r8, r6, r7
 800dd84:	608b      	str	r3, [r1, #8]
 800dd86:	f1b8 0f00 	cmp.w	r8, #0
 800dd8a:	dd9c      	ble.n	800dcc6 <__sflush_r+0x1a>
 800dd8c:	6a21      	ldr	r1, [r4, #32]
 800dd8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd90:	4643      	mov	r3, r8
 800dd92:	463a      	mov	r2, r7
 800dd94:	4628      	mov	r0, r5
 800dd96:	47b0      	blx	r6
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	dc06      	bgt.n	800ddaa <__sflush_r+0xfe>
 800dd9c:	89a3      	ldrh	r3, [r4, #12]
 800dd9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dda2:	81a3      	strh	r3, [r4, #12]
 800dda4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dda8:	e78e      	b.n	800dcc8 <__sflush_r+0x1c>
 800ddaa:	4407      	add	r7, r0
 800ddac:	eba8 0800 	sub.w	r8, r8, r0
 800ddb0:	e7e9      	b.n	800dd86 <__sflush_r+0xda>
 800ddb2:	bf00      	nop
 800ddb4:	dfbffffe 	.word	0xdfbffffe

0800ddb8 <_fflush_r>:
 800ddb8:	b538      	push	{r3, r4, r5, lr}
 800ddba:	690b      	ldr	r3, [r1, #16]
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	460c      	mov	r4, r1
 800ddc0:	b913      	cbnz	r3, 800ddc8 <_fflush_r+0x10>
 800ddc2:	2500      	movs	r5, #0
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	bd38      	pop	{r3, r4, r5, pc}
 800ddc8:	b118      	cbz	r0, 800ddd2 <_fflush_r+0x1a>
 800ddca:	6a03      	ldr	r3, [r0, #32]
 800ddcc:	b90b      	cbnz	r3, 800ddd2 <_fflush_r+0x1a>
 800ddce:	f7ff f9d9 	bl	800d184 <__sinit>
 800ddd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d0f3      	beq.n	800ddc2 <_fflush_r+0xa>
 800ddda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dddc:	07d0      	lsls	r0, r2, #31
 800ddde:	d404      	bmi.n	800ddea <_fflush_r+0x32>
 800dde0:	0599      	lsls	r1, r3, #22
 800dde2:	d402      	bmi.n	800ddea <_fflush_r+0x32>
 800dde4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dde6:	f7ff fc20 	bl	800d62a <__retarget_lock_acquire_recursive>
 800ddea:	4628      	mov	r0, r5
 800ddec:	4621      	mov	r1, r4
 800ddee:	f7ff ff5d 	bl	800dcac <__sflush_r>
 800ddf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddf4:	07da      	lsls	r2, r3, #31
 800ddf6:	4605      	mov	r5, r0
 800ddf8:	d4e4      	bmi.n	800ddc4 <_fflush_r+0xc>
 800ddfa:	89a3      	ldrh	r3, [r4, #12]
 800ddfc:	059b      	lsls	r3, r3, #22
 800ddfe:	d4e1      	bmi.n	800ddc4 <_fflush_r+0xc>
 800de00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de02:	f7ff fc13 	bl	800d62c <__retarget_lock_release_recursive>
 800de06:	e7dd      	b.n	800ddc4 <_fflush_r+0xc>

0800de08 <__swhatbuf_r>:
 800de08:	b570      	push	{r4, r5, r6, lr}
 800de0a:	460c      	mov	r4, r1
 800de0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de10:	2900      	cmp	r1, #0
 800de12:	b096      	sub	sp, #88	; 0x58
 800de14:	4615      	mov	r5, r2
 800de16:	461e      	mov	r6, r3
 800de18:	da0d      	bge.n	800de36 <__swhatbuf_r+0x2e>
 800de1a:	89a3      	ldrh	r3, [r4, #12]
 800de1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800de20:	f04f 0100 	mov.w	r1, #0
 800de24:	bf0c      	ite	eq
 800de26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800de2a:	2340      	movne	r3, #64	; 0x40
 800de2c:	2000      	movs	r0, #0
 800de2e:	6031      	str	r1, [r6, #0]
 800de30:	602b      	str	r3, [r5, #0]
 800de32:	b016      	add	sp, #88	; 0x58
 800de34:	bd70      	pop	{r4, r5, r6, pc}
 800de36:	466a      	mov	r2, sp
 800de38:	f000 f87c 	bl	800df34 <_fstat_r>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	dbec      	blt.n	800de1a <__swhatbuf_r+0x12>
 800de40:	9901      	ldr	r1, [sp, #4]
 800de42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800de46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800de4a:	4259      	negs	r1, r3
 800de4c:	4159      	adcs	r1, r3
 800de4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de52:	e7eb      	b.n	800de2c <__swhatbuf_r+0x24>

0800de54 <__smakebuf_r>:
 800de54:	898b      	ldrh	r3, [r1, #12]
 800de56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de58:	079d      	lsls	r5, r3, #30
 800de5a:	4606      	mov	r6, r0
 800de5c:	460c      	mov	r4, r1
 800de5e:	d507      	bpl.n	800de70 <__smakebuf_r+0x1c>
 800de60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de64:	6023      	str	r3, [r4, #0]
 800de66:	6123      	str	r3, [r4, #16]
 800de68:	2301      	movs	r3, #1
 800de6a:	6163      	str	r3, [r4, #20]
 800de6c:	b002      	add	sp, #8
 800de6e:	bd70      	pop	{r4, r5, r6, pc}
 800de70:	ab01      	add	r3, sp, #4
 800de72:	466a      	mov	r2, sp
 800de74:	f7ff ffc8 	bl	800de08 <__swhatbuf_r>
 800de78:	9900      	ldr	r1, [sp, #0]
 800de7a:	4605      	mov	r5, r0
 800de7c:	4630      	mov	r0, r6
 800de7e:	f7ff f831 	bl	800cee4 <_malloc_r>
 800de82:	b948      	cbnz	r0, 800de98 <__smakebuf_r+0x44>
 800de84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de88:	059a      	lsls	r2, r3, #22
 800de8a:	d4ef      	bmi.n	800de6c <__smakebuf_r+0x18>
 800de8c:	f023 0303 	bic.w	r3, r3, #3
 800de90:	f043 0302 	orr.w	r3, r3, #2
 800de94:	81a3      	strh	r3, [r4, #12]
 800de96:	e7e3      	b.n	800de60 <__smakebuf_r+0xc>
 800de98:	89a3      	ldrh	r3, [r4, #12]
 800de9a:	6020      	str	r0, [r4, #0]
 800de9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dea0:	81a3      	strh	r3, [r4, #12]
 800dea2:	9b00      	ldr	r3, [sp, #0]
 800dea4:	6163      	str	r3, [r4, #20]
 800dea6:	9b01      	ldr	r3, [sp, #4]
 800dea8:	6120      	str	r0, [r4, #16]
 800deaa:	b15b      	cbz	r3, 800dec4 <__smakebuf_r+0x70>
 800deac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800deb0:	4630      	mov	r0, r6
 800deb2:	f000 f851 	bl	800df58 <_isatty_r>
 800deb6:	b128      	cbz	r0, 800dec4 <__smakebuf_r+0x70>
 800deb8:	89a3      	ldrh	r3, [r4, #12]
 800deba:	f023 0303 	bic.w	r3, r3, #3
 800debe:	f043 0301 	orr.w	r3, r3, #1
 800dec2:	81a3      	strh	r3, [r4, #12]
 800dec4:	89a3      	ldrh	r3, [r4, #12]
 800dec6:	431d      	orrs	r5, r3
 800dec8:	81a5      	strh	r5, [r4, #12]
 800deca:	e7cf      	b.n	800de6c <__smakebuf_r+0x18>

0800decc <_putc_r>:
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	460d      	mov	r5, r1
 800ded0:	4614      	mov	r4, r2
 800ded2:	4606      	mov	r6, r0
 800ded4:	b118      	cbz	r0, 800dede <_putc_r+0x12>
 800ded6:	6a03      	ldr	r3, [r0, #32]
 800ded8:	b90b      	cbnz	r3, 800dede <_putc_r+0x12>
 800deda:	f7ff f953 	bl	800d184 <__sinit>
 800dede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dee0:	07d8      	lsls	r0, r3, #31
 800dee2:	d405      	bmi.n	800def0 <_putc_r+0x24>
 800dee4:	89a3      	ldrh	r3, [r4, #12]
 800dee6:	0599      	lsls	r1, r3, #22
 800dee8:	d402      	bmi.n	800def0 <_putc_r+0x24>
 800deea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800deec:	f7ff fb9d 	bl	800d62a <__retarget_lock_acquire_recursive>
 800def0:	68a3      	ldr	r3, [r4, #8]
 800def2:	3b01      	subs	r3, #1
 800def4:	2b00      	cmp	r3, #0
 800def6:	60a3      	str	r3, [r4, #8]
 800def8:	da05      	bge.n	800df06 <_putc_r+0x3a>
 800defa:	69a2      	ldr	r2, [r4, #24]
 800defc:	4293      	cmp	r3, r2
 800defe:	db12      	blt.n	800df26 <_putc_r+0x5a>
 800df00:	b2eb      	uxtb	r3, r5
 800df02:	2b0a      	cmp	r3, #10
 800df04:	d00f      	beq.n	800df26 <_putc_r+0x5a>
 800df06:	6823      	ldr	r3, [r4, #0]
 800df08:	1c5a      	adds	r2, r3, #1
 800df0a:	6022      	str	r2, [r4, #0]
 800df0c:	701d      	strb	r5, [r3, #0]
 800df0e:	b2ed      	uxtb	r5, r5
 800df10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df12:	07da      	lsls	r2, r3, #31
 800df14:	d405      	bmi.n	800df22 <_putc_r+0x56>
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	059b      	lsls	r3, r3, #22
 800df1a:	d402      	bmi.n	800df22 <_putc_r+0x56>
 800df1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df1e:	f7ff fb85 	bl	800d62c <__retarget_lock_release_recursive>
 800df22:	4628      	mov	r0, r5
 800df24:	bd70      	pop	{r4, r5, r6, pc}
 800df26:	4629      	mov	r1, r5
 800df28:	4622      	mov	r2, r4
 800df2a:	4630      	mov	r0, r6
 800df2c:	f7ff fa19 	bl	800d362 <__swbuf_r>
 800df30:	4605      	mov	r5, r0
 800df32:	e7ed      	b.n	800df10 <_putc_r+0x44>

0800df34 <_fstat_r>:
 800df34:	b538      	push	{r3, r4, r5, lr}
 800df36:	4d07      	ldr	r5, [pc, #28]	; (800df54 <_fstat_r+0x20>)
 800df38:	2300      	movs	r3, #0
 800df3a:	4604      	mov	r4, r0
 800df3c:	4608      	mov	r0, r1
 800df3e:	4611      	mov	r1, r2
 800df40:	602b      	str	r3, [r5, #0]
 800df42:	f7f3 f85a 	bl	8000ffa <_fstat>
 800df46:	1c43      	adds	r3, r0, #1
 800df48:	d102      	bne.n	800df50 <_fstat_r+0x1c>
 800df4a:	682b      	ldr	r3, [r5, #0]
 800df4c:	b103      	cbz	r3, 800df50 <_fstat_r+0x1c>
 800df4e:	6023      	str	r3, [r4, #0]
 800df50:	bd38      	pop	{r3, r4, r5, pc}
 800df52:	bf00      	nop
 800df54:	2000183c 	.word	0x2000183c

0800df58 <_isatty_r>:
 800df58:	b538      	push	{r3, r4, r5, lr}
 800df5a:	4d06      	ldr	r5, [pc, #24]	; (800df74 <_isatty_r+0x1c>)
 800df5c:	2300      	movs	r3, #0
 800df5e:	4604      	mov	r4, r0
 800df60:	4608      	mov	r0, r1
 800df62:	602b      	str	r3, [r5, #0]
 800df64:	f7f3 f859 	bl	800101a <_isatty>
 800df68:	1c43      	adds	r3, r0, #1
 800df6a:	d102      	bne.n	800df72 <_isatty_r+0x1a>
 800df6c:	682b      	ldr	r3, [r5, #0]
 800df6e:	b103      	cbz	r3, 800df72 <_isatty_r+0x1a>
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	bd38      	pop	{r3, r4, r5, pc}
 800df74:	2000183c 	.word	0x2000183c

0800df78 <_init>:
 800df78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7a:	bf00      	nop
 800df7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df7e:	bc08      	pop	{r3}
 800df80:	469e      	mov	lr, r3
 800df82:	4770      	bx	lr

0800df84 <_fini>:
 800df84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df86:	bf00      	nop
 800df88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df8a:	bc08      	pop	{r3}
 800df8c:	469e      	mov	lr, r3
 800df8e:	4770      	bx	lr
